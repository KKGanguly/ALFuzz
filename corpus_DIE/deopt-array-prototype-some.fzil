v0 <- BeginPlainFunction -> 
    v1 <- LoadUndefined
    v2 <- CreateArray [v1]
    v3 <- CreateNamedVariable 'array', 'var', v2
    v4 <- BeginPlainFunction -> 
        v5 <- BeginArrowFunction -> v6
            v7 <- LoadInteger '0'
            v8 <- Compare v6, '>', v7
            Return v8
        EndArrowFunction
        v9 <- CallMethod v3, 'some', [v5]
        Return v9
    EndPlainFunction
    v10 <- CallFunction v4, []
    v11 <- CallFunction v4, []
    v12 <- CallFunction v4, []
    v13 <- LoadBoolean 'false'
    v14 <- LoadInteger '6'
    v15 <- GetProperty v3, '__proto__'
    v16 <- CallMethod v15, 'push', [v14]
    v17 <- CallFunction v4, []
    v18 <- LoadBoolean 'true'
EndPlainFunction
v19 <- CallFunction v0, []


function f0() {
    var array = [,];
    function some() {
        const v5 = (a6) => {
            return a6 > 0;
        };
        return array.some(v5);
    }
    some();
    some();
    some();
    array.__proto__.push(6);
    some();
}
f0();

FuzzIL program written to corpus/deopt-array-prototype-some.fzil
