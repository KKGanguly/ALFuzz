v0 <- BeginPlainFunction -> v1
    v2 <- BeginArrowFunction -> v3
        v4 <- CreateNamedVariable 'RegExp', 'none'
        v5 <- GetProperty v4, 'prototype'
        v6 <- GetProperty v5, 'exec'
        v7 <- CallMethod v6, 'call', [v1, v3]
        Return v7
    EndArrowFunction
    SetProperty v1, 'exec', v2
    Return v1
EndPlainFunction
BeginBlockStatement
    v8 <- LoadRegExp '.' 's'
    v9 <- CreateNamedVariable 're', 'let', v8
    v10 <- LoadString '.'
    v11 <- LoadString 's'
    v12 <- CreateNamedVariable 'RegExp', 'none'
    v13 <- CallFunction v12, [v10, v11]
    Reassign v9, v13
    v14 <- LoadString '.'
    v15 <- LoadString 's'
    v16 <- Construct v12, [v14, v15]
    Reassign v9, v16
    v17 <- BeginArrowFunction -> 
        v18 <- LoadString '.'
        v19 <- LoadString 'wtf'
        v20 <- Construct v12, [v18, v19]
        Return v20
    EndArrowFunction
    v21 <- CallFunction v17, []
    v22 <- CreateNamedVariable 'SyntaxError', 'none'
EndBlockStatement
BeginBlockStatement
    v23 <- LoadRegExp '.' 's'
    v24 <- CreateNamedVariable 're', 'let', v23
    v25 <- LoadString 's'
    v26 <- GetProperty v24, 'flags'
    v27 <- GetProperty v24, 'global'
    v28 <- GetProperty v24, 'ignoreCase'
    v29 <- GetProperty v24, 'multiline'
    v30 <- GetProperty v24, 'sticky'
    v31 <- GetProperty v24, 'unicode'
    v32 <- GetProperty v24, 'dotAll'
    v33 <- LoadRegExp '.' 's'
    v34 <- CallFunction v0, [v33]
    Reassign v24, v34
    v35 <- LoadString 's'
    v36 <- GetProperty v24, 'flags'
    v37 <- GetProperty v24, 'global'
    v38 <- GetProperty v24, 'ignoreCase'
    v39 <- GetProperty v24, 'multiline'
    v40 <- GetProperty v24, 'sticky'
    v41 <- GetProperty v24, 'unicode'
    v42 <- GetProperty v24, 'dotAll'
    v43 <- LoadRegExp '.' 'gymius'
    Reassign v24, v43
    v44 <- LoadString 'gimsuy'
    v45 <- GetProperty v24, 'flags'
    v46 <- GetProperty v24, 'global'
    v47 <- GetProperty v24, 'ignoreCase'
    v48 <- GetProperty v24, 'multiline'
    v49 <- GetProperty v24, 'sticky'
    v50 <- GetProperty v24, 'unicode'
    v51 <- GetProperty v24, 'dotAll'
    v52 <- LoadRegExp '.' 'gymiu'
    Reassign v24, v52
    v53 <- LoadString 'gimuy'
    v54 <- GetProperty v24, 'flags'
    v55 <- GetProperty v24, 'global'
    v56 <- GetProperty v24, 'ignoreCase'
    v57 <- GetProperty v24, 'multiline'
    v58 <- GetProperty v24, 'sticky'
    v59 <- GetProperty v24, 'unicode'
    v60 <- GetProperty v24, 'dotAll'
EndBlockStatement
BeginBlockStatement
    v61 <- LoadString 'gimsuy'
    v62 <- CreateNamedVariable 'RegExp', 'none'
    v63 <- LoadString ''
    v64 <- LoadString 'yusmig'
    v65 <- Construct v62, [v63, v64]
    v66 <- GetProperty v65, 'flags'
    v67 <- LoadString 'gimsuy'
    v68 <- LoadString ''
    v69 <- LoadString 'yusmig'
    v70 <- Construct v62, []
    v71 <- CallMethod v70, 'compile', [v68, v69]
    v72 <- GetProperty v71, 'flags'
EndBlockStatement
BeginBlockStatement
    v73 <- LoadRegExp '^.$' ''
    v74 <- CreateNamedVariable 're', 'let', v73
    v75 <- LoadString 'a'
    v76 <- CallMethod v74, 'test', [v75]
    v77 <- LoadString '3'
    v78 <- CallMethod v74, 'test', [v77]
    v79 <- LoadString 'π'
    v80 <- CallMethod v74, 'test', [v79]
    v81 <- LoadString '‧'
    v82 <- CallMethod v74, 'test', [v81]
    v83 <- LoadString ''
    v84 <- CallMethod v74, 'test', [v83]
    v85 <- LoadString ''
    v86 <- CallMethod v74, 'test', [v85]
    v87 <- LoadString ''
    v88 <- CallMethod v74, 'test', [v87]
    v89 <- LoadString '᠎'
    v90 <- CallMethod v74, 'test', [v89]
    v91 <- LoadString '𐌀'
    v92 <- CallMethod v74, 'test', [v91]
    v93 <- LoadString '\n'
    v94 <- CallMethod v74, 'test', [v93]
    v95 <- LoadString ''
    v96 <- CallMethod v74, 'test', [v95]
    v97 <- LoadString ' '
    v98 <- CallMethod v74, 'test', [v97]
    v99 <- LoadString ' '
    v100 <- CallMethod v74, 'test', [v99]
EndBlockStatement
BeginBlockStatement
    v101 <- LoadRegExp '^.$' 'u'
    v102 <- CreateNamedVariable 're', 'let', v101
    v103 <- LoadString 'a'
    v104 <- CallMethod v102, 'test', [v103]
    v105 <- LoadString '3'
    v106 <- CallMethod v102, 'test', [v105]
    v107 <- LoadString 'π'
    v108 <- CallMethod v102, 'test', [v107]
    v109 <- LoadString '‧'
    v110 <- CallMethod v102, 'test', [v109]
    v111 <- LoadString ''
    v112 <- CallMethod v102, 'test', [v111]
    v113 <- LoadString ''
    v114 <- CallMethod v102, 'test', [v113]
    v115 <- LoadString ''
    v116 <- CallMethod v102, 'test', [v115]
    v117 <- LoadString '᠎'
    v118 <- CallMethod v102, 'test', [v117]
    v119 <- LoadString '𐌀'
    v120 <- CallMethod v102, 'test', [v119]
    v121 <- LoadString '\n'
    v122 <- CallMethod v102, 'test', [v121]
    v123 <- LoadString ''
    v124 <- CallMethod v102, 'test', [v123]
    v125 <- LoadString ' '
    v126 <- CallMethod v102, 'test', [v125]
    v127 <- LoadString ' '
    v128 <- CallMethod v102, 'test', [v127]
EndBlockStatement
BeginBlockStatement
    v129 <- LoadRegExp '^.$' 's'
    v130 <- CreateNamedVariable 're', 'let', v129
    v131 <- LoadString 'a'
    v132 <- CallMethod v130, 'test', [v131]
    v133 <- LoadString '3'
    v134 <- CallMethod v130, 'test', [v133]
    v135 <- LoadString 'π'
    v136 <- CallMethod v130, 'test', [v135]
    v137 <- LoadString '‧'
    v138 <- CallMethod v130, 'test', [v137]
    v139 <- LoadString ''
    v140 <- CallMethod v130, 'test', [v139]
    v141 <- LoadString ''
    v142 <- CallMethod v130, 'test', [v141]
    v143 <- LoadString ''
    v144 <- CallMethod v130, 'test', [v143]
    v145 <- LoadString '᠎'
    v146 <- CallMethod v130, 'test', [v145]
    v147 <- LoadString '𐌀'
    v148 <- CallMethod v130, 'test', [v147]
    v149 <- LoadString '\n'
    v150 <- CallMethod v130, 'test', [v149]
    v151 <- LoadString ''
    v152 <- CallMethod v130, 'test', [v151]
    v153 <- LoadString ' '
    v154 <- CallMethod v130, 'test', [v153]
    v155 <- LoadString ' '
    v156 <- CallMethod v130, 'test', [v155]
EndBlockStatement
BeginBlockStatement
    v157 <- LoadRegExp '^.$' 'us'
    v158 <- CreateNamedVariable 're', 'let', v157
    v159 <- LoadString 'a'
    v160 <- CallMethod v158, 'test', [v159]
    v161 <- LoadString '3'
    v162 <- CallMethod v158, 'test', [v161]
    v163 <- LoadString 'π'
    v164 <- CallMethod v158, 'test', [v163]
    v165 <- LoadString '‧'
    v166 <- CallMethod v158, 'test', [v165]
    v167 <- LoadString ''
    v168 <- CallMethod v158, 'test', [v167]
    v169 <- LoadString ''
    v170 <- CallMethod v158, 'test', [v169]
    v171 <- LoadString ''
    v172 <- CallMethod v158, 'test', [v171]
    v173 <- LoadString '᠎'
    v174 <- CallMethod v158, 'test', [v173]
    v175 <- LoadString '𐌀'
    v176 <- CallMethod v158, 'test', [v175]
    v177 <- LoadString '\n'
    v178 <- CallMethod v158, 'test', [v177]
    v179 <- LoadString ''
    v180 <- CallMethod v158, 'test', [v179]
    v181 <- LoadString ' '
    v182 <- CallMethod v158, 'test', [v181]
    v183 <- LoadString ' '
    v184 <- CallMethod v158, 'test', [v183]
EndBlockStatement


function toSlowMode(a1) {
    const v2 = (a3) => {
        return RegExp.prototype.exec.call(a1, a3);
    };
    a1.exec = v2;
    return a1;
}
{
    let re = /./s;
    re = RegExp(".", "s");
    const v16 = new RegExp(".", "s");
    re = v16;
    const v17 = () => {
        const v20 = new RegExp(".", "wtf");
        return v20;
    };
    v17();
}
{
    let re = /./s;
    re.flags;
    re.global;
    re.ignoreCase;
    re.multiline;
    re.sticky;
    re.unicode;
    re.dotAll;
    re = toSlowMode(/./s);
    re.flags;
    re.global;
    re.ignoreCase;
    re.multiline;
    re.sticky;
    re.unicode;
    re.dotAll;
    re = /./gymius;
    re.flags;
    re.global;
    re.ignoreCase;
    re.multiline;
    re.sticky;
    re.unicode;
    re.dotAll;
    re = /./gymiu;
    re.flags;
    re.global;
    re.ignoreCase;
    re.multiline;
    re.sticky;
    re.unicode;
    re.dotAll;
}
{
    const v65 = new RegExp("", "yusmig");
    v65.flags;
    const v70 = new RegExp();
    v70.compile("", "yusmig").flags;
}
{
    let re = /^.$/;
    re.test("a");
    re.test("3");
    re.test("π");
    re.test("‧");
    re.test("");
    re.test("");
    re.test("");
    re.test("᠎");
    re.test("𐌀");
    re.test("\n");
    re.test("");
    re.test(" ");
    re.test(" ");
}
{
    let re = /^.$/u;
    re.test("a");
    re.test("3");
    re.test("π");
    re.test("‧");
    re.test("");
    re.test("");
    re.test("");
    re.test("᠎");
    re.test("𐌀");
    re.test("\n");
    re.test("");
    re.test(" ");
    re.test(" ");
}
{
    let re = /^.$/s;
    re.test("a");
    re.test("3");
    re.test("π");
    re.test("‧");
    re.test("");
    re.test("");
    re.test("");
    re.test("᠎");
    re.test("𐌀");
    re.test("\n");
    re.test("");
    re.test(" ");
    re.test(" ");
}
{
    let re = /^.$/us;
    re.test("a");
    re.test("3");
    re.test("π");
    re.test("‧");
    re.test("");
    re.test("");
    re.test("");
    re.test("᠎");
    re.test("𐌀");
    re.test("\n");
    re.test("");
    re.test(" ");
    re.test(" ");
}

FuzzIL program written to corpus/regexp-dotall.fzil
