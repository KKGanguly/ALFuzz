v0 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
v1 <- LoadInteger '10'
v2 <- Construct v0, [v1]
v3 <- CreateNamedVariable '__v_0', 'none'
Reassign v3, v2
BeginForLoopInitializer
    v4 <- LoadInteger '0'
BeginForLoopCondition -> v5
    v6 <- LoadInteger '10'
    v7 <- Compare v5, '<', v6
BeginForLoopAfterthought v7 -> v8
    v9 <- UnaryOperation v8, '++'
BeginForLoopBody -> v10
    v11 <- LoadInteger '170'
    v12 <- CreateNamedVariable '__v_0', 'none'
    SetComputedProperty v12, v10, v11
EndForLoop
v13 <- BeginPlainFunction -> v14
    v15 <- LoadInteger '0'
    v16 <- Compare v14, '<', v15
    BeginIf v16
        v17 <- CreateNamedVariable '__v_0', 'none'
        v18 <- LoadInteger '10'
        v19 <- BinaryOperation v14, '+', v18
        v20 <- GetComputedProperty v17, v19
        v21 <- CreateNamedVariable '__v_1', 'none'
        Reassign v21, v20
        v22 <- CreateNamedVariable '__v_1', 'none'
        Return v22
    EndIf
EndPlainFunction
v23 <- LoadInteger '170'
v24 <- LoadInteger '1'
v25 <- UnaryOperation '-', v24
v26 <- CallFunction v13, [v25]
v27 <- LoadInteger '170'
v28 <- LoadInteger '1'
v29 <- UnaryOperation '-', v28
v30 <- CallFunction v13, [v29]


const v2 = new Uint8ClampedArray(10);
__v_0 = v2;
for (let i5 = 0; i5 < 10; i5++) {
    __v_0[i5] = 170;
}
function __f_12(a14) {
    if (a14 < 0) {
        __v_1 = __v_0[a14 + 10];
        return __v_1;
    }
}
__f_12(-1);
__f_12(-1);

FuzzIL program written to corpus/regress-358057.fzil
