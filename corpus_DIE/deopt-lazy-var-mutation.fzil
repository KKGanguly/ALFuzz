v0 <- LoadInteger '1'
v1 <- CreateNamedVariable 'x', 'var', v0
v2 <- LoadInteger '1'
v3 <- CreateNamedVariable 'y', 'var', v2
v4 <- BeginPlainFunction -> v5
    Reassign v1, v5
    Reassign v3, v5
EndPlainFunction
v6 <- BeginPlainFunction -> v7
    v8 <- CallFunction v4, [v7]
    v9 <- BinaryOperation v1, '+', v3
    Return v9
EndPlainFunction
v10 <- LoadInteger '1'
v11 <- CreateNamedVariable 'o', 'var', v10
v12 <- CallFunction v6, [v11]
v13 <- LoadInteger '2'
v14 <- CallFunction v6, [v11]
v15 <- LoadInteger '2'
v16 <- LoadInteger '2'
Reassign v11, v16
v17 <- CallFunction v6, [v11]
v18 <- LoadInteger '4'


var x = 1;
var y = 1;
function g(a5) {
    x = a5;
    y = a5;
}
function foo(a7) {
    g(a7);
    return x + y;
}
var o = 1;
foo(o);
foo(o);
foo(o = 2);

FuzzIL program written to corpus/deopt-lazy-var-mutation.fzil
