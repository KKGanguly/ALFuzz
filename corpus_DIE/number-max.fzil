v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> v2
        v3 <- LoadInteger '2'
        v4 <- UnaryOperation '-', v3
        v5 <- BinaryOperation v2, '*', v4
        v6 <- LoadInteger '1'
        v7 <- CreateNamedVariable 'Math', 'none'
        v8 <- CallMethod v7, 'max', [v5, v6]
        v9 <- LoadInteger '1'
        v10 <- Compare v8, '==', v9
        BeginIf v10
            v11 <- LoadInteger '0'
            Return v11
        EndIf
        v12 <- LoadInteger '1'
        Return v12
    EndPlainFunction
    v13 <- LoadInteger '0'
    v14 <- LoadInteger '2'
    v15 <- CallFunction v1, [v14]
    v16 <- LoadInteger '1'
    v17 <- LoadInteger '1'
    v18 <- UnaryOperation '-', v17
    v19 <- CallFunction v1, [v18]
    v20 <- LoadInteger '0'
    v21 <- LoadInteger '2'
    v22 <- CallFunction v1, [v21]
    v23 <- LoadInteger '1'
    v24 <- LoadInteger '1'
    v25 <- UnaryOperation '-', v24
    v26 <- CallFunction v1, [v25]
    v27 <- CallFunction v1, []
    v28 <- LoadInteger '0'
    v29 <- LoadInteger '0'
    v30 <- CallFunction v1, [v29]
    v31 <- CallFunction v1, []
EndPlainFunction
v32 <- CallFunction v0, []
v33 <- BeginPlainFunction -> 
    v34 <- BeginPlainFunction -> v35
        v36 <- LoadInteger '0'
        v37 <- BinaryOperation v35, '|', v36
        Reassign v35, v37
        v38 <- LoadInteger '1'
        v39 <- BinaryOperation v35, '-', v38
        v40 <- LoadInteger '1'
        v41 <- BinaryOperation v35, '+', v40
        v42 <- CreateNamedVariable 'Math', 'none'
        v43 <- CallMethod v42, 'max', [v39, v41]
        Return v43
    EndPlainFunction
    v44 <- LoadInteger '2'
    v45 <- LoadInteger '31'
    v46 <- CreateNamedVariable 'Math', 'none'
    v47 <- CallMethod v46, 'pow', [v44, v45]
    v48 <- UnaryOperation '-', v47
    v49 <- LoadInteger '1'
    v50 <- BinaryOperation v48, '+', v49
    v51 <- LoadInteger '2'
    v52 <- LoadInteger '31'
    v53 <- CallMethod v46, 'pow', [v51, v52]
    v54 <- UnaryOperation '-', v53
    v55 <- CallFunction v34, [v54]
    v56 <- LoadInteger '2'
    v57 <- LoadInteger '31'
    v58 <- CallMethod v46, 'pow', [v56, v57]
    v59 <- LoadInteger '2'
    v60 <- LoadInteger '31'
    v61 <- CallMethod v46, 'pow', [v59, v60]
    v62 <- LoadInteger '1'
    v63 <- BinaryOperation v61, '-', v62
    v64 <- CallFunction v34, [v63]
    v65 <- LoadInteger '2'
    v66 <- LoadInteger '31'
    v67 <- CallMethod v46, 'pow', [v65, v66]
    v68 <- UnaryOperation '-', v67
    v69 <- LoadInteger '1'
    v70 <- BinaryOperation v68, '+', v69
    v71 <- LoadInteger '2'
    v72 <- LoadInteger '31'
    v73 <- CallMethod v46, 'pow', [v71, v72]
    v74 <- UnaryOperation '-', v73
    v75 <- CallFunction v34, [v74]
    v76 <- LoadInteger '2'
    v77 <- LoadInteger '31'
    v78 <- CallMethod v46, 'pow', [v76, v77]
    v79 <- LoadInteger '2'
    v80 <- LoadInteger '31'
    v81 <- CallMethod v46, 'pow', [v79, v80]
    v82 <- LoadInteger '1'
    v83 <- BinaryOperation v81, '-', v82
    v84 <- CallFunction v34, [v83]
EndPlainFunction
v85 <- CallFunction v33, []


function f0() {
    function foo(a2) {
        if (Math.max(a2 * -2, 1) == 1) {
            return 0;
        }
        return 1;
    }
    foo(2);
    foo(-1);
    foo(2);
    foo(-1);
    foo();
    foo(0);
    foo();
}
f0();
function f33() {
    function foo(a35) {
        return Math.max((a35 = a35 | 0) - 1, a35 + 1);
    }
    -Math.pow(2, 31) + 1;
    foo(-Math.pow(2, 31));
    Math.pow(2, 31);
    foo(Math.pow(2, 31) - 1);
    -Math.pow(2, 31) + 1;
    foo(-Math.pow(2, 31));
    Math.pow(2, 31);
    foo(Math.pow(2, 31) - 1);
}
f33();

FuzzIL program written to corpus/number-max.fzil
