v0 <- BeginPlainFunction -> v1, v2
    v3 <- CreateNamedVariable 'Array', 'none'
    v4 <- Construct v3, [v1]
    v5 <- CreateNamedVariable 'sab', 'var', v4
    v6 <- GetProperty v5, 'byteLength'
EndPlainFunction
v7 <- BeginPlainFunction -> 
    v8 <- LoadInteger '1'
    v9 <- LoadInteger '1'
    v10 <- CallFunction v0, [v8, v9]
    v11 <- LoadInteger '256'
    v12 <- LoadInteger '256'
    v13 <- CallFunction v0, [v11, v12]
    v14 <- LoadFloat '2.567'
    v15 <- LoadInteger '2'
    v16 <- CallFunction v0, [v14, v15]
    v17 <- LoadString 'abc'
    v18 <- LoadInteger '0'
    v19 <- CallFunction v0, [v17, v18]
    v20 <- LoadInteger '0'
    v21 <- LoadInteger '0'
    v22 <- CallFunction v0, [v20, v21]
    v23 <- BeginPlainFunction -> 
        v24 <- CreateNamedVariable 'Array', 'none'
        v25 <- LoadInteger '10'
        v26 <- UnaryOperation '-', v25
        v27 <- Construct v24, [v26]
    EndPlainFunction
    v28 <- CallFunction v23, []
    v29 <- CreateNamedVariable 'RangeError', 'none'
    v30 <- BeginPlainFunction -> 
        v31 <- CreateNamedVariable 'Array', 'none'
        v32 <- LoadFloat '2.567'
        v33 <- UnaryOperation '-', v32
        v34 <- Construct v31, [v33]
    EndPlainFunction
    v35 <- CallFunction v30, []
    v36 <- CreateNamedVariable 'Array', 'none'
    v37 <- Construct v36, []
    v38 <- CreateNamedVariable 'sab', 'var', v37
    v39 <- LoadInteger '0'
    v40 <- GetProperty v38, 'byteLength'
    v41 <- LoadString '[object SharedArrayBuffer]'
    v42 <- CreateNamedVariable 'Object', 'none'
    v43 <- GetProperty v42, 'prototype'
    v44 <- GetProperty v43, 'toString'
    v45 <- CallMethod v44, 'call', [v38]
EndPlainFunction
v46 <- CallFunction v7, []
v47 <- BeginPlainFunction -> 
    v48 <- CreateNamedVariable 'Array', 'none'
    v49 <- LoadInteger '1024'
    v50 <- Construct v48, [v49]
    v51 <- CreateNamedVariable 'sab', 'var', v50
    v52 <- LoadInteger '1024'
    v53 <- GetProperty v51, 'byteLength'
    v54 <- BeginPlainFunction -> 
        Directive 'use strict'
        v55 <- LoadInteger '42'
        SetProperty v51, 'byteLength', v55
    EndPlainFunction
    v56 <- CallFunction v54, []
    v57 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v58 <- CallFunction v47, []
v59 <- BeginPlainFunction -> v60, v61
    v62 <- CreateNamedVariable 'Array', 'none'
    v63 <- GetProperty v60, 'BYTES_PER_ELEMENT'
    v64 <- BinaryOperation v63, '*', v61
    v65 <- Construct v62, [v64]
    v66 <- CreateNamedVariable 'sab', 'var', v65
    v67 <- Construct v60, [v66]
    Return v67
EndPlainFunction
v68 <- BeginPlainFunction -> v69, v70, v71
    v72 <- GetProperty v69, 'BYTES_PER_ELEMENT'
    v73 <- CreateNamedVariable 'Array', 'none'
    v74 <- LoadInteger '256'
    v75 <- BinaryOperation v74, '*', v70
    v76 <- Construct v73, [v75]
    v77 <- CreateNamedVariable 'sab', 'var', v76
    v78 <- LoadInteger '30'
    v79 <- Construct v69, [v78]
    v80 <- CreateNamedVariable 'a0', 'var', v79
    v81 <- LoadString '[object '
    v82 <- GetProperty v69, 'name'
    v83 <- BinaryOperation v81, '+', v82
    v84 <- LoadString ']'
    v85 <- BinaryOperation v83, '+', v84
    v86 <- CreateNamedVariable 'Object', 'none'
    v87 <- GetProperty v86, 'prototype'
    v88 <- GetProperty v87, 'toString'
    v89 <- CallMethod v88, 'call', [v80]
    v90 <- GetProperty v80, 'BYTES_PER_ELEMENT'
    v91 <- LoadInteger '30'
    v92 <- GetProperty v80, 'length'
    v93 <- LoadInteger '30'
    v94 <- BinaryOperation v93, '*', v70
    v95 <- GetProperty v80, 'byteLength'
    v96 <- LoadInteger '0'
    v97 <- GetProperty v80, 'byteOffset'
    v98 <- LoadInteger '30'
    v99 <- BinaryOperation v98, '*', v70
    v100 <- GetProperty v80, 'buffer'
    v101 <- GetProperty v100, 'byteLength'
    v102 <- LoadInteger '128'
    v103 <- BinaryOperation v102, '*', v70
    v104 <- LoadInteger '0'
    v105 <- Construct v69, [v77, v103, v104]
    v106 <- CreateNamedVariable 'aOverBufferLen0', 'var', v105
    v107 <- GetProperty v106, 'buffer'
    v108 <- GetProperty v106, 'BYTES_PER_ELEMENT'
    v109 <- LoadInteger '0'
    v110 <- GetProperty v106, 'length'
    v111 <- LoadInteger '0'
    v112 <- GetProperty v106, 'byteLength'
    v113 <- LoadInteger '128'
    v114 <- BinaryOperation v113, '*', v70
    v115 <- GetProperty v106, 'byteOffset'
    v116 <- LoadInteger '128'
    v117 <- BinaryOperation v116, '*', v70
    v118 <- LoadInteger '128'
    v119 <- Construct v69, [v77, v117, v118]
    v120 <- CreateNamedVariable 'a1', 'var', v119
    v121 <- GetProperty v120, 'buffer'
    v122 <- GetProperty v120, 'BYTES_PER_ELEMENT'
    v123 <- LoadInteger '128'
    v124 <- GetProperty v120, 'length'
    v125 <- LoadInteger '128'
    v126 <- BinaryOperation v125, '*', v70
    v127 <- GetProperty v120, 'byteLength'
    v128 <- LoadInteger '128'
    v129 <- BinaryOperation v128, '*', v70
    v130 <- GetProperty v120, 'byteOffset'
    v131 <- LoadInteger '64'
    v132 <- BinaryOperation v131, '*', v70
    v133 <- LoadInteger '128'
    v134 <- Construct v69, [v77, v132, v133]
    v135 <- CreateNamedVariable 'a2', 'var', v134
    v136 <- GetProperty v135, 'buffer'
    v137 <- GetProperty v135, 'BYTES_PER_ELEMENT'
    v138 <- LoadInteger '128'
    v139 <- GetProperty v135, 'length'
    v140 <- LoadInteger '128'
    v141 <- BinaryOperation v140, '*', v70
    v142 <- GetProperty v135, 'byteLength'
    v143 <- LoadInteger '64'
    v144 <- BinaryOperation v143, '*', v70
    v145 <- GetProperty v135, 'byteOffset'
    v146 <- LoadInteger '192'
    v147 <- BinaryOperation v146, '*', v70
    v148 <- Construct v69, [v77, v147]
    v149 <- CreateNamedVariable 'a3', 'var', v148
    v150 <- GetProperty v149, 'buffer'
    v151 <- LoadInteger '64'
    v152 <- GetProperty v149, 'length'
    v153 <- LoadInteger '64'
    v154 <- BinaryOperation v153, '*', v70
    v155 <- GetProperty v149, 'byteLength'
    v156 <- LoadInteger '192'
    v157 <- BinaryOperation v156, '*', v70
    v158 <- GetProperty v149, 'byteOffset'
    v159 <- Construct v69, [v77]
    v160 <- CreateNamedVariable 'a4', 'var', v159
    v161 <- GetProperty v160, 'buffer'
    v162 <- LoadInteger '256'
    v163 <- GetProperty v160, 'length'
    v164 <- LoadInteger '256'
    v165 <- BinaryOperation v164, '*', v70
    v166 <- GetProperty v160, 'byteLength'
    v167 <- LoadInteger '0'
    v168 <- GetProperty v160, 'byteOffset'
    v169 <- LoadUndefined
    v170 <- CreateNamedVariable 'i', 'var', v169
    BeginForLoopInitializer
        v171 <- LoadInteger '0'
        Reassign v170, v171
    BeginForLoopCondition
        v172 <- LoadInteger '128'
        v173 <- Compare v170, '<', v172
    BeginForLoopAfterthought v173
        v174 <- UnaryOperation v170, '++'
    BeginForLoopBody
        SetComputedProperty v120, v170, v71
    EndForLoop
    BeginForLoopInitializer
        v175 <- LoadInteger '0'
        Reassign v170, v175
    BeginForLoopCondition
        v176 <- LoadInteger '128'
        v177 <- Compare v170, '<', v176
    BeginForLoopAfterthought v177
        v178 <- UnaryOperation v170, '++'
    BeginForLoopBody
        v179 <- GetComputedProperty v120, v170
    EndForLoop
    BeginForLoopInitializer
        v180 <- LoadInteger '0'
        Reassign v170, v180
    BeginForLoopCondition
        v181 <- LoadInteger '64'
        v182 <- Compare v170, '<', v181
    BeginForLoopAfterthought v182
        v183 <- UnaryOperation v170, '++'
    BeginForLoopBody
        v184 <- LoadInteger '0'
        v185 <- GetComputedProperty v135, v170
    EndForLoop
    BeginForLoopInitializer
        v186 <- LoadInteger '64'
        Reassign v170, v186
    BeginForLoopCondition
        v187 <- LoadInteger '128'
        v188 <- Compare v170, '<', v187
    BeginForLoopAfterthought v188
        v189 <- UnaryOperation v170, '++'
    BeginForLoopBody
        v190 <- GetComputedProperty v135, v170
    EndForLoop
    BeginForLoopInitializer
        v191 <- LoadInteger '0'
        Reassign v170, v191
    BeginForLoopCondition
        v192 <- LoadInteger '64'
        v193 <- Compare v170, '<', v192
    BeginForLoopAfterthought v193
        v194 <- UnaryOperation v170, '++'
    BeginForLoopBody
        v195 <- GetComputedProperty v149, v170
    EndForLoop
    BeginForLoopInitializer
        v196 <- LoadInteger '0'
        Reassign v170, v196
    BeginForLoopCondition
        v197 <- LoadInteger '128'
        v198 <- Compare v170, '<', v197
    BeginForLoopAfterthought v198
        v199 <- UnaryOperation v170, '++'
    BeginForLoopBody
        v200 <- LoadInteger '0'
        v201 <- GetComputedProperty v160, v170
    EndForLoop
    BeginForLoopInitializer
        v202 <- LoadInteger '128'
        Reassign v170, v202
    BeginForLoopCondition
        v203 <- LoadInteger '256'
        v204 <- Compare v170, '<', v203
    BeginForLoopAfterthought v204
        v205 <- UnaryOperation v170, '++'
    BeginForLoopBody
        v206 <- GetComputedProperty v160, v170
    EndForLoop
    v207 <- LoadInteger '256'
    v208 <- BinaryOperation v207, '*', v70
    v209 <- Construct v69, [v77, v208]
    v210 <- CreateNamedVariable 'aAtTheEnd', 'var', v209
    v211 <- GetProperty v210, 'BYTES_PER_ELEMENT'
    v212 <- LoadInteger '0'
    v213 <- GetProperty v210, 'length'
    v214 <- LoadInteger '0'
    v215 <- GetProperty v210, 'byteLength'
    v216 <- LoadInteger '256'
    v217 <- BinaryOperation v216, '*', v70
    v218 <- GetProperty v210, 'byteOffset'
    v219 <- BeginPlainFunction -> 
        v220 <- LoadInteger '257'
        v221 <- BinaryOperation v220, '*', v70
        v222 <- Construct v69, [v77, v221]
    EndPlainFunction
    v223 <- CallFunction v219, []
    v224 <- CreateNamedVariable 'RangeError', 'none'
    v225 <- BeginPlainFunction -> 
        v226 <- LoadInteger '128'
        v227 <- BinaryOperation v226, '*', v70
        v228 <- LoadInteger '192'
        v229 <- Construct v69, [v77, v227, v228]
    EndPlainFunction
    v230 <- CallFunction v225, []
    v231 <- LoadInteger '1'
    v232 <- Compare v70, '!==', v231
    BeginIf v232
        v233 <- BeginPlainFunction -> 
            v234 <- LoadInteger '128'
            v235 <- BinaryOperation v234, '*', v70
            v236 <- LoadInteger '1'
            v237 <- BinaryOperation v235, '-', v236
            v238 <- LoadInteger '10'
            v239 <- Construct v69, [v77, v237, v238]
        EndPlainFunction
        v240 <- CallFunction v233, []
        v241 <- LoadInteger '10'
        v242 <- BinaryOperation v241, '*', v70
        v243 <- LoadInteger '1'
        v244 <- BinaryOperation v242, '+', v243
        v245 <- Construct v73, [v244]
        v246 <- CreateNamedVariable 'unalignedArrayBuffer', 'var', v245
        v247 <- LoadInteger '0'
        v248 <- LoadInteger '10'
        v249 <- Construct v69, [v246, v247, v248]
        v250 <- CreateNamedVariable 'goodArray', 'var', v249
        v251 <- LoadInteger '10'
        v252 <- GetProperty v250, 'length'
        v253 <- LoadInteger '10'
        v254 <- BinaryOperation v253, '*', v70
        v255 <- GetProperty v250, 'byteLength'
        v256 <- BeginPlainFunction -> 
            v257 <- Construct v69, [v246]
        EndPlainFunction
        v258 <- CallFunction v256, []
        v259 <- BeginPlainFunction -> 
            v260 <- LoadInteger '5'
            v261 <- BinaryOperation v260, '*', v70
            v262 <- Construct v69, [v246, v261]
        EndPlainFunction
        v263 <- CallFunction v259, []
    EndIf
    v264 <- LoadInteger '0'
    v265 <- Construct v73, [v264]
    v266 <- CreateNamedVariable 'abLen0', 'var', v265
    v267 <- Construct v69, [v266]
    v268 <- CreateNamedVariable 'aOverAbLen0', 'var', v267
    v269 <- GetProperty v268, 'buffer'
    v270 <- GetProperty v268, 'BYTES_PER_ELEMENT'
    v271 <- LoadInteger '0'
    v272 <- GetProperty v268, 'length'
    v273 <- LoadInteger '0'
    v274 <- GetProperty v268, 'byteLength'
    v275 <- LoadInteger '0'
    v276 <- GetProperty v268, 'byteOffset'
    v277 <- LoadInteger '64'
    v278 <- BinaryOperation v277, '*', v70
    v279 <- LoadInteger '128'
    v280 <- Construct v69, [v77, v278, v279]
    v281 <- CreateNamedVariable 'a', 'var', v280
    v282 <- LoadString '[object '
    v283 <- GetProperty v69, 'name'
    v284 <- BinaryOperation v282, '+', v283
    v285 <- LoadString ']'
    v286 <- BinaryOperation v284, '+', v285
    v287 <- GetProperty v86, 'prototype'
    v288 <- GetProperty v287, 'toString'
    v289 <- CallMethod v288, 'call', [v281]
    v290 <- GetProperty v69, 'prototype'
    v291 <- GetProperty v290, '__proto__'
    v292 <- CreateNamedVariable 'Symbol', 'none'
    v293 <- GetProperty v292, 'toStringTag'
    v294 <- CallMethod v86, 'getOwnPropertyDescriptor', [v291, v293]
    v295 <- CreateNamedVariable 'desc', 'var', v294
    v296 <- GetProperty v295, 'configurable'
    v297 <- GetProperty v295, 'enumerable'
    v298 <- GetProperty v295, 'writable'
    v299 <- UnaryOperation '!', v298
    v300 <- UnaryOperation '!', v299
    v301 <- GetProperty v295, 'set'
    v302 <- UnaryOperation '!', v301
    v303 <- UnaryOperation '!', v302
    v304 <- LoadString 'function'
    v305 <- GetProperty v295, 'get'
    v306 <- TypeOf v305
EndPlainFunction
v307 <- CreateNamedVariable 'Uint8Array', 'none'
v308 <- LoadInteger '1'
v309 <- LoadInteger '255'
v310 <- CallFunction v68, [v307, v308, v309]
v311 <- CreateNamedVariable 'Int8Array', 'none'
v312 <- LoadInteger '1'
v313 <- LoadInteger '127'
v314 <- UnaryOperation '-', v313
v315 <- CallFunction v68, [v311, v312, v314]
v316 <- CreateNamedVariable 'Uint16Array', 'none'
v317 <- LoadInteger '2'
v318 <- LoadInteger '65535'
v319 <- CallFunction v68, [v316, v317, v318]
v320 <- CreateNamedVariable 'Int16Array', 'none'
v321 <- LoadInteger '2'
v322 <- LoadInteger '32767'
v323 <- UnaryOperation '-', v322
v324 <- CallFunction v68, [v320, v321, v323]
v325 <- CreateNamedVariable 'Uint32Array', 'none'
v326 <- LoadInteger '4'
v327 <- LoadInteger '4294967295'
v328 <- CallFunction v68, [v325, v326, v327]
v329 <- CreateNamedVariable 'Int32Array', 'none'
v330 <- LoadInteger '4'
v331 <- LoadInteger '2147483647'
v332 <- UnaryOperation '-', v331
v333 <- CallFunction v68, [v329, v330, v332]
v334 <- CreateNamedVariable 'Float32Array', 'none'
v335 <- LoadInteger '4'
v336 <- LoadFloat '0.5'
v337 <- CallFunction v68, [v334, v335, v336]
v338 <- CreateNamedVariable 'Float64Array', 'none'
v339 <- LoadInteger '8'
v340 <- LoadFloat '0.5'
v341 <- CallFunction v68, [v338, v339, v340]
v342 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
v343 <- LoadInteger '1'
v344 <- LoadInteger '255'
v345 <- CallFunction v68, [v342, v343, v344]
v346 <- BeginPlainFunction -> v347, v348, v349, v350, v351, v352, v353
    v354 <- CallFunction v59, [v347, v351]
    v355 <- CreateNamedVariable 'a', 'var', v354
    v356 <- CallMethod v355, 'subarray', [v352, v353]
    v357 <- CreateNamedVariable 's', 'var', v356
    v358 <- GetProperty v357, 'constructor'
    v359 <- GetProperty v357, 'length'
    v360 <- GetProperty v357, 'length'
    v361 <- LoadInteger '0'
    v362 <- Compare v360, '>', v361
    BeginIf v362
        SetElement v357, '0', v348
        v363 <- GetComputedProperty v355, v350
    EndIf
EndPlainFunction
v364 <- BeginPlainFunction -> v365, v366
    v367 <- LoadInteger '512'
    v368 <- LoadInteger '512'
    v369 <- LoadInteger '1024'
    v370 <- LoadInteger '512'
    v371 <- LoadInteger '1024'
    v372 <- CallFunction v346, [v365, v366, v367, v368, v369, v370, v371]
    v373 <- LoadInteger '512'
    v374 <- LoadInteger '512'
    v375 <- LoadInteger '1024'
    v376 <- LoadInteger '512'
    v377 <- CallFunction v346, [v365, v366, v373, v374, v375, v376]
    v378 <- LoadInteger '0'
    v379 <- LoadUndefined
    v380 <- LoadInteger '0'
    v381 <- LoadInteger '1'
    v382 <- LoadInteger '20'
    v383 <- CallFunction v346, [v365, v366, v378, v379, v380, v381, v382]
    v384 <- LoadInteger '100'
    v385 <- LoadInteger '0'
    v386 <- LoadInteger '100'
    v387 <- LoadInteger '0'
    v388 <- LoadInteger '100'
    v389 <- CallFunction v346, [v365, v366, v384, v385, v386, v387, v388]
    v390 <- LoadInteger '100'
    v391 <- LoadInteger '0'
    v392 <- LoadInteger '100'
    v393 <- LoadInteger '0'
    v394 <- LoadInteger '1000'
    v395 <- CallFunction v346, [v365, v366, v390, v391, v392, v393, v394]
    v396 <- LoadInteger '0'
    v397 <- LoadUndefined
    v398 <- LoadInteger '100'
    v399 <- LoadInteger '5'
    v400 <- LoadInteger '1'
    v401 <- CallFunction v346, [v365, v366, v396, v397, v398, v399, v400]
    v402 <- LoadInteger '1'
    v403 <- LoadInteger '89'
    v404 <- LoadInteger '100'
    v405 <- LoadInteger '11'
    v406 <- UnaryOperation '-', v405
    v407 <- LoadInteger '10'
    v408 <- UnaryOperation '-', v407
    v409 <- CallFunction v346, [v365, v366, v402, v403, v404, v406, v408]
    v410 <- LoadInteger '9'
    v411 <- LoadInteger '90'
    v412 <- LoadInteger '100'
    v413 <- LoadInteger '10'
    v414 <- UnaryOperation '-', v413
    v415 <- LoadInteger '99'
    v416 <- CallFunction v346, [v365, v366, v410, v411, v412, v414, v415]
    v417 <- LoadInteger '0'
    v418 <- LoadUndefined
    v419 <- LoadInteger '100'
    v420 <- LoadInteger '10'
    v421 <- UnaryOperation '-', v420
    v422 <- LoadInteger '80'
    v423 <- CallFunction v346, [v365, v366, v417, v418, v419, v421, v422]
    v424 <- LoadInteger '10'
    v425 <- LoadInteger '80'
    v426 <- LoadInteger '100'
    v427 <- LoadInteger '80'
    v428 <- LoadInteger '10'
    v429 <- UnaryOperation '-', v428
    v430 <- CallFunction v346, [v365, v366, v424, v425, v426, v427, v429]
    v431 <- LoadInteger '10'
    v432 <- LoadInteger '90'
    v433 <- LoadInteger '100'
    v434 <- LoadInteger '90'
    v435 <- LoadString '100'
    v436 <- CallFunction v346, [v365, v366, v431, v432, v433, v434, v435]
    v437 <- LoadInteger '10'
    v438 <- LoadInteger '90'
    v439 <- LoadInteger '100'
    v440 <- LoadString '90'
    v441 <- LoadString '100'
    v442 <- CallFunction v346, [v365, v366, v437, v438, v439, v440, v441]
    v443 <- LoadInteger '0'
    v444 <- LoadUndefined
    v445 <- LoadInteger '100'
    v446 <- LoadInteger '90'
    v447 <- LoadString 'abc'
    v448 <- CallFunction v346, [v365, v366, v443, v444, v445, v446, v447]
    v449 <- LoadInteger '10'
    v450 <- LoadInteger '0'
    v451 <- LoadInteger '100'
    v452 <- LoadString 'abc'
    v453 <- LoadInteger '10'
    v454 <- CallFunction v346, [v365, v366, v449, v450, v451, v452, v453]
    v455 <- LoadInteger '10'
    v456 <- LoadInteger '0'
    v457 <- LoadInteger '100'
    v458 <- LoadFloat '0.96'
    v459 <- LoadFloat '10.96'
    v460 <- CallFunction v346, [v365, v366, v455, v456, v457, v458, v459]
    v461 <- LoadInteger '10'
    v462 <- LoadInteger '0'
    v463 <- LoadInteger '100'
    v464 <- LoadFloat '0.96'
    v465 <- LoadFloat '10.01'
    v466 <- CallFunction v346, [v365, v366, v461, v462, v463, v464, v465]
    v467 <- LoadInteger '10'
    v468 <- LoadInteger '0'
    v469 <- LoadInteger '100'
    v470 <- LoadFloat '0.01'
    v471 <- LoadFloat '10.01'
    v472 <- CallFunction v346, [v365, v366, v467, v468, v469, v470, v471]
    v473 <- LoadInteger '10'
    v474 <- LoadInteger '0'
    v475 <- LoadInteger '100'
    v476 <- LoadFloat '0.01'
    v477 <- LoadFloat '10.96'
    v478 <- CallFunction v346, [v365, v366, v473, v474, v475, v476, v477]
    v479 <- LoadInteger '10'
    v480 <- LoadInteger '90'
    v481 <- LoadInteger '100'
    v482 <- LoadInteger '90'
    v483 <- CallFunction v346, [v365, v366, v479, v480, v481, v482]
    v484 <- LoadInteger '10'
    v485 <- LoadInteger '90'
    v486 <- LoadInteger '100'
    v487 <- LoadInteger '10'
    v488 <- UnaryOperation '-', v487
    v489 <- CallFunction v346, [v365, v366, v484, v485, v486, v488]
EndPlainFunction
v490 <- LoadInteger '255'
v491 <- CallFunction v364, [v307, v490]
v492 <- LoadInteger '127'
v493 <- UnaryOperation '-', v492
v494 <- CallFunction v364, [v311, v493]
v495 <- LoadInteger '65535'
v496 <- CallFunction v364, [v316, v495]
v497 <- LoadInteger '32767'
v498 <- UnaryOperation '-', v497
v499 <- CallFunction v364, [v320, v498]
v500 <- LoadInteger '4294967295'
v501 <- CallFunction v364, [v325, v500]
v502 <- LoadInteger '2147483647'
v503 <- UnaryOperation '-', v502
v504 <- CallFunction v364, [v329, v503]
v505 <- LoadFloat '0.5'
v506 <- CallFunction v364, [v334, v505]
v507 <- LoadFloat '0.5'
v508 <- CallFunction v364, [v338, v507]
v509 <- LoadInteger '255'
v510 <- CallFunction v364, [v342, v509]
v511 <- BeginPlainFunction -> v512, v513, v514
    v515 <- LoadInteger '1'
    v516 <- CallFunction v59, [v512, v515]
    v517 <- CreateNamedVariable 'a', 'var', v516
    SetElement v517, '0', v513
    v518 <- GetElement v517, '0'
EndPlainFunction
v519 <- LoadInteger '506'
v520 <- LoadInteger '250'
v521 <- CallFunction v511, [v307, v519, v520]
v522 <- LoadInteger '1'
v523 <- UnaryOperation '-', v522
v524 <- LoadInteger '255'
v525 <- CallFunction v511, [v307, v523, v524]
v526 <- LoadInteger '506'
v527 <- LoadInteger '122'
v528 <- LoadInteger '128'
v529 <- BinaryOperation v527, '-', v528
v530 <- CallFunction v511, [v311, v526, v529]
v531 <- LoadInteger '131066'
v532 <- LoadInteger '65530'
v533 <- CallFunction v511, [v316, v531, v532]
v534 <- LoadInteger '1'
v535 <- UnaryOperation '-', v534
v536 <- LoadInteger '65535'
v537 <- CallFunction v511, [v316, v535, v536]
v538 <- LoadInteger '131066'
v539 <- LoadInteger '32762'
v540 <- LoadInteger '32768'
v541 <- BinaryOperation v539, '-', v540
v542 <- CallFunction v511, [v320, v538, v541]
v543 <- LoadInteger '8589934586'
v544 <- LoadInteger '4294967290'
v545 <- CallFunction v511, [v325, v543, v544]
v546 <- LoadInteger '1'
v547 <- UnaryOperation '-', v546
v548 <- LoadInteger '4294967295'
v549 <- CallFunction v511, [v325, v547, v548]
v550 <- LoadInteger '8589934586'
v551 <- LoadInteger '2147483642'
v552 <- LoadInteger '2147483648'
v553 <- BinaryOperation v551, '-', v552
v554 <- CallFunction v511, [v329, v550, v553]
v555 <- LoadInteger '506'
v556 <- LoadInteger '255'
v557 <- CallFunction v511, [v342, v555, v556]
v558 <- LoadInteger '1'
v559 <- UnaryOperation '-', v558
v560 <- LoadInteger '0'
v561 <- CallFunction v511, [v342, v559, v560]
v562 <- CreateArray [v307, v311, v316, v320, v325, v329, v342, v334, v338]
v563 <- CreateNamedVariable 'typedArrayConstructors', 'var', v562
v564 <- BeginPlainFunction -> v565
    v566 <- BeginPlainFunction -> v567
        v568 <- GetProperty v565, 'prototype'
        v569 <- GetProperty v568, '__proto__'
        v570 <- CreateNamedVariable 'Object', 'none'
        v571 <- CallMethod v570, 'getOwnPropertyDescriptor', [v569, v567]
        v572 <- CreateNamedVariable 'd', 'var', v571
        BeginObjectLiteral
        v573 <- EndObjectLiteral
        v574 <- CreateNamedVariable 'o', 'var', v573
        v575 <- BeginPlainFunction -> 
            v576 <- GetProperty v572, 'get'
            v577 <- CallMethod v576, 'call', [v574]
        EndPlainFunction
        v578 <- CallFunction v575, []
        v579 <- CreateNamedVariable 'TypeError', 'none'
        BeginForLoopInitializer
            v580 <- LoadInteger '0'
        BeginForLoopCondition -> v581
            v582 <- GetProperty v563, 'length'
            v583 <- Compare v581, '<', v582
        BeginForLoopAfterthought v583 -> v584
            v585 <- UnaryOperation v584, '++'
        BeginForLoopBody -> v586
            v587 <- GetComputedProperty v563, v586
            v588 <- CreateNamedVariable 'ctor', 'var', v587
            v589 <- LoadInteger '10'
            v590 <- CallFunction v59, [v588, v589]
            v591 <- CreateNamedVariable 'a', 'var', v590
            v592 <- GetProperty v572, 'get'
            v593 <- CallMethod v592, 'call', [v591]
        EndForLoop
    EndPlainFunction
    v594 <- LoadString 'buffer'
    v595 <- CallFunction v566, [v594]
    v596 <- LoadString 'byteOffset'
    v597 <- CallFunction v566, [v596]
    v598 <- LoadString 'byteLength'
    v599 <- CallFunction v566, [v598]
    v600 <- LoadString 'length'
    v601 <- CallFunction v566, [v600]
EndPlainFunction
BeginForLoopInitializer
    v602 <- LoadInteger '0'
    v603 <- CreateNamedVariable 'i', 'none'
    Reassign v603, v602
BeginForLoopCondition
    v604 <- CreateNamedVariable 'i', 'none'
    v605 <- GetProperty v563, 'length'
    v606 <- Compare v604, '<', v605
BeginForLoopAfterthought v606
    v607 <- CreateNamedVariable 'i', 'none'
    v608 <- UnaryOperation v607, '++'
BeginForLoopBody
    v609 <- CreateNamedVariable 'i', 'none'
    v610 <- GetComputedProperty v563, v609
    v611 <- CallFunction v564, [v610]
EndForLoop
v612 <- BeginPlainFunction -> 
    v613 <- BeginPlainFunction -> v614, v615
        BeginForLoopInitializer
            v616 <- LoadInteger '0'
        BeginForLoopCondition -> v617
            v618 <- GetProperty v614, 'length'
            v619 <- Compare v617, '<', v618
        BeginForLoopAfterthought v619 -> v620
            v621 <- UnaryOperation '++', v620
        BeginForLoopBody -> v622
            v623 <- GetComputedProperty v614, v622
            v624 <- GetComputedProperty v615, v622
        EndForLoop
    EndPlainFunction
    v625 <- BeginPlainFunction -> v626, v627
        v628 <- GetProperty v627, 'length'
        v629 <- CallFunction v59, [v626, v628]
        v630 <- CreateNamedVariable 'buffer', 'var', v629
        BeginForLoopInitializer
            v631 <- LoadInteger '0'
        BeginForLoopCondition -> v632
            v633 <- GetProperty v627, 'length'
            v634 <- Compare v632, '<', v633
        BeginForLoopAfterthought v634 -> v635
            v636 <- UnaryOperation '++', v635
        BeginForLoopBody -> v637
            v638 <- GetComputedProperty v627, v637
            SetComputedProperty v630, v637, v638
        EndForLoop
        Return v630
    EndPlainFunction
    v639 <- LoadInteger '1'
    v640 <- LoadInteger '2'
    v641 <- LoadInteger '3'
    v642 <- LoadInteger '4'
    v643 <- LoadInteger '0'
    v644 <- LoadInteger '1'
    v645 <- UnaryOperation '-', v644
    v646 <- CreateArray [v639, v640, v641, v642, v643, v645]
    v647 <- CallFunction v625, [v320, v646]
    v648 <- CreateNamedVariable 'a11', 'var', v647
    v649 <- LoadInteger '15'
    v650 <- CallFunction v59, [v316, v649]
    v651 <- CreateNamedVariable 'a12', 'var', v650
    v652 <- LoadInteger '3'
    v653 <- CallMethod v651, 'set', [v648, v652]
    v654 <- LoadInteger '0'
    v655 <- LoadInteger '0'
    v656 <- LoadInteger '0'
    v657 <- LoadInteger '1'
    v658 <- LoadInteger '2'
    v659 <- LoadInteger '3'
    v660 <- LoadInteger '4'
    v661 <- LoadInteger '0'
    v662 <- LoadInteger '65535'
    v663 <- LoadInteger '0'
    v664 <- LoadInteger '0'
    v665 <- CreateArray [v654, v655, v656, v657, v658, v659, v660, v661, v662, v663, v664]
    v666 <- BeginPlainFunction -> 
        v667 <- CallMethod v648, 'set', [v651]
    EndPlainFunction
    v668 <- CallFunction v666, []
    v669 <- LoadInteger '1'
    v670 <- LoadUndefined
    v671 <- LoadInteger '10'
    v672 <- CreateNamedVariable 'NaN', 'none'
    v673 <- LoadInteger '0'
    v674 <- LoadInteger '1'
    v675 <- UnaryOperation '-', v674
    v676 <- BeginPlainFunction -> 
        v677 <- LoadInteger '3'
        Return v677
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v676
    v678 <- EndObjectLiteral
    v679 <- CreateArray [v669, v670, v671, v672, v673, v675, v678]
    v680 <- CreateNamedVariable 'a21', 'var', v679
    v681 <- LoadInteger '12'
    v682 <- CallFunction v59, [v329, v681]
    v683 <- CreateNamedVariable 'a22', 'var', v682
    v684 <- LoadInteger '2'
    v685 <- CallMethod v683, 'set', [v680, v684]
    v686 <- LoadInteger '0'
    v687 <- LoadInteger '0'
    v688 <- LoadInteger '1'
    v689 <- LoadInteger '0'
    v690 <- LoadInteger '10'
    v691 <- LoadInteger '0'
    v692 <- LoadInteger '0'
    v693 <- LoadInteger '1'
    v694 <- UnaryOperation '-', v693
    v695 <- LoadInteger '3'
    v696 <- LoadInteger '0'
    v697 <- CreateArray [v686, v687, v688, v689, v690, v691, v692, v694, v695, v696]
    v698 <- LoadInteger '2'
    v699 <- LoadInteger '4'
    v700 <- LoadInteger '6'
    v701 <- LoadInteger '8'
    v702 <- LoadInteger '11'
    v703 <- LoadInteger '1'
    v704 <- LoadInteger '0'
    v705 <- BinaryOperation v703, '/', v704
    v706 <- LoadInteger '3'
    v707 <- UnaryOperation '-', v706
    v708 <- CreateArray [v698, v699, v700, v701, v702, v672, v705, v707]
    v709 <- CallFunction v625, [v334, v708]
    v710 <- CreateNamedVariable 'a31', 'var', v709
    v711 <- LoadInteger '2'
    v712 <- LoadInteger '6'
    v713 <- CallMethod v710, 'subarray', [v711, v712]
    v714 <- CreateNamedVariable 'a32', 'var', v713
    v715 <- LoadInteger '4'
    v716 <- CallMethod v710, 'set', [v714, v715]
    v717 <- LoadInteger '2'
    v718 <- LoadInteger '4'
    v719 <- LoadInteger '6'
    v720 <- LoadInteger '8'
    v721 <- LoadInteger '6'
    v722 <- LoadInteger '8'
    v723 <- LoadInteger '11'
    v724 <- CreateArray [v717, v718, v719, v720, v721, v722, v723, v672]
    v725 <- LoadInteger '6'
    v726 <- LoadInteger '8'
    v727 <- LoadInteger '6'
    v728 <- LoadInteger '8'
    v729 <- CreateArray [v725, v726, v727, v728]
    v730 <- LoadInteger '3'
    v731 <- LoadInteger '2'
    v732 <- LoadInteger '5'
    v733 <- LoadInteger '6'
    v734 <- CreateArray [v730, v731, v732, v733]
    v735 <- CallFunction v625, [v342, v734]
    v736 <- CreateNamedVariable 'a4', 'var', v735
    v737 <- CallMethod v736, 'set', [v736]
    v738 <- LoadInteger '3'
    v739 <- LoadInteger '2'
    v740 <- LoadInteger '5'
    v741 <- LoadInteger '6'
    v742 <- CreateArray [v738, v739, v740, v741]
    v743 <- CreateNamedVariable 'Array', 'none'
    v744 <- LoadInteger '4'
    v745 <- Construct v743, [v744]
    v746 <- CreateNamedVariable 'b', 'var', v745
    v747 <- Construct v320, [v746]
    v748 <- CreateNamedVariable 'a5', 'var', v747
    v749 <- Construct v311, [v746]
    v750 <- CreateNamedVariable 'a50', 'var', v749
    v751 <- LoadInteger '0'
    v752 <- LoadInteger '2'
    v753 <- Construct v311, [v746, v751, v752]
    v754 <- CreateNamedVariable 'a51', 'var', v753
    v755 <- LoadInteger '1'
    v756 <- LoadInteger '2'
    v757 <- Construct v311, [v746, v755, v756]
    v758 <- CreateNamedVariable 'a52', 'var', v757
    v759 <- LoadInteger '2'
    v760 <- LoadInteger '2'
    v761 <- Construct v311, [v746, v759, v760]
    v762 <- CreateNamedVariable 'a53', 'var', v761
    v763 <- LoadInteger '20560'
    v764 <- LoadInteger '2570'
    v765 <- CreateArray [v763, v764]
    v766 <- CallMethod v748, 'set', [v765]
    v767 <- LoadInteger '80'
    v768 <- LoadInteger '80'
    v769 <- LoadInteger '10'
    v770 <- LoadInteger '10'
    v771 <- CreateArray [v767, v768, v769, v770]
    v772 <- LoadInteger '80'
    v773 <- LoadInteger '80'
    v774 <- CreateArray [v772, v773]
    v775 <- LoadInteger '80'
    v776 <- LoadInteger '10'
    v777 <- CreateArray [v775, v776]
    v778 <- LoadInteger '10'
    v779 <- LoadInteger '10'
    v780 <- CreateArray [v778, v779]
    v781 <- LoadInteger '80'
    v782 <- LoadInteger '80'
    v783 <- LoadInteger '10'
    v784 <- LoadInteger '10'
    v785 <- CreateArray [v781, v782, v783, v784]
    v786 <- CallMethod v750, 'set', [v785]
    v787 <- CallMethod v754, 'set', [v748]
    v788 <- LoadInteger '80'
    v789 <- LoadInteger '10'
    v790 <- LoadInteger '10'
    v791 <- LoadInteger '10'
    v792 <- CreateArray [v788, v789, v790, v791]
    v793 <- LoadInteger '80'
    v794 <- LoadInteger '80'
    v795 <- LoadInteger '10'
    v796 <- LoadInteger '10'
    v797 <- CreateArray [v793, v794, v795, v796]
    v798 <- CallMethod v750, 'set', [v797]
    v799 <- CallMethod v758, 'set', [v748]
    v800 <- LoadInteger '80'
    v801 <- LoadInteger '80'
    v802 <- LoadInteger '10'
    v803 <- LoadInteger '10'
    v804 <- CreateArray [v800, v801, v802, v803]
    v805 <- LoadInteger '80'
    v806 <- LoadInteger '80'
    v807 <- LoadInteger '10'
    v808 <- LoadInteger '10'
    v809 <- CreateArray [v805, v806, v807, v808]
    v810 <- CallMethod v750, 'set', [v809]
    v811 <- CallMethod v762, 'set', [v748]
    v812 <- LoadInteger '80'
    v813 <- LoadInteger '80'
    v814 <- LoadInteger '80'
    v815 <- LoadInteger '10'
    v816 <- CreateArray [v812, v813, v814, v815]
    v817 <- LoadInteger '80'
    v818 <- LoadInteger '81'
    v819 <- LoadInteger '10'
    v820 <- LoadInteger '11'
    v821 <- CreateArray [v817, v818, v819, v820]
    v822 <- CallMethod v750, 'set', [v821]
    v823 <- CallMethod v748, 'set', [v754]
    v824 <- LoadInteger '80'
    v825 <- LoadInteger '81'
    v826 <- CreateArray [v824, v825]
    v827 <- LoadInteger '80'
    v828 <- LoadInteger '81'
    v829 <- LoadInteger '10'
    v830 <- LoadInteger '11'
    v831 <- CreateArray [v827, v828, v829, v830]
    v832 <- CallMethod v750, 'set', [v831]
    v833 <- CallMethod v748, 'set', [v758]
    v834 <- LoadInteger '81'
    v835 <- LoadInteger '10'
    v836 <- CreateArray [v834, v835]
    v837 <- LoadInteger '80'
    v838 <- LoadInteger '81'
    v839 <- LoadInteger '10'
    v840 <- LoadInteger '11'
    v841 <- CreateArray [v837, v838, v839, v840]
    v842 <- CallMethod v750, 'set', [v841]
    v843 <- CallMethod v748, 'set', [v762]
    v844 <- LoadInteger '10'
    v845 <- LoadInteger '11'
    v846 <- CreateArray [v844, v845]
    v847 <- LoadFloat '1.2'
    v848 <- LoadFloat '12.3'
    v849 <- CreateArray [v847, v848]
    v850 <- CallFunction v625, [v334, v849]
    v851 <- CreateNamedVariable 'a61', 'var', v850
    v852 <- LoadInteger '2'
    v853 <- CallFunction v59, [v329, v852]
    v854 <- CreateNamedVariable 'a62', 'var', v853
    v855 <- CallMethod v854, 'set', [v851]
    v856 <- LoadInteger '1'
    v857 <- LoadInteger '12'
    v858 <- CreateArray [v856, v857]
    v859 <- CallMethod v851, 'set', [v854]
    v860 <- LoadInteger '1'
    v861 <- LoadInteger '12'
    v862 <- CreateArray [v860, v861]
    v863 <- LoadInteger '50'
    v864 <- CallFunction v59, [v316, v863]
    v865 <- CreateNamedVariable 'a', 'var', v864
    v866 <- CreateArray []
    v867 <- CreateNamedVariable 'expected', 'var', v866
    BeginForLoopInitializer
        v868 <- LoadInteger '0'
        v869 <- CreateNamedVariable 'i', 'none'
        Reassign v869, v868
    BeginForLoopCondition
        v870 <- CreateNamedVariable 'i', 'none'
        v871 <- LoadInteger '50'
        v872 <- Compare v870, '<', v871
    BeginForLoopAfterthought v872
        v873 <- CreateNamedVariable 'i', 'none'
        v874 <- UnaryOperation v873, '++'
    BeginForLoopBody
        v875 <- CreateNamedVariable 'i', 'none'
        SetComputedProperty v865, v875, v875
        v876 <- CallMethod v867, 'push', [v875]
    EndForLoop
    BeginObjectLiteral
    v877 <- EndObjectLiteral
    v878 <- CallMethod v865, 'set', [v877]
    v879 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v880 <- EndObjectLiteral
        v881 <- GetProperty v865, 'set'
        v882 <- CallMethod v881, 'call', [v880]
    EndPlainFunction
    v883 <- CallFunction v879, []
    v884 <- CreateNamedVariable 'TypeError', 'none'
    v885 <- BeginPlainFunction -> 
        v886 <- CreateArray []
        v887 <- GetProperty v865, 'set'
        v888 <- CallMethod v887, 'call', [v886]
    EndPlainFunction
    v889 <- CallFunction v885, []
    v890 <- BeginPlainFunction -> 
        v891 <- LoadInteger '0'
        v892 <- CallMethod v865, 'set', [v891]
    EndPlainFunction
    v893 <- CallFunction v890, []
    v894 <- BeginPlainFunction -> 
        v895 <- LoadInteger '0'
        v896 <- LoadInteger '1'
        v897 <- CallMethod v865, 'set', [v895, v896]
    EndPlainFunction
    v898 <- CallFunction v894, []
EndPlainFunction
v899 <- CallFunction v612, []
v900 <- BeginPlainFunction -> 
    v901 <- LoadInteger '100'
    v902 <- CallFunction v59, [v329, v901]
    v903 <- CreateNamedVariable 'a', 'var', v902
    v904 <- LoadInteger '10'
    v905 <- LoadInteger '10'
    v906 <- UnaryOperation '-', v905
    SetComputedProperty v903, v906, v904
    v907 <- LoadUndefined
    v908 <- LoadInteger '10'
    v909 <- UnaryOperation '-', v908
    v910 <- GetComputedProperty v903, v909
    v911 <- LoadInteger '10'
    v912 <- LoadString '-10'
    SetComputedProperty v903, v912, v911
    v913 <- LoadUndefined
    v914 <- LoadString '-10'
    v915 <- GetComputedProperty v903, v914
    v916 <- LoadString '    -10'
    v917 <- CreateNamedVariable 's', 'var', v916
    v918 <- LoadInteger '10'
    SetComputedProperty v903, v917, v918
    v919 <- LoadInteger '10'
    v920 <- GetComputedProperty v903, v917
    v921 <- LoadString '    -10   '
    v922 <- CreateNamedVariable 's1', 'var', v921
    v923 <- LoadInteger '10'
    SetComputedProperty v903, v917, v923
    v924 <- LoadInteger '10'
    v925 <- GetComputedProperty v903, v917
    v926 <- LoadInteger '10'
    v927 <- LoadString '-1e2'
    SetComputedProperty v903, v927, v926
    v928 <- LoadInteger '10'
    v929 <- LoadString '-1e2'
    v930 <- GetComputedProperty v903, v929
    v931 <- LoadUndefined
    v932 <- LoadInteger '100'
    v933 <- UnaryOperation '-', v932
    v934 <- GetComputedProperty v903, v933
    v935 <- LoadInteger '256'
    v936 <- LoadString '-0'
    SetComputedProperty v903, v936, v935
    v937 <- LoadString '     -0'
    v938 <- CreateNamedVariable 's2', 'var', v937
    v939 <- LoadInteger '255'
    SetComputedProperty v903, v938, v939
    v940 <- LoadUndefined
    v941 <- LoadString '-0'
    v942 <- GetComputedProperty v903, v941
    v943 <- LoadInteger '255'
    v944 <- GetComputedProperty v903, v938
    v945 <- LoadInteger '0'
    v946 <- LoadInteger '0'
    v947 <- UnaryOperation '-', v946
    v948 <- GetComputedProperty v903, v947
    v949 <- LoadInteger '10'
    v950 <- LoadFloat '1.5'
    SetComputedProperty v903, v950, v949
    v951 <- LoadUndefined
    v952 <- LoadFloat '1.5'
    v953 <- GetComputedProperty v903, v952
    v954 <- LoadInteger '1'
    v955 <- UnaryOperation '-', v954
    v956 <- CreateNamedVariable 'Math', 'none'
    v957 <- CallMethod v956, 'sqrt', [v955]
    v958 <- CreateNamedVariable 'nan', 'var', v957
    v959 <- LoadInteger '5'
    SetComputedProperty v903, v958, v959
    v960 <- LoadUndefined
    v961 <- GetComputedProperty v903, v958
    v962 <- LoadInteger '0'
    v963 <- CreateNamedVariable 'x', 'var', v962
    v964 <- LoadInteger '0'
    v965 <- UnaryOperation '-', v964
    v966 <- CreateNamedVariable 'y', 'var', v965
    v967 <- CreateNamedVariable 'Infinity', 'none'
    v968 <- LoadInteger '1'
    v969 <- BinaryOperation v968, '/', v963
    v970 <- UnaryOperation '-', v967
    v971 <- LoadInteger '1'
    v972 <- BinaryOperation v971, '/', v966
    v973 <- LoadInteger '5'
    SetComputedProperty v903, v963, v973
    v974 <- LoadInteger '27'
    SetComputedProperty v903, v966, v974
    v975 <- LoadInteger '27'
    v976 <- GetComputedProperty v903, v963
    v977 <- LoadInteger '27'
    v978 <- GetComputedProperty v903, v966
EndPlainFunction
v979 <- CallFunction v900, []
v980 <- BeginPlainFunction -> 
    Directive 'use strict'
    v981 <- LoadInteger '100'
    v982 <- CallFunction v59, [v329, v981]
    v983 <- CreateNamedVariable 'a', 'var', v982
    v984 <- LoadInteger '10'
    v985 <- LoadInteger '10'
    v986 <- UnaryOperation '-', v985
    SetComputedProperty v983, v986, v984
    v987 <- LoadUndefined
    v988 <- LoadInteger '10'
    v989 <- UnaryOperation '-', v988
    v990 <- GetComputedProperty v983, v989
    v991 <- LoadInteger '10'
    v992 <- LoadString '-10'
    SetComputedProperty v983, v992, v991
    v993 <- LoadUndefined
    v994 <- LoadString '-10'
    v995 <- GetComputedProperty v983, v994
    v996 <- LoadString '    -10'
    v997 <- CreateNamedVariable 's', 'var', v996
    v998 <- LoadInteger '10'
    SetComputedProperty v983, v997, v998
    v999 <- LoadInteger '10'
    v1000 <- GetComputedProperty v983, v997
    v1001 <- LoadString '    -10   '
    v1002 <- CreateNamedVariable 's1', 'var', v1001
    v1003 <- LoadInteger '10'
    SetComputedProperty v983, v997, v1003
    v1004 <- LoadInteger '10'
    v1005 <- GetComputedProperty v983, v997
    v1006 <- LoadInteger '10'
    v1007 <- LoadString '-1e2'
    SetComputedProperty v983, v1007, v1006
    v1008 <- LoadInteger '10'
    v1009 <- LoadString '-1e2'
    v1010 <- GetComputedProperty v983, v1009
    v1011 <- LoadUndefined
    v1012 <- LoadInteger '100'
    v1013 <- UnaryOperation '-', v1012
    v1014 <- GetComputedProperty v983, v1013
    v1015 <- LoadInteger '256'
    v1016 <- LoadString '-0'
    SetComputedProperty v983, v1016, v1015
    v1017 <- LoadString '     -0'
    v1018 <- CreateNamedVariable 's2', 'var', v1017
    v1019 <- LoadInteger '255'
    SetComputedProperty v983, v1018, v1019
    v1020 <- LoadUndefined
    v1021 <- LoadString '-0'
    v1022 <- GetComputedProperty v983, v1021
    v1023 <- LoadInteger '255'
    v1024 <- GetComputedProperty v983, v1018
    v1025 <- LoadInteger '0'
    v1026 <- LoadInteger '0'
    v1027 <- UnaryOperation '-', v1026
    v1028 <- GetComputedProperty v983, v1027
    v1029 <- LoadInteger '10'
    v1030 <- LoadFloat '1.5'
    SetComputedProperty v983, v1030, v1029
    v1031 <- LoadUndefined
    v1032 <- LoadFloat '1.5'
    v1033 <- GetComputedProperty v983, v1032
    v1034 <- LoadInteger '1'
    v1035 <- UnaryOperation '-', v1034
    v1036 <- CreateNamedVariable 'Math', 'none'
    v1037 <- CallMethod v1036, 'sqrt', [v1035]
    v1038 <- CreateNamedVariable 'nan', 'var', v1037
    v1039 <- LoadInteger '5'
    SetComputedProperty v983, v1038, v1039
    v1040 <- LoadUndefined
    v1041 <- GetComputedProperty v983, v1038
    v1042 <- LoadInteger '0'
    v1043 <- CreateNamedVariable 'x', 'var', v1042
    v1044 <- LoadInteger '0'
    v1045 <- UnaryOperation '-', v1044
    v1046 <- CreateNamedVariable 'y', 'var', v1045
    v1047 <- CreateNamedVariable 'Infinity', 'none'
    v1048 <- LoadInteger '1'
    v1049 <- BinaryOperation v1048, '/', v1043
    v1050 <- UnaryOperation '-', v1047
    v1051 <- LoadInteger '1'
    v1052 <- BinaryOperation v1051, '/', v1046
    v1053 <- LoadInteger '5'
    SetComputedProperty v983, v1043, v1053
    v1054 <- LoadInteger '27'
    SetComputedProperty v983, v1046, v1054
    v1055 <- LoadInteger '27'
    v1056 <- GetComputedProperty v983, v1043
    v1057 <- LoadInteger '27'
    v1058 <- GetComputedProperty v983, v1046
EndPlainFunction
v1059 <- CallFunction v980, []
v1060 <- BeginPlainFunction -> v1061, v1062
    v1063 <- BeginPlainFunction -> v1064
        v1065 <- CreateArray []
        v1066 <- CreateNamedVariable 'array', 'var', v1065
        BeginForInLoop v1064 -> v1067
            v1068 <- CallMethod v1066, 'push', [v1067]
        EndForInLoop
        v1069 <- CallMethod v1066, 'sort', []
        Return v1069
    EndPlainFunction
    v1070 <- CreateArray []
    v1071 <- CallFunction v1063, [v1061]
    v1072 <- CreateArray []
    v1073 <- GetProperty v1061, 'prototype'
    v1074 <- CallFunction v1063, [v1073]
    BeginIf v1062
        v1075 <- CreateArray []
        v1076 <- CallFunction v1063, [v1062]
    EndIf
EndPlainFunction
v1077 <- CreateNamedVariable 'ArrayBuffer', 'none'
v1078 <- CreateNamedVariable 'Array', 'none'
v1079 <- Construct v1078, []
v1080 <- CallFunction v1060, [v1077, v1079]
BeginForLoopInitializer
    v1081 <- LoadInteger '0'
    v1082 <- CreateNamedVariable 'i', 'none'
    Reassign v1082, v1081
BeginForLoopCondition
    v1083 <- CreateNamedVariable 'i', 'none'
    v1084 <- GetProperty v563, 'length'
    v1085 <- Compare v1083, '<', v1084
BeginForLoopAfterthought v1085
    v1086 <- CreateNamedVariable 'i', 'none'
    v1087 <- UnaryOperation v1086, '++'
BeginForLoopBody
    v1088 <- CreateNamedVariable 'i', 'none'
    v1089 <- GetComputedProperty v563, v1088
    v1090 <- CallFunction v1060, [v1089]
EndForLoop
v1091 <- BeginPlainFunction -> v1092
    v1093 <- BeginPlainFunction -> v1094, v1095, v1096
        SetComputedProperty v1094, v1095, v1096
        v1097 <- GetComputedProperty v1094, v1095
    EndPlainFunction
    BeginForLoopInitializer
        v1098 <- LoadInteger '0'
    BeginForLoopCondition -> v1099
        v1100 <- LoadInteger '20'
        v1101 <- Compare v1099, '<', v1100
    BeginForLoopAfterthought v1101 -> v1102
        v1103 <- UnaryOperation v1102, '++'
    BeginForLoopBody -> v1104
        v1105 <- LoadString 'key'
        v1106 <- BinaryOperation v1105, '+', v1104
        v1107 <- LoadString 'val'
        v1108 <- BinaryOperation v1107, '+', v1104
        v1109 <- CallFunction v1093, [v1092, v1106, v1108]
        v1110 <- LoadString 'foo'
        v1111 <- BinaryOperation v1110, '+', v1104
        v1112 <- LoadString 'bar'
        v1113 <- BinaryOperation v1112, '+', v1104
        v1114 <- CallFunction v1093, [v1092, v1111, v1113]
    EndForLoop
EndPlainFunction
v1115 <- LoadInteger '256'
v1116 <- Construct v1078, [v1115]
v1117 <- CallFunction v1091, [v1116]
BeginForLoopInitializer
    v1118 <- LoadInteger '0'
    v1119 <- CreateNamedVariable 'i', 'none'
    Reassign v1119, v1118
BeginForLoopCondition
    v1120 <- CreateNamedVariable 'i', 'none'
    v1121 <- GetProperty v563, 'length'
    v1122 <- Compare v1120, '<', v1121
BeginForLoopAfterthought v1122
    v1123 <- CreateNamedVariable 'i', 'none'
    v1124 <- UnaryOperation v1123, '++'
BeginForLoopBody
    v1125 <- CreateNamedVariable 'i', 'none'
    v1126 <- GetComputedProperty v563, v1125
    v1127 <- LoadInteger '10'
    v1128 <- CallFunction v59, [v1126, v1127]
    v1129 <- CallFunction v1091, [v1128]
EndForLoop
v1130 <- BeginPlainFunction -> 
    v1131 <- CreateNamedVariable 'SharedArrayBuffer', 'none'
    v1132 <- CallFunction v1131, []
EndPlainFunction
v1133 <- CallFunction v1130, []
v1134 <- CreateNamedVariable 'TypeError', 'none'
BeginForLoopInitializer
    v1135 <- LoadInteger '0'
    v1136 <- CreateNamedVariable 'i', 'none'
    Reassign v1136, v1135
BeginForLoopCondition
    v1137 <- CreateNamedVariable 'i', 'none'
    v1138 <- GetProperty v563, 'length'
    v1139 <- Compare v1137, '<', v1138
BeginForLoopAfterthought v1139
    v1140 <- CreateNamedVariable 'i', 'none'
    v1141 <- UnaryOperation v1140, '++'
BeginForLoopBody
    v1142 <- LoadThis
    v1143 <- CreateNamedVariable 'i', 'none'
    v1144 <- BeginPlainFunction -> v1145
        v1146 <- CallComputedMethod v563, v1145, []
    EndPlainFunction
    v1147 <- CallMethod v1144, 'bind', [v1142, v1143]
    v1148 <- CallFunction v1147, []
EndForLoop
v1149 <- LoadInteger '10'
v1150 <- Construct v1078, [v1149]
v1151 <- CreateNamedVariable 's', 'var', v1150
v1152 <- LoadInteger '10'
v1153 <- GetProperty v1151, 'byteLength'
v1154 <- LoadString 'byteLength'
v1155 <- LoadInteger '42'
BeginObjectLiteral
    ObjectLiteralAddProperty `value`, v1155
v1156 <- EndObjectLiteral
v1157 <- CreateNamedVariable 'Object', 'none'
v1158 <- CallMethod v1157, 'defineProperty', [v1151, v1154, v1156]
v1159 <- LoadInteger '42'
v1160 <- GetProperty v1151, 'byteLength'
v1161 <- GetProperty v1077, 'prototype'
v1162 <- LoadString 'byteLength'
v1163 <- CallMethod v1157, 'getOwnPropertyDescriptor', [v1161, v1162]
v1164 <- CreateNamedVariable 'desc', 'var', v1163
v1165 <- LoadInteger '10'
v1166 <- Construct v1078, [v1165]
Reassign v1151, v1166
v1167 <- LoadString 'byteLength'
v1168 <- CallMethod v1157, 'defineProperty', [v1151, v1167, v1164]
v1169 <- BeginPlainFunction -> 
    v1170 <- GetProperty v1151, 'byteLength'
EndPlainFunction
v1171 <- CallFunction v1169, []
v1172 <- CreateNamedVariable 'SharedArrayBuffer', 'none'
v1173 <- GetProperty v1172, 'prototype'
v1174 <- LoadString 'byteLength'
v1175 <- CallMethod v1157, 'getOwnPropertyDescriptor', [v1173, v1174]
Reassign v1164, v1175
v1176 <- LoadInteger '10'
v1177 <- Construct v1077, [v1176]
v1178 <- CreateNamedVariable 'a', 'var', v1177
v1179 <- LoadString 'byteLength'
v1180 <- CallMethod v1157, 'defineProperty', [v1178, v1179, v1164]
v1181 <- BeginPlainFunction -> 
    v1182 <- GetProperty v1178, 'byteLength'
EndPlainFunction
v1183 <- CallFunction v1181, []
v1184 <- CreateNamedVariable 'Symbol', 'none'
v1185 <- GetProperty v1184, 'species'
v1186 <- GetComputedProperty v1172, v1185
v1187 <- GetProperty v1184, 'species'
v1188 <- CallMethod v1157, 'getOwnPropertyDescriptor', [v1172, v1187]
v1189 <- CreateNamedVariable 'desc', 'var', v1188
v1190 <- LoadString 'function'
v1191 <- GetProperty v1189, 'get'
v1192 <- TypeOf v1191
v1193 <- LoadString 'get [Symbol.species]'
v1194 <- GetProperty v1189, 'get'
v1195 <- GetProperty v1194, 'name'
v1196 <- LoadInteger '0'
v1197 <- GetProperty v1189, 'get'
v1198 <- GetProperty v1197, 'length'
v1199 <- LoadString 'undefined'
v1200 <- GetProperty v1189, 'set'
v1201 <- TypeOf v1200
v1202 <- GetProperty v1189, 'configurable'
v1203 <- GetProperty v1189, 'enumerable'


function TestByteLength(a1, a2) {
    const v4 = new Array(a1);
    var sab = v4;
    sab.byteLength;
}
function TestArrayBufferCreation() {
    TestByteLength(1, 1);
    TestByteLength(256, 256);
    TestByteLength(2.567, 2);
    TestByteLength("abc", 0);
    TestByteLength(0, 0);
    function f23() {
        new Array(-10);
    }
    f23();
    function f30() {
        new Array(-2.567);
    }
    f30();
    const v37 = new Array();
    var sab = v37;
    sab.byteLength;
    Object.prototype.toString.call(sab);
}
TestArrayBufferCreation();
function TestByteLengthNotWritable() {
    const v50 = new Array(1024);
    var sab = v50;
    sab.byteLength;
    function f54() {
        'use strict';
        sab.byteLength = 42;
    }
    f54();
}
TestByteLengthNotWritable();
function MakeSharedTypedArray(a60, a61) {
    const v65 = new Array(a60.BYTES_PER_ELEMENT * a61);
    var sab = v65;
    const v67 = new a60(sab);
    return v67;
}
function TestTypedArray(a69, a70, a71) {
    a69.BYTES_PER_ELEMENT;
    const v76 = new Array(256 * a70);
    var sab = v76;
    const v79 = new a69(30);
    var a0 = v79;
    ("[object " + a69.name) + "]";
    Object.prototype.toString.call(a0);
    a0.BYTES_PER_ELEMENT;
    a0.length;
    30 * a70;
    a0.byteLength;
    a0.byteOffset;
    30 * a70;
    a0.buffer.byteLength;
    const v105 = new a69(sab, 128 * a70, 0);
    var aOverBufferLen0 = v105;
    aOverBufferLen0.buffer;
    aOverBufferLen0.BYTES_PER_ELEMENT;
    aOverBufferLen0.length;
    aOverBufferLen0.byteLength;
    128 * a70;
    aOverBufferLen0.byteOffset;
    const v119 = new a69(sab, 128 * a70, 128);
    var a1 = v119;
    a1.buffer;
    a1.BYTES_PER_ELEMENT;
    a1.length;
    128 * a70;
    a1.byteLength;
    128 * a70;
    a1.byteOffset;
    const v134 = new a69(sab, 64 * a70, 128);
    var a2 = v134;
    a2.buffer;
    a2.BYTES_PER_ELEMENT;
    a2.length;
    128 * a70;
    a2.byteLength;
    64 * a70;
    a2.byteOffset;
    const v148 = new a69(sab, 192 * a70);
    var a3 = v148;
    a3.buffer;
    a3.length;
    64 * a70;
    a3.byteLength;
    192 * a70;
    a3.byteOffset;
    const v159 = new a69(sab);
    var a4 = v159;
    a4.buffer;
    a4.length;
    256 * a70;
    a4.byteLength;
    a4.byteOffset;
    var i;
    for ((() => {
            i = 0;
        })();
        i < 128;
        i++) {
        a1[i] = a71;
    }
    for ((() => {
            i = 0;
        })();
        i < 128;
        i++) {
        a1[i];
    }
    for ((() => {
            i = 0;
        })();
        i < 64;
        i++) {
        a2[i];
    }
    for ((() => {
            i = 64;
        })();
        i < 128;
        i++) {
        a2[i];
    }
    for ((() => {
            i = 0;
        })();
        i < 64;
        i++) {
        a3[i];
    }
    for ((() => {
            i = 0;
        })();
        i < 128;
        i++) {
        a4[i];
    }
    for ((() => {
            i = 128;
        })();
        i < 256;
        i++) {
        a4[i];
    }
    const v209 = new a69(sab, 256 * a70);
    var aAtTheEnd = v209;
    aAtTheEnd.BYTES_PER_ELEMENT;
    aAtTheEnd.length;
    aAtTheEnd.byteLength;
    256 * a70;
    aAtTheEnd.byteOffset;
    function f219() {
        new a69(sab, 257 * a70);
    }
    f219();
    function f225() {
        new a69(sab, 128 * a70, 192);
    }
    f225();
    if (a70 !== 1) {
        function f233() {
            new a69(sab, (128 * a70) - 1, 10);
        }
        f233();
        const v245 = new Array((10 * a70) + 1);
        var unalignedArrayBuffer = v245;
        const v249 = new a69(unalignedArrayBuffer, 0, 10);
        var goodArray = v249;
        goodArray.length;
        10 * a70;
        goodArray.byteLength;
        function f256() {
            new a69(unalignedArrayBuffer);
        }
        f256();
        function f259() {
            new a69(unalignedArrayBuffer, 5 * a70);
        }
        f259();
    }
    const v265 = new Array(0);
    var abLen0 = v265;
    const v267 = new a69(abLen0);
    var aOverAbLen0 = v267;
    aOverAbLen0.buffer;
    aOverAbLen0.BYTES_PER_ELEMENT;
    aOverAbLen0.length;
    aOverAbLen0.byteLength;
    aOverAbLen0.byteOffset;
    const v280 = new a69(sab, 64 * a70, 128);
    var a = v280;
    ("[object " + a69.name) + "]";
    Object.prototype.toString.call(a);
    var desc = Object.getOwnPropertyDescriptor(a69.prototype.__proto__, Symbol.toStringTag);
    desc.configurable;
    desc.enumerable;
    !(!desc.writable);
    !(!desc.set);
    typeof desc.get;
}
TestTypedArray(Uint8Array, 1, 255);
TestTypedArray(Int8Array, 1, -127);
TestTypedArray(Uint16Array, 2, 65535);
TestTypedArray(Int16Array, 2, -32767);
TestTypedArray(Uint32Array, 4, 4294967295);
TestTypedArray(Int32Array, 4, -2147483647);
TestTypedArray(Float32Array, 4, 0.5);
TestTypedArray(Float64Array, 8, 0.5);
TestTypedArray(Uint8ClampedArray, 1, 255);
function SubarrayTestCase(a347, a348, a349, a350, a351, a352, a353) {
    var a = MakeSharedTypedArray(a347, a351);
    var s = a.subarray(a352, a353);
    s.constructor;
    s.length;
    if (s.length > 0) {
        s[0] = a348;
        a[a350];
    }
}
function TestSubArray(a365, a366) {
    SubarrayTestCase(a365, a366, 512, 512, 1024, 512, 1024);
    SubarrayTestCase(a365, a366, 512, 512, 1024, 512);
    SubarrayTestCase(a365, a366, 0, undefined, 0, 1, 20);
    SubarrayTestCase(a365, a366, 100, 0, 100, 0, 100);
    SubarrayTestCase(a365, a366, 100, 0, 100, 0, 1000);
    SubarrayTestCase(a365, a366, 0, undefined, 100, 5, 1);
    SubarrayTestCase(a365, a366, 1, 89, 100, -11, -10);
    SubarrayTestCase(a365, a366, 9, 90, 100, -10, 99);
    SubarrayTestCase(a365, a366, 0, undefined, 100, -10, 80);
    SubarrayTestCase(a365, a366, 10, 80, 100, 80, -10);
    SubarrayTestCase(a365, a366, 10, 90, 100, 90, "100");
    SubarrayTestCase(a365, a366, 10, 90, 100, "90", "100");
    SubarrayTestCase(a365, a366, 0, undefined, 100, 90, "abc");
    SubarrayTestCase(a365, a366, 10, 0, 100, "abc", 10);
    SubarrayTestCase(a365, a366, 10, 0, 100, 0.96, 10.96);
    SubarrayTestCase(a365, a366, 10, 0, 100, 0.96, 10.01);
    SubarrayTestCase(a365, a366, 10, 0, 100, 0.01, 10.01);
    SubarrayTestCase(a365, a366, 10, 0, 100, 0.01, 10.96);
    SubarrayTestCase(a365, a366, 10, 90, 100, 90);
    SubarrayTestCase(a365, a366, 10, 90, 100, -10);
}
TestSubArray(Uint8Array, 255);
TestSubArray(Int8Array, -127);
TestSubArray(Uint16Array, 65535);
TestSubArray(Int16Array, -32767);
TestSubArray(Uint32Array, 4294967295);
TestSubArray(Int32Array, -2147483647);
TestSubArray(Float32Array, 0.5);
TestSubArray(Float64Array, 0.5);
TestSubArray(Uint8ClampedArray, 255);
function TestTypedArrayOutOfRange(a512, a513, a514) {
    var a = MakeSharedTypedArray(a512, 1);
    a[0] = a513;
    a[0];
}
TestTypedArrayOutOfRange(Uint8Array, 506, 250);
TestTypedArrayOutOfRange(Uint8Array, -1, 255);
TestTypedArrayOutOfRange(Int8Array, 506, 122 - 128);
TestTypedArrayOutOfRange(Uint16Array, 131066, 65530);
TestTypedArrayOutOfRange(Uint16Array, -1, 65535);
TestTypedArrayOutOfRange(Int16Array, 131066, 32762 - 32768);
TestTypedArrayOutOfRange(Uint32Array, 8589934586, 4294967290);
TestTypedArrayOutOfRange(Uint32Array, -1, 4294967295);
TestTypedArrayOutOfRange(Int32Array, 8589934586, 2147483642 - 2147483648);
TestTypedArrayOutOfRange(Uint8ClampedArray, 506, 255);
TestTypedArrayOutOfRange(Uint8ClampedArray, -1, 0);
var typedArrayConstructors = [Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Uint8ClampedArray,Float32Array,Float64Array];
function TestPropertyTypeChecks(a565) {
    function CheckProperty(a567) {
        var d = Object.getOwnPropertyDescriptor(a565.prototype.__proto__, a567);
        var o = {};
        function f575() {
            d.get.call(o);
        }
        f575();
        for (let i581 = 0; i581 < typedArrayConstructors.length; i581++) {
            var ctor = typedArrayConstructors[i581];
            var a = MakeSharedTypedArray(ctor, 10);
            d.get.call(a);
        }
    }
    CheckProperty("buffer");
    CheckProperty("byteOffset");
    CheckProperty("byteLength");
    CheckProperty("length");
}
for (i = 0; i < typedArrayConstructors.length; i++) {
    TestPropertyTypeChecks(typedArrayConstructors[i]);
}
function TestTypedArraySet() {
    function assertArrayPrefix(a614, a615) {
        for (let i617 = 0; i617 < a614.length; ++i617) {
            a614[i617];
            a615[i617];
        }
    }
    function initializeFromArray(a626, a627) {
        var buffer = MakeSharedTypedArray(a626, a627.length);
        for (let i632 = 0; i632 < a627.length; ++i632) {
            buffer[i632] = a627[i632];
        }
        return buffer;
    }
    var a11 = initializeFromArray(Int16Array, [1,2,3,4,0,-1]);
    var a12 = MakeSharedTypedArray(Uint16Array, 15);
    a12.set(a11, 3);
    [0,0,0,1,2,3,4,0,65535,0,0];
    function f666() {
        a11.set(a12);
    }
    f666();
    const v675 = -1;
    function f676() {
        return 3;
    }
    var a21 = [1,,10,NaN,0,v675,{ valueOf: f676 }];
    var a22 = MakeSharedTypedArray(Int32Array, 12);
    a22.set(a21, 2);
    [0,0,1,0,10,0,0,-1,3,0];
    var a31 = initializeFromArray(Float32Array, [2,4,6,8,11,NaN,1 / 0,-3]);
    var a32 = a31.subarray(2, 6);
    a31.set(a32, 4);
    [2,4,6,8,6,8,11,NaN];
    [6,8,6,8];
    var a4 = initializeFromArray(Uint8ClampedArray, [3,2,5,6]);
    a4.set(a4);
    [3,2,5,6];
    const v745 = new Array(4);
    var b = v745;
    const v747 = new Int16Array(b);
    var a5 = v747;
    const v749 = new Int8Array(b);
    var a50 = v749;
    const v753 = new Int8Array(b, 0, 2);
    var a51 = v753;
    const v757 = new Int8Array(b, 1, 2);
    var a52 = v757;
    const v761 = new Int8Array(b, 2, 2);
    var a53 = v761;
    a5.set([20560,2570]);
    [80,80,10,10];
    [80,80];
    [80,10];
    [10,10];
    a50.set([80,80,10,10]);
    a51.set(a5);
    [80,10,10,10];
    a50.set([80,80,10,10]);
    a52.set(a5);
    [80,80,10,10];
    a50.set([80,80,10,10]);
    a53.set(a5);
    [80,80,80,10];
    a50.set([80,81,10,11]);
    a5.set(a51);
    [80,81];
    a50.set([80,81,10,11]);
    a5.set(a52);
    [81,10];
    a50.set([80,81,10,11]);
    a5.set(a53);
    [10,11];
    var a61 = initializeFromArray(Float32Array, [1.2,12.3]);
    var a62 = MakeSharedTypedArray(Int32Array, 2);
    a62.set(a61);
    [1,12];
    a61.set(a62);
    [1,12];
    var a = MakeSharedTypedArray(Uint16Array, 50);
    var expected = [];
    for (i = 0; i < 50; i++) {
        a[i] = i;
        expected.push(i);
    }
    a.set({});
    function f879() {
        const v880 = {};
        a.set.call(v880);
    }
    f879();
    function f885() {
        const v886 = [];
        a.set.call(v886);
    }
    f885();
    function f890() {
        a.set(0);
    }
    f890();
    function f894() {
        a.set(0, 1);
    }
    f894();
}
TestTypedArraySet();
function TestTypedArraysWithIllegalIndices() {
    var a = MakeSharedTypedArray(Int32Array, 100);
    a[-10] = 10;
    a[-10];
    a["-10"] = 10;
    a["-10"];
    var s = "    -10";
    a[s] = 10;
    a[s];
    var s1 = "    -10   ";
    a[s] = 10;
    a[s];
    a["-1e2"] = 10;
    a["-1e2"];
    a[-100];
    a["-0"] = 256;
    var s2 = "     -0";
    a[s2] = 255;
    a["-0"];
    a[s2];
    a[-0];
    a[1.5] = 10;
    a[1.5];
    var nan = Math.sqrt(-1);
    a[nan] = 5;
    a[nan];
    var x = 0;
    var y = -0;
    1 / x;
    -Infinity;
    1 / y;
    a[x] = 5;
    a[y] = 27;
    a[x];
    a[y];
}
TestTypedArraysWithIllegalIndices();
function TestTypedArraysWithIllegalIndicesStrict() {
    'use strict';
    var a = MakeSharedTypedArray(Int32Array, 100);
    a[-10] = 10;
    a[-10];
    a["-10"] = 10;
    a["-10"];
    var s = "    -10";
    a[s] = 10;
    a[s];
    var s1 = "    -10   ";
    a[s] = 10;
    a[s];
    a["-1e2"] = 10;
    a["-1e2"];
    a[-100];
    a["-0"] = 256;
    var s2 = "     -0";
    a[s2] = 255;
    a["-0"];
    a[s2];
    a[-0];
    a[1.5] = 10;
    a[1.5];
    var nan = Math.sqrt(-1);
    a[nan] = 5;
    a[nan];
    var x = 0;
    var y = -0;
    1 / x;
    -Infinity;
    1 / y;
    a[x] = 5;
    a[y] = 27;
    a[x];
    a[y];
}
TestTypedArraysWithIllegalIndicesStrict();
function TestEnumerable(a1061, a1062) {
    function props(a1064) {
        var array = [];
        for (const v1067 in a1064) {
            array.push(v1067);
        }
        return array.sort();
    }
    [];
    props(a1061);
    [];
    props(a1061.prototype);
    if (a1062) {
        [];
        props(a1062);
    }
}
const v1079 = new Array();
TestEnumerable(ArrayBuffer, v1079);
for (i = 0; i < typedArrayConstructors.length; i++) {
    TestEnumerable(typedArrayConstructors[i]);
}
function TestArbitrary(a1092) {
    function TestProperty(a1094, a1095, a1096) {
        a1094[a1095] = a1096;
        a1094[a1095];
    }
    for (let i1099 = 0; i1099 < 20; i1099++) {
        TestProperty(a1092, "key" + i1099, "val" + i1099);
        TestProperty(a1092, "foo" + i1099, "bar" + i1099);
    }
}
const v1116 = new Array(256);
TestArbitrary(v1116);
for (i = 0; i < typedArrayConstructors.length; i++) {
    TestArbitrary(MakeSharedTypedArray(typedArrayConstructors[i], 10));
}
function f1130() {
    SharedArrayBuffer();
}
f1130();
for (i = 0; i < typedArrayConstructors.length; i++) {
    function f1144(a1145) {
        typedArrayConstructors[a1145]();
    }
    const t519 = f1144.bind(this, i);
    t519();
}
const v1150 = new Array(10);
var s = v1150;
s.byteLength;
Object.defineProperty(s, "byteLength", { value: 42 });
s.byteLength;
var desc = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength");
const v1166 = new Array(10);
Object.defineProperty(s = v1166, "byteLength", desc);
function f1169() {
    s.byteLength;
}
f1169();
desc = Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, "byteLength");
const v1177 = new ArrayBuffer(10);
var a = v1177;
Object.defineProperty(a, "byteLength", desc);
function f1181() {
    a.byteLength;
}
f1181();
SharedArrayBuffer[Symbol.species];
var desc = Object.getOwnPropertyDescriptor(SharedArrayBuffer, Symbol.species);
typeof desc.get;
desc.get.name;
desc.get.length;
typeof desc.set;
desc.configurable;
desc.enumerable;

FuzzIL program written to corpus/sharedarraybuffer.fzil
