v0 <- LoadUndefined
v1 <- CreateNamedVariable 'stack', 'var', v0
v2 <- LoadBoolean 'false'
v3 <- CreateNamedVariable 'used_custom_lookup', 'var', v2
v4 <- BeginPlainFunction -> 
    v5 <- LoadBoolean 'true'
    Reassign v3, v5
EndPlainFunction
v6 <- BeginPlainFunction -> 
    BeginTry
        v7 <- CreateNamedVariable 'f', 'none'
        v8 <- CallFunction v7, []
    BeginCatch -> v9
        v10 <- GetProperty v9, 'stack'
        Reassign v1, v10
    EndTryCatch
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `__lookupGetter__`, v4
    ObjectLiteralAddProperty `test`, v6
v11 <- EndObjectLiteral
v12 <- CallMethod v11, 'test', []
v13 <- LoadString 'ReferenceError: f is not defined'
v14 <- CreateNamedVariable 'expected_message', 'var', v13
v15 <- CallMethod v1, 'indexOf', [v14]
v16 <- LoadInteger '0'
v17 <- Compare v15, '>=', v16


var stack;
var used_custom_lookup = false;
function f4() {
    used_custom_lookup = true;
}
function f6() {
    try {
        f();
    } catch(e9) {
        stack = e9.stack;
    }
}
({ __lookupGetter__: f4, test: f6 }).test();
var expected_message = "ReferenceError: f is not defined";
stack.indexOf(expected_message) >= 0;

FuzzIL program written to corpus/regress-1591.fzil
