function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 1073741824;
}
new F0();
new F0();
new F0();
new WeakMap();
let v8 = 10;
v8++;
new Int8Array(v8);
new Uint8Array(1);
new Uint16Array(7);
try { Math.floor(1); } catch (e) {}
var imul_func = Math.imul;
try { imul_func(imul_func, 1); } catch (e) {}
function imul_polyfill(a24, a25) {
    a24 >>> a24;
    var ah = (a24 >>> 16) & 65535;
    65535 - 65535;
    const v34 = a24 & 65535;
    v34 << v34;
    var al = 7;
    -al;
    const v39 = a25 >>> 16;
    v39 | v39;
    const v42 = v39 & 65535;
    var bl = a25 & 65535;
    const v46 = al * bl;
    let v47 = ah * bl;
    v47++;
    let v50 = v47 + (al * v42);
    v50--;
    const v53 = v50 << 16;
    v53 >>> v53;
    return (v46 + (v53 >>> 0)) | 0;
}
function TestMathImul(a61, a62, a63) {
    a62++;
    function imul_meth_closure(a66, a67) {
        a66 === a66;
        const v69 = Math.imul(a66, a67);
        v69 - v69;
        return v69;
    }
    function imul_func_closure(a72, a73) {
        a72 - a72;
        ~a73;
        return imul_func(a72, a73);
    }
    imul_polyfill(a62, a63);
    Math.imul(a62, a63);
    const v79 = imul_func(a62, a63);
    v79 === v79;
    imul_meth_closure(a62, a63);
    imul_meth_closure(a62, a63);
    let v83 = imul_func_closure(a62, a63);
    v83--;
    const v85 = imul_func_closure(a62, a63);
    v85 | v85;
    imul_func_closure(a62, a63);
}
-4;
TestMathImul(8, 2, 4);
const v98 = TestMathImul(-8, -1, 8);
v98 ?? v98;
TestMathImul(4, -2, -2);
const v107 = -5;
4294967295 % 4294967295;
TestMathImul(v107, 4294967295, 5);
10 / 10;
const v114 = -10;
v114 != v114;
TestMathImul(v114, 4294967294, 5);
false || false;
TestMathImul(0, 7, false);
false && false;
TestMathImul(0, false, false);
TestMathImul(7, true, 7);
let v135 = 7;
v135--;
!true;
const v140 = TestMathImul(v135, 7);
v140 ?? v140;
!true;
TestMathImul(1, true, true);
0 & 0;
TestMathImul(0, false, true);
0 + 0;
TestMathImul(0, true, false);
0 != 0;
const v161 = TestMathImul(0, undefined, 7);
v161 ?? v161;
TestMathImul(0, 7, undefined);
0 >> 0;
undefined ?? undefined;
TestMathImul(0, undefined, undefined);
-0;
TestMathImul(0, -0, 7);
TestMathImul(0, 7, -0);
0.1 >>> 0.1;
TestMathImul(0, 0.1, 7);
TestMathImul(0, 7, 0.1);
0.9 >>> 0.9;
TestMathImul(0, 0.9, 7);
TestMathImul(0, 7, 0.9);
TestMathImul(7, 1.1, 7);
7 >>> 7;
~1.1;
TestMathImul(7, 7, 1.1);
-7;
7 >>> 7;
TestMathImul(7, 1.9, 7);
1.9 - 1.9;
const v222 = TestMathImul(7, 7, 1.9);
v222 ?? v222;
const v227 = TestMathImul(0, "str", 7);
v227 ?? v227;
7 - 7;
const v233 = TestMathImul(0, 7, "str");
v233 ?? v233;
const v238 = TestMathImul(0, {}, 7);
v238 ?? v238;
const v243 = TestMathImul(0, 7, {});
v243 ?? v243;
const v248 = TestMathImul(0, [], 7);
v248 ?? v248;
TestMathImul(0, 7, []);
-1;
var two_30 = 1 << 30;
const v259 = -two_30;
v259 * v259;
7 % 7;
const v263 = TestMathImul(v259, two_30, 7);
v263 ?? v263;
7 >>> 7;
const v268 = TestMathImul(0, two_30, two_30);
v268 ?? v268;
const v270 = -two_30;
v270 >>> v270;
TestMathImul(two_30, v270, 7);
TestMathImul(two_30, 7, -two_30);
TestMathImul(0, -7, -two_30);
2 | 2;
var two_31 = 2 * two_30;
two_31 >>> two_31;
TestMathImul(-two_31, two_31, 7);
TestMathImul(-two_31, 7, two_31);
TestMathImul(0, two_31, two_31);
const v294 = -two_31;
v294 - v294;
const v296 = -two_31;
7 | 7;
TestMathImul(v294, v296, 7);
TestMathImul(-two_31, 7, -two_31);
0 - 0;
const v306 = -two_31;
v306 + v306;
TestMathImul(0, v306, -two_31);
let v311 = two_31 - 1;
v311--;
var max_val = v311;
two_31 - 7;
TestMathImul(two_31 - 7, 7, max_val);
const v322 = TestMathImul(1, max_val, max_val);
v322 ?? v322;
const v326 = 1 << 16;
v326 % v326;
var two_16 = v326;
const v330 = TestMathImul(0, two_16, 30);
v330 ?? v330;
const v332 = -two_16;
v332 / v332;
const v335 = two_16 - 1;
v335 >>> v335;
const v337 = TestMathImul(v332, v335, two_16);
v337 ?? v337;
TestMathImul(-two_16, two_16, two_16 - 1);
const v344 = -2;
v344 & v344;
const v346 = v344 * two_16;
let v347 = 1;
v347++;
const v349 = v346 + v347;
-v349;
TestMathImul(v349, two_16 - 1, two_16 - 1);
