v0 <- BeginPlainFunction -> v1
    v2 <- LoadFloat '1.5'
    SetElement v1, '0', v2
EndPlainFunction
v3 <- LoadInteger '1'
v4 <- LoadUndefined
v5 <- LoadInteger '3'
v6 <- CreateArray [v3, v4, v5]
v7 <- CallFunction v0, [v6]
v8 <- LoadInteger '1'
v9 <- LoadUndefined
v10 <- LoadInteger '3'
v11 <- CreateArray [v8, v9, v10]
v12 <- CallFunction v0, [v11]
v13 <- LoadInteger '1'
v14 <- LoadUndefined
v15 <- LoadInteger '3'
v16 <- CreateArray [v13, v14, v15]
v17 <- CallFunction v0, [v16]
v18 <- LoadInteger '1'
v19 <- LoadUndefined
v20 <- LoadInteger '3'
v21 <- CreateArray [v18, v19, v20]
v22 <- CreateNamedVariable 'ta', 'var', v21
v23 <- CallFunction v0, [v22]
v24 <- LoadFloat '1.5'
v25 <- LoadUndefined
v26 <- LoadInteger '3'
v27 <- CreateArray [v24, v25, v26]


function t_smi(a1) {
    a1[0] = 1.5;
}
t_smi([1,,3]);
t_smi([1,,3]);
t_smi([1,,3]);
var ta = [1,,3];
t_smi(ta);
[1.5,,3];

FuzzIL program written to corpus/regress-et-clobbers-doubles.fzil
