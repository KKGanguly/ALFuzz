v0 <- BeginPlainFunction -> v1, v2
    v3 <- Compare v2, '===', v1
    BeginIf v3
    BeginElse
        v4 <- Compare v1, '!==', v1
        v5 <- Compare v2, '!==', v2
        v6 <- BinaryOperation v4, '&&', v5
        BeginIf v6
        EndIf
    EndIf
EndPlainFunction
v7 <- BeginPlainFunction -> 
    v8 <- LoadFloat '0.5'
    BeginObjectLiteral
        ObjectLiteralAddProperty `var`, v8
    v9 <- EndObjectLiteral
    v10 <- CreateNamedVariable 'x', 'var', v9
    v11 <- GetProperty v10, 'val'
    v12 <- BeginArrowFunction -> 
        Return v10
    EndArrowFunction
    Return v12
EndPlainFunction
v13 <- LoadInteger '1'
v14 <- CallFunction v7, [v13]
v15 <- LoadInteger '1'
v16 <- CallFunction v7, [v15]
v17 <- LoadInteger '1'
v18 <- CallFunction v7, [v17]


function assertSame(a1, a2) {
    if (a2 === a1) {
    } else {
        if ((a1 !== a1) && (a2 !== a2)) {
        }
    }
}
function foo() {
    var x = { var: 0.5 };
    x.val;
    const v12 = () => {
        return x;
    };
    return v12;
}
foo(1);
foo(1);
foo(1);

FuzzIL program written to corpus/regress-crbug-698607.fzil
