v0 <- CreateNamedVariable 'Int32Array', 'none'
v1 <- LoadInteger '1024'
v2 <- Construct v0, [v1]
v3 <- CreateNamedVariable 'a', 'var', v2
v4 <- LoadInteger '0'
v5 <- LoadInteger '1'
v6 <- LoadInteger '2'
v7 <- LoadInteger '3'
v8 <- LoadInteger '4'
v9 <- LoadInteger '5'
v10 <- LoadInteger '6'
v11 <- LoadInteger '7'
v12 <- LoadInteger '8'
v13 <- LoadInteger '9'
v14 <- CreateArray [v4, v5, v6, v7, v8, v9, v10, v11, v12, v13]
v15 <- CreateNamedVariable 'v', 'var', v14
v16 <- BeginPlainFunction -> v17, v18
    v19 <- LoadInteger '0'
    v20 <- CreateNamedVariable 'r', 'var', v19
    v21 <- LoadInteger '1'
    v22 <- BinaryOperation v18, '+', v21
    v23 <- CreateNamedVariable 'a1', 'var', v22
    v24 <- LoadInteger '2'
    v25 <- BinaryOperation v18, '+', v24
    v26 <- CreateNamedVariable 'a2', 'var', v25
    v27 <- LoadInteger '3'
    v28 <- BinaryOperation v18, '+', v27
    v29 <- CreateNamedVariable 'a3', 'var', v28
    v30 <- LoadInteger '4'
    v31 <- BinaryOperation v18, '+', v30
    v32 <- CreateNamedVariable 'a4', 'var', v31
    v33 <- LoadInteger '2'
    v34 <- Compare v23, '==', v33
    BeginIf v34
        v35 <- GetComputedProperty v17, v23
        Update v20, '+', v35
        v36 <- GetComputedProperty v17, v32
        Update v20, '+', v36
        v37 <- GetComputedProperty v17, v26
        Update v20, '+', v37
        v38 <- GetComputedProperty v17, v29
        Update v20, '+', v38
    EndIf
    Return v20
EndPlainFunction
v39 <- LoadInteger '1'
v40 <- CallFunction v16, [v15, v39]
v41 <- LoadInteger '1'
v42 <- CallFunction v16, [v15, v41]
v43 <- LoadString 'a'
v44 <- CallFunction v16, [v15, v43]
v45 <- LoadString 'a'
v46 <- CallFunction v16, [v15, v45]
v47 <- LoadInteger '0'
v48 <- CallFunction v16, [v15, v47]
v49 <- BeginPlainFunction -> v50, v51, v52
    v53 <- LoadInteger '1'
    v54 <- LoadInteger '1'
    v55 <- BinaryOperation v51, '+', v54
    SetComputedProperty v50, v55, v53
    v56 <- LoadInteger '2'
    v57 <- LoadInteger '4'
    v58 <- BinaryOperation v51, '+', v57
    SetComputedProperty v50, v58, v56
    v59 <- LoadInteger '3'
    v60 <- LoadInteger '3'
    v61 <- BinaryOperation v51, '+', v60
    SetComputedProperty v50, v61, v59
    v62 <- LoadInteger '4'
    v63 <- LoadInteger '2'
    v64 <- BinaryOperation v51, '+', v63
    SetComputedProperty v50, v64, v62
    v65 <- LoadInteger '4'
    v66 <- BinaryOperation v51, '+', v65
    v67 <- LoadInteger '4'
    v68 <- BinaryOperation v51, '+', v67
    SetComputedProperty v50, v68, v66
    BeginIf v52
        v69 <- LoadInteger '1'
        v70 <- LoadInteger '1'
        v71 <- BinaryOperation v51, '+', v70
        SetComputedProperty v50, v71, v69
        v72 <- LoadInteger '2'
        v73 <- LoadInteger '2'
        v74 <- BinaryOperation v51, '+', v73
        SetComputedProperty v50, v74, v72
        v75 <- LoadInteger '3'
        v76 <- LoadInteger '2'
        v77 <- BinaryOperation v51, '+', v76
        SetComputedProperty v50, v77, v75
        v78 <- LoadInteger '4'
        v79 <- LoadInteger '2'
        v80 <- BinaryOperation v51, '+', v79
        SetComputedProperty v50, v80, v78
        v81 <- LoadInteger '4'
        v82 <- BinaryOperation v51, '+', v81
        v83 <- LoadInteger '4'
        v84 <- BinaryOperation v51, '+', v83
        SetComputedProperty v50, v84, v82
    BeginElse
        v85 <- LoadInteger '1'
        v86 <- LoadInteger '6'
        v87 <- BinaryOperation v51, '+', v86
        SetComputedProperty v50, v87, v85
        v88 <- LoadInteger '2'
        v89 <- LoadInteger '4'
        v90 <- BinaryOperation v51, '+', v89
        SetComputedProperty v50, v90, v88
        v91 <- LoadInteger '3'
        v92 <- LoadInteger '3'
        v93 <- BinaryOperation v51, '+', v92
        SetComputedProperty v50, v93, v91
        v94 <- LoadInteger '4'
        v95 <- LoadInteger '2'
        v96 <- BinaryOperation v51, '+', v95
        SetComputedProperty v50, v96, v94
        v97 <- LoadInteger '4'
        v98 <- BinaryOperation v51, '-', v97
        v99 <- LoadInteger '4'
        v100 <- BinaryOperation v51, '+', v99
        SetComputedProperty v50, v100, v98
    EndIf
EndPlainFunction
v101 <- BeginPlainFunction -> v102, v103, v104
    BeginIf v104
        v105 <- LoadInteger '1'
        v106 <- LoadInteger '1'
        v107 <- BinaryOperation v103, '+', v106
        v108 <- GetComputedProperty v102, v107
        v109 <- LoadInteger '4'
        v110 <- LoadInteger '2'
        v111 <- BinaryOperation v103, '+', v110
        v112 <- GetComputedProperty v102, v111
        v113 <- LoadInteger '4'
        v114 <- BinaryOperation v103, '+', v113
        v115 <- LoadInteger '4'
        v116 <- BinaryOperation v103, '+', v115
        v117 <- GetComputedProperty v102, v116
    BeginElse
        v118 <- LoadInteger '1'
        v119 <- LoadInteger '6'
        v120 <- BinaryOperation v103, '+', v119
        v121 <- GetComputedProperty v102, v120
        v122 <- LoadInteger '3'
        v123 <- LoadInteger '3'
        v124 <- BinaryOperation v103, '+', v123
        v125 <- GetComputedProperty v102, v124
        v126 <- LoadInteger '4'
        v127 <- LoadInteger '2'
        v128 <- BinaryOperation v103, '+', v127
        v129 <- GetComputedProperty v102, v128
        v130 <- LoadInteger '4'
        v131 <- BinaryOperation v103, '-', v130
        v132 <- LoadInteger '4'
        v133 <- BinaryOperation v103, '+', v132
        v134 <- GetComputedProperty v102, v133
    EndIf
EndPlainFunction
v135 <- LoadInteger '1'
v136 <- LoadBoolean 'true'
v137 <- CallFunction v49, [v3, v135, v136]
v138 <- LoadInteger '2'
v139 <- LoadBoolean 'true'
v140 <- CallFunction v49, [v3, v138, v139]
v141 <- LoadInteger '1'
v142 <- LoadBoolean 'false'
v143 <- CallFunction v49, [v3, v141, v142]
v144 <- LoadInteger '2'
v145 <- LoadBoolean 'false'
v146 <- CallFunction v49, [v3, v144, v145]
v147 <- LoadInteger '3'
v148 <- LoadBoolean 'true'
v149 <- CallFunction v49, [v3, v147, v148]
v150 <- LoadInteger '3'
v151 <- LoadBoolean 'true'
v152 <- CallFunction v101, [v3, v150, v151]
v153 <- LoadInteger '3'
v154 <- LoadBoolean 'false'
v155 <- CallFunction v49, [v3, v153, v154]
v156 <- LoadInteger '3'
v157 <- LoadBoolean 'false'
v158 <- CallFunction v101, [v3, v156, v157]
v159 <- LoadInteger '128'
v160 <- Construct v0, [v159]
v161 <- CreateNamedVariable 'dictionary_map_array', 'var', v160
v162 <- LoadInteger '5'
v163 <- LoadBoolean 'true'
v164 <- CallFunction v49, [v161, v162, v163]
v165 <- LoadInteger '6'
v166 <- LoadBoolean 'true'
v167 <- CallFunction v49, [v161, v165, v166]
v168 <- LoadInteger '5'
v169 <- LoadBoolean 'false'
v170 <- CallFunction v49, [v161, v168, v169]
v171 <- LoadInteger '6'
v172 <- LoadBoolean 'false'
v173 <- CallFunction v49, [v161, v171, v172]
v174 <- LoadInteger '2'
v175 <- UnaryOperation '-', v174
v176 <- LoadBoolean 'true'
v177 <- CallFunction v49, [v161, v175, v176]
v178 <- CallFunction v49, []
v179 <- LoadInteger '5'
v180 <- LoadBoolean 'true'
v181 <- CallFunction v49, [v3, v179, v180]
v182 <- LoadInteger '6'
v183 <- LoadBoolean 'true'
v184 <- CallFunction v49, [v3, v182, v183]
v185 <- LoadInteger '5'
v186 <- LoadBoolean 'false'
v187 <- CallFunction v49, [v3, v185, v186]
v188 <- LoadInteger '6'
v189 <- LoadBoolean 'false'
v190 <- CallFunction v49, [v3, v188, v189]
v191 <- LoadInteger '2048'
v192 <- LoadBoolean 'true'
v193 <- CallFunction v49, [v3, v191, v192]
v194 <- CallFunction v49, []
v195 <- BeginPlainFunction -> v196, v197
    v198 <- LoadInteger '1'
    v199 <- LoadInteger '1'
    v200 <- BinaryOperation v196, '-', v199
    SetComputedProperty v3, v200, v198
    v201 <- LoadInteger '2'
    v202 <- LoadInteger '2'
    v203 <- BinaryOperation v196, '-', v202
    SetComputedProperty v3, v203, v201
    v204 <- LoadInteger '3'
    v205 <- LoadInteger '4'
    v206 <- BinaryOperation v196, '+', v205
    SetComputedProperty v3, v206, v204
    v207 <- LoadInteger '4'
    SetComputedProperty v3, v196, v207
    v208 <- LoadInteger '4'
    v209 <- BinaryOperation v196, '+', v208
    v210 <- LoadInteger '4'
    v211 <- BinaryOperation v196, '+', v210
    SetComputedProperty v3, v211, v209
    BeginIf v197
        v212 <- LoadInteger '1'
        v213 <- LoadInteger '4'
        v214 <- BinaryOperation v196, '-', v213
        SetComputedProperty v3, v214, v212
        v215 <- LoadInteger '2'
        v216 <- LoadInteger '5'
        v217 <- BinaryOperation v196, '+', v216
        SetComputedProperty v3, v217, v215
        v218 <- LoadInteger '3'
        v219 <- LoadInteger '3'
        v220 <- BinaryOperation v196, '+', v219
        SetComputedProperty v3, v220, v218
        v221 <- LoadInteger '4'
        v222 <- LoadInteger '2'
        v223 <- BinaryOperation v196, '+', v222
        SetComputedProperty v3, v223, v221
        v224 <- LoadInteger '4'
        v225 <- BinaryOperation v196, '+', v224
        v226 <- LoadInteger '4'
        v227 <- BinaryOperation v196, '+', v226
        SetComputedProperty v3, v227, v225
    BeginElse
        v228 <- LoadInteger '1'
        v229 <- LoadInteger '6'
        v230 <- BinaryOperation v196, '+', v229
        SetComputedProperty v3, v230, v228
        v231 <- LoadInteger '2'
        v232 <- LoadInteger '4'
        v233 <- BinaryOperation v196, '+', v232
        SetComputedProperty v3, v233, v231
        v234 <- LoadInteger '3'
        v235 <- LoadInteger '3'
        v236 <- BinaryOperation v196, '+', v235
        SetComputedProperty v3, v236, v234
        v237 <- LoadInteger '4'
        v238 <- LoadInteger '2'
        v239 <- BinaryOperation v196, '+', v238
        SetComputedProperty v3, v239, v237
        v240 <- LoadInteger '4'
        v241 <- BinaryOperation v196, '-', v240
        v242 <- LoadInteger '4'
        v243 <- BinaryOperation v196, '+', v242
        SetComputedProperty v3, v243, v241
    EndIf
EndPlainFunction
v244 <- BeginPlainFunction -> v245, v246
    BeginIf v246
        v247 <- LoadInteger '2'
        v248 <- LoadInteger '5'
        v249 <- BinaryOperation v245, '+', v248
        v250 <- GetComputedProperty v3, v249
        v251 <- LoadInteger '3'
        v252 <- LoadInteger '3'
        v253 <- BinaryOperation v245, '+', v252
        v254 <- GetComputedProperty v3, v253
        v255 <- LoadInteger '4'
        v256 <- LoadInteger '2'
        v257 <- BinaryOperation v245, '+', v256
        v258 <- GetComputedProperty v3, v257
        v259 <- LoadInteger '4'
        v260 <- BinaryOperation v245, '+', v259
        v261 <- LoadInteger '4'
        v262 <- BinaryOperation v245, '+', v261
        v263 <- GetComputedProperty v3, v262
    BeginElse
        v264 <- LoadInteger '1'
        v265 <- LoadInteger '6'
        v266 <- BinaryOperation v245, '+', v265
        v267 <- GetComputedProperty v3, v266
        v268 <- LoadInteger '3'
        v269 <- LoadInteger '3'
        v270 <- BinaryOperation v245, '+', v269
        v271 <- GetComputedProperty v3, v270
        v272 <- LoadInteger '4'
        v273 <- LoadInteger '2'
        v274 <- BinaryOperation v245, '+', v273
        v275 <- GetComputedProperty v3, v274
        v276 <- LoadInteger '4'
        v277 <- BinaryOperation v245, '-', v276
        v278 <- LoadInteger '4'
        v279 <- BinaryOperation v245, '+', v278
        v280 <- GetComputedProperty v3, v279
    EndIf
EndPlainFunction
v281 <- LoadInteger '5'
v282 <- LoadBoolean 'true'
v283 <- CallFunction v195, [v281, v282]
v284 <- LoadInteger '6'
v285 <- LoadBoolean 'true'
v286 <- CallFunction v195, [v284, v285]
v287 <- LoadInteger '7'
v288 <- LoadBoolean 'true'
v289 <- CallFunction v195, [v287, v288]
v290 <- LoadInteger '7'
v291 <- LoadBoolean 'true'
v292 <- CallFunction v244, [v290, v291]
v293 <- LoadInteger '7'
v294 <- LoadBoolean 'false'
v295 <- CallFunction v195, [v293, v294]
v296 <- LoadInteger '7'
v297 <- LoadBoolean 'false'
v298 <- CallFunction v244, [v296, v297]
v299 <- CreateNamedVariable 'Array', 'none'
v300 <- LoadInteger '100'
v301 <- Construct v299, [v300]
v302 <- CreateNamedVariable 'short_a', 'var', v301
BeginForLoopInitializer
    v303 <- LoadInteger '0'
BeginForLoopCondition -> v304
    v305 <- GetProperty v302, 'length'
    v306 <- Compare v304, '<', v305
BeginForLoopAfterthought v306 -> v307
    v308 <- UnaryOperation v307, '++'
BeginForLoopBody -> v309
    v310 <- LoadInteger '0'
    SetComputedProperty v302, v309, v310
EndForLoop
v311 <- BeginPlainFunction -> v312, v313
    v314 <- LoadInteger '0'
    v315 <- LoadInteger '9'
    v316 <- BinaryOperation v313, '+', v315
    SetComputedProperty v312, v316, v314
    v317 <- LoadInteger '0'
    v318 <- LoadInteger '10'
    v319 <- BinaryOperation v313, '-', v318
    SetComputedProperty v312, v319, v317
EndPlainFunction
v320 <- LoadInteger '50'
v321 <- CallFunction v311, [v302, v320]
v322 <- LoadInteger '50'
v323 <- CallFunction v311, [v302, v322]
v324 <- LoadInteger '10'
SetProperty v302, 'length', v324
v325 <- LoadInteger '0'
v326 <- CallFunction v311, [v302, v325]
v327 <- CallFunction v49, []
v328 <- LoadInteger '0'
v329 <- LoadInteger '1'
v330 <- LoadInteger '2'
v331 <- LoadInteger '3'
v332 <- LoadInteger '4'
v333 <- LoadInteger '5'
v334 <- LoadInteger '6'
v335 <- LoadInteger '7'
v336 <- LoadInteger '8'
v337 <- CreateArray [v328, v329, v330, v331, v332, v333, v334, v335, v336]
v338 <- CreateNamedVariable 'data_phi', 'var', v337
v339 <- BeginPlainFunction -> v340, v341, v342
    v343 <- LoadUndefined
    v344 <- CreateNamedVariable 'index', 'var', v343
    BeginIf v342
        v345 <- LoadInteger '1'
        v346 <- BinaryOperation v341, '+', v345
        Reassign v344, v346
    BeginElse
        v347 <- LoadInteger '2'
        v348 <- BinaryOperation v341, '+', v347
        Reassign v344, v348
    EndIf
    v349 <- GetComputedProperty v340, v344
    v350 <- CreateNamedVariable 'result', 'var', v349
    v351 <- LoadInteger '1'
    v352 <- BinaryOperation v344, '+', v351
    v353 <- GetComputedProperty v340, v352
    Update v350, '+', v353
    v354 <- LoadInteger '1'
    v355 <- BinaryOperation v344, '-', v354
    v356 <- GetComputedProperty v340, v355
    Update v350, '+', v356
    Return v350
EndPlainFunction
v357 <- LoadInteger '0'
v358 <- CreateNamedVariable 'result_phi', 'var', v357
v359 <- LoadInteger '3'
v360 <- LoadBoolean 'true'
v361 <- CallFunction v339, [v338, v359, v360]
Reassign v358, v361
v362 <- LoadInteger '12'
v363 <- LoadInteger '3'
v364 <- LoadBoolean 'true'
v365 <- CallFunction v339, [v338, v363, v364]
Reassign v358, v365
v366 <- LoadInteger '12'
v367 <- LoadInteger '3'
v368 <- LoadBoolean 'true'
v369 <- CallFunction v339, [v338, v367, v368]
Reassign v358, v369
v370 <- LoadInteger '12'
v371 <- LoadInteger '0'
v372 <- LoadInteger '1'
v373 <- LoadInteger '2'
v374 <- LoadInteger '3'
v375 <- LoadInteger '4'
v376 <- LoadInteger '5'
v377 <- LoadInteger '6'
v378 <- LoadInteger '7'
v379 <- LoadInteger '8'
v380 <- CreateArray [v371, v372, v373, v374, v375, v376, v377, v378, v379]
v381 <- CreateNamedVariable 'data_composition_long', 'var', v380
v382 <- LoadInteger '0'
v383 <- LoadInteger '1'
v384 <- LoadInteger '2'
v385 <- LoadInteger '3'
v386 <- LoadInteger '4'
v387 <- CreateArray [v382, v383, v384, v385, v386]
v388 <- CreateNamedVariable 'data_composition_short', 'var', v387
v389 <- BeginPlainFunction -> v390, v391, v392
    v393 <- LoadInteger '2'
    v394 <- BinaryOperation v391, '+', v393
    v395 <- CreateNamedVariable 'base1', 'var', v394
    v396 <- LoadInteger '8'
    v397 <- BinaryOperation v395, '+', v396
    v398 <- LoadInteger '2'
    v399 <- BinaryOperation v397, '>>', v398
    v400 <- CreateNamedVariable 'base2', 'var', v399
    v401 <- LoadInteger '6'
    v402 <- BinaryOperation v400, '+', v401
    v403 <- LoadInteger '1'
    v404 <- BinaryOperation v402, '>>', v403
    v405 <- CreateNamedVariable 'base3', 'var', v404
    v406 <- LoadInteger '8'
    v407 <- BinaryOperation v405, '+', v406
    v408 <- LoadInteger '1'
    v409 <- BinaryOperation v407, '>>', v408
    v410 <- CreateNamedVariable 'base4', 'var', v409
    v411 <- LoadInteger '0'
    v412 <- CreateNamedVariable 'result', 'var', v411
    v413 <- GetComputedProperty v390, v391
    Update v412, '+', v413
    v414 <- GetComputedProperty v390, v395
    Update v412, '+', v414
    v415 <- GetComputedProperty v390, v400
    Update v412, '+', v415
    v416 <- GetComputedProperty v390, v405
    Update v412, '+', v416
    v417 <- GetComputedProperty v390, v410
    Update v412, '+', v417
    Return v412
EndPlainFunction
v418 <- LoadInteger '0'
v419 <- CreateNamedVariable 'result_composition', 'var', v418
v420 <- LoadInteger '2'
v421 <- CallFunction v389, [v381, v420]
Reassign v419, v421
v422 <- LoadInteger '19'
v423 <- LoadInteger '2'
v424 <- CallFunction v389, [v381, v423]
Reassign v419, v424
v425 <- LoadInteger '19'
v426 <- LoadInteger '2'
v427 <- CallFunction v389, [v388, v426]
Reassign v419, v427
v428 <- CreateNamedVariable 'NaN', 'none'
v429 <- CreateNamedVariable 'gc', 'none'
v430 <- CallFunction v429, []


const v2 = new Int32Array(1024);
var a = v2;
var v = [0,1,2,3,4,5,6,7,8,9];
function test_do_not_assert_on_non_int32(a17, a18) {
    var r = 0;
    var a1 = a18 + 1;
    var a2 = a18 + 2;
    var a3 = a18 + 3;
    var a4 = a18 + 4;
    if (a1 == 2) {
        r += a17[a1];
        r += a17[a4];
        r += a17[a2];
        r += a17[a3];
    }
    return r;
}
test_do_not_assert_on_non_int32(v, 1);
test_do_not_assert_on_non_int32(v, 1);
test_do_not_assert_on_non_int32(v, "a");
test_do_not_assert_on_non_int32(v, "a");
test_do_not_assert_on_non_int32(v, 0);
function test_base(a50, a51, a52) {
    a50[a51 + 1] = 1;
    a50[a51 + 4] = 2;
    a50[a51 + 3] = 3;
    a50[a51 + 2] = 4;
    const v66 = a51 + 4;
    a50[a51 + 4] = v66;
    if (a52) {
        a50[a51 + 1] = 1;
        a50[a51 + 2] = 2;
        a50[a51 + 2] = 3;
        a50[a51 + 2] = 4;
        const v82 = a51 + 4;
        a50[a51 + 4] = v82;
    } else {
        a50[a51 + 6] = 1;
        a50[a51 + 4] = 2;
        a50[a51 + 3] = 3;
        a50[a51 + 2] = 4;
        const v98 = a51 - 4;
        a50[a51 + 4] = v98;
    }
}
function check_test_base(a102, a103, a104) {
    if (a104) {
        a102[a103 + 1];
        a102[a103 + 2];
        a103 + 4;
        a102[a103 + 4];
    } else {
        a102[a103 + 6];
        a102[a103 + 3];
        a102[a103 + 2];
        a103 - 4;
        a102[a103 + 4];
    }
}
test_base(a, 1, true);
test_base(a, 2, true);
test_base(a, 1, false);
test_base(a, 2, false);
test_base(a, 3, true);
check_test_base(a, 3, true);
test_base(a, 3, false);
check_test_base(a, 3, false);
const v160 = new Int32Array(128);
var dictionary_map_array = v160;
test_base(dictionary_map_array, 5, true);
test_base(dictionary_map_array, 6, true);
test_base(dictionary_map_array, 5, false);
test_base(dictionary_map_array, 6, false);
test_base(dictionary_map_array, -2, true);
test_base();
test_base(a, 5, true);
test_base(a, 6, true);
test_base(a, 5, false);
test_base(a, 6, false);
test_base(a, 2048, true);
test_base();
function test_minus(a196, a197) {
    a[a196 - 1] = 1;
    a[a196 - 2] = 2;
    a[a196 + 4] = 3;
    a[a196] = 4;
    const v209 = a196 + 4;
    a[a196 + 4] = v209;
    if (a197) {
        a[a196 - 4] = 1;
        a[a196 + 5] = 2;
        a[a196 + 3] = 3;
        a[a196 + 2] = 4;
        const v225 = a196 + 4;
        a[a196 + 4] = v225;
    } else {
        a[a196 + 6] = 1;
        a[a196 + 4] = 2;
        a[a196 + 3] = 3;
        a[a196 + 2] = 4;
        const v241 = a196 - 4;
        a[a196 + 4] = v241;
    }
}
function check_test_minus(a245, a246) {
    if (a246) {
        a[a245 + 5];
        a[a245 + 3];
        a[a245 + 2];
        a245 + 4;
        a[a245 + 4];
    } else {
        a[a245 + 6];
        a[a245 + 3];
        a[a245 + 2];
        a245 - 4;
        a[a245 + 4];
    }
}
test_minus(5, true);
test_minus(6, true);
test_minus(7, true);
check_test_minus(7, true);
test_minus(7, false);
check_test_minus(7, false);
const v301 = new Array(100);
var short_a = v301;
for (let i304 = 0; i304 < short_a.length; i304++) {
    short_a[i304] = 0;
}
function short_test(a312, a313) {
    a312[a313 + 9] = 0;
    a312[a313 - 10] = 0;
}
short_test(short_a, 50);
short_test(short_a, 50);
short_a.length = 10;
short_test(short_a, 0);
test_base();
var data_phi = [0,1,2,3,4,5,6,7,8];
function test_phi(a340, a341, a342) {
    var index;
    if (a342) {
        index = a341 + 1;
    } else {
        index = a341 + 2;
    }
    var result = a340[index];
    result += a340[index + 1];
    result += a340[index - 1];
    return result;
}
var result_phi = 0;
result_phi = test_phi(data_phi, 3, true);
result_phi = test_phi(data_phi, 3, true);
result_phi = test_phi(data_phi, 3, true);
var data_composition_long = [0,1,2,3,4,5,6,7,8];
var data_composition_short = [0,1,2,3,4];
function test_composition(a390, a391, a392) {
    var base1 = a391 + 2;
    var base2 = (base1 + 8) >> 2;
    var base3 = (base2 + 6) >> 1;
    var base4 = (base3 + 8) >> 1;
    var result = 0;
    result += a390[a391];
    result += a390[base1];
    result += a390[base2];
    result += a390[base3];
    result += a390[base4];
    return result;
}
var result_composition = 0;
result_composition = test_composition(data_composition_long, 2);
result_composition = test_composition(data_composition_long, 2);
result_composition = test_composition(data_composition_short, 2);
gc();

FuzzIL program written to corpus/array-bounds-check-removal.fzil
