v0 <- BeginPlainFunction -> 
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v1
            v2 <- LoadString '2'
            v3 <- CreateNamedVariable 'Array', 'none'
            v4 <- GetProperty v3, 'prototype'
            SetElement v4, '1', v2
            v5 <- LoadString '1'
            Return v5
        EndObjectLiteralMethod
    v6 <- EndObjectLiteral
    v7 <- CreateNamedVariable 'el', 'const', v6
    v8 <- LoadUndefined
    v9 <- LoadInteger '3'
    v10 <- CreateArray [v7, v8, v9]
    v11 <- CreateNamedVariable 'a', 'const', v10
    v12 <- LoadString '123'
    v13 <- LoadString ''
    v14 <- CallMethod v11, 'join', [v13]
EndPlainFunction
v15 <- CallFunction v0, []


function ArrayPrototypeChanged() {
    const v6 = {
        toString() {
            const t0 = Array.prototype;
            t0[1] = "2";
            return "1";
        },
    };
    const el = v6;
    const a = [el,,3];
    a.join("");
}
ArrayPrototypeChanged();

FuzzIL program written to corpus/array-join-element-tostring-prototype-side-effects.fzil
