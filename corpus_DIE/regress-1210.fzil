v0 <- LoadInteger '0'
v1 <- CreateNamedVariable 'a', 'var', v0
v2 <- BeginPlainFunction -> v3, v4
    Return v3
EndPlainFunction
v5 <- BeginPlainFunction -> v6
    Reassign v1, v6
EndPlainFunction
v7 <- BeginPlainFunction -> 
    v8 <- LoadArguments
    v9 <- CallFunction v5, [v1]
    v10 <- LoadInteger '0'
    v11 <- BinaryOperation v1, '+', v10
    v12 <- GetComputedProperty v8, v11
    v13 <- CallFunction v2, [v1, v12]
    Return v13
EndPlainFunction
BeginForLoopInitializer
    v14 <- LoadInteger '0'
BeginForLoopCondition -> v15
    v16 <- LoadInteger '10'
    v17 <- Compare v15, '<', v16
BeginForLoopAfterthought v17 -> v18
    v19 <- UnaryOperation '++', v18
BeginForLoopBody -> v20
    v21 <- LoadInteger '0'
    v22 <- CallFunction v7, [v21]
EndForLoop
v23 <- LoadInteger '0'
v24 <- CallFunction v7, [v23]
v25 <- LoadString 'hello'
Reassign v1, v25
v26 <- LoadInteger '0'
v27 <- CallFunction v7, [v26]


var a = 0;
function observe(a3, a4) {
    return a3;
}
function side_effect(a6) {
    a = a6;
}
function test() {
    side_effect(a);
    return observe(a, arguments[a + 0]);
}
for (let i15 = 0; i15 < 10; ++i15) {
    test(0);
}
test(0);
a = "hello";
test(0);

FuzzIL program written to corpus/regress-1210.fzil
