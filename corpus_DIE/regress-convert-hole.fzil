v0 <- BeginPlainFunction -> v1, v2, v3, v4
    v5 <- LoadFloat '0.5'
    v6 <- LoadInteger '1'
    v7 <- LoadUndefined
    v8 <- LoadInteger '3'
    v9 <- CreateArray [v5, v6, v7, v8]
    v10 <- CreateNamedVariable 'o', 'var', v9
    v11 <- LoadUndefined
    v12 <- CreateNamedVariable 'd', 'var', v11
    BeginIf v1
        v13 <- LoadFloat '1.5'
        Reassign v12, v13
    BeginElse
        v14 <- GetComputedProperty v10, v4
        Reassign v12, v14
    EndIf
    BeginIf v2
        v15 <- LoadInteger '1'
        Update v12, '+', v15
    EndIf
    SetComputedProperty v3, v4, v12
    Return v12
EndPlainFunction
v16 <- LoadInteger '0'
v17 <- LoadInteger '0'
v18 <- LoadInteger '0'
BeginObjectLiteral
v19 <- EndObjectLiteral
v20 <- CreateArray [v16, v17, v18, v19]
v21 <- CreateNamedVariable 'a1', 'var', v20
v22 <- LoadBoolean 'true'
v23 <- LoadBoolean 'false'
v24 <- LoadInteger '0'
v25 <- CallFunction v0, [v22, v23, v21, v24]
v26 <- LoadBoolean 'true'
v27 <- LoadBoolean 'true'
v28 <- LoadInteger '0'
v29 <- CallFunction v0, [v26, v27, v21, v28]
v30 <- LoadBoolean 'false'
v31 <- LoadBoolean 'false'
v32 <- LoadInteger '1'
v33 <- CallFunction v0, [v30, v31, v21, v32]
v34 <- LoadBoolean 'false'
v35 <- LoadBoolean 'true'
v36 <- LoadInteger '1'
v37 <- CallFunction v0, [v34, v35, v21, v36]
v38 <- LoadBoolean 'false'
v39 <- LoadBoolean 'false'
v40 <- LoadInteger '2'
v41 <- CallFunction v0, [v38, v39, v21, v40]
v42 <- LoadUndefined
v43 <- GetElement v21, '2'
v44 <- BeginPlainFunction -> v45
    v46 <- BeginPlainFunction -> v47
    EndPlainFunction
    Return v46
EndPlainFunction
v48 <- BeginPlainFunction -> v49, v50, v51, v52
    v53 <- LoadFloat '0.5'
    v54 <- LoadInteger '1'
    v55 <- LoadUndefined
    v56 <- LoadInteger '3'
    v57 <- CreateArray [v53, v54, v55, v56]
    v58 <- CreateNamedVariable 'o', 'var', v57
    v59 <- LoadUndefined
    v60 <- CreateNamedVariable 'd', 'var', v59
    BeginIf v50
        v61 <- LoadFloat '1.5'
        Reassign v60, v61
    BeginElse
        v62 <- GetComputedProperty v58, v52
        Reassign v60, v62
    EndIf
    BeginIf v51
        v63 <- LoadInteger '1'
        Update v60, '+', v63
    EndIf
    v64 <- CallFunction v49, [v60]
    Return v60
EndPlainFunction
v65 <- LoadFloat '1.5'
v66 <- CallFunction v44, [v65]
v67 <- LoadBoolean 'true'
v68 <- LoadBoolean 'false'
v69 <- LoadInteger '0'
v70 <- CallFunction v48, [v66, v67, v68, v69]
v71 <- LoadFloat '2.5'
v72 <- CallFunction v44, [v71]
v73 <- LoadBoolean 'true'
v74 <- LoadBoolean 'true'
v75 <- LoadInteger '0'
v76 <- CallFunction v48, [v72, v73, v74, v75]
v77 <- LoadInteger '1'
v78 <- CallFunction v44, [v77]
v79 <- LoadBoolean 'false'
v80 <- LoadBoolean 'false'
v81 <- LoadInteger '1'
v82 <- CallFunction v48, [v78, v79, v80, v81]
v83 <- LoadInteger '2'
v84 <- CallFunction v44, [v83]
v85 <- LoadBoolean 'false'
v86 <- LoadBoolean 'true'
v87 <- LoadInteger '1'
v88 <- CallFunction v48, [v84, v85, v86, v87]
v89 <- LoadUndefined
v90 <- CallFunction v44, [v89]
v91 <- LoadBoolean 'false'
v92 <- LoadBoolean 'false'
v93 <- LoadInteger '2'
v94 <- CallFunction v48, [v90, v91, v92, v93]
v95 <- BeginPlainFunction -> v96, v97, v98, v99, v100
    v101 <- LoadFloat '0.5'
    v102 <- LoadInteger '1'
    v103 <- LoadUndefined
    v104 <- LoadInteger '3'
    v105 <- CreateArray [v101, v102, v103, v104]
    v106 <- CreateNamedVariable 'o', 'var', v105
    v107 <- LoadUndefined
    v108 <- CreateNamedVariable 'd', 'var', v107
    BeginIf v96
        v109 <- LoadFloat '1.5'
        Reassign v108, v109
    BeginElse
        v110 <- GetComputedProperty v106, v100
        Reassign v108, v110
    EndIf
    BeginIf v97
        v111 <- LoadInteger '1'
        Update v108, '+', v111
    EndIf
    BeginIf v98
        v112 <- LoadInteger '0'
        v113 <- BinaryOperation v108, '|', v112
        Reassign v108, v113
    EndIf
    v114 <- LoadInteger '1'
    SetComputedProperty v99, v108, v114
    v115 <- LoadInteger '1'
    v116 <- GetComputedProperty v99, v108
    Return v108
EndPlainFunction
v117 <- CreateNamedVariable 'Int32Array', 'none'
v118 <- LoadInteger '10'
v119 <- Construct v117, [v118]
v120 <- CreateNamedVariable 'a2', 'var', v119
v121 <- LoadBoolean 'true'
v122 <- LoadBoolean 'false'
v123 <- LoadBoolean 'true'
v124 <- LoadInteger '0'
v125 <- CallFunction v95, [v121, v122, v123, v120, v124]
v126 <- LoadBoolean 'true'
v127 <- LoadBoolean 'true'
v128 <- LoadBoolean 'true'
v129 <- LoadInteger '0'
v130 <- CallFunction v95, [v126, v127, v128, v120, v129]
v131 <- LoadBoolean 'false'
v132 <- LoadBoolean 'false'
v133 <- LoadBoolean 'true'
v134 <- LoadInteger '1'
v135 <- CallFunction v95, [v131, v132, v133, v120, v134]
v136 <- LoadBoolean 'false'
v137 <- LoadBoolean 'true'
v138 <- LoadBoolean 'true'
v139 <- LoadInteger '1'
v140 <- CallFunction v95, [v136, v137, v138, v120, v139]
v141 <- LoadBoolean 'false'
v142 <- LoadBoolean 'false'
v143 <- LoadBoolean 'false'
v144 <- LoadInteger '2'
v145 <- CallFunction v95, [v141, v142, v143, v120, v144]
v146 <- LoadInteger '1'
v147 <- LoadUndefined
v148 <- GetComputedProperty v120, v147


function f_store(a1, a2, a3, a4) {
    var o = [0.5,1,,3];
    var d;
    if (a1) {
        d = 1.5;
    } else {
        d = o[a4];
    }
    if (a2) {
        d += 1;
    }
    a3[a4] = d;
    return d;
}
var a1 = [0,0,0,{}];
f_store(true, false, a1, 0);
f_store(true, true, a1, 0);
f_store(false, false, a1, 1);
f_store(false, true, a1, 1);
f_store(false, false, a1, 2);
a1[2];
function test_arg(a45) {
    function f46(a47) {
    }
    return f46;
}
function f_call(a49, a50, a51, a52) {
    var o = [0.5,1,,3];
    var d;
    if (a50) {
        d = 1.5;
    } else {
        d = o[a52];
    }
    if (a51) {
        d += 1;
    }
    a49(d);
    return d;
}
f_call(test_arg(1.5), true, false, 0);
f_call(test_arg(2.5), true, true, 0);
f_call(test_arg(1), false, false, 1);
f_call(test_arg(2), false, true, 1);
f_call(test_arg(undefined), false, false, 2);
function f_external(a96, a97, a98, a99, a100) {
    var o = [0.5,1,,3];
    var d;
    if (a96) {
        d = 1.5;
    } else {
        d = o[a100];
    }
    if (a97) {
        d += 1;
    }
    if (a98) {
        d = d | 0;
    }
    a99[d] = 1;
    a99[d];
    return d;
}
const v119 = new Int32Array(10);
var a2 = v119;
f_external(true, false, true, a2, 0);
f_external(true, true, true, a2, 0);
f_external(false, false, true, a2, 1);
f_external(false, true, true, a2, 1);
f_external(false, false, false, a2, 2);
a2[undefined];

FuzzIL program written to corpus/regress-convert-hole.fzil
