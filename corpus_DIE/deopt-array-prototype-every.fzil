v0 <- BeginPlainFunction -> 
    v1 <- LoadUndefined
    v2 <- CreateArray [v1]
    v3 <- CreateNamedVariable 'array', 'var', v2
    v4 <- BeginPlainFunction -> 
        v5 <- BeginArrowFunction -> v6
            v7 <- LoadInteger '0'
            v8 <- Compare v6, '>', v7
            Return v8
        EndArrowFunction
        v9 <- CallMethod v3, 'every', [v5]
        Return v9
    EndPlainFunction
    v10 <- CallFunction v4, []
    v11 <- CallFunction v4, []
    v12 <- CallFunction v4, []
    v13 <- LoadBoolean 'true'
    v14 <- LoadInteger '6'
    v15 <- UnaryOperation '-', v14
    v16 <- GetProperty v3, '__proto__'
    v17 <- CallMethod v16, 'push', [v15]
    v18 <- CallFunction v4, []
    v19 <- LoadBoolean 'false'
EndPlainFunction
v20 <- CallFunction v0, []


function f0() {
    var array = [,];
    function every() {
        const v5 = (a6) => {
            return a6 > 0;
        };
        return array.every(v5);
    }
    every();
    every();
    every();
    const v15 = -6;
    array.__proto__.push(v15);
    every();
}
f0();

FuzzIL program written to corpus/deopt-array-prototype-every.fzil
