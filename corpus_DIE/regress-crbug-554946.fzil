v0 <- CreateArray []
v1 <- CreateNamedVariable 'array', 'var', v0
v2 <- BeginPlainFunction -> 
    v3 <- LoadInteger '1'
    SetProperty v1, 'length', v3
    v4 <- LoadString 'funky'
    Return v4
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toJSON`, v2
v5 <- EndObjectLiteral
v6 <- CreateNamedVariable 'funky', 'var', v5
BeginForLoopInitializer
    v7 <- LoadInteger '0'
BeginForLoopCondition -> v8
    v9 <- LoadInteger '10'
    v10 <- Compare v8, '<', v9
BeginForLoopAfterthought v10 -> v11
    v12 <- UnaryOperation v11, '++'
BeginForLoopBody -> v13
    SetComputedProperty v1, v13, v13
EndForLoop
SetElement v1, '0', v6
v14 <- LoadString '["funky",null,null,null,null,null,null,null,null,null]'
v15 <- CreateNamedVariable 'JSON', 'none'
v16 <- CallMethod v15, 'stringify', [v1]
v17 <- CreateArray []
Reassign v1, v17
BeginObjectLiteral
    BeginObjectLiteralGetter `value` -> v18
        v19 <- LoadInteger '1'
        SetProperty v1, 'length', v19
        v20 <- LoadString 'funky'
        Return v20
    EndObjectLiteralGetter
v21 <- EndObjectLiteral
Reassign v6, v21
BeginForLoopInitializer
    v22 <- LoadInteger '0'
BeginForLoopCondition -> v23
    v24 <- LoadInteger '10'
    v25 <- Compare v23, '<', v24
BeginForLoopAfterthought v25 -> v26
    v27 <- UnaryOperation v26, '++'
BeginForLoopBody -> v28
    SetComputedProperty v1, v28, v28
EndForLoop
SetElement v1, '3', v6
v29 <- LoadString '[0,1,2,{"value":"funky"},null,null,null,null,null,null]'
v30 <- CallMethod v15, 'stringify', [v1]
v31 <- CreateArray []
Reassign v1, v31
BeginObjectLiteral
    BeginObjectLiteralGetter `value` -> v32
        v33 <- CallMethod v1, 'pop', []
        v34 <- LoadString 'funky'
        Return v34
    EndObjectLiteralGetter
v35 <- EndObjectLiteral
Reassign v6, v35
BeginForLoopInitializer
    v36 <- LoadInteger '0'
BeginForLoopCondition -> v37
    v38 <- LoadInteger '10'
    v39 <- Compare v37, '<', v38
BeginForLoopAfterthought v39 -> v40
    v41 <- UnaryOperation v40, '++'
BeginForLoopBody -> v42
    SetComputedProperty v1, v42, v42
EndForLoop
SetElement v1, '3', v6
v43 <- LoadString '[0,1,2,{"value":"funky"},4,5,6,7,8,null]'
v44 <- CallMethod v15, 'stringify', [v1]
v45 <- CreateArray []
Reassign v1, v45
BeginObjectLiteral
    BeginObjectLiteralGetter `value` -> v46
        v47 <- LoadInteger '9'
        v48 <- DeleteElement v1, '9'
        v49 <- LoadString 'funky'
        Return v49
    EndObjectLiteralGetter
v50 <- EndObjectLiteral
Reassign v6, v50
BeginForLoopInitializer
    v51 <- LoadInteger '0'
BeginForLoopCondition -> v52
    v53 <- LoadInteger '10'
    v54 <- Compare v52, '<', v53
BeginForLoopAfterthought v54 -> v55
    v56 <- UnaryOperation v55, '++'
BeginForLoopBody -> v57
    SetComputedProperty v1, v57, v57
EndForLoop
SetElement v1, '3', v6
v58 <- LoadString '[0,1,2,{"value":"funky"},4,5,6,7,8,null]'
v59 <- CallMethod v15, 'stringify', [v1]
v60 <- CreateArray []
Reassign v1, v60
BeginObjectLiteral
    BeginObjectLiteralGetter `value` -> v61
        v62 <- LoadInteger '6'
        v63 <- DeleteElement v1, '6'
        v64 <- LoadString 'funky'
        Return v64
    EndObjectLiteralGetter
v65 <- EndObjectLiteral
Reassign v6, v65
BeginForLoopInitializer
    v66 <- LoadInteger '0'
BeginForLoopCondition -> v67
    v68 <- LoadInteger '10'
    v69 <- Compare v67, '<', v68
BeginForLoopAfterthought v69 -> v70
    v71 <- UnaryOperation v70, '++'
BeginForLoopBody -> v72
    SetComputedProperty v1, v72, v72
EndForLoop
SetElement v1, '3', v6
v73 <- LoadString '[0,1,2,{"value":"funky"},4,5,null,7,8,9]'
v74 <- CallMethod v15, 'stringify', [v1]
v75 <- CreateArray []
Reassign v1, v75
BeginObjectLiteral
    BeginObjectLiteralGetter `value` -> v76
        v77 <- LoadInteger '12'
        SetElement v1, '12', v77
        v78 <- LoadString 'funky'
        Return v78
    EndObjectLiteralGetter
v79 <- EndObjectLiteral
Reassign v6, v79
BeginForLoopInitializer
    v80 <- LoadInteger '0'
BeginForLoopCondition -> v81
    v82 <- LoadInteger '10'
    v83 <- Compare v81, '<', v82
BeginForLoopAfterthought v83 -> v84
    v85 <- UnaryOperation v84, '++'
BeginForLoopBody -> v86
    SetComputedProperty v1, v86, v86
EndForLoop
SetElement v1, '3', v6
v87 <- LoadString '[0,1,2,{"value":"funky"},4,5,6,7,8,9]'
v88 <- CallMethod v15, 'stringify', [v1]
v89 <- CreateArray []
Reassign v1, v89
BeginObjectLiteral
    BeginObjectLiteralGetter `value` -> v90
        v91 <- LoadInteger '12'
        SetElement v1, '10000000', v91
        v92 <- LoadString 'funky'
        Return v92
    EndObjectLiteralGetter
v93 <- EndObjectLiteral
Reassign v6, v93
BeginForLoopInitializer
    v94 <- LoadInteger '0'
BeginForLoopCondition -> v95
    v96 <- LoadInteger '10'
    v97 <- Compare v95, '<', v96
BeginForLoopAfterthought v97 -> v98
    v99 <- UnaryOperation v98, '++'
BeginForLoopBody -> v100
    SetComputedProperty v1, v100, v100
EndForLoop
SetElement v1, '3', v6
v101 <- LoadString '[0,1,2,{"value":"funky"},4,5,6,7,8,9]'
v102 <- CallMethod v15, 'stringify', [v1]


var array = [];
function f2() {
    array.length = 1;
    return "funky";
}
var funky = { toJSON: f2 };
for (let i8 = 0; i8 < 10; i8++) {
    array[i8] = i8;
}
array[0] = funky;
JSON.stringify(array);
array = [];
const v21 = {
    get value() {
        array.length = 1;
        return "funky";
    },
};
funky = v21;
for (let i23 = 0; i23 < 10; i23++) {
    array[i23] = i23;
}
array[3] = funky;
JSON.stringify(array);
array = [];
const v35 = {
    get value() {
        array.pop();
        return "funky";
    },
};
funky = v35;
for (let i37 = 0; i37 < 10; i37++) {
    array[i37] = i37;
}
array[3] = funky;
JSON.stringify(array);
array = [];
const v50 = {
    get value() {
        delete array[9];
        return "funky";
    },
};
funky = v50;
for (let i52 = 0; i52 < 10; i52++) {
    array[i52] = i52;
}
array[3] = funky;
JSON.stringify(array);
array = [];
const v65 = {
    get value() {
        delete array[6];
        return "funky";
    },
};
funky = v65;
for (let i67 = 0; i67 < 10; i67++) {
    array[i67] = i67;
}
array[3] = funky;
JSON.stringify(array);
array = [];
const v79 = {
    get value() {
        array[12] = 12;
        return "funky";
    },
};
funky = v79;
for (let i81 = 0; i81 < 10; i81++) {
    array[i81] = i81;
}
array[3] = funky;
JSON.stringify(array);
array = [];
const v93 = {
    get value() {
        array[10000000] = 12;
        return "funky";
    },
};
funky = v93;
for (let i95 = 0; i95 < 10; i95++) {
    array[i95] = i95;
}
array[3] = funky;
JSON.stringify(array);

FuzzIL program written to corpus/regress-crbug-554946.fzil
