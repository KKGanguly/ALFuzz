v0 <- CreateNamedVariable 'BigInt64Array', 'none'
v1 <- LoadInteger '8'
v2 <- Construct v0, [v1]
v3 <- CreateNamedVariable 'intarray', 'var', v2
v4 <- CreateNamedVariable 'BigUint64Array', 'none'
v5 <- LoadInteger '8'
v6 <- Construct v4, [v5]
v7 <- CreateNamedVariable 'uintarray', 'var', v6
v8 <- BeginPlainFunction -> v9
    v10 <- CallFunction v9, []
    v11 <- CallFunction v9, []
    v12 <- CallFunction v9, []
    v13 <- CallFunction v9, []
EndPlainFunction
v14 <- BeginPlainFunction -> v15
    v16 <- BeginArrowFunction -> 
        v17 <- CallFunction v15, [v0]
        Return v17
    EndArrowFunction
    v18 <- CallFunction v8, [v16]
    v19 <- BeginArrowFunction -> 
        v20 <- CallFunction v15, [v4]
        Return v20
    EndArrowFunction
    v21 <- CallFunction v8, [v19]
EndPlainFunction
v22 <- BeginPlainFunction -> 
    v23 <- LoadInteger '0'
    v24 <- CreateNamedVariable 'x', 'const', v23
    SetElement v3, '0', v24
    v25 <- GetElement v3, '0'
    SetElement v7, '0', v24
    v26 <- GetElement v7, '0'
    v27 <- LoadInteger '8526495043095934976'
    v28 <- UnaryOperation '-', v27
    v29 <- CreateNamedVariable 'y', 'const', v28
    SetElement v3, '0', v29
    v30 <- GetElement v3, '0'
EndPlainFunction
v31 <- CallFunction v8, [v22]
v32 <- BeginPlainFunction -> 
    v33 <- LoadInteger '0'
    v34 <- LoadInteger '0'
    v35 <- UnaryOperation '-', v34
    v36 <- BeginArrowFunction -> 
        v37 <- LoadInteger '0'
        Return v37
    EndArrowFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v36
    v38 <- EndObjectLiteral
    v39 <- CreateArray [v33, v35, v38]
    v40 <- Construct v0, [v39]
    v41 <- CreateNamedVariable 'a', 'var', v40
    v42 <- LoadInteger '0'
    v43 <- LoadInteger '0'
    v44 <- UnaryOperation '-', v43
    v45 <- LoadInteger '0'
    v46 <- CreateArray [v42, v44, v45]
    v47 <- BeginArrowFunction -> 
        v48 <- LoadInteger '4'
        v49 <- LoadInteger '5'
        v50 <- CreateArray [v48, v49]
        v51 <- Construct v0, [v50]
        Return v51
    EndArrowFunction
    v52 <- CallFunction v47, []
    v53 <- CreateNamedVariable 'TypeError', 'none'
    v54 <- LoadInteger '0'
    v55 <- LoadInteger '0'
    v56 <- UnaryOperation '-', v55
    v57 <- CreateArray [v54, v56]
    v58 <- Construct v4, [v57]
    v59 <- CreateNamedVariable 'b', 'var', v58
    v60 <- LoadInteger '0'
    v61 <- LoadFloat '1.8446744073709552e+19'
    v62 <- CreateArray [v60, v61]
    v63 <- LoadInteger '0'
    v64 <- LoadInteger '0'
    v65 <- UnaryOperation '-', v64
    v66 <- CreateArray [v63, v65]
    v67 <- Construct v0, [v66]
    v68 <- Construct v4, [v67]
    v69 <- CreateNamedVariable 'c', 'var', v68
    v70 <- LoadInteger '0'
    v71 <- LoadFloat '1.8446744073709552e+19'
    v72 <- CreateArray [v70, v71]
    v73 <- LoadInteger '10'
    v74 <- LoadFloat '1.8446744073709552e+19'
    v75 <- CreateArray [v73, v74]
    v76 <- Construct v4, [v75]
    v77 <- Construct v0, [v76]
    v78 <- CreateNamedVariable 'd', 'var', v77
    v79 <- LoadInteger '10'
    v80 <- LoadInteger '10'
    v81 <- UnaryOperation '-', v80
    v82 <- CreateArray [v79, v81]
    v83 <- BeginArrowFunction -> 
        v84 <- CreateNamedVariable 'Int32Array', 'none'
        v85 <- LoadInteger '12'
        v86 <- LoadInteger '13'
        v87 <- CreateArray [v85, v86]
        v88 <- Construct v84, [v87]
        v89 <- Construct v0, [v88]
        Return v89
    EndArrowFunction
    v90 <- CallFunction v83, []
    v91 <- BeginArrowFunction -> 
        v92 <- CreateNamedVariable 'Int32Array', 'none'
        v93 <- LoadInteger '10'
        v94 <- LoadInteger '10'
        v95 <- UnaryOperation '-', v94
        v96 <- CreateArray [v93, v95]
        v97 <- Construct v0, [v96]
        v98 <- Construct v92, [v97]
        Return v98
    EndArrowFunction
    v99 <- CallFunction v91, []
EndPlainFunction
v100 <- CallFunction v8, [v32]
v101 <- BeginPlainFunction -> v102
    v103 <- LoadInteger '0'
    v104 <- LoadInteger '0'
    v105 <- LoadInteger '0'
    v106 <- CallMethod v102, 'of', [v103, v104, v105]
    v107 <- CreateNamedVariable 'a', 'var', v106
    v108 <- LoadInteger '0'
    v109 <- LoadInteger '1'
    v110 <- LoadInteger '3'
    v111 <- CallMethod v107, 'copyWithin', [v108, v109, v110]
    v112 <- LoadInteger '0'
    v113 <- LoadInteger '0'
    v114 <- LoadInteger '0'
    v115 <- CreateArray [v112, v113, v114]
EndPlainFunction
v116 <- CallFunction v14, [v101]
v117 <- BeginPlainFunction -> v118
    v119 <- LoadInteger '0'
    v120 <- LoadInteger '0'
    v121 <- LoadInteger '0'
    v122 <- CallMethod v118, 'of', [v119, v120, v121]
    v123 <- CreateNamedVariable 'a', 'var', v122
    v124 <- CallMethod v123, 'entries', []
    v125 <- CreateNamedVariable 'it', 'var', v124
    v126 <- LoadInteger '0'
    v127 <- LoadInteger '0'
    v128 <- CreateArray [v126, v127]
    v129 <- CallMethod v125, 'next', []
    v130 <- GetProperty v129, 'value'
    v131 <- LoadInteger '1'
    v132 <- LoadInteger '0'
    v133 <- CreateArray [v131, v132]
    v134 <- CallMethod v125, 'next', []
    v135 <- GetProperty v134, 'value'
    v136 <- LoadInteger '2'
    v137 <- LoadInteger '0'
    v138 <- CreateArray [v136, v137]
    v139 <- CallMethod v125, 'next', []
    v140 <- GetProperty v139, 'value'
    v141 <- CallMethod v125, 'next', []
    v142 <- GetProperty v141, 'done'
EndPlainFunction
v143 <- CallFunction v14, [v117]
v144 <- BeginPlainFunction -> v145
    v146 <- LoadInteger '0'
    v147 <- LoadInteger '0'
    v148 <- LoadInteger '0'
    v149 <- CallMethod v145, 'of', [v146, v147, v148]
    v150 <- CreateNamedVariable 'a', 'var', v149
    v151 <- CreateArray []
    v152 <- CreateNamedVariable 'seen', 'var', v151
    v153 <- BeginArrowFunction -> v154
        v155 <- CallMethod v152, 'push', [v154]
        v156 <- LoadInteger '0'
        v157 <- Compare v154, '>', v156
        Return v157
    EndArrowFunction
    v158 <- CallMethod v150, 'every', [v153]
    v159 <- LoadInteger '0'
    v160 <- LoadInteger '0'
    v161 <- LoadInteger '0'
    v162 <- CreateArray [v159, v160, v161]
EndPlainFunction
v163 <- CallFunction v14, [v144]
v164 <- BeginPlainFunction -> v165
    v166 <- LoadInteger '0'
    v167 <- LoadInteger '0'
    v168 <- LoadInteger '0'
    v169 <- LoadInteger '0'
    v170 <- CallMethod v165, 'of', [v166, v167, v168, v169]
    v171 <- CreateNamedVariable 'a', 'var', v170
    v172 <- LoadInteger '0'
    v173 <- LoadInteger '1'
    v174 <- LoadInteger '3'
    v175 <- CallMethod v171, 'fill', [v172, v173, v174]
    v176 <- LoadInteger '0'
    v177 <- LoadInteger '0'
    v178 <- LoadInteger '0'
    v179 <- LoadInteger '0'
    v180 <- CreateArray [v176, v177, v178, v179]
    v181 <- BeginArrowFunction -> 
        v182 <- LoadInteger '1'
        v183 <- LoadInteger '3'
        v184 <- Construct v165, [v183]
        v185 <- CallMethod v184, 'fill', [v182]
        Return v185
    EndArrowFunction
    v186 <- CallFunction v181, []
    v187 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v188 <- CallFunction v14, [v164]
v189 <- BeginPlainFunction -> v190
    v191 <- LoadInteger '0'
    v192 <- LoadInteger '0'
    v193 <- LoadInteger '0'
    v194 <- LoadInteger '0'
    v195 <- CallMethod v190, 'of', [v191, v192, v193, v194]
    v196 <- CreateNamedVariable 'a', 'var', v195
    v197 <- BeginArrowFunction -> v198
        v199 <- LoadInteger '0'
        v200 <- Compare v198, '>', v199
        Return v200
    EndArrowFunction
    v201 <- CallMethod v196, 'filter', [v197]
    v202 <- CreateNamedVariable 'b', 'var', v201
    v203 <- LoadInteger '0'
    v204 <- LoadInteger '0'
    v205 <- CreateArray [v203, v204]
EndPlainFunction
v206 <- CallFunction v14, [v189]
v207 <- BeginPlainFunction -> v208
    v209 <- LoadInteger '0'
    v210 <- LoadInteger '0'
    v211 <- LoadInteger '0'
    v212 <- CallMethod v208, 'of', [v209, v210, v211]
    v213 <- CreateNamedVariable 'a', 'var', v212
    v214 <- LoadInteger '0'
    v215 <- BeginArrowFunction -> v216
        v217 <- LoadInteger '0'
        v218 <- Compare v216, '===', v217
        Return v218
    EndArrowFunction
    v219 <- CallMethod v213, 'find', [v215]
    v220 <- LoadUndefined
    v221 <- BeginArrowFunction -> v222
        v223 <- LoadInteger '2'
        v224 <- Compare v222, '===', v223
        Return v224
    EndArrowFunction
    v225 <- CallMethod v213, 'find', [v221]
EndPlainFunction
v226 <- CallFunction v14, [v207]
v227 <- BeginPlainFunction -> v228
    v229 <- LoadInteger '0'
    v230 <- LoadInteger '0'
    v231 <- LoadInteger '0'
    v232 <- CallMethod v228, 'of', [v229, v230, v231]
    v233 <- CreateNamedVariable 'a', 'var', v232
    v234 <- LoadInteger '1'
    v235 <- BeginArrowFunction -> v236
        v237 <- LoadInteger '0'
        v238 <- Compare v236, '===', v237
        Return v238
    EndArrowFunction
    v239 <- CallMethod v233, 'findIndex', [v235]
    v240 <- LoadInteger '1'
    v241 <- UnaryOperation '-', v240
    v242 <- BeginArrowFunction -> v243
        v244 <- LoadInteger '2'
        v245 <- Compare v243, '===', v244
        Return v245
    EndArrowFunction
    v246 <- CallMethod v233, 'findIndex', [v242]
EndPlainFunction
v247 <- CallFunction v14, [v227]
v248 <- BeginPlainFunction -> v249
    v250 <- LoadInteger '0'
    v251 <- LoadInteger '0'
    v252 <- LoadInteger '0'
    v253 <- CallMethod v249, 'of', [v250, v251, v252]
    v254 <- CreateNamedVariable 'a', 'var', v253
    v255 <- CreateArray []
    v256 <- CreateNamedVariable 'seen', 'var', v255
    v257 <- BeginArrowFunction -> v258
        v259 <- CallMethod v256, 'push', [v258]
        Return v259
    EndArrowFunction
    v260 <- CallMethod v254, 'forEach', [v257]
    v261 <- LoadInteger '0'
    v262 <- LoadInteger '0'
    v263 <- LoadInteger '0'
    v264 <- CreateArray [v261, v262, v263]
EndPlainFunction
v265 <- CallFunction v14, [v248]
v266 <- BeginPlainFunction -> v267
    v268 <- LoadInteger '0'
    v269 <- LoadInteger '0'
    v270 <- LoadInteger '0'
    v271 <- CallMethod v267, 'of', [v268, v269, v270]
    v272 <- CreateNamedVariable 'a', 'var', v271
    v273 <- CallMethod v267, 'from', [v272]
    v274 <- CreateNamedVariable 'b', 'var', v273
    v275 <- LoadInteger '0'
    v276 <- LoadInteger '0'
    v277 <- LoadInteger '0'
    v278 <- CreateArray [v275, v276, v277]
    v279 <- BeginArrowFunction -> 
        v280 <- LoadInteger '4'
        v281 <- LoadInteger '5'
        v282 <- CreateArray [v280, v281]
        v283 <- CallMethod v267, 'from', [v282]
        Return v283
    EndArrowFunction
    v284 <- CallFunction v279, []
    v285 <- CreateNamedVariable 'TypeError', 'none'
    v286 <- LoadInteger '6'
    v287 <- LoadInteger '7'
    v288 <- CreateArray [v286, v287]
    v289 <- CreateNamedVariable 'BigInt', 'none'
    v290 <- CallMethod v267, 'from', [v288, v289]
    v291 <- CreateNamedVariable 'c', 'var', v290
    v292 <- LoadInteger '0'
    v293 <- LoadInteger '0'
    v294 <- CreateArray [v292, v293]
    v295 <- BeginArrowFunction -> 
        v296 <- LoadInteger '0'
        v297 <- LoadInteger '0'
        v298 <- CreateArray [v296, v297]
        v299 <- CreateNamedVariable 'Int32Array', 'none'
        v300 <- CallMethod v299, 'from', [v298]
        Return v300
    EndArrowFunction
    v301 <- CallFunction v295, []
    v302 <- BeginArrowFunction -> 
        v303 <- LoadInteger '4'
        v304 <- LoadInteger '5'
        v305 <- CreateArray [v303, v304]
        v306 <- CreateNamedVariable 'Int32Array', 'none'
        v307 <- CallMethod v306, 'from', [v305, v289]
        Return v307
    EndArrowFunction
    v308 <- CallFunction v302, []
EndPlainFunction
v309 <- CallFunction v14, [v266]
v310 <- BeginPlainFunction -> 
    v311 <- LoadInteger '0'
    v312 <- LoadInteger '0'
    v313 <- LoadInteger '0'
    v314 <- CreateArray [v311, v312, v313]
    v315 <- CreateNamedVariable 'contents', 'var', v314
    v316 <- Construct v0, [v315]
    v317 <- CreateNamedVariable 'a', 'var', v316
    v318 <- CallMethod v4, 'from', [v317]
    v319 <- CreateNamedVariable 'b', 'var', v318
    v320 <- CallMethod v0, 'from', [v319]
    v321 <- CreateNamedVariable 'c', 'var', v320
EndPlainFunction
v322 <- CallFunction v8, [v310]
v323 <- BeginPlainFunction -> v324
    v325 <- LoadInteger '0'
    v326 <- LoadInteger '0'
    v327 <- LoadInteger '0'
    v328 <- CallMethod v324, 'of', [v325, v326, v327]
    v329 <- CreateNamedVariable 'a', 'var', v328
    v330 <- LoadInteger '0'
    v331 <- CallMethod v329, 'includes', [v330]
    v332 <- LoadUndefined
    v333 <- CallMethod v329, 'includes', [v332]
    v334 <- LoadInteger '1'
    v335 <- CallMethod v329, 'includes', [v334]
    v336 <- LoadFloat '5.373003642039909e+21'
    v337 <- CallMethod v329, 'includes', [v336]
EndPlainFunction
v338 <- CallFunction v14, [v323]
v339 <- BeginPlainFunction -> v340
    v341 <- LoadInteger '0'
    v342 <- LoadInteger '0'
    v343 <- LoadInteger '0'
    v344 <- CallMethod v340, 'of', [v341, v342, v343]
    v345 <- CreateNamedVariable 'a', 'var', v344
    v346 <- LoadInteger '1'
    v347 <- LoadInteger '0'
    v348 <- CallMethod v345, 'indexOf', [v347]
    v349 <- LoadInteger '1'
    v350 <- UnaryOperation '-', v349
    v351 <- LoadUndefined
    v352 <- CallMethod v345, 'indexOf', [v351]
    v353 <- LoadInteger '1'
    v354 <- UnaryOperation '-', v353
    v355 <- LoadInteger '1'
    v356 <- CallMethod v345, 'indexOf', [v355]
    v357 <- LoadInteger '1'
    v358 <- UnaryOperation '-', v357
    v359 <- LoadFloat '5.373003642039909e+21'
    v360 <- CallMethod v345, 'indexOf', [v359]
EndPlainFunction
v361 <- CallFunction v14, [v339]
v362 <- BeginPlainFunction -> v363
    v364 <- LoadInteger '0'
    v365 <- LoadInteger '0'
    v366 <- LoadInteger '0'
    v367 <- CallMethod v363, 'of', [v364, v365, v366]
    v368 <- CreateNamedVariable 'a', 'var', v367
    v369 <- LoadString '1-2-3'
    v370 <- LoadString '-'
    v371 <- CallMethod v368, 'join', [v370]
EndPlainFunction
v372 <- CallFunction v14, [v362]
v373 <- BeginPlainFunction -> v374
    v375 <- LoadInteger '0'
    v376 <- LoadInteger '0'
    v377 <- LoadInteger '0'
    v378 <- CallMethod v374, 'of', [v375, v376, v377]
    v379 <- CreateNamedVariable 'a', 'var', v378
    v380 <- CallMethod v379, 'keys', []
    v381 <- CreateNamedVariable 'it', 'var', v380
    v382 <- LoadInteger '0'
    v383 <- CallMethod v381, 'next', []
    v384 <- GetProperty v383, 'value'
    v385 <- LoadInteger '1'
    v386 <- CallMethod v381, 'next', []
    v387 <- GetProperty v386, 'value'
    v388 <- LoadInteger '2'
    v389 <- CallMethod v381, 'next', []
    v390 <- GetProperty v389, 'value'
    v391 <- CallMethod v381, 'next', []
    v392 <- GetProperty v391, 'done'
EndPlainFunction
v393 <- CallFunction v14, [v373]
v394 <- BeginPlainFunction -> v395
    v396 <- LoadInteger '0'
    v397 <- LoadInteger '0'
    v398 <- LoadInteger '0'
    v399 <- CallMethod v395, 'of', [v396, v397, v398]
    v400 <- CreateNamedVariable 'a', 'var', v399
    v401 <- LoadInteger '1'
    v402 <- LoadInteger '0'
    v403 <- CallMethod v400, 'lastIndexOf', [v402]
    v404 <- LoadInteger '1'
    v405 <- UnaryOperation '-', v404
    v406 <- LoadUndefined
    v407 <- CallMethod v400, 'lastIndexOf', [v406]
    v408 <- LoadInteger '1'
    v409 <- UnaryOperation '-', v408
    v410 <- LoadInteger '1'
    v411 <- CallMethod v400, 'lastIndexOf', [v410]
    v412 <- LoadInteger '1'
    v413 <- UnaryOperation '-', v412
    v414 <- LoadFloat '5.373003642039909e+21'
    v415 <- CallMethod v400, 'lastIndexOf', [v414]
EndPlainFunction
v416 <- CallFunction v14, [v394]
v417 <- BeginPlainFunction -> v418
    v419 <- LoadInteger '0'
    v420 <- LoadInteger '0'
    v421 <- LoadInteger '0'
    v422 <- CallMethod v418, 'of', [v419, v420, v421]
    v423 <- CreateNamedVariable 'a', 'var', v422
    v424 <- BeginArrowFunction -> v425
        v426 <- LoadInteger '0'
        v427 <- BinaryOperation v426, '*', v425
        Return v427
    EndArrowFunction
    v428 <- CallMethod v423, 'map', [v424]
    v429 <- CreateNamedVariable 'b', 'var', v428
    v430 <- GetProperty v429, 'constructor'
    v431 <- LoadInteger '0'
    v432 <- LoadInteger '0'
    v433 <- LoadInteger '0'
    v434 <- CreateArray [v431, v432, v433]
EndPlainFunction
v435 <- CallFunction v14, [v417]
v436 <- BeginPlainFunction -> v437
    v438 <- LoadBoolean 'true'
    v439 <- LoadInteger '0'
    v440 <- BeginArrowFunction -> 
        v441 <- LoadInteger '0'
        Return v441
    EndArrowFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v440
    v442 <- EndObjectLiteral
    v443 <- LoadString '4'
    v444 <- CallMethod v437, 'of', [v438, v439, v442, v443]
    v445 <- CreateNamedVariable 'a', 'var', v444
    v446 <- LoadInteger '0'
    v447 <- LoadInteger '0'
    v448 <- LoadInteger '0'
    v449 <- LoadInteger '0'
    v450 <- CreateArray [v446, v447, v448, v449]
    v451 <- BeginArrowFunction -> 
        v452 <- LoadInteger '1'
        v453 <- CallMethod v437, 'of', [v452]
        Return v453
    EndArrowFunction
    v454 <- CallFunction v451, []
    v455 <- CreateNamedVariable 'TypeError', 'none'
    v456 <- BeginArrowFunction -> 
        v457 <- LoadUndefined
        v458 <- CallMethod v437, 'of', [v457]
        Return v458
    EndArrowFunction
    v459 <- CallFunction v456, []
EndPlainFunction
v460 <- CallFunction v14, [v436]
v461 <- BeginPlainFunction -> v462
    v463 <- LoadInteger '0'
    v464 <- LoadInteger '0'
    v465 <- LoadInteger '0'
    v466 <- CallMethod v462, 'of', [v463, v464, v465]
    v467 <- CreateNamedVariable 'a', 'var', v466
    v468 <- LoadInteger '0'
    v469 <- BeginArrowFunction -> v470, v471
        v472 <- BinaryOperation v470, '+', v471
        Return v472
    EndArrowFunction
    v473 <- LoadInteger '0'
    v474 <- CallMethod v467, 'reduce', [v469, v473]
EndPlainFunction
v475 <- CallFunction v14, [v461]
v476 <- BeginPlainFunction -> v477
    v478 <- LoadInteger '0'
    v479 <- LoadInteger '0'
    v480 <- LoadInteger '0'
    v481 <- CallMethod v477, 'of', [v478, v479, v480]
    v482 <- CreateNamedVariable 'a', 'var', v481
    v483 <- LoadInteger '0'
    v484 <- BeginArrowFunction -> v485, v486
        v487 <- BinaryOperation v485, '+', v486
        Return v487
    EndArrowFunction
    v488 <- LoadInteger '0'
    v489 <- CallMethod v482, 'reduce', [v484, v488]
EndPlainFunction
v490 <- CallFunction v14, [v476]
v491 <- BeginPlainFunction -> v492
    v493 <- LoadInteger '0'
    v494 <- LoadInteger '0'
    v495 <- LoadInteger '0'
    v496 <- CallMethod v492, 'of', [v493, v494, v495]
    v497 <- CreateNamedVariable 'a', 'var', v496
    v498 <- CallMethod v497, 'reverse', []
    v499 <- LoadInteger '0'
    v500 <- LoadInteger '0'
    v501 <- LoadInteger '0'
    v502 <- CreateArray [v499, v500, v501]
EndPlainFunction
v503 <- CallFunction v14, [v491]
v504 <- BeginPlainFunction -> v505
    v506 <- LoadInteger '7'
    v507 <- Construct v505, [v506]
    v508 <- CreateNamedVariable 'a', 'var', v507
    v509 <- LoadInteger '0'
    v510 <- LoadInteger '0'
    v511 <- LoadInteger '0'
    v512 <- CallMethod v505, 'of', [v509, v510, v511]
    v513 <- LoadInteger '2'
    v514 <- CallMethod v508, 'set', [v512, v513]
    v515 <- LoadInteger '0'
    v516 <- LoadInteger '0'
    v517 <- LoadInteger '0'
    v518 <- LoadInteger '0'
    v519 <- LoadInteger '0'
    v520 <- LoadInteger '0'
    v521 <- LoadInteger '0'
    v522 <- CreateArray [v515, v516, v517, v518, v519, v520, v521]
    v523 <- LoadInteger '0'
    v524 <- LoadInteger '0'
    v525 <- LoadInteger '0'
    v526 <- CreateArray [v523, v524, v525]
    v527 <- LoadInteger '1'
    v528 <- CallMethod v508, 'set', [v526, v527]
    v529 <- LoadInteger '0'
    v530 <- LoadInteger '0'
    v531 <- LoadInteger '0'
    v532 <- LoadInteger '0'
    v533 <- LoadInteger '0'
    v534 <- LoadInteger '0'
    v535 <- LoadInteger '0'
    v536 <- CreateArray [v529, v530, v531, v532, v533, v534, v535]
    v537 <- BeginArrowFunction -> 
        v538 <- LoadInteger '7'
        v539 <- LoadInteger '8'
        v540 <- LoadInteger '9'
        v541 <- CreateArray [v538, v539, v540]
        v542 <- LoadInteger '3'
        v543 <- CallMethod v508, 'set', [v541, v542]
        Return v543
    EndArrowFunction
    v544 <- CallFunction v537, []
    v545 <- CreateNamedVariable 'TypeError', 'none'
    v546 <- BeginArrowFunction -> 
        v547 <- LoadInteger '10'
        v548 <- LoadInteger '11'
        v549 <- CreateNamedVariable 'Int32Array', 'none'
        v550 <- CallMethod v549, 'of', [v547, v548]
        v551 <- LoadInteger '2'
        v552 <- CallMethod v508, 'set', [v550, v551]
        Return v552
    EndArrowFunction
    v553 <- CallFunction v546, []
    v554 <- Compare v505, '==', v0
    v555 <- TernaryOperation v554, v4, v0
    v556 <- CreateNamedVariable 'Other', 'var', v555
    v557 <- LoadInteger '10'
    v558 <- LoadInteger '10'
    v559 <- CallMethod v556, 'of', [v557, v558]
    v560 <- LoadInteger '4'
    v561 <- CallMethod v508, 'set', [v559, v560]
    v562 <- LoadInteger '0'
    v563 <- LoadInteger '0'
    v564 <- LoadInteger '0'
    v565 <- LoadInteger '0'
    v566 <- LoadInteger '10'
    v567 <- LoadInteger '10'
    v568 <- LoadInteger '0'
    v569 <- CreateArray [v562, v563, v564, v565, v566, v567, v568]
EndPlainFunction
v570 <- CallFunction v14, [v504]
v571 <- BeginPlainFunction -> v572
    v573 <- LoadInteger '0'
    v574 <- LoadInteger '0'
    v575 <- LoadInteger '0'
    v576 <- LoadInteger '0'
    v577 <- CallMethod v572, 'of', [v573, v574, v575, v576]
    v578 <- CreateNamedVariable 'a', 'var', v577
    v579 <- LoadInteger '1'
    v580 <- LoadInteger '3'
    v581 <- CallMethod v578, 'slice', [v579, v580]
    v582 <- CreateNamedVariable 'b', 'var', v581
    v583 <- LoadInteger '0'
    v584 <- LoadInteger '0'
    v585 <- CreateArray [v583, v584]
EndPlainFunction
v586 <- CallFunction v14, [v571]
v587 <- BeginPlainFunction -> v588
    v589 <- LoadInteger '0'
    v590 <- LoadInteger '0'
    v591 <- LoadInteger '0'
    v592 <- CallMethod v588, 'of', [v589, v590, v591]
    v593 <- CreateNamedVariable 'a', 'var', v592
    v594 <- BeginArrowFunction -> v595
        v596 <- LoadInteger '0'
        v597 <- Compare v595, '===', v596
        Return v597
    EndArrowFunction
    v598 <- CallMethod v593, 'some', [v594]
EndPlainFunction
v599 <- CallFunction v14, [v587]
v600 <- BeginPlainFunction -> v601
    v602 <- LoadInteger '0'
    v603 <- LoadInteger '0'
    v604 <- LoadInteger '0'
    v605 <- LoadInteger '0'
    v606 <- CallMethod v601, 'of', [v602, v603, v604, v605]
    v607 <- CreateNamedVariable 'a', 'var', v606
    v608 <- CallMethod v607, 'sort', []
    v609 <- LoadInteger '0'
    v610 <- LoadInteger '0'
    v611 <- LoadInteger '0'
    v612 <- LoadInteger '0'
    v613 <- CreateArray [v609, v610, v611, v612]
EndPlainFunction
v614 <- CallFunction v14, [v600]
v615 <- BeginPlainFunction -> v616
    v617 <- LoadInteger '0'
    v618 <- LoadInteger '0'
    v619 <- LoadInteger '0'
    v620 <- LoadInteger '0'
    v621 <- CallMethod v616, 'of', [v617, v618, v619, v620]
    v622 <- CreateNamedVariable 'a', 'var', v621
    v623 <- LoadInteger '1'
    v624 <- LoadInteger '3'
    v625 <- CallMethod v622, 'subarray', [v623, v624]
    v626 <- CreateNamedVariable 'b', 'var', v625
    v627 <- GetProperty v626, 'constructor'
    v628 <- LoadInteger '0'
    v629 <- LoadInteger '0'
    v630 <- CreateArray [v628, v629]
EndPlainFunction
v631 <- CallFunction v14, [v615]
v632 <- BeginPlainFunction -> v633
    v634 <- LoadInteger '0'
    v635 <- LoadInteger '0'
    v636 <- LoadInteger '0'
    v637 <- CallMethod v633, 'of', [v634, v635, v636]
    v638 <- CreateNamedVariable 'a', 'var', v637
    v639 <- LoadString '1,2,3'
    v640 <- CallMethod v638, 'toString', []
EndPlainFunction
v641 <- CallFunction v14, [v632]
v642 <- BeginPlainFunction -> v643
    v644 <- LoadInteger '0'
    v645 <- LoadInteger '0'
    v646 <- LoadInteger '0'
    v647 <- CallMethod v643, 'of', [v644, v645, v646]
    v648 <- CreateNamedVariable 'a', 'var', v647
    v649 <- CallMethod v648, 'values', []
    v650 <- CreateNamedVariable 'it', 'var', v649
    v651 <- LoadInteger '0'
    v652 <- CallMethod v650, 'next', []
    v653 <- GetProperty v652, 'value'
    v654 <- LoadInteger '0'
    v655 <- CallMethod v650, 'next', []
    v656 <- GetProperty v655, 'value'
    v657 <- LoadInteger '0'
    v658 <- CallMethod v650, 'next', []
    v659 <- GetProperty v658, 'value'
    v660 <- CallMethod v650, 'next', []
    v661 <- GetProperty v660, 'done'
EndPlainFunction
v662 <- CallFunction v14, [v642]


const v2 = new BigInt64Array(8);
var intarray = v2;
const v6 = new BigUint64Array(8);
var uintarray = v6;
function test(a9) {
    a9();
    a9();
    a9();
    a9();
}
function test_both(a15) {
    const v16 = () => {
        return a15(BigInt64Array);
    };
    test(v16);
    const v19 = () => {
        return a15(BigUint64Array);
    };
    test(v19);
}
function basic_assignment() {
    const x = 0;
    intarray[0] = x;
    intarray[0];
    uintarray[0] = x;
    uintarray[0];
    const y = -8526495043095934976;
    intarray[0] = y;
    intarray[0];
}
test(basic_assignment);
function construct() {
    const v35 = -0;
    const v36 = () => {
        return 0;
    };
    const v40 = new BigInt64Array([0,v35,{ valueOf: v36 }]);
    var a = v40;
    [0,-0,0];
    const v47 = () => {
        const v51 = new BigInt64Array([4,5]);
        return v51;
    };
    v47();
    const v58 = new BigUint64Array([0,-0]);
    var b = v58;
    [0,1.8446744073709552e+19];
    const v67 = new BigInt64Array([0,-0]);
    const v68 = new BigUint64Array(v67);
    var c = v68;
    [0,1.8446744073709552e+19];
    const v76 = new BigUint64Array([10,1.8446744073709552e+19]);
    const v77 = new BigInt64Array(v76);
    var d = v77;
    [10,-10];
    const v83 = () => {
        const v88 = new Int32Array([12,13]);
        const v89 = new BigInt64Array(v88);
        return v89;
    };
    v83();
    const v91 = () => {
        const v97 = new BigInt64Array([10,-10]);
        const v98 = new Int32Array(v97);
        return v98;
    };
    v91();
}
test(construct);
function copyWithin(a102) {
    var a = a102.of(0, 0, 0);
    a.copyWithin(0, 1, 3);
    [0,0,0];
}
test_both(copyWithin);
function entries(a118) {
    var a = a118.of(0, 0, 0);
    var it = a.entries();
    [0,0];
    it.next().value;
    [1,0];
    it.next().value;
    [2,0];
    it.next().value;
    it.next().done;
}
test_both(entries);
function every(a145) {
    var a = a145.of(0, 0, 0);
    var seen = [];
    const v153 = (a154) => {
        seen.push(a154);
        return a154 > 0;
    };
    a.every(v153);
    [0,0,0];
}
test_both(every);
function fill(a165) {
    var a = a165.of(0, 0, 0, 0);
    a.fill(0, 1, 3);
    [0,0,0,0];
    const v181 = () => {
        const v184 = new a165(3);
        return v184.fill(1);
    };
    v181();
}
test_both(fill);
function filter(a190) {
    var a = a190.of(0, 0, 0, 0);
    const v197 = (a198) => {
        return a198 > 0;
    };
    var b = a.filter(v197);
    [0,0];
}
test_both(filter);
function find(a208) {
    var a = a208.of(0, 0, 0);
    const v215 = (a216) => {
        return a216 === 0;
    };
    a.find(v215);
    const v221 = (a222) => {
        return a222 === 2;
    };
    a.find(v221);
}
test_both(find);
function findIndex(a228) {
    var a = a228.of(0, 0, 0);
    const v235 = (a236) => {
        return a236 === 0;
    };
    a.findIndex(v235);
    -1;
    const v242 = (a243) => {
        return a243 === 2;
    };
    a.findIndex(v242);
}
test_both(findIndex);
function forEach(a249) {
    var a = a249.of(0, 0, 0);
    var seen = [];
    const v257 = (a258) => {
        return seen.push(a258);
    };
    a.forEach(v257);
    [0,0,0];
}
test_both(forEach);
function from(a267) {
    var a = a267.of(0, 0, 0);
    var b = a267.from(a);
    [0,0,0];
    const v279 = () => {
        return a267.from([4,5]);
    };
    v279();
    var c = a267.from([6,7], BigInt);
    [0,0];
    const v295 = () => {
        return Int32Array.from([0,0]);
    };
    v295();
    const v302 = () => {
        return Int32Array.from([4,5], BigInt);
    };
    v302();
}
test_both(from);
function from_mixed() {
    var contents = [0,0,0];
    const v316 = new BigInt64Array(contents);
    var a = v316;
    var b = BigUint64Array.from(a);
    var c = BigInt64Array.from(b);
}
test(from_mixed);
function includes(a324) {
    var a = a324.of(0, 0, 0);
    a.includes(0);
    a.includes(undefined);
    a.includes(1);
    a.includes(5.373003642039909e+21);
}
test_both(includes);
function indexOf(a340) {
    var a = a340.of(0, 0, 0);
    a.indexOf(0);
    -1;
    a.indexOf(undefined);
    -1;
    a.indexOf(1);
    -1;
    a.indexOf(5.373003642039909e+21);
}
test_both(indexOf);
function join(a363) {
    var a = a363.of(0, 0, 0);
    a.join("-");
}
test_both(join);
function keys(a374) {
    var a = a374.of(0, 0, 0);
    var it = a.keys();
    it.next().value;
    it.next().value;
    it.next().value;
    it.next().done;
}
test_both(keys);
function lastIndexOf(a395) {
    var a = a395.of(0, 0, 0);
    a.lastIndexOf(0);
    -1;
    a.lastIndexOf(undefined);
    -1;
    a.lastIndexOf(1);
    -1;
    a.lastIndexOf(5.373003642039909e+21);
}
test_both(lastIndexOf);
function map(a418) {
    var a = a418.of(0, 0, 0);
    const v424 = (a425) => {
        return 0 * a425;
    };
    var b = a.map(v424);
    b.constructor;
    [0,0,0];
}
test_both(map);
function of(a437) {
    const v440 = () => {
        return 0;
    };
    var a = a437.of(true, 0, { valueOf: v440 }, "4");
    [0,0,0,0];
    const v451 = () => {
        return a437.of(1);
    };
    v451();
    const v456 = () => {
        return a437.of(undefined);
    };
    v456();
}
test_both(of);
function reduce(a462) {
    var a = a462.of(0, 0, 0);
    const v469 = (a470, a471) => {
        return a470 + a471;
    };
    a.reduce(v469, 0);
}
test_both(reduce);
function reduceRight(a477) {
    var a = a477.of(0, 0, 0);
    const v484 = (a485, a486) => {
        return a485 + a486;
    };
    a.reduce(v484, 0);
}
test_both(reduceRight);
function reverse(a492) {
    var a = a492.of(0, 0, 0);
    a.reverse();
    [0,0,0];
}
test_both(reverse);
function set(a505) {
    const v507 = new a505(7);
    var a = v507;
    a.set(a505.of(0, 0, 0), 2);
    [0,0,0,0,0,0,0];
    a.set([0,0,0], 1);
    [0,0,0,0,0,0,0];
    const v537 = () => {
        return a.set([7,8,9], 3);
    };
    v537();
    const v546 = () => {
        return a.set(Int32Array.of(10, 11), 2);
    };
    v546();
    var Other = a505 == BigInt64Array ? BigUint64Array : BigInt64Array;
    a.set(Other.of(10, 10), 4);
    [0,0,0,0,10,10,0];
}
test_both(set);
function slice(a572) {
    var a = a572.of(0, 0, 0, 0);
    var b = a.slice(1, 3);
    [0,0];
}
test_both(slice);
function some(a588) {
    var a = a588.of(0, 0, 0);
    const v594 = (a595) => {
        return a595 === 0;
    };
    a.some(v594);
}
test_both(some);
function sort(a601) {
    var a = a601.of(0, 0, 0, 0);
    a.sort();
    [0,0,0,0];
}
test_both(sort);
function subarray(a616) {
    var a = a616.of(0, 0, 0, 0);
    var b = a.subarray(1, 3);
    b.constructor;
    [0,0];
}
test_both(subarray);
function toString(a633) {
    var a = a633.of(0, 0, 0);
    a.toString();
}
test_both(toString);
function values(a643) {
    var a = a643.of(0, 0, 0);
    var it = a.values();
    it.next().value;
    it.next().value;
    it.next().value;
    it.next().done;
}
test_both(values);

FuzzIL program written to corpus/typedarray.fzil
