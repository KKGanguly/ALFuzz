BeginObjectLiteral
v0 <- EndObjectLiteral
v1 <- CreateNamedVariable 'o', 'var', v0
v2 <- LoadInteger '1'
SetProperty v1, 'a', v2
v3 <- BeginPlainFunction -> 
    v4 <- LoadInteger '1'
    Return v4
EndPlainFunction
SetProperty v1, 'b', v3
v5 <- LoadInteger '2'
SetProperty v1, 'd', v5
BeginForInLoop v1 -> v6
EndForInLoop
BeginObjectLiteral
v7 <- EndObjectLiteral
v8 <- CreateNamedVariable 'o1', 'var', v7
v9 <- LoadInteger '1'
SetProperty v8, 'a', v9
v10 <- LoadInteger '10'
SetProperty v8, 'b', v10
v11 <- LoadInteger '20'
SetProperty v8, 'c', v11
v12 <- LoadString 'a'
v13 <- LoadString 'b'
v14 <- LoadString 'c'
v15 <- CreateArray [v12, v13, v14]
v16 <- CreateNamedVariable 'keys', 'var', v15
v17 <- LoadInteger '0'
v18 <- CreateNamedVariable 'i', 'var', v17
BeginForInLoop v8 -> v19
    v20 <- GetComputedProperty v16, v18
    v21 <- LoadInteger '1'
    Update v18, '+', v21
EndForInLoop


var o = {};
o.a = 1;
function f3() {
    return 1;
}
o.b = f3;
o.d = 2;
for (const v6 in o) {
}
var o1 = {};
o1.a = 1;
o1.b = 10;
o1.c = 20;
var keys = ["a","b","c"];
var i = 0;
for (const v19 in o1) {
    keys[i];
    i += 1;
}

FuzzIL program written to corpus/regress-convert-enum2.fzil
