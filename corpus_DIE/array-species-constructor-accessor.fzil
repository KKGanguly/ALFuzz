v0 <- CreateArray []
v1 <- CreateNamedVariable 'x', 'let', v0
v2 <- CreateNamedVariable 'Array', 'none'
v3 <- BeginArrowFunction -> 
EndArrowFunction
v4 <- CallMethod v1, 'map', [v3]
v5 <- GetProperty v4, 'constructor'
v6 <- BeginArrowFunction -> 
EndArrowFunction
v7 <- CallMethod v1, 'filter', [v6]
v8 <- GetProperty v7, 'constructor'
v9 <- CallMethod v1, 'slice', []
v10 <- GetProperty v9, 'constructor'
v11 <- CallMethod v1, 'splice', []
v12 <- GetProperty v11, 'constructor'
v13 <- LoadInteger '1'
v14 <- CreateArray [v13]
v15 <- CallMethod v1, 'concat', [v14]
v16 <- GetProperty v15, 'constructor'
v17 <- LoadInteger '1'
v18 <- LoadInteger '1'
v19 <- CreateArray [v18]
v20 <- CallMethod v1, 'concat', [v19]
v21 <- GetElement v20, '0'
v22 <- BeginClassDefinition v2
EndClassDefinition
v23 <- LoadString 'constructor'
BeginObjectLiteral
    BeginObjectLiteralMethod `get` -> v24
        Return v22
    EndObjectLiteralMethod
v25 <- EndObjectLiteral
v26 <- CreateNamedVariable 'Object', 'none'
v27 <- CallMethod v26, 'defineProperty', [v1, v23, v25]
v28 <- BeginArrowFunction -> 
EndArrowFunction
v29 <- CallMethod v1, 'map', [v28]
v30 <- GetProperty v29, 'constructor'
v31 <- BeginArrowFunction -> 
EndArrowFunction
v32 <- CallMethod v1, 'filter', [v31]
v33 <- GetProperty v32, 'constructor'
v34 <- CallMethod v1, 'slice', []
v35 <- GetProperty v34, 'constructor'
v36 <- CallMethod v1, 'splice', []
v37 <- GetProperty v36, 'constructor'
v38 <- LoadInteger '1'
v39 <- CreateArray [v38]
v40 <- CallMethod v1, 'concat', [v39]
v41 <- GetProperty v40, 'constructor'
v42 <- LoadInteger '1'
v43 <- LoadInteger '1'
v44 <- CreateArray [v43]
v45 <- CallMethod v1, 'concat', [v44]
v46 <- GetElement v45, '0'


let x = [];
const v3 = () => {
};
x.map(v3).constructor;
const v6 = () => {
};
x.filter(v6).constructor;
x.slice().constructor;
x.splice().constructor;
x.concat([1]).constructor;
x.concat([1])[0];
class C22 extends Array {
}
const v25 = {
    get() {
        return C22;
    },
};
Object.defineProperty(x, "constructor", v25);
const v28 = () => {
};
x.map(v28).constructor;
const v31 = () => {
};
x.filter(v31).constructor;
x.slice().constructor;
x.splice().constructor;
x.concat([1]).constructor;
x.concat([1])[0];

FuzzIL program written to corpus/array-species-constructor-accessor.fzil
