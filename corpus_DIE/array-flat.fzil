v0 <- CreateNamedVariable 'Array', 'none'
v1 <- GetProperty v0, 'prototype'
v2 <- GetProperty v1, 'flat'
v3 <- GetProperty v2, 'length'
v4 <- LoadInteger '0'
v5 <- GetProperty v0, 'prototype'
v6 <- GetProperty v5, 'flat'
v7 <- GetProperty v6, 'name'
v8 <- LoadString 'flat'
BeginBlockStatement
    v9 <- LoadInteger '1'
    v10 <- LoadInteger '2'
    v11 <- CreateArray [v10]
    v12 <- LoadInteger '3'
    v13 <- CreateArray [v12]
    v14 <- CreateArray [v13]
    v15 <- CreateArray [v9, v11, v14]
    v16 <- CreateNamedVariable 'input', 'const', v15
    v17 <- CallMethod v16, 'flat', []
    v18 <- LoadInteger '1'
    v19 <- LoadInteger '2'
    v20 <- LoadInteger '3'
    v21 <- CreateArray [v20]
    v22 <- CreateArray [v18, v19, v21]
    v23 <- LoadInteger '1'
    v24 <- CallMethod v16, 'flat', [v23]
    v25 <- LoadInteger '1'
    v26 <- LoadInteger '2'
    v27 <- LoadInteger '3'
    v28 <- CreateArray [v27]
    v29 <- CreateArray [v25, v26, v28]
    v30 <- LoadBoolean 'true'
    v31 <- CallMethod v16, 'flat', [v30]
    v32 <- LoadInteger '1'
    v33 <- LoadInteger '2'
    v34 <- LoadInteger '3'
    v35 <- CreateArray [v34]
    v36 <- CreateArray [v32, v33, v35]
    v37 <- LoadUndefined
    v38 <- CallMethod v16, 'flat', [v37]
    v39 <- LoadInteger '1'
    v40 <- LoadInteger '2'
    v41 <- LoadInteger '3'
    v42 <- CreateArray [v41]
    v43 <- CreateArray [v39, v40, v42]
    v44 <- CreateNamedVariable 'Infinity', 'none'
    v45 <- UnaryOperation '-', v44
    v46 <- CallMethod v16, 'flat', [v45]
    v47 <- LoadInteger '1'
    v48 <- LoadInteger '2'
    v49 <- CreateArray [v48]
    v50 <- LoadInteger '3'
    v51 <- CreateArray [v50]
    v52 <- CreateArray [v51]
    v53 <- CreateArray [v47, v49, v52]
    v54 <- LoadInteger '1'
    v55 <- UnaryOperation '-', v54
    v56 <- CallMethod v16, 'flat', [v55]
    v57 <- LoadInteger '1'
    v58 <- LoadInteger '2'
    v59 <- CreateArray [v58]
    v60 <- LoadInteger '3'
    v61 <- CreateArray [v60]
    v62 <- CreateArray [v61]
    v63 <- CreateArray [v57, v59, v62]
    v64 <- LoadInteger '0'
    v65 <- UnaryOperation '-', v64
    v66 <- CallMethod v16, 'flat', [v65]
    v67 <- LoadInteger '1'
    v68 <- LoadInteger '2'
    v69 <- CreateArray [v68]
    v70 <- LoadInteger '3'
    v71 <- CreateArray [v70]
    v72 <- CreateArray [v71]
    v73 <- CreateArray [v67, v69, v72]
    v74 <- LoadInteger '0'
    v75 <- CallMethod v16, 'flat', [v74]
    v76 <- LoadInteger '1'
    v77 <- LoadInteger '2'
    v78 <- CreateArray [v77]
    v79 <- LoadInteger '3'
    v80 <- CreateArray [v79]
    v81 <- CreateArray [v80]
    v82 <- CreateArray [v76, v78, v81]
    v83 <- LoadBoolean 'false'
    v84 <- CallMethod v16, 'flat', [v83]
    v85 <- LoadInteger '1'
    v86 <- LoadInteger '2'
    v87 <- CreateArray [v86]
    v88 <- LoadInteger '3'
    v89 <- CreateArray [v88]
    v90 <- CreateArray [v89]
    v91 <- CreateArray [v85, v87, v90]
    v92 <- LoadNull
    v93 <- CallMethod v16, 'flat', [v92]
    v94 <- LoadInteger '1'
    v95 <- LoadInteger '2'
    v96 <- CreateArray [v95]
    v97 <- LoadInteger '3'
    v98 <- CreateArray [v97]
    v99 <- CreateArray [v98]
    v100 <- CreateArray [v94, v96, v99]
    v101 <- LoadString ''
    v102 <- CallMethod v16, 'flat', [v101]
    v103 <- LoadInteger '1'
    v104 <- LoadInteger '2'
    v105 <- CreateArray [v104]
    v106 <- LoadInteger '3'
    v107 <- CreateArray [v106]
    v108 <- CreateArray [v107]
    v109 <- CreateArray [v103, v105, v108]
    v110 <- LoadString 'foo'
    v111 <- CallMethod v16, 'flat', [v110]
    v112 <- LoadInteger '1'
    v113 <- LoadInteger '2'
    v114 <- CreateArray [v113]
    v115 <- LoadInteger '3'
    v116 <- CreateArray [v115]
    v117 <- CreateArray [v116]
    v118 <- CreateArray [v112, v114, v117]
    v119 <- LoadRegExp '.' ''
    v120 <- CallMethod v16, 'flat', [v119]
    v121 <- LoadInteger '1'
    v122 <- LoadInteger '2'
    v123 <- CreateArray [v122]
    v124 <- LoadInteger '3'
    v125 <- CreateArray [v124]
    v126 <- CreateArray [v125]
    v127 <- CreateArray [v121, v123, v126]
    v128 <- CreateArray []
    v129 <- CallMethod v16, 'flat', [v128]
    v130 <- LoadInteger '1'
    v131 <- LoadInteger '2'
    v132 <- CreateArray [v131]
    v133 <- LoadInteger '3'
    v134 <- CreateArray [v133]
    v135 <- CreateArray [v134]
    v136 <- CreateArray [v130, v132, v135]
    BeginObjectLiteral
    v137 <- EndObjectLiteral
    v138 <- CallMethod v16, 'flat', [v137]
    v139 <- LoadInteger '1'
    v140 <- LoadInteger '2'
    v141 <- CreateArray [v140]
    v142 <- LoadInteger '3'
    v143 <- CreateArray [v142]
    v144 <- CreateArray [v143]
    v145 <- CreateArray [v139, v141, v144]
    v146 <- CreateNamedVariable 'Proxy', 'none'
    BeginObjectLiteral
    v147 <- EndObjectLiteral
    BeginObjectLiteral
    v148 <- EndObjectLiteral
    v149 <- Construct v146, [v147, v148]
    v150 <- CallMethod v16, 'flat', [v149]
    v151 <- LoadInteger '1'
    v152 <- LoadInteger '2'
    v153 <- CreateArray [v152]
    v154 <- LoadInteger '3'
    v155 <- CreateArray [v154]
    v156 <- CreateArray [v155]
    v157 <- CreateArray [v151, v153, v156]
    v158 <- BeginArrowFunction -> v159
        Return v159
    EndArrowFunction
    v160 <- CallMethod v16, 'flat', [v158]
    v161 <- LoadInteger '1'
    v162 <- LoadInteger '2'
    v163 <- CreateArray [v162]
    v164 <- LoadInteger '3'
    v165 <- CreateArray [v164]
    v166 <- CreateArray [v165]
    v167 <- CreateArray [v161, v163, v166]
    v168 <- CreateNamedVariable 'String', 'none'
    v169 <- CallMethod v16, 'flat', [v168]
    v170 <- LoadInteger '1'
    v171 <- LoadInteger '2'
    v172 <- CreateArray [v171]
    v173 <- LoadInteger '3'
    v174 <- CreateArray [v173]
    v175 <- CreateArray [v174]
    v176 <- CreateArray [v170, v172, v175]
    v177 <- LoadInteger '2'
    v178 <- CallMethod v16, 'flat', [v177]
    v179 <- LoadInteger '1'
    v180 <- LoadInteger '2'
    v181 <- LoadInteger '3'
    v182 <- CreateArray [v179, v180, v181]
    v183 <- CallMethod v16, 'flat', [v44]
    v184 <- LoadInteger '1'
    v185 <- LoadInteger '2'
    v186 <- LoadInteger '3'
    v187 <- CreateArray [v184, v185, v186]
    v188 <- BeginArrowFunction -> 
        v189 <- CreateNamedVariable 'Symbol', 'none'
        v190 <- CallFunction v189, []
        v191 <- CallMethod v16, 'flat', [v190]
    EndArrowFunction
    v192 <- CallFunction v188, []
    v193 <- CreateNamedVariable 'TypeError', 'none'
    v194 <- BeginArrowFunction -> 
        v195 <- LoadNull
        v196 <- CreateNamedVariable 'Object', 'none'
        v197 <- CallMethod v196, 'create', [v195]
        v198 <- CallMethod v16, 'flat', [v197]
    EndArrowFunction
    v199 <- CallFunction v194, []
EndBlockStatement
BeginBlockStatement
    v200 <- LoadString 'a'
    v201 <- LoadString 'b'
    v202 <- LoadString 'c'
    v203 <- LoadString 'wat'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v200
        ObjectLiteralAddElement `1`, v201
        ObjectLiteralAddElement `2`, v202
        ObjectLiteralAddProperty `length`, v203
    v204 <- EndObjectLiteral
    v205 <- CreateNamedVariable 'input', 'const', v204
    v206 <- CreateNamedVariable 'Infinity', 'none'
    v207 <- GetProperty v0, 'prototype'
    v208 <- GetProperty v207, 'flat'
    v209 <- CallMethod v208, 'call', [v205, v206]
    v210 <- CreateArray []
EndBlockStatement
BeginBlockStatement
    v211 <- LoadInteger '0'
    v212 <- CreateNamedVariable 'count', 'let', v211
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v213
            v214 <- UnaryOperation '++', v212
            v215 <- LoadInteger '0'
            Return v215
        EndObjectLiteralGetter
    v216 <- EndObjectLiteral
    v217 <- CreateNamedVariable 'input', 'const', v216
    v218 <- CreateNamedVariable 'Infinity', 'none'
    v219 <- GetProperty v0, 'prototype'
    v220 <- GetProperty v219, 'flat'
    v221 <- CallMethod v220, 'call', [v217, v218]
    v222 <- CreateNamedVariable 'result', 'const', v221
    v223 <- LoadInteger '1'
EndBlockStatement
BeginBlockStatement
    v224 <- GetProperty v0, 'prototype'
    v225 <- LoadString 'flat'
    v226 <- CreateNamedVariable 'Object', 'none'
    v227 <- CallMethod v226, 'getOwnPropertyDescriptor', [v224, v225]
    v228 <- CreateNamedVariable 'descriptor', 'const', v227
    v229 <- GetProperty v228, 'value'
    v230 <- GetProperty v0, 'prototype'
    v231 <- GetProperty v230, 'flat'
    v232 <- GetProperty v228, 'writable'
    v233 <- LoadBoolean 'true'
    v234 <- GetProperty v228, 'enumerable'
    v235 <- LoadBoolean 'false'
    v236 <- GetProperty v228, 'configurable'
    v237 <- LoadBoolean 'true'
EndBlockStatement


Array.prototype.flat.length;
Array.prototype.flat.name;
{
    const input = [1,[2],[[3]]];
    input.flat();
    [1,2,[3]];
    input.flat(1);
    [1,2,[3]];
    input.flat(true);
    [1,2,[3]];
    input.flat(undefined);
    [1,2,[3]];
    input.flat(-Infinity);
    [1,[2],[[3]]];
    input.flat(-1);
    [1,[2],[[3]]];
    input.flat(-0);
    [1,[2],[[3]]];
    input.flat(0);
    [1,[2],[[3]]];
    input.flat(false);
    [1,[2],[[3]]];
    input.flat(null);
    [1,[2],[[3]]];
    input.flat("");
    [1,[2],[[3]]];
    input.flat("foo");
    [1,[2],[[3]]];
    input.flat(/./);
    [1,[2],[[3]]];
    input.flat([]);
    [1,[2],[[3]]];
    input.flat({});
    [1,[2],[[3]]];
    const v147 = {};
    const v149 = new Proxy(v147, {});
    input.flat(v149);
    [1,[2],[[3]]];
    const v158 = (a159) => {
        return a159;
    };
    input.flat(v158);
    [1,[2],[[3]]];
    input.flat(String);
    [1,[2],[[3]]];
    input.flat(2);
    [1,2,3];
    input.flat(Infinity);
    [1,2,3];
    const v188 = () => {
        input.flat(Symbol());
    };
    v188();
    const v194 = () => {
        input.flat(Object.create(null));
    };
    v194();
}
{
    const input = { 0: "a", 1: "b", 2: "c", length: "wat" };
    Array.prototype.flat.call(input, Infinity);
    [];
}
{
    let count = 0;
    const v216 = {
        get length() {
            ++count;
            return 0;
        },
    };
    const input = v216;
    const result = Array.prototype.flat.call(input, Infinity);
}
{
    const descriptor = Object.getOwnPropertyDescriptor(Array.prototype, "flat");
    descriptor.value;
    Array.prototype.flat;
    descriptor.writable;
    descriptor.enumerable;
    descriptor.configurable;
}

FuzzIL program written to corpus/array-flat.fzil
