v0 <- CreateNamedVariable 'Map', 'none'
v1 <- LoadInteger '1'
v2 <- LoadInteger '2'
v3 <- CreateArray [v1, v2]
v4 <- LoadInteger '2'
v5 <- LoadInteger '3'
v6 <- CreateArray [v4, v5]
v7 <- LoadInteger '3'
v8 <- LoadInteger '4'
v9 <- CreateArray [v7, v8]
v10 <- CreateArray [v3, v6, v9]
v11 <- Construct v0, [v10]
v12 <- CreateNamedVariable 'map', 'var', v11
v13 <- BeginArrowFunction -> 
    v14 <- BeginArrowFunction -> 
        v15 <- LoadBoolean 'true'
        BeginObjectLiteral
            ObjectLiteralAddProperty `done`, v15
        v16 <- EndObjectLiteral
        Return v16
    EndArrowFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `next`, v14
    v17 <- EndObjectLiteral
    Return v17
EndArrowFunction
v18 <- GetProperty v12, '__proto__'
v19 <- CreateNamedVariable 'Symbol', 'none'
v20 <- GetProperty v19, 'iterator'
SetComputedProperty v18, v20, v13
v21 <- CreateArray []
v22 <- CreateArrayWithSpread [...v12]
v23 <- LoadInteger '1'
v24 <- LoadInteger '2'
v25 <- CreateArray [v23, v24]
v26 <- LoadInteger '2'
v27 <- LoadInteger '3'
v28 <- CreateArray [v26, v27]
v29 <- LoadInteger '3'
v30 <- LoadInteger '4'
v31 <- CreateArray [v29, v30]
v32 <- CreateArray [v25, v28, v31]
v33 <- CallMethod v12, 'entries', []
v34 <- CreateArrayWithSpread [...v33]
v35 <- LoadInteger '1'
v36 <- LoadInteger '2'
v37 <- LoadInteger '3'
v38 <- CreateArray [v35, v36, v37]
v39 <- CallMethod v12, 'keys', []
v40 <- CreateArrayWithSpread [...v39]
v41 <- LoadInteger '2'
v42 <- LoadInteger '3'
v43 <- LoadInteger '4'
v44 <- CreateArray [v41, v42, v43]
v45 <- CallMethod v12, 'values', []
v46 <- CreateArrayWithSpread [...v45]


const v11 = new Map([[1,2],[2,3],[3,4]]);
var map = v11;
const v13 = () => {
    const v14 = () => {
        return { done: true };
    };
    return { next: v14 };
};
const t8 = map.__proto__;
t8[Symbol.iterator] = v13;
[];
[...map];
[[1,2],[2,3],[3,4]];
[...map.entries()];
[1,2,3];
[...map.keys()];
[2,3,4];
[...map.values()];

FuzzIL program written to corpus/map-iterator-2.fzil
