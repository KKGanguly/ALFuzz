v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '65536'
    v3 <- BinaryOperation v1, '/', v2
    v4 <- CreateNamedVariable 'Math', 'none'
    v5 <- CallMethod v4, 'floor', [v3]
    Return v5
EndPlainFunction
v6 <- BeginPlainFunction -> v7
    v8 <- LoadInteger '0'
    v9 <- BinaryOperation v7, '>>>', v8
    Return v9
EndPlainFunction
v10 <- BeginPlainFunction -> v11
    v12 <- CallFunction v6, [v11]
    v13 <- CallFunction v0, [v12]
    Return v13
EndPlainFunction
BeginForLoopInitializer
    v14 <- LoadInteger '0'
BeginForLoopCondition -> v15
    v16 <- LoadInteger '5'
    v17 <- Compare v15, '<', v16
BeginForLoopAfterthought v17 -> v18
    v19 <- UnaryOperation v18, '++'
BeginForLoopBody -> v20
    v21 <- LoadInteger '0'
    v22 <- CallFunction v10, [v21]
EndForLoop
v23 <- LoadInteger '2147483648'
v24 <- CallFunction v0, [v23]
v25 <- LoadInteger '32768'
v26 <- LoadInteger '2147483648'
v27 <- CallFunction v10, [v26]


function broken(a1) {
    return Math.floor(a1 / 65536);
}
function toUnsigned(a7) {
    return a7 >>> 0;
}
function outer(a11) {
    return broken(toUnsigned(a11));
}
for (let i15 = 0; i15 < 5; i15++) {
    outer(0);
}
broken(2147483648);
outer(2147483648);

FuzzIL program written to corpus/regress-4507.fzil
