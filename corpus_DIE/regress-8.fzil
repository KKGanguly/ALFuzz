v0 <- LoadString ''
v1 <- CreateNamedVariable 'gp', 'var', v0
v2 <- LoadString ''
v3 <- CreateNamedVariable 'yE', 'var', v2
v4 <- LoadString ''
v5 <- CreateNamedVariable 'W', 'var', v4
v6 <- LoadString ''
v7 <- CreateNamedVariable 'LA', 'var', v6
v8 <- LoadString ''
v9 <- CreateNamedVariable 'zE', 'var', v8
v10 <- LoadString ''
v11 <- CreateNamedVariable 'Fp', 'var', v10
v12 <- LoadString ''
v13 <- CreateNamedVariable 'AE', 'var', v12
v14 <- LoadString ''
v15 <- CreateNamedVariable 'Gob', 'var', v14
v16 <- LoadString ''
v17 <- CreateNamedVariable 'Hob', 'var', v16
v18 <- LoadString ''
v19 <- CreateNamedVariable 'Iob', 'var', v18
v20 <- LoadString ''
v21 <- CreateNamedVariable 'Job', 'var', v20
v22 <- LoadString ''
v23 <- CreateNamedVariable 'Kob', 'var', v22
v24 <- LoadString ''
v25 <- CreateNamedVariable 'Lob', 'var', v24
v26 <- LoadString ''
v27 <- CreateNamedVariable 'Mob', 'var', v26
v28 <- LoadString ''
v29 <- CreateNamedVariable 'p', 'var', v28
v30 <- BeginPlainFunction -> 
    v31 <- BeginPlainFunction -> v32, v33, v34, v35, v36
        v37 <- BinaryOperation v32, '+', v33
        v38 <- BinaryOperation v37, '+', v34
        v39 <- BinaryOperation v38, '+', v35
        v40 <- BinaryOperation v39, '+', v36
        Return v40
    EndPlainFunction
    v41 <- LoadThis
    SetProperty v41, 'append', v31
EndPlainFunction
v42 <- BeginPlainFunction -> v43, v44
    v45 <- LoadUndefined
    v46 <- CreateNamedVariable 'c', 'var', v45
    v47 <- LoadInteger '2'
    v48 <- Compare v43, '==', v47
    BeginIf v48
        v49 <- Construct v30, []
        Reassign v46, v49
        v50 <- GetProperty v44, 'Un'
        v51 <- GetProperty v44, 'Im'
        v52 <- GetProperty v44, 'total'
        v53 <- BinaryOperation v52, '+', v15
        v54 <- BinaryOperation v7, '+', v53
        v55 <- BinaryOperation v13, '+', v54
        v56 <- BinaryOperation v9, '+', v55
        v57 <- BinaryOperation v51, '+', v56
        v58 <- BinaryOperation v7, '+', v57
        v59 <- BinaryOperation v11, '+', v58
        v60 <- BinaryOperation v9, '+', v59
        v61 <- BinaryOperation v50, '+', v60
        v62 <- BinaryOperation v7, '+', v61
        v63 <- CallMethod v46, 'append', [v1, v3, v5, v62, v29]
        v64 <- CallMethod v46, 'toString', []
        Reassign v46, v64
    BeginElse
        v65 <- LoadInteger '1'
        v66 <- Compare v43, '==', v65
        BeginIf v66
            v67 <- GetProperty v44, 'total'
            v68 <- LoadInteger '2000000'
            v69 <- Compare v67, '>=', v68
            BeginIf v69
                v70 <- Construct v30, []
                Reassign v46, v70
                v71 <- GetProperty v44, 'Un'
                v72 <- GetProperty v44, 'Im'
                v73 <- BinaryOperation v72, '+', v17
                v74 <- BinaryOperation v7, '+', v73
                v75 <- BinaryOperation v11, '+', v74
                v76 <- BinaryOperation v9, '+', v75
                v77 <- BinaryOperation v71, '+', v76
                v78 <- BinaryOperation v7, '+', v77
                v79 <- CallMethod v46, 'append', [v1, v3, v5, v78, v29]
                v80 <- CallMethod v46, 'toString', []
                Reassign v46, v80
            BeginElse
                v81 <- GetProperty v44, 'total'
                v82 <- LoadInteger '200000'
                v83 <- Compare v81, '>=', v82
                BeginIf v83
                    v84 <- Construct v30, []
                    Reassign v46, v84
                    v85 <- GetProperty v44, 'Un'
                    v86 <- GetProperty v44, 'Im'
                    v87 <- BinaryOperation v86, '+', v19
                    v88 <- BinaryOperation v7, '+', v87
                    v89 <- BinaryOperation v11, '+', v88
                    v90 <- BinaryOperation v9, '+', v89
                    v91 <- BinaryOperation v85, '+', v90
                    v92 <- BinaryOperation v7, '+', v91
                    v93 <- CallMethod v46, 'append', [v1, v3, v5, v92, v29]
                    v94 <- CallMethod v46, 'toString', []
                    Reassign v46, v94
                BeginElse
                    v95 <- GetProperty v44, 'total'
                    v96 <- LoadInteger '20000'
                    v97 <- Compare v95, '>=', v96
                    BeginIf v97
                        v98 <- Construct v30, []
                        Reassign v46, v98
                        v99 <- GetProperty v44, 'Un'
                        v100 <- GetProperty v44, 'Im'
                        v101 <- BinaryOperation v100, '+', v21
                        v102 <- BinaryOperation v7, '+', v101
                        v103 <- BinaryOperation v11, '+', v102
                        v104 <- BinaryOperation v9, '+', v103
                        v105 <- BinaryOperation v99, '+', v104
                        v106 <- BinaryOperation v7, '+', v105
                        v107 <- CallMethod v46, 'append', [v1, v3, v5, v106, v29]
                        v108 <- CallMethod v46, 'toString', []
                        Reassign v46, v108
                    BeginElse
                        v109 <- GetProperty v44, 'total'
                        v110 <- LoadInteger '2000'
                        v111 <- Compare v109, '>=', v110
                        BeginIf v111
                            v112 <- Construct v30, []
                            Reassign v46, v112
                            v113 <- GetProperty v44, 'Un'
                            v114 <- GetProperty v44, 'Im'
                            v115 <- BinaryOperation v114, '+', v23
                            v116 <- BinaryOperation v7, '+', v115
                            v117 <- BinaryOperation v11, '+', v116
                            v118 <- BinaryOperation v9, '+', v117
                            v119 <- BinaryOperation v113, '+', v118
                            v120 <- BinaryOperation v7, '+', v119
                            v121 <- CallMethod v46, 'append', [v1, v3, v5, v120, v29]
                            v122 <- CallMethod v46, 'toString', []
                            Reassign v46, v122
                        BeginElse
                            v123 <- GetProperty v44, 'total'
                            v124 <- LoadInteger '200'
                            v125 <- Compare v123, '>=', v124
                            BeginIf v125
                                v126 <- Construct v30, []
                                Reassign v46, v126
                                v127 <- GetProperty v44, 'Un'
                                v128 <- GetProperty v44, 'Im'
                                v129 <- BinaryOperation v128, '+', v25
                                v130 <- BinaryOperation v7, '+', v129
                                v131 <- BinaryOperation v11, '+', v130
                                v132 <- BinaryOperation v9, '+', v131
                                v133 <- BinaryOperation v127, '+', v132
                                v134 <- BinaryOperation v7, '+', v133
                                v135 <- CallMethod v46, 'append', [v1, v3, v5, v134, v29]
                                v136 <- CallMethod v46, 'toString', []
                                Reassign v46, v136
                            BeginElse
                                v137 <- Construct v30, []
                                Reassign v46, v137
                                v138 <- GetProperty v44, 'Un'
                                v139 <- GetProperty v44, 'Im'
                                v140 <- GetProperty v44, 'total'
                                v141 <- BinaryOperation v140, '+', v9
                                v142 <- BinaryOperation v7, '+', v141
                                v143 <- BinaryOperation v27, '+', v142
                                v144 <- BinaryOperation v9, '+', v143
                                v145 <- BinaryOperation v139, '+', v144
                                v146 <- BinaryOperation v7, '+', v145
                                v147 <- BinaryOperation v11, '+', v146
                                v148 <- BinaryOperation v9, '+', v147
                                v149 <- BinaryOperation v138, '+', v148
                                v150 <- BinaryOperation v7, '+', v149
                                v151 <- CallMethod v46, 'append', [v1, v3, v5, v150, v29]
                                v152 <- CallMethod v46, 'toString', []
                                Reassign v46, v152
                            EndIf
                            Reassign v46, v46
                        EndIf
                        Reassign v46, v46
                    EndIf
                    Reassign v46, v46
                EndIf
                Reassign v46, v46
            EndIf
            Reassign v46, v46
        BeginElse
            v153 <- Construct v30, []
            Reassign v46, v153
            v154 <- GetProperty v44, 'Un'
            v155 <- GetProperty v44, 'Im'
            v156 <- GetProperty v44, 'total'
            v157 <- BinaryOperation v156, '+', v9
            v158 <- BinaryOperation v7, '+', v157
            v159 <- BinaryOperation v13, '+', v158
            v160 <- BinaryOperation v9, '+', v159
            v161 <- BinaryOperation v155, '+', v160
            v162 <- BinaryOperation v7, '+', v161
            v163 <- BinaryOperation v11, '+', v162
            v164 <- BinaryOperation v9, '+', v163
            v165 <- BinaryOperation v154, '+', v164
            v166 <- BinaryOperation v7, '+', v165
            v167 <- CallMethod v46, 'append', [v1, v3, v5, v166, v29]
            v168 <- CallMethod v46, 'toString', []
            Reassign v46, v168
        EndIf
        Reassign v46, v46
    EndIf
    Return v46
EndPlainFunction
v169 <- LoadInteger '2'
v170 <- LoadString ''
v171 <- LoadString ''
v172 <- LoadInteger '42'
BeginObjectLiteral
    ObjectLiteralAddProperty `Un`, v170
    ObjectLiteralAddProperty `Im`, v171
    ObjectLiteralAddProperty `total`, v172
v173 <- EndObjectLiteral
v174 <- CallFunction v42, [v169, v173]


var gp = "";
var yE = "";
var W = "";
var LA = "";
var zE = "";
var Fp = "";
var AE = "";
var Gob = "";
var Hob = "";
var Iob = "";
var Job = "";
var Kob = "";
var Lob = "";
var Mob = "";
var p = "";
function O() {
    function f31(a32, a33, a34, a35, a36) {
        return (((a32 + a33) + a34) + a35) + a36;
    }
    this.append = f31;
}
function Nob(a43, a44) {
    var c;
    if (a43 == 2) {
        const v49 = new O();
        c = v49;
        c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + (zE + (AE + (LA + (a44.total + Gob))))))))), p);
        c = c.toString();
    } else {
        if (a43 == 1) {
            if (a44.total >= 2000000) {
                const v70 = new O();
                c = v70;
                c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + Hob))))), p);
                c = c.toString();
            } else {
                if (a44.total >= 200000) {
                    const v84 = new O();
                    c = v84;
                    c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + Iob))))), p);
                    c = c.toString();
                } else {
                    if (a44.total >= 20000) {
                        const v98 = new O();
                        c = v98;
                        c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + Job))))), p);
                        c = c.toString();
                    } else {
                        if (a44.total >= 2000) {
                            const v112 = new O();
                            c = v112;
                            c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + Kob))))), p);
                            c = c.toString();
                        } else {
                            if (a44.total >= 200) {
                                const v126 = new O();
                                c = v126;
                                c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + Lob))))), p);
                                c = c.toString();
                            } else {
                                const v137 = new O();
                                c = v137;
                                c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + (zE + (Mob + (LA + (a44.total + zE))))))))), p);
                                c = c.toString();
                            }
                            c = c;
                        }
                        c = c;
                    }
                    c = c;
                }
                c = c;
            }
            c = c;
        } else {
            const v153 = new O();
            c = v153;
            c.append(gp, yE, W, LA + (a44.Un + (zE + (Fp + (LA + (a44.Im + (zE + (AE + (LA + (a44.total + zE))))))))), p);
            c = c.toString();
        }
        c = c;
    }
    return c;
}
Nob(2, { Un: "", Im: "", total: 42 });

FuzzIL program written to corpus/regress-8.fzil
