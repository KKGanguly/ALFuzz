v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    v3 <- CreateNamedVariable 'sum', 'var', v2
    v4 <- LoadInteger '100'
    v5 <- LoadInteger '200'
    v6 <- TernaryOperation v1, v4, v5
    v7 <- CreateNamedVariable 'inc', 'var', v6
    BeginForLoopInitializer
        v8 <- LoadInteger '0'
    BeginForLoopCondition -> v9
        v10 <- LoadInteger '100000'
        v11 <- Compare v9, '<', v10
    BeginForLoopAfterthought v11 -> v12
        v13 <- UnaryOperation v12, '++'
    BeginForLoopBody -> v14
        Update v3, '+', v7
    EndForLoop
    v15 <- BinaryOperation v3, '+', v7
    Return v15
EndPlainFunction
v16 <- BeginPlainFunction -> v17
    v18 <- LoadInteger '0'
    v19 <- CreateNamedVariable 'sum', 'var', v18
    v20 <- LoadInteger '100'
    v21 <- LoadInteger '200'
    v22 <- TernaryOperation v17, v20, v21
    v23 <- CreateNamedVariable 'inc', 'var', v22
    v24 <- LoadInteger '5'
    v25 <- LoadInteger '6'
    v26 <- TernaryOperation v17, v24, v25
    v27 <- CreateNamedVariable 'x', 'var', v26
    v28 <- LoadInteger '7'
    v29 <- LoadInteger '8'
    v30 <- TernaryOperation v17, v28, v29
    v31 <- CreateNamedVariable 'y', 'var', v30
    BeginForLoopInitializer
        v32 <- LoadInteger '0'
    BeginForLoopCondition -> v33
        v34 <- LoadInteger '100000'
        v35 <- Compare v33, '<', v34
    BeginForLoopAfterthought v35 -> v36
        v37 <- UnaryOperation v36, '++'
    BeginForLoopBody -> v38
        Update v19, '+', v23
    EndForLoop
    v39 <- TernaryOperation v19, v27, v31
    Return v39
EndPlainFunction
v40 <- BeginPlainFunction -> v41
    v42 <- LoadInteger '100001'
    v43 <- LoadInteger '100002'
    v44 <- TernaryOperation v41, v42, v43
    v45 <- CreateNamedVariable 'limit', 'var', v44
    v46 <- LoadInteger '1'
    v47 <- CreateNamedVariable 'r', 'var', v46
    v48 <- LoadInteger '1'
    v49 <- LoadInteger '2'
    v50 <- TernaryOperation v41, v48, v49
    v51 <- CreateNamedVariable 'x', 'var', v50
    v52 <- LoadInteger '3'
    v53 <- LoadInteger '4'
    v54 <- TernaryOperation v41, v52, v53
    v55 <- CreateNamedVariable 'y', 'var', v54
    BeginForLoopInitializer
        v56 <- LoadInteger '0'
    BeginForLoopCondition -> v57
        v58 <- Compare v57, '<', v45
    BeginForLoopAfterthought v58 -> v59
        v60 <- UnaryOperation v59, '++'
    BeginForLoopBody -> v61
        v62 <- LoadInteger '1'
        v63 <- UnaryOperation '-', v62
        v64 <- BinaryOperation v47, '*', v63
        Reassign v47, v64
    EndForLoop
    v65 <- LoadInteger '0'
    v66 <- Compare v47, '>', v65
    v67 <- Compare v51, '==', v55
    v68 <- Compare v51, '!=', v55
    v69 <- TernaryOperation v66, v67, v68
    Return v69
EndPlainFunction
v70 <- BeginPlainFunction -> v71
    v72 <- LoadInteger '100001'
    v73 <- LoadInteger '100002'
    v74 <- TernaryOperation v71, v72, v73
    v75 <- CreateNamedVariable 'limit', 'var', v74
    v76 <- LoadInteger '1'
    v77 <- CreateNamedVariable 'r', 'var', v76
    v78 <- LoadInteger '1'
    v79 <- LoadInteger '2'
    v80 <- TernaryOperation v71, v78, v79
    v81 <- CreateNamedVariable 'x', 'var', v80
    v82 <- LoadInteger '3'
    v83 <- LoadInteger '4'
    v84 <- TernaryOperation v71, v82, v83
    v85 <- CreateNamedVariable 'y', 'var', v84
    BeginForLoopInitializer
        v86 <- LoadInteger '0'
    BeginForLoopCondition -> v87
        v88 <- Compare v87, '<', v75
    BeginForLoopAfterthought v88 -> v89
        v90 <- UnaryOperation v89, '++'
    BeginForLoopBody -> v91
        v92 <- LoadInteger '1'
        v93 <- UnaryOperation '-', v92
        v94 <- BinaryOperation v77, '*', v93
        Reassign v77, v94
    EndForLoop
    v95 <- LoadInteger '0'
    v96 <- Compare v77, '>', v95
    v97 <- TernaryOperation v96, v81, v85
    v98 <- CreateNamedVariable 'w', 'var', v97
    v99 <- LoadInteger '0'
    v100 <- Compare v77, '>', v99
    v101 <- TernaryOperation v100, v85, v81
    v102 <- CreateNamedVariable 'z', 'var', v101
    v103 <- Compare v98, '===', v102
    Return v103
EndPlainFunction
v104 <- BeginPlainFunction -> v105, v106, v107
    v108 <- LoadBoolean 'true'
    v109 <- CallFunction v105, [v108]
    v110 <- LoadBoolean 'false'
    v111 <- CallFunction v105, [v110]
    v112 <- LoadBoolean 'true'
    v113 <- CallFunction v105, [v112]
    v114 <- LoadBoolean 'false'
    v115 <- CallFunction v105, [v114]
EndPlainFunction
v116 <- LoadInteger '10000100'
v117 <- LoadInteger '20000200'
v118 <- CallFunction v104, [v0, v116, v117]
v119 <- LoadInteger '5'
v120 <- LoadInteger '6'
v121 <- CallFunction v104, [v16, v119, v120]
v122 <- LoadBoolean 'true'
v123 <- LoadBoolean 'false'
v124 <- CallFunction v104, [v40, v122, v123]
v125 <- LoadBoolean 'false'
v126 <- LoadBoolean 'false'
v127 <- CallFunction v104, [v70, v125, v126]


function foo(a1) {
    var sum = 0;
    var inc = a1 ? 100 : 200;
    for (let i9 = 0; i9 < 100000; i9++) {
        sum += inc;
    }
    return sum + inc;
}
function bar(a17) {
    var sum = 0;
    var inc = a17 ? 100 : 200;
    var x = a17 ? 5 : 6;
    var y = a17 ? 7 : 8;
    for (let i33 = 0; i33 < 100000; i33++) {
        sum += inc;
    }
    return sum ? x : y;
}
function baz(a41) {
    var limit = a41 ? 100001 : 100002;
    var r = 1;
    var x = a41 ? 1 : 2;
    var y = a41 ? 3 : 4;
    for (let i57 = 0; i57 < limit; i57++) {
        r = r * -1;
    }
    return r > 0 ? x == y : x != y;
}
function qux(a71) {
    var limit = a71 ? 100001 : 100002;
    var r = 1;
    var x = a71 ? 1 : 2;
    var y = a71 ? 3 : 4;
    for (let i87 = 0; i87 < limit; i87++) {
        r = r * -1;
    }
    var w = r > 0 ? x : y;
    var z = r > 0 ? y : x;
    return w === z;
}
function test(a105, a106, a107) {
    a105(true);
    a105(false);
    a105(true);
    a105(false);
}
test(foo, 10000100, 20000200);
test(bar, 5, 6);
test(baz, true, false);
test(qux, false, false);

FuzzIL program written to corpus/osr-follow.fzil
