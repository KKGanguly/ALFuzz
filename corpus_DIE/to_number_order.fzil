v0 <- LoadString ''
v1 <- CreateNamedVariable 'x', 'var', v0
v2 <- CreateNamedVariable 'Object', 'none'
v3 <- Construct v2, []
v4 <- CreateNamedVariable 'v', 'var', v3
v5 <- Construct v2, []
v6 <- CreateNamedVariable 'w', 'var', v5
v7 <- BeginPlainFunction -> 
    v8 <- LoadString 'hest'
    Update v1, '+', v8
    v9 <- LoadInteger '1'
    Return v9
EndPlainFunction
v10 <- CreateNamedVariable 'vv', 'var', v7
v11 <- BeginPlainFunction -> 
    v12 <- LoadString 'fisk'
    Update v1, '+', v12
    v13 <- LoadInteger '2'
    Return v13
EndPlainFunction
v14 <- CreateNamedVariable 'ww', 'var', v11
SetProperty v4, 'valueOf', v10
SetProperty v6, 'valueOf', v14
v15 <- LoadInteger '1'
v16 <- CreateNamedVariable 'Math', 'none'
v17 <- CallMethod v16, 'min', [v4, v6]
v18 <- LoadString 'hestfisk'
v19 <- LoadString 'min'
v20 <- LoadString ''
Reassign v1, v20
v21 <- LoadInteger '2'
v22 <- CallMethod v16, 'max', [v4, v6]
v23 <- LoadString 'hestfisk'
v24 <- LoadString 'max'
v25 <- LoadString ''
Reassign v1, v25
v26 <- LoadInteger '1'
v27 <- CallMethod v16, 'max', [v4, v4]
v28 <- LoadString 'hesthest'
v29 <- LoadString 'max_identical'
v30 <- LoadString ''
Reassign v1, v30
v31 <- LoadInteger '2'
v32 <- CallMethod v16, 'min', [v6, v6]
v33 <- LoadString 'fiskfisk'
v34 <- LoadString 'max'
v35 <- LoadString ''
Reassign v1, v35
v36 <- LoadInteger '1'
v37 <- LoadInteger '2'
v38 <- CallMethod v16, 'atan2', [v36, v37]
v39 <- CallMethod v16, 'atan2', [v4, v6]
v40 <- LoadString 'hestfisk'
v41 <- LoadString 'atan2'
v42 <- LoadString ''
Reassign v1, v42
v43 <- LoadInteger '1'
v44 <- CallMethod v16, 'pow', [v4, v6]
v45 <- LoadString 'hestfisk'
v46 <- LoadString 'pow'
v47 <- LoadString ''
Reassign v1, v47
v48 <- BeginPlainFunction -> 
    v49 <- LoadString 'hest'
    Update v1, '+', v49
    v50 <- LoadInteger '1'
    v51 <- LoadInteger '0'
    v52 <- BinaryOperation v50, '/', v51
    Return v52
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v48
v53 <- EndObjectLiteral
v54 <- CreateNamedVariable 'a', 'var', v53
v55 <- BeginPlainFunction -> 
    v56 <- LoadString 'fisk'
    Update v1, '+', v56
    v57 <- LoadInteger '1'
    Return v57
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v55
v58 <- EndObjectLiteral
v59 <- CreateNamedVariable 'b', 'var', v58
v60 <- LoadInteger '1'
v61 <- LoadInteger '0'
v62 <- BinaryOperation v60, '/', v61
v63 <- CallMethod v16, 'hypot', [v54, v59]
v64 <- LoadString 'hestfisk'
v65 <- LoadString 'hypot'
v66 <- BeginPlainFunction -> 
    v67 <- LoadInteger '1'
    Update v1, '+', v67
    v68 <- LoadInteger '2007'
    Return v68
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v66
v69 <- EndObjectLiteral
v70 <- CreateNamedVariable 'year', 'var', v69
v71 <- BeginPlainFunction -> 
    v72 <- LoadInteger '2'
    Update v1, '+', v72
    v73 <- LoadInteger '2'
    Return v73
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v71
v74 <- EndObjectLiteral
v75 <- CreateNamedVariable 'month', 'var', v74
v76 <- BeginPlainFunction -> 
    v77 <- LoadInteger '3'
    Update v1, '+', v77
    v78 <- LoadInteger '4'
    Return v78
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v76
v79 <- EndObjectLiteral
v80 <- CreateNamedVariable 'date', 'var', v79
v81 <- BeginPlainFunction -> 
    v82 <- LoadInteger '4'
    Update v1, '+', v82
    v83 <- LoadInteger '13'
    Return v83
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v81
v84 <- EndObjectLiteral
v85 <- CreateNamedVariable 'hours', 'var', v84
v86 <- BeginPlainFunction -> 
    v87 <- LoadInteger '5'
    Update v1, '+', v87
    v88 <- LoadInteger '50'
    Return v88
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v86
v89 <- EndObjectLiteral
v90 <- CreateNamedVariable 'minutes', 'var', v89
v91 <- BeginPlainFunction -> 
    v92 <- LoadInteger '6'
    Update v1, '+', v92
    v93 <- LoadInteger '0'
    Return v93
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v91
v94 <- EndObjectLiteral
v95 <- CreateNamedVariable 'seconds', 'var', v94
v96 <- BeginPlainFunction -> 
    v97 <- LoadInteger '7'
    Update v1, '+', v97
    v98 <- LoadInteger '999'
    Return v98
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v96
v99 <- EndObjectLiteral
v100 <- CreateNamedVariable 'ms', 'var', v99
v101 <- LoadString ''
Reassign v1, v101
v102 <- CreateNamedVariable 'Date', 'none'
v103 <- Construct v102, [v70, v75, v80, v85, v90, v95, v100]
v104 <- LoadString '1234567'
v105 <- LoadString 'Date'
v106 <- LoadString ''
Reassign v1, v106
v107 <- CallFunction v102, [v70, v75, v80, v85, v90, v95, v100]
v108 <- LoadString ''
v109 <- LoadString 'Date not constructor'
v110 <- LoadString ''
Reassign v1, v110
v111 <- CallMethod v102, 'UTC', [v70, v75, v80, v85, v90, v95, v100]
v112 <- LoadString '1234567'
v113 <- LoadString 'Date.UTC'
v114 <- LoadString ''
Reassign v1, v114
v115 <- Construct v102, []
v116 <- CallMethod v115, 'setSeconds', [v95, v100]
v117 <- LoadString '67'
v118 <- LoadString 'Date.UTC'
v119 <- LoadString ''
Reassign v1, v119
v120 <- Construct v102, []
v121 <- CallMethod v120, 'setSeconds', [v95, v100]
v122 <- LoadString '67'
v123 <- LoadString 'Date.setSeconds'
v124 <- LoadString ''
Reassign v1, v124
v125 <- Construct v102, []
v126 <- CallMethod v125, 'setUTCSeconds', [v95, v100]
v127 <- LoadString '67'
v128 <- LoadString 'Date.setUTCSeconds'
v129 <- LoadString ''
Reassign v1, v129
v130 <- Construct v102, []
v131 <- CallMethod v130, 'setMinutes', [v90, v95, v100]
v132 <- LoadString '567'
v133 <- LoadString 'Date.setMinutes'
v134 <- LoadString ''
Reassign v1, v134
v135 <- Construct v102, []
v136 <- CallMethod v135, 'setUTCMinutes', [v90, v95, v100]
v137 <- LoadString '567'
v138 <- LoadString 'Date.setUTCMinutes'
v139 <- LoadString ''
Reassign v1, v139
v140 <- Construct v102, []
v141 <- CallMethod v140, 'setHours', [v85, v90, v95, v100]
v142 <- LoadString '4567'
v143 <- LoadString 'Date.setHours'
v144 <- LoadString ''
Reassign v1, v144
v145 <- Construct v102, []
v146 <- CallMethod v145, 'setUTCHours', [v85, v90, v95, v100]
v147 <- LoadString '4567'
v148 <- LoadString 'Date.setUTCHours'
v149 <- LoadString ''
Reassign v1, v149
v150 <- Construct v102, []
v151 <- CallMethod v150, 'setDate', [v80, v85, v90, v95, v100]
v152 <- LoadString '3'
v153 <- LoadString 'Date.setDate'
v154 <- LoadString ''
Reassign v1, v154
v155 <- Construct v102, []
v156 <- CallMethod v155, 'setUTCDate', [v80, v85, v90, v95, v100]
v157 <- LoadString '3'
v158 <- LoadString 'Date.setUTCDate'
v159 <- LoadString ''
Reassign v1, v159
v160 <- Construct v102, []
v161 <- CallMethod v160, 'setMonth', [v75, v80, v85, v90, v95, v100]
v162 <- LoadString '23'
v163 <- LoadString 'Date.setMonth'
v164 <- LoadString ''
Reassign v1, v164
v165 <- Construct v102, []
v166 <- CallMethod v165, 'setUTCMonth', [v75, v80, v85, v90, v95, v100]
v167 <- LoadString '23'
v168 <- LoadString 'Date.setUTCMonth'
v169 <- LoadString ''
Reassign v1, v169
v170 <- Construct v102, []
v171 <- CallMethod v170, 'setFullYear', [v70, v75, v80, v85, v90, v95, v100]
v172 <- LoadString '123'
v173 <- LoadString 'Date.setFullYear'
v174 <- LoadString ''
Reassign v1, v174
v175 <- Construct v102, []
v176 <- CallMethod v175, 'setUTCFullYear', [v70, v75, v80, v85, v90, v95, v100]
v177 <- LoadString '123'
v178 <- LoadString 'Date.setUTCFullYear'
v179 <- LoadString ''
Reassign v1, v179
v180 <- BeginPlainFunction -> 
    v181 <- LoadString 'hest'
    Update v1, '+', v181
    v182 <- LoadInteger '97'
    Return v182
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v180
v183 <- EndObjectLiteral
v184 <- CreateNamedVariable 'a', 'var', v183
v185 <- BeginPlainFunction -> 
    v186 <- LoadString 'fisk'
    Update v1, '+', v186
    v187 <- LoadInteger '98'
    Return v187
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v185
v188 <- EndObjectLiteral
v189 <- CreateNamedVariable 'b', 'var', v188
v190 <- LoadString 'ab'
v191 <- CreateNamedVariable 'String', 'none'
v192 <- CallMethod v191, 'fromCharCode', [v184, v189]
v193 <- LoadString 'String.fromCharCode'
v194 <- LoadString 'hestfisk'
v195 <- LoadString 'String.fromCharCode valueOf order'
v196 <- LoadString ''
Reassign v1, v196
v197 <- Compare v184, '<', v189
v198 <- LoadString 'Compare objects a < b'
v199 <- LoadString 'hestfisk'
v200 <- LoadString 'Compare objects a < b valueOf order'
v201 <- LoadString ''
Reassign v1, v201
v202 <- Compare v184, '<', v184
v203 <- LoadString 'Compare objects a < a'
v204 <- LoadString ''
Reassign v1, v204
v205 <- Compare v184, '==', v184
v206 <- LoadString 'Compare objects a == a'
v207 <- LoadString ''
v208 <- LoadString 'Compare objects a == a valueOf not called'
v209 <- LoadString ''
Reassign v1, v209
v210 <- Compare v189, '>', v189
v211 <- LoadString 'Compare objects b > b'
v212 <- LoadString 'fiskfisk'
v213 <- LoadString 'Compare objects b > b valueOf order'
v214 <- LoadString ''
Reassign v1, v214
v215 <- Compare v189, '>=', v189
v216 <- LoadString 'Compare objects b >= b'
v217 <- LoadString 'fiskfisk'
v218 <- LoadString 'Compare objects b >= b valueOf order'
v219 <- LoadString ''
Reassign v1, v219
v220 <- Compare v184, '>', v189
v221 <- LoadString 'Compare objects a > b'
v222 <- LoadString 'hestfisk'
v223 <- LoadString 'Compare objects a > b valueOf order'
v224 <- LoadString ''
Reassign v1, v224
v225 <- LoadInteger '0'
v226 <- Void_ v225
v227 <- Compare v184, '>', v226
v228 <- LoadString 'Compare objects a > undefined'
v229 <- LoadString 'hest'
v230 <- LoadString 'Compare objects a > undefined valueOf order'
v231 <- LoadString ''
Reassign v1, v231
v232 <- LoadInteger '0'
v233 <- Void_ v232
v234 <- Compare v233, '>', v189
v235 <- LoadString 'Compare objects undefined > b'
v236 <- LoadString 'fisk'
v237 <- LoadString 'Compare objects undefined > b valueOf order'
v238 <- BeginPlainFunction -> 
    v239 <- LoadString ''
    Reassign v1, v239
    v240 <- Compare v184, '<', v189
    v241 <- LoadString 'Compare objects a < b'
    v242 <- LoadString 'hestfisk'
    v243 <- LoadString 'Compare objects a < b valueOf order'
    v244 <- LoadString ''
    Reassign v1, v244
    v245 <- Compare v184, '<', v184
    v246 <- LoadString 'Compare objects a < a'
    v247 <- LoadString ''
    Reassign v1, v247
    v248 <- Compare v184, '==', v184
    v249 <- LoadString 'Compare objects a == a'
    v250 <- LoadString ''
    v251 <- LoadString 'Compare objects a == a valueOf not called'
    v252 <- LoadString ''
    Reassign v1, v252
    v253 <- Compare v189, '>', v189
    v254 <- LoadString 'Compare objects b > b'
    v255 <- LoadString 'fiskfisk'
    v256 <- LoadString 'Compare objects b > b valueOf order'
    v257 <- LoadString ''
    Reassign v1, v257
    v258 <- Compare v189, '>=', v189
    v259 <- LoadString 'Compare objects b >= b'
    v260 <- LoadString 'fiskfisk'
    v261 <- LoadString 'Compare objects b >= b valueOf order'
    v262 <- LoadString ''
    Reassign v1, v262
    v263 <- Compare v184, '>', v189
    v264 <- LoadString 'Compare objects a > b'
    v265 <- LoadString 'hestfisk'
    v266 <- LoadString 'Compare objects a > b valueOf order'
    v267 <- LoadString ''
    Reassign v1, v267
    v268 <- LoadInteger '0'
    v269 <- Void_ v268
    v270 <- Compare v184, '>', v269
    v271 <- LoadString 'Compare objects a > undefined'
    v272 <- LoadString 'hest'
    v273 <- LoadString 'Compare objects a > undefined valueOf order'
    v274 <- LoadString ''
    Reassign v1, v274
    v275 <- LoadInteger '0'
    v276 <- Void_ v275
    v277 <- Compare v276, '>', v189
    v278 <- LoadString 'Compare objects undefined > b'
    v279 <- LoadString 'fisk'
    v280 <- LoadString 'Compare objects undefined > b valueOf order'
EndPlainFunction
BeginForLoopInitializer
    v281 <- LoadInteger '0'
BeginForLoopCondition -> v282
    v283 <- LoadInteger '3'
    v284 <- Compare v282, '<', v283
BeginForLoopAfterthought v284 -> v285
    v286 <- UnaryOperation '++', v285
BeginForLoopBody -> v287
    v288 <- CallFunction v238, []
EndForLoop
v289 <- LoadString 'ok'
v290 <- CreateNamedVariable 'print', 'none'
v291 <- CallFunction v290, [v289]


var x = "";
const v3 = new Object();
var v = v3;
const v5 = new Object();
var w = v5;
function f7() {
    x += "hest";
    return 1;
}
var vv = f7;
function f11() {
    x += "fisk";
    return 2;
}
var ww = f11;
v.valueOf = vv;
w.valueOf = ww;
Math.min(v, w);
x = "";
Math.max(v, w);
x = "";
Math.max(v, v);
x = "";
Math.min(w, w);
x = "";
Math.atan2(1, 2);
Math.atan2(v, w);
x = "";
Math.pow(v, w);
x = "";
function f48() {
    x += "hest";
    return 1 / 0;
}
var a = { valueOf: f48 };
function f55() {
    x += "fisk";
    return 1;
}
var b = { valueOf: f55 };
1 / 0;
Math.hypot(a, b);
function f66() {
    x += 1;
    return 2007;
}
var year = { valueOf: f66 };
function f71() {
    x += 2;
    return 2;
}
var month = { valueOf: f71 };
function f76() {
    x += 3;
    return 4;
}
var date = { valueOf: f76 };
function f81() {
    x += 4;
    return 13;
}
var hours = { valueOf: f81 };
function f86() {
    x += 5;
    return 50;
}
var minutes = { valueOf: f86 };
function f91() {
    x += 6;
    return 0;
}
var seconds = { valueOf: f91 };
function f96() {
    x += 7;
    return 999;
}
var ms = { valueOf: f96 };
x = "";
new Date(year, month, date, hours, minutes, seconds, ms);
x = "";
Date(year, month, date, hours, minutes, seconds, ms);
x = "";
Date.UTC(year, month, date, hours, minutes, seconds, ms);
x = "";
const v115 = new Date();
v115.setSeconds(seconds, ms);
x = "";
const v120 = new Date();
v120.setSeconds(seconds, ms);
x = "";
const v125 = new Date();
v125.setUTCSeconds(seconds, ms);
x = "";
const v130 = new Date();
v130.setMinutes(minutes, seconds, ms);
x = "";
const v135 = new Date();
v135.setUTCMinutes(minutes, seconds, ms);
x = "";
const v140 = new Date();
v140.setHours(hours, minutes, seconds, ms);
x = "";
const v145 = new Date();
v145.setUTCHours(hours, minutes, seconds, ms);
x = "";
const v150 = new Date();
v150.setDate(date, hours, minutes, seconds, ms);
x = "";
const v155 = new Date();
v155.setUTCDate(date, hours, minutes, seconds, ms);
x = "";
const v160 = new Date();
v160.setMonth(month, date, hours, minutes, seconds, ms);
x = "";
const v165 = new Date();
v165.setUTCMonth(month, date, hours, minutes, seconds, ms);
x = "";
const v170 = new Date();
v170.setFullYear(year, month, date, hours, minutes, seconds, ms);
x = "";
const v175 = new Date();
v175.setUTCFullYear(year, month, date, hours, minutes, seconds, ms);
x = "";
function f180() {
    x += "hest";
    return 97;
}
var a = { valueOf: f180 };
function f185() {
    x += "fisk";
    return 98;
}
var b = { valueOf: f185 };
String.fromCharCode(a, b);
x = "";
a < b;
x = "";
a < a;
x = "";
a == a;
x = "";
b > b;
x = "";
b >= b;
x = "";
a > b;
x = "";
a > void 0;
x = "";
void 0 > b;
function identical_object_comparison() {
    x = "";
    a < b;
    x = "";
    a < a;
    x = "";
    a == a;
    x = "";
    b > b;
    x = "";
    b >= b;
    x = "";
    a > b;
    x = "";
    a > void 0;
    x = "";
    void 0 > b;
}
for (let i282 = 0; i282 < 3; ++i282) {
    identical_object_comparison();
}
print("ok");

FuzzIL program written to corpus/to_number_order.fzil
