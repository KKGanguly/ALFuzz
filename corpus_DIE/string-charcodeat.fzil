v0 <- BeginPlainFunction -> 
    v1 <- LoadString 'Te'
    v2 <- LoadString 'st testing 123'
    v3 <- BinaryOperation v1, '+', v2
    Return v3
EndPlainFunction
v4 <- BeginPlainFunction -> 
    v5 <- LoadString 'T'
    v6 <- CreateNamedVariable 'a', 'var', v5
    v7 <- LoadString 'e'
    Update v6, '+', v7
    v8 <- LoadString 's'
    Update v6, '+', v8
    v9 <- LoadString 'ting testing 123'
    Update v6, '+', v9
    Return v6
EndPlainFunction
v10 <- BeginPlainFunction -> 
    v11 <- LoadInteger '8'
    v12 <- LoadInteger '22'
    v13 <- LoadString 'testing Testing testing 123456789012345'
    v14 <- CallMethod v13, 'substring', [v11, v12]
    Return v14
EndPlainFunction
v15 <- BeginPlainFunction -> 
    v16 <- LoadString 'Testing testing 123'
    Return v16
EndPlainFunction
v17 <- BeginPlainFunction -> 
    v18 <- LoadString 'Te'
    v19 <- LoadString 'ሴt testing 123'
    v20 <- BinaryOperation v18, '+', v19
    Return v20
EndPlainFunction
v21 <- BeginPlainFunction -> 
    v22 <- LoadString 'T'
    v23 <- CreateNamedVariable 'a', 'var', v22
    v24 <- LoadString 'e'
    Update v23, '+', v24
    v25 <- LoadString 'ሴ'
    Update v23, '+', v25
    v26 <- LoadString 'ting testing 123'
    Update v23, '+', v26
    Return v23
EndPlainFunction
v27 <- BeginPlainFunction -> 
    v28 <- LoadInteger '0'
    v29 <- LoadInteger '14'
    v30 <- LoadString 'Teሴt testing testing 123'
    v31 <- CallMethod v30, 'substring', [v28, v29]
    Return v31
EndPlainFunction
v32 <- BeginPlainFunction -> 
    v33 <- LoadInteger '5'
    v34 <- LoadInteger '19'
    v35 <- LoadString 'test Teሴt testing testing 123'
    v36 <- CallMethod v35, 'substring', [v33, v34]
    Return v36
EndPlainFunction
v37 <- BeginPlainFunction -> 
    v38 <- LoadInteger '5'
    v39 <- LoadInteger '9'
    v40 <- LoadString 'test Teሴt'
    v41 <- CallMethod v40, 'substring', [v38, v39]
    Return v41
EndPlainFunction
v42 <- BeginPlainFunction -> 
    v43 <- LoadString 'Teሴting testing 123'
    Return v43
EndPlainFunction
v44 <- BeginPlainFunction -> 
EndPlainFunction
v45 <- BeginPlainFunction -> 
    v46 <- Construct v44, []
    v47 <- CreateNamedVariable 'n', 'var', v46
    v48 <- BeginPlainFunction -> 
        v49 <- LoadString 'Test'
        Return v49
    EndPlainFunction
    SetProperty v47, 'toString', v48
    v50 <- CreateNamedVariable 'String', 'none'
    v51 <- GetProperty v50, 'prototype'
    v52 <- GetProperty v51, 'charCodeAt'
    SetProperty v47, 'charCodeAt', v52
    Return v47
EndPlainFunction
v53 <- BeginPlainFunction -> 
    v54 <- Construct v44, []
    v55 <- CreateNamedVariable 'n', 'var', v54
    v56 <- BeginPlainFunction -> 
        v57 <- LoadString 'Teሴt'
        Return v57
    EndPlainFunction
    SetProperty v55, 'toString', v56
    v58 <- CreateNamedVariable 'String', 'none'
    v59 <- GetProperty v58, 'prototype'
    v60 <- GetProperty v59, 'charCodeAt'
    SetProperty v55, 'charCodeAt', v60
    Return v55
EndPlainFunction
v61 <- BeginPlainFunction -> v62, v63
    v64 <- CreateNamedVariable 'g', 'var', v62
    v65 <- CallFunction v64, []
    v66 <- CallMethod v65, 'toString', []
    v67 <- GetProperty v66, 'length'
    v68 <- CreateNamedVariable 'len', 'var', v67
    v69 <- LoadString 't'
    v70 <- LoadString 'f'
    v71 <- TernaryOperation v63, v69, v70
    v72 <- CreateNamedVariable 't', 'var', v71
    v73 <- GetProperty v62, 'name'
    Update v72, '+', v73
    v74 <- LoadFloat '1e+19'
    v75 <- UnaryOperation '-', v74
    v76 <- CallFunction v64, []
    v77 <- CallMethod v76, 'charCodeAt', [v75]
    v78 <- CreateNamedVariable 'isNaN', 'none'
    v79 <- CallFunction v78, [v77]
    v80 <- LoadInteger '1'
    v81 <- BinaryOperation v80, '+', v72
    v82 <- LoadInteger '2147483649'
    v83 <- UnaryOperation '-', v82
    v84 <- CallFunction v64, []
    v85 <- CallMethod v84, 'charCodeAt', [v83]
    v86 <- CallFunction v78, [v85]
    v87 <- LoadInteger '2'
    v88 <- BinaryOperation v87, '+', v72
    v89 <- LoadInteger '2147483648'
    v90 <- UnaryOperation '-', v89
    v91 <- CallFunction v64, []
    v92 <- CallMethod v91, 'charCodeAt', [v90]
    v93 <- CallFunction v78, [v92]
    v94 <- LoadInteger '3'
    v95 <- BinaryOperation v94, '+', v72
    v96 <- LoadInteger '1073741824'
    v97 <- UnaryOperation '-', v96
    v98 <- CallFunction v64, []
    v99 <- CallMethod v98, 'charCodeAt', [v97]
    v100 <- CallFunction v78, [v99]
    v101 <- LoadInteger '4'
    v102 <- BinaryOperation v101, '+', v72
    v103 <- LoadInteger '1'
    v104 <- UnaryOperation '-', v103
    v105 <- CallFunction v64, []
    v106 <- CallMethod v105, 'charCodeAt', [v104]
    v107 <- CallFunction v78, [v106]
    v108 <- LoadInteger '5'
    v109 <- BinaryOperation v108, '+', v72
    v110 <- CallFunction v64, []
    v111 <- CallMethod v110, 'charCodeAt', [v68]
    v112 <- CallFunction v78, [v111]
    v113 <- LoadInteger '6'
    v114 <- BinaryOperation v113, '+', v72
    v115 <- LoadInteger '1'
    v116 <- BinaryOperation v68, '+', v115
    v117 <- CallFunction v64, []
    v118 <- CallMethod v117, 'charCodeAt', [v116]
    v119 <- CallFunction v78, [v118]
    v120 <- LoadInteger '7'
    v121 <- BinaryOperation v120, '+', v72
    v122 <- LoadInteger '1073741823'
    v123 <- CallFunction v64, []
    v124 <- CallMethod v123, 'charCodeAt', [v122]
    v125 <- CallFunction v78, [v124]
    v126 <- LoadInteger '8'
    v127 <- BinaryOperation v126, '+', v72
    v128 <- LoadInteger '2147483647'
    v129 <- CallFunction v64, []
    v130 <- CallMethod v129, 'charCodeAt', [v128]
    v131 <- CallFunction v78, [v130]
    v132 <- LoadInteger '9'
    v133 <- BinaryOperation v132, '+', v72
    v134 <- LoadInteger '2147483648'
    v135 <- CallFunction v64, []
    v136 <- CallMethod v135, 'charCodeAt', [v134]
    v137 <- CallFunction v78, [v136]
    v138 <- LoadInteger '10'
    v139 <- BinaryOperation v138, '+', v72
    v140 <- LoadInteger '1000000000'
    v141 <- CallFunction v64, []
    v142 <- CallMethod v141, 'charCodeAt', [v140]
    v143 <- CallFunction v78, [v142]
    v144 <- LoadInteger '11'
    v145 <- BinaryOperation v144, '+', v72
    v146 <- LoadInteger '84'
    v147 <- LoadInteger '0'
    v148 <- CallFunction v64, []
    v149 <- CallMethod v148, 'charCodeAt', [v147]
    v150 <- LoadInteger '12'
    v151 <- BinaryOperation v150, '+', v72
    v152 <- LoadInteger '84'
    v153 <- LoadString 'test'
    v154 <- CallFunction v64, []
    v155 <- CallMethod v154, 'charCodeAt', [v153]
    v156 <- LoadInteger '13'
    v157 <- BinaryOperation v156, '+', v72
    v158 <- LoadInteger '84'
    v159 <- LoadString ''
    v160 <- CallFunction v64, []
    v161 <- CallMethod v160, 'charCodeAt', [v159]
    v162 <- LoadInteger '14'
    v163 <- BinaryOperation v162, '+', v72
    v164 <- LoadInteger '84'
    v165 <- LoadNull
    v166 <- CallFunction v64, []
    v167 <- CallMethod v166, 'charCodeAt', [v165]
    v168 <- LoadInteger '15'
    v169 <- BinaryOperation v168, '+', v72
    v170 <- LoadInteger '84'
    v171 <- LoadUndefined
    v172 <- CallFunction v64, []
    v173 <- CallMethod v172, 'charCodeAt', [v171]
    v174 <- LoadInteger '16'
    v175 <- BinaryOperation v174, '+', v72
    v176 <- LoadInteger '84'
    v177 <- CallFunction v64, []
    v178 <- CallMethod v177, 'charCodeAt', []
    v179 <- LoadInteger '17'
    v180 <- BinaryOperation v179, '+', v72
    v181 <- LoadInteger '84'
    v182 <- LoadInteger '0'
    v183 <- Void_ v182
    v184 <- CallFunction v64, []
    v185 <- CallMethod v184, 'charCodeAt', [v183]
    v186 <- LoadInteger '18'
    v187 <- BinaryOperation v186, '+', v72
    v188 <- LoadInteger '84'
    v189 <- LoadBoolean 'false'
    v190 <- CallFunction v64, []
    v191 <- CallMethod v190, 'charCodeAt', [v189]
    v192 <- LoadInteger '19'
    v193 <- BinaryOperation v192, '+', v72
    v194 <- LoadInteger '101'
    v195 <- LoadBoolean 'true'
    v196 <- CallFunction v64, []
    v197 <- CallMethod v196, 'charCodeAt', [v195]
    v198 <- LoadInteger '20'
    v199 <- BinaryOperation v198, '+', v72
    v200 <- LoadInteger '101'
    v201 <- LoadInteger '1'
    v202 <- CallFunction v64, []
    v203 <- CallMethod v202, 'charCodeAt', [v201]
    v204 <- LoadInteger '21'
    v205 <- BinaryOperation v204, '+', v72
    v206 <- LoadInteger '4660'
    v207 <- LoadInteger '115'
    v208 <- TernaryOperation v63, v206, v207
    v209 <- LoadInteger '2'
    v210 <- CallFunction v64, []
    v211 <- CallMethod v210, 'charCodeAt', [v209]
    v212 <- LoadInteger '22'
    v213 <- BinaryOperation v212, '+', v72
    v214 <- LoadInteger '116'
    v215 <- LoadInteger '3'
    v216 <- CallFunction v64, []
    v217 <- CallMethod v216, 'charCodeAt', [v215]
    v218 <- LoadInteger '23'
    v219 <- BinaryOperation v218, '+', v72
    v220 <- LoadInteger '101'
    v221 <- LoadFloat '1.1'
    v222 <- CallFunction v64, []
    v223 <- CallMethod v222, 'charCodeAt', [v221]
    v224 <- LoadInteger '24'
    v225 <- BinaryOperation v224, '+', v72
    v226 <- LoadInteger '4660'
    v227 <- LoadInteger '115'
    v228 <- TernaryOperation v63, v226, v227
    v229 <- LoadFloat '2.1718'
    v230 <- CallFunction v64, []
    v231 <- CallMethod v230, 'charCodeAt', [v229]
    v232 <- LoadInteger '25'
    v233 <- BinaryOperation v232, '+', v72
    v234 <- LoadInteger '116'
    v235 <- LoadFloat '3.14159'
    v236 <- CallFunction v64, []
    v237 <- CallMethod v236, 'charCodeAt', [v235]
    v238 <- LoadInteger '26'
    v239 <- BinaryOperation v238, '+', v72
EndPlainFunction
v240 <- LoadBoolean 'false'
v241 <- CallFunction v61, [v0, v240]
v242 <- LoadBoolean 'false'
v243 <- CallFunction v61, [v4, v242]
v244 <- LoadBoolean 'false'
v245 <- CallFunction v61, [v10, v244]
v246 <- LoadBoolean 'false'
v247 <- CallFunction v61, [v15, v246]
v248 <- LoadBoolean 'false'
v249 <- CallFunction v61, [v45, v248]
v250 <- LoadBoolean 'true'
v251 <- CallFunction v61, [v17, v250]
v252 <- LoadBoolean 'true'
v253 <- CallFunction v61, [v21, v252]
v254 <- LoadBoolean 'true'
v255 <- CallFunction v61, [v27, v254]
v256 <- LoadBoolean 'true'
v257 <- CallFunction v61, [v32, v256]
v258 <- LoadBoolean 'true'
v259 <- CallFunction v61, [v37, v258]
v260 <- LoadBoolean 'true'
v261 <- CallFunction v61, [v42, v260]
v262 <- LoadBoolean 'true'
v263 <- CallFunction v61, [v53, v262]
v264 <- BeginPlainFunction -> 
    v265 <- CallFunction v42, []
    v266 <- CreateNamedVariable 'str', 'var', v265
    v267 <- LoadInteger '2'
    v268 <- CallMethod v266, 'charCodeAt', [v267]
    Return v268
EndPlainFunction
v269 <- LoadInteger '4660'
v270 <- CallFunction v264, []
v271 <- LoadInteger '4660'
v272 <- CallFunction v264, []
v273 <- LoadInteger '4660'
v274 <- CallFunction v264, []
v275 <- BeginPlainFunction -> 
    v276 <- CallFunction v0, []
    v277 <- CreateNamedVariable 'str', 'var', v276
    v278 <- LoadInteger '2147483647'
    v279 <- CallMethod v277, 'charCodeAt', [v278]
    v280 <- CreateNamedVariable 'isNaN', 'none'
    v281 <- CallFunction v280, [v279]
EndPlainFunction
BeginForLoopInitializer
    v282 <- LoadInteger '0'
BeginForLoopCondition -> v283
    v284 <- LoadInteger '5'
    v285 <- Compare v283, '<', v284
BeginForLoopAfterthought v285 -> v286
    v287 <- UnaryOperation v286, '++'
BeginForLoopBody -> v288
    v289 <- CallFunction v275, []
EndForLoop
v290 <- CallFunction v275, []
BeginForLoopInitializer
    v291 <- LoadInteger '0'
BeginForLoopCondition -> v292
    v293 <- LoadInteger '10'
    v294 <- Compare v292, '!=', v293
BeginForLoopAfterthought v294 -> v295
    v296 <- UnaryOperation v295, '++'
BeginForLoopBody -> v297
    v298 <- LoadInteger '101'
    v299 <- LoadFloat '1.1'
    v300 <- CallFunction v17, []
    v301 <- CallMethod v300, 'charCodeAt', [v299]
    v302 <- LoadString 'e'
    v303 <- LoadFloat '1.1'
    v304 <- CallFunction v17, []
    v305 <- CallMethod v304, 'charAt', [v303]
EndForLoop
v306 <- BeginPlainFunction -> 
    v307 <- BeginPlainFunction -> 
        v308 <- LoadInteger '42'
        Return v308
    EndPlainFunction
    v309 <- LoadThis
    SetProperty v309, 'toString', v307
    v310 <- CreateNamedVariable 'String', 'none'
    v311 <- GetProperty v310, 'prototype'
    v312 <- GetProperty v311, 'charCodeAt'
    v313 <- LoadThis
    SetProperty v313, 'charCodeAt', v312
EndPlainFunction
v314 <- LoadInteger '52'
v315 <- LoadInteger '0'
v316 <- Construct v306, []
v317 <- CallMethod v316, 'charCodeAt', [v315]
v318 <- LoadInteger '27'
v319 <- LoadInteger '50'
v320 <- LoadInteger '1'
v321 <- Construct v306, []
v322 <- CallMethod v321, 'charCodeAt', [v320]
v323 <- LoadInteger '28'
v324 <- LoadInteger '2'
v325 <- Construct v306, []
v326 <- CallMethod v325, 'charCodeAt', [v324]
v327 <- CreateNamedVariable 'isNaN', 'none'
v328 <- CallFunction v327, [v326]
v329 <- LoadInteger '29'
v330 <- LoadInteger '1'
v331 <- UnaryOperation '-', v330
v332 <- Construct v306, []
v333 <- CallMethod v332, 'charCodeAt', [v331]
v334 <- CallFunction v327, [v333]
v335 <- LoadInteger '30'
v336 <- LoadString '12345678'
v337 <- CreateNamedVariable 'medium', 'var', v336
Update v337, '+', v337
Update v337, '+', v337
Update v337, '+', v337
Update v337, '+', v337
Update v337, '+', v337
v338 <- CreateNamedVariable 'long', 'var', v337
v339 <- BinaryOperation v338, '+', v338
v340 <- BinaryOperation v339, '+', v338
Update v338, '+', v340
v341 <- BinaryOperation v338, '+', v338
v342 <- BinaryOperation v341, '+', v338
Update v338, '+', v342
v343 <- BinaryOperation v338, '+', v338
v344 <- BinaryOperation v343, '+', v338
Update v338, '+', v344
v345 <- BinaryOperation v338, '+', v338
v346 <- BinaryOperation v345, '+', v338
Update v338, '+', v346
v347 <- LoadInteger '1'
v348 <- UnaryOperation '-', v347
v349 <- CallMethod v337, 'charCodeAt', [v348]
v350 <- CallFunction v327, [v349]
v351 <- LoadInteger '31'
v352 <- LoadInteger '49'
v353 <- LoadInteger '0'
v354 <- CallMethod v337, 'charCodeAt', [v353]
v355 <- LoadInteger '32'
v356 <- LoadInteger '56'
v357 <- LoadInteger '255'
v358 <- CallMethod v337, 'charCodeAt', [v357]
v359 <- LoadInteger '33'
v360 <- LoadInteger '256'
v361 <- CallMethod v337, 'charCodeAt', [v360]
v362 <- CallFunction v327, [v361]
v363 <- LoadInteger '34'
v364 <- LoadInteger '1'
v365 <- UnaryOperation '-', v364
v366 <- CallMethod v338, 'charCodeAt', [v365]
v367 <- CallFunction v327, [v366]
v368 <- LoadInteger '35'
v369 <- LoadInteger '49'
v370 <- LoadInteger '0'
v371 <- CallMethod v338, 'charCodeAt', [v370]
v372 <- LoadInteger '36'
v373 <- LoadInteger '56'
v374 <- LoadInteger '65535'
v375 <- CallMethod v338, 'charCodeAt', [v374]
v376 <- LoadInteger '37'
v377 <- LoadInteger '65536'
v378 <- CallMethod v338, 'charCodeAt', [v377]
v379 <- CallFunction v327, [v378]
v380 <- LoadInteger '38'
v381 <- CreateNamedVariable 'String', 'none'
v382 <- GetProperty v381, 'prototype'
v383 <- GetProperty v382, 'charCodeAt'
v384 <- GetProperty v381, 'prototype'
SetProperty v384, 'x', v383
v385 <- BeginPlainFunction -> 
    v386 <- LoadInteger '97'
    v387 <- LoadInteger '0'
    v388 <- LoadString 'a'
    v389 <- CallMethod v388, 'x', [v387]
    v390 <- LoadInteger '98'
    v391 <- LoadInteger '0'
    v392 <- LoadString 'b'
    v393 <- CallMethod v392, 'x', [v391]
    v394 <- LoadInteger '99'
    v395 <- LoadInteger '0'
    v396 <- LoadString 'c'
    v397 <- CallMethod v396, 'x', [v395]
    v398 <- LoadInteger '97'
    v399 <- LoadInteger '0'
    v400 <- LoadString 'a'
    v401 <- CallMethod v400, 'x', [v399]
    v402 <- LoadInteger '98'
    v403 <- LoadInteger '0'
    v404 <- LoadString 'b'
    v405 <- CallMethod v404, 'x', [v403]
    v406 <- LoadInteger '99'
    v407 <- LoadInteger '0'
    v408 <- LoadString 'c'
    v409 <- CallMethod v408, 'x', [v407]
EndPlainFunction
BeginForLoopInitializer
    v410 <- LoadInteger '0'
BeginForLoopCondition -> v411
    v412 <- LoadInteger '5'
    v413 <- Compare v411, '<', v412
BeginForLoopAfterthought v413 -> v414
    v415 <- UnaryOperation v414, '++'
BeginForLoopBody -> v416
    v417 <- CallFunction v385, []
EndForLoop
v418 <- CallFunction v385, []


function Cons() {
    return "Te" + "st testing 123";
}
function Deep() {
    var a = "T";
    a += "e";
    a += "s";
    a += "ting testing 123";
    return a;
}
function Slice() {
    return ("testing Testing testing 123456789012345").substring(8, 22);
}
function Flat() {
    return "Testing testing 123";
}
function Cons16() {
    return "Te" + "ሴt testing 123";
}
function Deep16() {
    var a = "T";
    a += "e";
    a += "ሴ";
    a += "ting testing 123";
    return a;
}
function Slice16Beginning() {
    return ("Teሴt testing testing 123").substring(0, 14);
}
function Slice16Middle() {
    return ("test Teሴt testing testing 123").substring(5, 19);
}
function Slice16End() {
    return ("test Teሴt").substring(5, 9);
}
function Flat16() {
    return "Teሴting testing 123";
}
function Thing() {
}
function NotAString() {
    const v46 = new Thing();
    var n = v46;
    function f48() {
        return "Test";
    }
    n.toString = f48;
    n.charCodeAt = String.prototype.charCodeAt;
    return n;
}
function NotAString16() {
    const v54 = new Thing();
    var n = v54;
    function f56() {
        return "Teሴt";
    }
    n.toString = f56;
    n.charCodeAt = String.prototype.charCodeAt;
    return n;
}
function TestStringType(a62, a63) {
    var g = a62;
    var len = g().toString().length;
    var t = a63 ? "t" : "f";
    t += a62.name;
    const v75 = -1e+19;
    isNaN(g().charCodeAt(v75));
    1 + t;
    const v83 = -2147483649;
    isNaN(g().charCodeAt(v83));
    2 + t;
    const v90 = -2147483648;
    isNaN(g().charCodeAt(v90));
    3 + t;
    const v97 = -1073741824;
    isNaN(g().charCodeAt(v97));
    4 + t;
    const v104 = -1;
    isNaN(g().charCodeAt(v104));
    5 + t;
    isNaN(g().charCodeAt(len));
    6 + t;
    const v116 = len + 1;
    isNaN(g().charCodeAt(v116));
    7 + t;
    isNaN(g().charCodeAt(1073741823));
    8 + t;
    isNaN(g().charCodeAt(2147483647));
    9 + t;
    isNaN(g().charCodeAt(2147483648));
    10 + t;
    isNaN(g().charCodeAt(1000000000));
    11 + t;
    g().charCodeAt(0);
    12 + t;
    g().charCodeAt("test");
    13 + t;
    g().charCodeAt("");
    14 + t;
    g().charCodeAt(null);
    15 + t;
    g().charCodeAt(undefined);
    16 + t;
    g().charCodeAt();
    17 + t;
    const v183 = void 0;
    g().charCodeAt(v183);
    18 + t;
    g().charCodeAt(false);
    19 + t;
    g().charCodeAt(true);
    20 + t;
    g().charCodeAt(1);
    21 + t;
    a63 ? 4660 : 115;
    g().charCodeAt(2);
    22 + t;
    g().charCodeAt(3);
    23 + t;
    g().charCodeAt(1.1);
    24 + t;
    a63 ? 4660 : 115;
    g().charCodeAt(2.1718);
    25 + t;
    g().charCodeAt(3.14159);
    26 + t;
}
TestStringType(Cons, false);
TestStringType(Deep, false);
TestStringType(Slice, false);
TestStringType(Flat, false);
TestStringType(NotAString, false);
TestStringType(Cons16, true);
TestStringType(Deep16, true);
TestStringType(Slice16Beginning, true);
TestStringType(Slice16Middle, true);
TestStringType(Slice16End, true);
TestStringType(Flat16, true);
TestStringType(NotAString16, true);
function Flat16Optimized() {
    var str = Flat16();
    return str.charCodeAt(2);
}
Flat16Optimized();
Flat16Optimized();
Flat16Optimized();
function ConsNotSmiIndex() {
    var str = Cons();
    isNaN(str.charCodeAt(2147483647));
}
for (let i283 = 0; i283 < 5; i283++) {
    ConsNotSmiIndex();
}
ConsNotSmiIndex();
for (let i292 = 0; i292 != 10; i292++) {
    Cons16().charCodeAt(1.1);
    Cons16().charAt(1.1);
}
function StupidThing() {
    function f307() {
        return 42;
    }
    this.toString = f307;
    this.charCodeAt = String.prototype.charCodeAt;
}
const v316 = new StupidThing();
v316.charCodeAt(0);
const v321 = new StupidThing();
v321.charCodeAt(1);
const v325 = new StupidThing();
isNaN(v325.charCodeAt(2));
const v331 = -1;
const v332 = new StupidThing();
isNaN(v332.charCodeAt(v331));
var medium = "12345678";
medium += medium;
medium += medium;
medium += medium;
medium += medium;
medium += medium;
var long = medium;
long += (long + long) + long;
long += (long + long) + long;
long += (long + long) + long;
long += (long + long) + long;
isNaN(medium.charCodeAt(-1));
medium.charCodeAt(0);
medium.charCodeAt(255);
isNaN(medium.charCodeAt(256));
isNaN(long.charCodeAt(-1));
long.charCodeAt(0);
long.charCodeAt(65535);
isNaN(long.charCodeAt(65536));
const v383 = String.prototype.charCodeAt;
const t194 = String.prototype;
t194.x = v383;
function directlyOnPrototype() {
    ("a").x(0);
    ("b").x(0);
    ("c").x(0);
    ("a").x(0);
    ("b").x(0);
    ("c").x(0);
}
for (let i411 = 0; i411 < 5; i411++) {
    directlyOnPrototype();
}
directlyOnPrototype();

FuzzIL program written to corpus/string-charcodeat.fzil
