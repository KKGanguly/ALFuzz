1000000000.0 + 1000000000.0;
const v7 = [2.2250738585072014e-308,-4.313981892151699e+307,2.2250738585072014e-308];
try { v7.findLastIndex(1000000000.0); } catch (e) {}
[1.6527445313393455e+308,0.8692775710696014,0.0];
[-Infinity,-1e-15,-489.4584995188722,-462.66905195479535,2.2250738585072014e-308];
1.0607943797953369e+307 >> 1.0607943797953369e+307;
-5.121096286253673 - -5.121096286253673;
const v17 = Math.imul;
v17.g = v17;
var imul_func = v17;
function imul_polyfill(a20, a21) {
    a20 & a20;
    a21--;
    var ah = (a20 >>> 16) & 65535;
    var al = a20 & 65535;
    const v35 = (a21 >>> 16) & 65535;
    var bl = a21 & 65535;
    return ((al * bl) + ((((ah * bl) + (al * v35)) << 16) >>> 0)) | 0;
}
function TestMathImul(a51, a52, a53) {
    a52 - a52;
    function imul_meth_closure(a56, a57) {
        Math.imul(a56, a57);
    }
    function imul_func_closure(a60, a61) {
        a60 >> a60;
        a61 - a61;
        return imul_func(a60, a61);
    }
    try { new imul_func_closure(a53, a53); } catch (e) {}
    imul_polyfill(a52, a53);
    Math.imul(a52, a53);
    imul_func(a52, a53);
    imul_meth_closure(a52, a53);
    imul_meth_closure(a52, a53);
    const v71 = imul_func_closure(a52, a53);
    v71 - v71;
    const v73 = imul_func_closure(a52, a53);
    v73 >>> v73;
    imul_func_closure(a52, a53);
}
TestMathImul(8, 2, 4);
const v81 = -8;
const v83 = -1;
v83 >>> v83;
TestMathImul(v81, v83, 8);
const v92 = TestMathImul(4, -2, -2);
v92 ?? v92;
const v98 = TestMathImul(-5, 4294967295, 5);
v98 ?? v98;
const v101 = -10;
let v102 = 4294967294;
5 >>> 5;
TestMathImul(v101, v102, 5);
7 * 7;
TestMathImul(0, 7, false);
!false;
TestMathImul(0, false, false);
const v120 = TestMathImul(7, true, 7);
v120 ?? v120;
let v122 = 7;
v122--;
7 + 7;
TestMathImul(v122, 7);
const v131 = TestMathImul(1, true, true);
v131 ?? v131;
false && false;
true || true;
TestMathImul(0, false, true);
0 >>> 0;
TestMathImul(0, true, false);
0 | 0;
TestMathImul(0, undefined, 7);
TestMathImul(0, 7, undefined);
undefined ?? undefined;
TestMathImul(0, undefined, undefined);
let v160 = -0;
v160--;
TestMathImul(0, v160, 7);
let v165 = 7;
v165--;
0 * 0;
const v170 = TestMathImul(0, v165, -0);
v170 ?? v170;
const v175 = TestMathImul(0, 0.1, 7);
v175 ?? v175;
-7;
TestMathImul(0, 7, 0.1);
let v182 = 7;
v182++;
TestMathImul(7, 1.1, 7);
TestMathImul(7, 7, 1.1);
let v196 = TestMathImul(7, 7, 1.9);
const v200 = TestMathImul(0, "str", 7);
v200 ?? v200;
try { ("str").isWellFormed(); } catch (e) {}
TestMathImul(0, 7, "str");
TestMathImul(0, {}, 7);
const v211 = {};
0 >> 0;
TestMathImul(0, [], 7);
-1699114080 % -1699114080;
const v220 = v102 ** v102;
let v221 = -v196;
v221++;
++v196;
~v220;
const v225 = v102++;
v225 - v225;
[];
const v232 = 1 << 30;
v232 >> v232;
var two_30 = v232;
const v235 = -two_30;
7 >> 7;
const v238 = TestMathImul(v235, two_30, 7);
v238 ?? v238;
7 ^ 7;
TestMathImul(0, two_30, two_30);
TestMathImul(two_30, -two_30, 7);
-7;
const v250 = TestMathImul(two_30, 7, -two_30);
v250 ?? v250;
-two_30;
const v254 = 2 * two_30;
v254 & v254;
var two_31 = v254;
-two_31;
-two_31;
7 >>> 7;
TestMathImul(0, two_31, two_31);
const v264 = -two_31;
const v265 = -two_31;
7 != 7;
TestMathImul(v264, v265, 7);
const v269 = -two_31;
v269 + v269;
~7;
-two_31;
let v274 = 0;
v274--;
TestMathImul(v274, -two_31, -two_31);
two_31 - 7;
var two_16 = 1 << 16;
two_16 - 1;
const v292 = -2 * two_16;
v292 >> v292;
let v294 = 1;
v294--;
const v296 = v292 + v294;
const v298 = two_16 - 1;
let v299 = 1;
v299++;
const v301 = two_16 - v299;
v301 | v301;
TestMathImul(v296, v298, v301);
