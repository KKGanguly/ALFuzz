v0 <- BeginArrowFunction -> 
    v1 <- LoadInteger '1'
    v2 <- LoadInteger '2'
    v3 <- LoadInteger '3'
    v4 <- LoadInteger '4'
    v5 <- LoadInteger '5'
    v6 <- LoadInteger '6'
    v7 <- LoadInteger '7'
    v8 <- LoadInteger '8'
    v9 <- LoadInteger '9'
    v10 <- LoadInteger '10'
    v11 <- LoadInteger '11'
    v12 <- LoadInteger '12'
    v13 <- LoadInteger '13'
    v14 <- LoadInteger '14'
    v15 <- LoadInteger '15'
    v16 <- LoadInteger '16'
    v17 <- LoadInteger '17'
    v18 <- LoadInteger '18'
    v19 <- LoadInteger '19'
    v20 <- LoadInteger '20'
    v21 <- LoadInteger '21'
    v22 <- LoadInteger '22'
    v23 <- LoadInteger '23'
    v24 <- LoadInteger '24'
    v25 <- LoadInteger '25'
    v26 <- CreateArray [v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25]
    v27 <- CreateNamedVariable 'a', 'const', v26
    v28 <- LoadInteger '0'
    v29 <- CreateNamedVariable 'result', 'let', v28
    v30 <- BeginPlainFunction -> v31
        v32 <- BeginArrowFunction -> v33, v34
            v35 <- LoadInteger '13'
            v36 <- Compare v34, '===', v35
            v37 <- BinaryOperation v36, '&&', v31
            BeginIf v37
                v38 <- LoadInteger '25'
                SetProperty v27, 'abc', v38
            EndIf
            Update v29, '+', v33
            v39 <- LoadInteger '20'
            v40 <- Compare v33, '===', v39
            Return v40
        EndArrowFunction
        v41 <- CallMethod v27, 'find', [v32]
        Return v41
    EndPlainFunction
    v42 <- CallFunction v30, []
    v43 <- CallFunction v30, []
    v44 <- CallFunction v30, []
    v45 <- LoadInteger '20'
    v46 <- LoadBoolean 'true'
    v47 <- CallFunction v30, [v46]
    v48 <- CallFunction v30, []
    v49 <- LoadInteger '1050'
EndArrowFunction
v50 <- CallFunction v0, []
v51 <- BeginArrowFunction -> 
    v52 <- LoadUndefined
    v53 <- CreateNamedVariable 'called_values', 'let', v52
    v54 <- BeginPlainFunction -> v55
        v56 <- LoadInteger '1'
        v57 <- LoadInteger '2'
        v58 <- LoadInteger '3'
        v59 <- LoadInteger '4'
        v60 <- LoadInteger '5'
        v61 <- LoadInteger '6'
        v62 <- LoadInteger '7'
        v63 <- LoadInteger '8'
        v64 <- LoadInteger '9'
        v65 <- LoadInteger '10'
        v66 <- CreateArray [v56, v57, v58, v59, v60, v61, v62, v63, v64, v65]
        v67 <- CreateNamedVariable 'a', 'const', v66
        v68 <- CreateArray []
        Reassign v53, v68
        v69 <- BeginArrowFunction -> v70, v71
            v72 <- CallMethod v53, 'push', [v70]
            v73 <- LoadInteger '5'
            v74 <- Compare v71, '===', v73
            v75 <- BinaryOperation v74, '&&', v55
            v76 <- LoadInteger '8'
            v77 <- LoadInteger '10'
            v78 <- TernaryOperation v75, v76, v77
            SetProperty v67, 'length', v78
            v79 <- LoadInteger '9'
            v80 <- Compare v70, '===', v79
            Return v80
        EndArrowFunction
        v81 <- CallMethod v67, 'find', [v69]
        Return v81
    EndPlainFunction
    v82 <- LoadInteger '9'
    v83 <- CallFunction v54, []
    v84 <- LoadInteger '1'
    v85 <- LoadInteger '2'
    v86 <- LoadInteger '3'
    v87 <- LoadInteger '4'
    v88 <- LoadInteger '5'
    v89 <- LoadInteger '6'
    v90 <- LoadInteger '7'
    v91 <- LoadInteger '8'
    v92 <- LoadInteger '9'
    v93 <- CreateArray [v84, v85, v86, v87, v88, v89, v90, v91, v92]
    v94 <- CallFunction v54, []
    v95 <- LoadInteger '9'
    v96 <- CallFunction v54, []
    v97 <- LoadUndefined
    v98 <- LoadBoolean 'true'
    v99 <- CallFunction v54, [v98]
    v100 <- LoadInteger '1'
    v101 <- LoadInteger '2'
    v102 <- LoadInteger '3'
    v103 <- LoadInteger '4'
    v104 <- LoadInteger '5'
    v105 <- LoadInteger '6'
    v106 <- LoadInteger '7'
    v107 <- LoadInteger '8'
    v108 <- LoadUndefined
    v109 <- LoadUndefined
    v110 <- CreateArray [v100, v101, v102, v103, v104, v105, v106, v107, v108, v109]
    v111 <- CallFunction v54, []
EndArrowFunction
v112 <- CallFunction v51, []
v113 <- BeginArrowFunction -> 
    v114 <- LoadInteger '1'
    v115 <- LoadInteger '2'
    v116 <- LoadInteger '3'
    v117 <- LoadInteger '4'
    v118 <- LoadInteger '5'
    v119 <- CreateArray [v114, v115, v116, v117, v118]
    v120 <- CreateNamedVariable 'a', 'const', v119
    v121 <- BeginPlainFunction -> v122
        v123 <- BeginArrowFunction -> v124, v125
            v126 <- LoadInteger '3'
            v127 <- Compare v125, '===', v126
            v128 <- BinaryOperation v127, '&&', v122
            BeginIf v128
                v129 <- LoadInteger '100'
                SetElement v120, '3', v129
            EndIf
            v130 <- LoadInteger '3'
            v131 <- Compare v124, '>', v130
            Return v131
        EndArrowFunction
        v132 <- CallMethod v120, 'find', [v123]
        Return v132
    EndPlainFunction
    v133 <- LoadInteger '4'
    v134 <- CallFunction v121, []
    v135 <- CallFunction v121, []
    v136 <- LoadInteger '4'
    v137 <- LoadBoolean 'true'
    v138 <- CallFunction v121, [v137]
    v139 <- LoadInteger '100'
    v140 <- CallFunction v121, []
EndArrowFunction
v141 <- CallFunction v113, []
v142 <- BeginArrowFunction -> 
    v143 <- LoadInteger '1'
    v144 <- LoadInteger '2'
    v145 <- LoadInteger '3'
    v146 <- LoadInteger '4'
    v147 <- LoadInteger '5'
    v148 <- CreateArray [v143, v144, v145, v146, v147]
    v149 <- CreateNamedVariable 'a', 'const', v148
    v150 <- BeginPlainFunction -> v151
        v152 <- BeginArrowFunction -> v153, v154
            v155 <- LoadInteger '3'
            v156 <- Compare v154, '===', v155
            v157 <- BinaryOperation v156, '&&', v151
            BeginIf v157
            EndIf
            v158 <- LoadBoolean 'false'
            Return v158
        EndArrowFunction
        v159 <- CallMethod v149, 'find', [v152]
        Return v159
    EndPlainFunction
    v160 <- LoadUndefined
    v161 <- CallFunction v150, []
    v162 <- CallFunction v150, []
    v163 <- LoadUndefined
    v164 <- LoadBoolean 'true'
    v165 <- CallFunction v150, [v164]
    v166 <- LoadUndefined
    v167 <- CallFunction v150, []
EndArrowFunction
v168 <- CallFunction v142, []
v169 <- BeginArrowFunction -> 
    v170 <- LoadInteger '1'
    v171 <- LoadInteger '2'
    v172 <- LoadInteger '3'
    v173 <- LoadInteger '4'
    v174 <- LoadInteger '5'
    v175 <- CreateArray [v170, v171, v172, v173, v174]
    v176 <- CreateNamedVariable 'a', 'const', v175
    v177 <- BeginPlainFunction -> v178
        v179 <- BeginArrowFunction -> v180, v181
            v182 <- LoadInteger '2'
            v183 <- Compare v181, '===', v182
            v184 <- BinaryOperation v183, '&&', v178
            BeginIf v184
                v185 <- LoadInteger '100'
                SetElement v176, '3', v185
            EndIf
            v186 <- LoadInteger '3'
            v187 <- Compare v180, '>', v186
            Return v187
        EndArrowFunction
        v188 <- CallMethod v176, 'find', [v179]
        Return v188
    EndPlainFunction
    v189 <- LoadInteger '4'
    v190 <- CallFunction v177, []
    v191 <- CallFunction v177, []
    v192 <- LoadInteger '100'
    v193 <- LoadBoolean 'true'
    v194 <- CallFunction v177, [v193]
    v195 <- LoadInteger '100'
    v196 <- CallFunction v177, []
EndArrowFunction
v197 <- CallFunction v169, []
v198 <- BeginArrowFunction -> 
    v199 <- LoadInteger '0'
    v200 <- CreateNamedVariable 'result', 'let', v199
    v201 <- BeginPlainFunction -> v202
        v203 <- LoadInteger '0'
        v204 <- LoadInteger '1'
        v205 <- LoadInteger '2'
        v206 <- LoadInteger '3'
        v207 <- LoadInteger '4'
        v208 <- LoadInteger '5'
        v209 <- CreateArray [v203, v204, v205, v206, v207, v208]
        v210 <- CreateNamedVariable 'a_noescape', 'const', v209
        v211 <- BeginArrowFunction -> v212, v213
            v214 <- LoadInteger '0'
            v215 <- BinaryOperation v212, '|', v214
            Update v200, '+', v215
            v216 <- LoadInteger '13'
            v217 <- Compare v213, '===', v216
            v218 <- BinaryOperation v217, '&&', v202
            BeginIf v218
                v219 <- LoadInteger '25'
                SetProperty v210, 'length', v219
            EndIf
            v220 <- LoadBoolean 'false'
            Return v220
        EndArrowFunction
        v221 <- CallMethod v210, 'find', [v211]
    EndPlainFunction
    v222 <- CallFunction v201, []
    v223 <- CallFunction v201, []
    v224 <- CallFunction v201, []
    v225 <- LoadBoolean 'true'
    v226 <- CallFunction v201, [v225]
    v227 <- CallFunction v201, []
    v228 <- LoadInteger '75'
EndArrowFunction
v229 <- CallFunction v198, []
v230 <- BeginArrowFunction -> 
    v231 <- LoadInteger '1'
    v232 <- LoadInteger '2'
    v233 <- LoadInteger '3'
    v234 <- LoadInteger '4'
    v235 <- LoadInteger '5'
    v236 <- LoadInteger '6'
    v237 <- LoadInteger '7'
    v238 <- LoadInteger '8'
    v239 <- LoadInteger '9'
    v240 <- LoadInteger '10'
    v241 <- LoadInteger '11'
    v242 <- LoadInteger '12'
    v243 <- LoadInteger '13'
    v244 <- LoadInteger '14'
    v245 <- LoadInteger '15'
    v246 <- LoadInteger '16'
    v247 <- LoadInteger '17'
    v248 <- LoadInteger '18'
    v249 <- LoadInteger '19'
    v250 <- LoadInteger '20'
    v251 <- LoadInteger '21'
    v252 <- LoadInteger '22'
    v253 <- LoadInteger '23'
    v254 <- LoadInteger '24'
    v255 <- LoadInteger '25'
    v256 <- CreateArray [v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255]
    v257 <- CreateNamedVariable 'a', 'const', v256
    v258 <- LoadInteger '0'
    v259 <- CreateNamedVariable 'result', 'let', v258
    v260 <- BeginPlainFunction -> v261
        v262 <- BeginArrowFunction -> v263, v264
            Update v259, '+', v264
            v265 <- LoadInteger '13'
            v266 <- Compare v264, '===', v265
            v267 <- BinaryOperation v266, '&&', v261
            BeginIf v267
            EndIf
            v268 <- LoadBoolean 'false'
            Return v268
        EndArrowFunction
        v269 <- CallMethod v257, 'find', [v262]
    EndPlainFunction
    v270 <- CallFunction v260, []
    v271 <- CallFunction v260, []
    v272 <- CallFunction v260, []
    v273 <- LoadBoolean 'true'
    v274 <- CallFunction v260, [v273]
    v275 <- CallFunction v260, []
    v276 <- LoadInteger '1500'
EndArrowFunction
v277 <- CallFunction v230, []
v278 <- BeginArrowFunction -> 
    v279 <- LoadInteger '1'
    v280 <- LoadInteger '2'
    v281 <- LoadInteger '3'
    v282 <- LoadInteger '4'
    v283 <- LoadInteger '5'
    v284 <- LoadInteger '6'
    v285 <- LoadInteger '7'
    v286 <- LoadInteger '8'
    v287 <- LoadInteger '9'
    v288 <- LoadInteger '10'
    v289 <- LoadInteger '11'
    v290 <- LoadInteger '12'
    v291 <- LoadInteger '13'
    v292 <- LoadInteger '14'
    v293 <- LoadInteger '15'
    v294 <- LoadInteger '16'
    v295 <- LoadInteger '17'
    v296 <- LoadInteger '18'
    v297 <- LoadInteger '19'
    v298 <- LoadInteger '20'
    v299 <- LoadInteger '21'
    v300 <- LoadInteger '22'
    v301 <- LoadInteger '23'
    v302 <- LoadInteger '24'
    v303 <- LoadInteger '25'
    v304 <- CreateArray [v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303]
    v305 <- CreateNamedVariable 'a', 'const', v304
    v306 <- LoadInteger '0'
    v307 <- CreateNamedVariable 'result', 'let', v306
    v308 <- BeginPlainFunction -> v309
        v310 <- BeginPlainFunction -> v311, v312
            Update v307, '+', v312
            v313 <- LoadInteger '13'
            v314 <- Compare v312, '===', v313
            v315 <- BinaryOperation v314, '&&', v309
            BeginIf v315
            EndIf
            v316 <- LoadBoolean 'false'
            Return v316
        EndPlainFunction
        v317 <- CallMethod v305, 'find', [v310]
    EndPlainFunction
    v318 <- CallFunction v308, []
    v319 <- CallFunction v308, []
    v320 <- CallFunction v308, []
    v321 <- LoadBoolean 'true'
    v322 <- CallFunction v308, [v321]
    v323 <- CallFunction v308, []
    v324 <- LoadInteger '1500'
EndArrowFunction
v325 <- CallFunction v278, []
v326 <- BeginArrowFunction -> 
    v327 <- LoadInteger '1'
    v328 <- LoadInteger '2'
    v329 <- LoadInteger '3'
    v330 <- LoadInteger '4'
    v331 <- LoadInteger '5'
    v332 <- LoadInteger '6'
    v333 <- LoadInteger '7'
    v334 <- LoadInteger '8'
    v335 <- LoadInteger '9'
    v336 <- LoadInteger '10'
    v337 <- LoadInteger '11'
    v338 <- LoadInteger '12'
    v339 <- LoadInteger '13'
    v340 <- LoadInteger '14'
    v341 <- LoadInteger '15'
    v342 <- LoadInteger '16'
    v343 <- LoadInteger '17'
    v344 <- LoadInteger '18'
    v345 <- LoadInteger '19'
    v346 <- LoadInteger '20'
    v347 <- LoadInteger '21'
    v348 <- LoadInteger '22'
    v349 <- LoadInteger '23'
    v350 <- LoadInteger '24'
    v351 <- LoadInteger '25'
    v352 <- CreateArray [v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351]
    v353 <- CreateNamedVariable 'a', 'const', v352
    v354 <- LoadBoolean 'false'
    v355 <- CreateNamedVariable 'caught', 'let', v354
    v356 <- BeginPlainFunction -> v357
        BeginTry
            v358 <- BeginArrowFunction -> v359, v360
                v361 <- LoadInteger '1'
                v362 <- Compare v360, '===', v361
                v363 <- BinaryOperation v362, '&&', v357
                BeginIf v363
                    v364 <- LoadString 'a'
                    ThrowException v364
                EndIf
                v365 <- LoadBoolean 'false'
                Return v365
            EndArrowFunction
            v366 <- CallMethod v353, 'find', [v358]
        BeginCatch -> v367
            v368 <- LoadBoolean 'true'
            Reassign v355, v368
        EndTryCatch
    EndPlainFunction
    v369 <- CallFunction v356, []
    v370 <- CallFunction v356, []
    v371 <- CallFunction v356, []
    v372 <- BeginArrowFunction -> 
        v373 <- LoadBoolean 'true'
        v374 <- CallFunction v356, [v373]
        Return v374
    EndArrowFunction
    v375 <- CallFunction v372, []
    v376 <- CallFunction v356, []
EndArrowFunction
v377 <- CallFunction v326, []
v378 <- BeginArrowFunction -> 
    v379 <- LoadInteger '1'
    v380 <- LoadInteger '2'
    v381 <- LoadInteger '3'
    v382 <- LoadInteger '4'
    v383 <- LoadInteger '5'
    v384 <- LoadInteger '6'
    v385 <- LoadInteger '7'
    v386 <- LoadInteger '8'
    v387 <- LoadInteger '9'
    v388 <- LoadInteger '10'
    v389 <- CreateArray [v379, v380, v381, v382, v383, v384, v385, v386, v387, v388]
    v390 <- CreateNamedVariable 'a', 'let', v389
    v391 <- LoadBoolean 'false'
    v392 <- CreateNamedVariable 'caught', 'let', v391
    v393 <- BeginPlainFunction -> v394
        v395 <- BeginPlainFunction -> v396, v397
            v398 <- LoadInteger '1'
            v399 <- Compare v397, '===', v398
            v400 <- BinaryOperation v399, '&&', v394
            BeginIf v400
                v401 <- LoadString 'a'
                ThrowException v401
            EndIf
            v402 <- LoadBoolean 'false'
            Return v402
        EndPlainFunction
        BeginTry
            v403 <- CallMethod v390, 'find', [v395]
        BeginCatch -> v404
            v405 <- LoadBoolean 'true'
            Reassign v392, v405
        EndTryCatch
    EndPlainFunction
    v406 <- CallFunction v393, []
    v407 <- CallFunction v393, []
    v408 <- CallFunction v393, []
    v409 <- BeginArrowFunction -> 
        v410 <- LoadBoolean 'true'
        v411 <- CallFunction v393, [v410]
        Return v411
    EndArrowFunction
    v412 <- CallFunction v409, []
    v413 <- CallFunction v393, []
EndArrowFunction
v414 <- CallFunction v378, []
v415 <- BeginPlainFunction -> 
    v416 <- LoadInteger '1'
    v417 <- LoadInteger '2'
    v418 <- LoadInteger '3'
    v419 <- LoadInteger '4'
    v420 <- CreateArray [v416, v417, v418, v419]
    v421 <- CreateNamedVariable 'a', 'const', v420
    v422 <- BeginPlainFunction -> v423
        v424 <- BeginPlainFunction -> v425, v426
            v427 <- LoadInteger '1'
            v428 <- Compare v426, '===', v427
            v429 <- BinaryOperation v428, '&&', v423
            BeginIf v429
                v430 <- LoadString 'some exception'
                ThrowException v430
            EndIf
            v431 <- LoadInteger '3'
            v432 <- Compare v425, '===', v431
            Return v432
        EndPlainFunction
        v433 <- LoadInteger '0'
        v434 <- CreateNamedVariable 'result', 'let', v433
        BeginTry
            v435 <- CallMethod v421, 'find', [v424]
            Reassign v434, v435
        BeginCatch -> v436
            v437 <- LoadString 'some exception'
            v438 <- LoadString 'nope'
            Reassign v434, v438
        EndTryCatch
        Return v434
    EndPlainFunction
    v439 <- LoadInteger '3'
    v440 <- LoadBoolean 'false'
    v441 <- CallFunction v422, [v440]
    v442 <- LoadInteger '3'
    v443 <- LoadBoolean 'false'
    v444 <- CallFunction v422, [v443]
    v445 <- LoadString 'nope'
    v446 <- LoadBoolean 'true'
    v447 <- CallFunction v422, [v446]
    v448 <- LoadString 'nope'
    v449 <- LoadBoolean 'true'
    v450 <- CallFunction v422, [v449]
    v451 <- LoadInteger '3'
    v452 <- LoadBoolean 'false'
    v453 <- CallFunction v422, [v452]
    v454 <- LoadString 'nope'
    v455 <- LoadBoolean 'true'
    v456 <- CallFunction v422, [v455]
EndPlainFunction
v457 <- CallFunction v415, []
v458 <- BeginArrowFunction -> 
    v459 <- LoadRegExp 'Array\.find' ''
    v460 <- CreateNamedVariable 're', 'const', v459
    v461 <- BeginPlainFunction -> v462
        v463 <- LoadInteger '1'
        v464 <- LoadInteger '2'
        v465 <- LoadInteger '3'
        v466 <- CreateArray [v463, v464, v465]
        v467 <- CreateNamedVariable 'b', 'const', v466
        v468 <- LoadInteger '0'
        v469 <- CreateNamedVariable 'result', 'let', v468
        v470 <- BeginArrowFunction -> v471, v472
            Update v469, '+', v471
            v473 <- LoadInteger '1'
            v474 <- Compare v472, '===', v473
            BeginIf v474
                v475 <- CreateNamedVariable 'Error', 'none'
                v476 <- Construct v475, []
                v477 <- CreateNamedVariable 'e', 'const', v476
                v478 <- GetProperty v477, 'stack'
                v479 <- CallMethod v460, 'exec', [v478]
                v480 <- LoadNull
                v481 <- Compare v479, '!==', v480
            EndIf
            v482 <- LoadBoolean 'false'
            Return v482
        EndArrowFunction
        v483 <- CallMethod v467, 'find', [v470]
    EndPlainFunction
    v484 <- CallFunction v461, []
    v485 <- CallFunction v461, []
    v486 <- CallFunction v461, []
EndArrowFunction
v487 <- CallFunction v458, []
v488 <- BeginArrowFunction -> 
    v489 <- LoadRegExp 'Array\.find' ''
    v490 <- CreateNamedVariable 're', 'const', v489
    v491 <- BeginPlainFunction -> v492
        v493 <- LoadInteger '1'
        v494 <- LoadInteger '2'
        v495 <- LoadInteger '3'
        v496 <- CreateArray [v493, v494, v495]
        v497 <- CreateNamedVariable 'b', 'const', v496
        v498 <- LoadBoolean 'false'
        v499 <- CreateNamedVariable 'did_assert_error', 'let', v498
        v500 <- LoadInteger '0'
        v501 <- CreateNamedVariable 'result', 'let', v500
        v502 <- BeginPlainFunction -> v503, v504
            Update v501, '+', v503
            v505 <- LoadInteger '1'
            v506 <- Compare v504, '===', v505
            BeginIf v506
                v507 <- CreateNamedVariable 'Error', 'none'
                v508 <- Construct v507, []
                v509 <- CreateNamedVariable 'e', 'const', v508
                v510 <- GetProperty v509, 'stack'
                v511 <- CallMethod v490, 'exec', [v510]
                v512 <- LoadNull
                v513 <- Compare v511, '!==', v512
                v514 <- LoadBoolean 'true'
                Reassign v499, v514
            EndIf
            v515 <- LoadBoolean 'false'
            Return v515
        EndPlainFunction
        v516 <- CallMethod v497, 'find', [v502]
        Return v499
    EndPlainFunction
    v517 <- CallFunction v491, []
    v518 <- CallFunction v491, []
    v519 <- CallFunction v491, []
EndArrowFunction
v520 <- CallFunction v488, []
v521 <- BeginArrowFunction -> 
    v522 <- LoadRegExp 'Array\.find' ''
    v523 <- CreateNamedVariable 're', 'const', v522
    v524 <- BeginPlainFunction -> v525
        v526 <- LoadInteger '1'
        v527 <- LoadInteger '2'
        v528 <- LoadInteger '3'
        v529 <- CreateArray [v526, v527, v528]
        v530 <- CreateNamedVariable 'b', 'const', v529
        v531 <- LoadBoolean 'false'
        v532 <- CreateNamedVariable 'did_assert_error', 'let', v531
        v533 <- LoadInteger '0'
        v534 <- CreateNamedVariable 'result', 'let', v533
        v535 <- BeginArrowFunction -> v536, v537
            Update v534, '+', v536
            v538 <- LoadInteger '1'
            v539 <- Compare v537, '===', v538
            BeginIf v539
            BeginElse
                v540 <- LoadInteger '2'
                v541 <- Compare v537, '===', v540
                BeginIf v541
                    v542 <- CreateNamedVariable 'Error', 'none'
                    v543 <- Construct v542, []
                    v544 <- CreateNamedVariable 'e', 'const', v543
                    v545 <- GetProperty v544, 'stack'
                    v546 <- CallMethod v523, 'exec', [v545]
                    v547 <- LoadNull
                    v548 <- Compare v546, '!==', v547
                    v549 <- LoadBoolean 'true'
                    Reassign v532, v549
                EndIf
            EndIf
            v550 <- LoadBoolean 'false'
            Return v550
        EndArrowFunction
        v551 <- CallMethod v530, 'find', [v535]
        Return v532
    EndPlainFunction
    v552 <- CallFunction v524, []
    v553 <- CallFunction v524, []
    v554 <- CallFunction v524, []
EndArrowFunction
v555 <- CallFunction v521, []
v556 <- BeginArrowFunction -> 
    v557 <- LoadRegExp 'Array\.find' ''
    v558 <- CreateNamedVariable 're', 'const', v557
    v559 <- LoadInteger '1'
    v560 <- LoadInteger '2'
    v561 <- LoadInteger '3'
    v562 <- CreateArray [v559, v560, v561]
    v563 <- CreateNamedVariable 'a', 'const', v562
    v564 <- LoadInteger '0'
    v565 <- CreateNamedVariable 'result', 'let', v564
    v566 <- BeginPlainFunction -> 
        v567 <- BeginArrowFunction -> v568, v569
            Update v565, '+', v569
            v570 <- LoadInteger '1'
            v571 <- Compare v569, '===', v570
            BeginIf v571
                v572 <- CreateNamedVariable 'Error', 'none'
                v573 <- Construct v572, []
                ThrowException v573
            EndIf
            v574 <- LoadBoolean 'false'
            Return v574
        EndArrowFunction
        v575 <- CallMethod v563, 'find', [v567]
    EndPlainFunction
    v576 <- BeginArrowFunction -> 
        v577 <- CallFunction v566, []
        Return v577
    EndArrowFunction
    v578 <- CallFunction v576, []
    v579 <- BeginArrowFunction -> 
        v580 <- CallFunction v566, []
        Return v580
    EndArrowFunction
    v581 <- CallFunction v579, []
    BeginTry
        v582 <- CallFunction v566, []
    BeginCatch -> v583
        v584 <- GetProperty v583, 'stack'
        v585 <- CallMethod v558, 'exec', [v584]
        v586 <- LoadNull
        v587 <- Compare v585, '!==', v586
    EndTryCatch
    BeginTry
        v588 <- CallFunction v566, []
    BeginCatch -> v589
        v590 <- GetProperty v589, 'stack'
        v591 <- CallMethod v558, 'exec', [v590]
        v592 <- LoadNull
        v593 <- Compare v591, '!==', v592
    EndTryCatch
EndArrowFunction
v594 <- CallFunction v556, []
v595 <- BeginArrowFunction -> 
    v596 <- LoadInteger '1'
    v597 <- LoadInteger '2'
    v598 <- LoadInteger '3'
    v599 <- CreateArray [v596, v597, v598]
    v600 <- CreateNamedVariable 'a', 'const', v599
    v601 <- LoadInteger '0'
    v602 <- CreateNamedVariable 'result', 'let', v601
    v603 <- BeginPlainFunction -> 
        v604 <- BeginArrowFunction -> v605, v606
            Update v602, '+', v605
            v607 <- LoadBoolean 'false'
            Return v607
        EndArrowFunction
        v608 <- CallMethod v600, 'find', [v604]
    EndPlainFunction
    v609 <- CallFunction v603, []
    v610 <- CallFunction v603, []
    v611 <- CallFunction v603, []
    BeginObjectLiteral
    v612 <- EndObjectLiteral
    SetProperty v600, 'constructor', v612
    v613 <- CallFunction v603, []
    v614 <- CallFunction v603, []
    v615 <- LoadInteger '24'
EndArrowFunction
v616 <- CallFunction v595, []
v617 <- BeginArrowFunction -> 
    v618 <- LoadInteger '1'
    v619 <- LoadInteger '2'
    v620 <- LoadUndefined
    v621 <- LoadInteger '3'
    v622 <- LoadInteger '4'
    v623 <- CreateArray [v618, v619, v620, v621, v622]
    v624 <- CreateNamedVariable 'a', 'const', v623
    v625 <- BeginPlainFunction -> 
        v626 <- CreateArray []
        v627 <- CreateNamedVariable 'callback_values', 'const', v626
        v628 <- BeginArrowFunction -> v629
            v630 <- CallMethod v627, 'push', [v629]
            v631 <- LoadBoolean 'false'
            Return v631
        EndArrowFunction
        v632 <- CallMethod v624, 'find', [v628]
        Return v627
    EndPlainFunction
    v633 <- CallFunction v625, []
    v634 <- CallFunction v625, []
    v635 <- LoadInteger '1'
    v636 <- LoadInteger '2'
    v637 <- LoadUndefined
    v638 <- LoadInteger '3'
    v639 <- LoadInteger '4'
    v640 <- CreateArray [v635, v636, v637, v638, v639]
    v641 <- CallFunction v625, []
EndArrowFunction
v642 <- CallFunction v617, []
v643 <- BeginArrowFunction -> 
    v644 <- LoadFloat '1.5'
    v645 <- LoadFloat '2.5'
    v646 <- LoadUndefined
    v647 <- LoadFloat '3.5'
    v648 <- LoadFloat '4.5'
    v649 <- CreateArray [v644, v645, v646, v647, v648]
    v650 <- CreateNamedVariable 'a', 'const', v649
    v651 <- BeginPlainFunction -> 
        v652 <- CreateArray []
        v653 <- CreateNamedVariable 'callback_values', 'const', v652
        v654 <- BeginArrowFunction -> v655
            v656 <- CallMethod v653, 'push', [v655]
            v657 <- LoadBoolean 'false'
            Return v657
        EndArrowFunction
        v658 <- CallMethod v650, 'find', [v654]
        Return v653
    EndPlainFunction
    v659 <- CallFunction v651, []
    v660 <- CallFunction v651, []
    v661 <- LoadFloat '1.5'
    v662 <- LoadFloat '2.5'
    v663 <- LoadUndefined
    v664 <- LoadFloat '3.5'
    v665 <- LoadFloat '4.5'
    v666 <- CreateArray [v661, v662, v663, v664, v665]
    v667 <- CallFunction v651, []
EndArrowFunction
v668 <- CallFunction v643, []
v669 <- BeginArrowFunction -> 
    v670 <- BeginPlainFunction -> v671, v672
        BeginIf v672
            v673 <- LoadInteger '3'
            SetProperty v671, 'foo', v673
        EndIf
        Return v671
    EndPlainFunction
    v674 <- BeginPlainFunction -> v675, v676
        v677 <- BeginArrowFunction -> v678
            v679 <- LoadBoolean 'false'
            Return v679
        EndArrowFunction
        v680 <- CallFunction v670, [v675, v676]
        v681 <- CallMethod v675, 'find', [v677, v680]
        Return v681
    EndPlainFunction
    v682 <- LoadInteger '1'
    v683 <- LoadInteger '2'
    v684 <- LoadInteger '3'
    v685 <- CreateArray [v682, v683, v684]
    v686 <- CreateNamedVariable 'a', 'let', v685
    v687 <- LoadBoolean 'false'
    v688 <- CallFunction v674, [v686, v687]
    v689 <- LoadBoolean 'false'
    v690 <- CallFunction v674, [v686, v689]
    v691 <- LoadBoolean 'false'
    v692 <- CallFunction v674, [v686, v691]
    v693 <- LoadBoolean 'true'
    v694 <- CallFunction v674, [v686, v693]
EndArrowFunction
v695 <- CallFunction v669, []
v696 <- BeginArrowFunction -> 
    v697 <- LoadInteger '1'
    v698 <- LoadInteger '2'
    v699 <- LoadInteger '3'
    v700 <- LoadInteger '4'
    v701 <- LoadInteger '5'
    v702 <- CreateArray [v697, v698, v699, v700, v701]
    v703 <- CreateNamedVariable 'a', 'const', v702
    v704 <- BeginPlainFunction -> 
        v705 <- LoadUndefined
        v706 <- CallMethod v703, 'find', [v705]
        Return v706
    EndPlainFunction
    v707 <- CallFunction v704, []
    v708 <- CreateNamedVariable 'TypeError', 'none'
    BeginTry
        v709 <- CallFunction v704, []
    BeginCatch -> v710
    EndTryCatch
    v711 <- CallFunction v704, []
EndArrowFunction
v712 <- CallFunction v696, []


const v0 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function eagerDeoptInCalled(a31) {
        const v32 = (a33, a34) => {
            if ((a34 === 13) && a31) {
                a.abc = 25;
            }
            result += a33;
            return a33 === 20;
        };
        return a.find(v32);
    }
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
};
v0();
const v51 = () => {
    let called_values;
    function eagerDeoptInCalled(a55) {
        const a = [1,2,3,4,5,6,7,8,9,10];
        called_values = [];
        const v69 = (a70, a71) => {
            called_values.push(a70);
            a.length = (a71 === 5) && a55 ? 8 : 10;
            return a70 === 9;
        };
        return a.find(v69);
    }
    eagerDeoptInCalled();
    [1,2,3,4,5,6,7,8,9];
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    [1,2,3,4,5,6,7,8,,,];
    eagerDeoptInCalled();
};
v51();
const v113 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a122) {
        const v123 = (a124, a125) => {
            if ((a125 === 3) && a122) {
                a[3] = 100;
            }
            return a124 > 3;
        };
        return a.find(v123);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v113();
const v142 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a151) {
        const v152 = (a153, a154) => {
            if ((a154 === 3) && a151) {
            }
            return false;
        };
        return a.find(v152);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v142();
const v169 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a178) {
        const v179 = (a180, a181) => {
            if ((a181 === 2) && a178) {
                a[3] = 100;
            }
            return a180 > 3;
        };
        return a.find(v179);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v169();
const v198 = () => {
    let result = 0;
    function eagerDeoptInCalled(a202) {
        const a_noescape = [0,1,2,3,4,5];
        const v211 = (a212, a213) => {
            result += a212 | 0;
            if ((a213 === 13) && a202) {
                a_noescape.length = 25;
            }
            return false;
        };
        a_noescape.find(v211);
    }
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
};
v198();
const v230 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function lazyDeopt(a261) {
        const v262 = (a263, a264) => {
            result += a264;
            if ((a264 === 13) && a261) {
            }
            return false;
        };
        a.find(v262);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
};
v230();
const v278 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function lazyDeopt(a309) {
        function callback(a311, a312) {
            result += a312;
            if ((a312 === 13) && a309) {
            }
            return false;
        }
        a.find(callback);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
};
v278();
const v326 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let caught = false;
    function lazyDeopt(a357) {
        try {
            const v358 = (a359, a360) => {
                if ((a360 === 1) && a357) {
                    throw "a";
                }
                return false;
            };
            a.find(v358);
        } catch(e367) {
            caught = true;
        }
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v372 = () => {
        return lazyDeopt(true);
    };
    v372();
    lazyDeopt();
};
v326();
const v378 = () => {
    let a = [1,2,3,4,5,6,7,8,9,10];
    let caught = false;
    function lazyDeopt(a394) {
        function callback(a396, a397) {
            if ((a397 === 1) && a394) {
                throw "a";
            }
            return false;
        }
        try {
            a.find(callback);
        } catch(e404) {
            caught = true;
        }
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v409 = () => {
        return lazyDeopt(true);
    };
    v409();
    lazyDeopt();
};
v378();
function TestThrowIntoDeoptimizedOuter() {
    const a = [1,2,3,4];
    function lazyDeopt(a423) {
        function callback(a425, a426) {
            if ((a426 === 1) && a423) {
                throw "some exception";
            }
            return a425 === 3;
        }
        let result = 0;
        try {
            result = a.find(callback);
        } catch(e436) {
            result = "nope";
        }
        return result;
    }
    lazyDeopt(false);
    lazyDeopt(false);
    lazyDeopt(true);
    lazyDeopt(true);
    lazyDeopt(false);
    lazyDeopt(true);
}
TestThrowIntoDeoptimizedOuter();
const v458 = () => {
    const re = /Array\.find/;
    function lazyDeopt(a462) {
        const b = [1,2,3];
        let result = 0;
        const v470 = (a471, a472) => {
            result += a471;
            if (a472 === 1) {
                const v476 = new Error();
                const e = v476;
                re.exec(e.stack) !== null;
            }
            return false;
        };
        b.find(v470);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v458();
const v488 = () => {
    const re = /Array\.find/;
    function lazyDeopt(a492) {
        const b = [1,2,3];
        let did_assert_error = false;
        let result = 0;
        function callback(a503, a504) {
            result += a503;
            if (a504 === 1) {
                const v508 = new Error();
                const e = v508;
                re.exec(e.stack) !== null;
                did_assert_error = true;
            }
            return false;
        }
        b.find(callback);
        return did_assert_error;
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v488();
const v521 = () => {
    const re = /Array\.find/;
    function lazyDeopt(a525) {
        const b = [1,2,3];
        let did_assert_error = false;
        let result = 0;
        const v535 = (a536, a537) => {
            result += a536;
            if (a537 === 1) {
            } else {
                if (a537 === 2) {
                    const v543 = new Error();
                    const e = v543;
                    re.exec(e.stack) !== null;
                    did_assert_error = true;
                }
            }
            return false;
        };
        b.find(v535);
        return did_assert_error;
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v521();
const v556 = () => {
    const re = /Array\.find/;
    const a = [1,2,3];
    let result = 0;
    function lazyDeopt() {
        const v567 = (a568, a569) => {
            result += a569;
            if (a569 === 1) {
                const v573 = new Error();
                throw v573;
            }
            return false;
        };
        a.find(v567);
    }
    const v576 = () => {
        return lazyDeopt();
    };
    v576();
    const v579 = () => {
        return lazyDeopt();
    };
    v579();
    try {
        lazyDeopt();
    } catch(e583) {
        re.exec(e583.stack) !== null;
    }
    try {
        lazyDeopt();
    } catch(e589) {
        re.exec(e589.stack) !== null;
    }
};
v556();
const v595 = () => {
    const a = [1,2,3];
    let result = 0;
    function prototypeChanged() {
        const v604 = (a605, a606) => {
            result += a605;
            return false;
        };
        a.find(v604);
    }
    prototypeChanged();
    prototypeChanged();
    prototypeChanged();
    a.constructor = {};
    prototypeChanged();
    prototypeChanged();
};
v595();
const v617 = () => {
    const a = [1,2,,3,4];
    function withHoles() {
        const callback_values = [];
        const v628 = (a629) => {
            callback_values.push(a629);
            return false;
        };
        a.find(v628);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1,2,,3,4];
    withHoles();
};
v617();
const v643 = () => {
    const a = [1.5,2.5,,3.5,4.5];
    function withHoles() {
        const callback_values = [];
        const v654 = (a655) => {
            callback_values.push(a655);
            return false;
        };
        a.find(v654);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1.5,2.5,,3.5,4.5];
    withHoles();
};
v643();
const v669 = () => {
    function side_effect(a671, a672) {
        if (a672) {
            a671.foo = 3;
        }
        return a671;
    }
    function unreliable(a675, a676) {
        const v677 = (a678) => {
            return false;
        };
        return a675.find(v677, side_effect(a675, a676));
    }
    let a = [1,2,3];
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, true);
};
v669();
const v696 = () => {
    const a = [1,2,3,4,5];
    function notCallable() {
        return a.find(undefined);
    }
    notCallable();
    try {
        notCallable();
    } catch(e710) {
    }
    notCallable();
};
v696();

FuzzIL program written to corpus/optimized-array-find.fzil
