const v2 = new Int32Array(128);
const v5 = new Uint32Array(2481);
try { v5.join(v2); } catch (e) {}
new Float32Array();
class C12 extends Float32Array {
    toString(a14, a15) {
        const v16 = v2.set(this, 2481);
        [-316260.91251439624,-56.7896876298322,-38219.185283078696,-2.0,-4.166260277771694,-1000.0,1.7489051747919037e+307,0.7784841437010533,5.0,1.2644884432872801e+308];
        [1e-15,-6.665090344744842e+307,-696993.5326704595,145.22479630689395,0.7192978694014374,281.1484262624033,-2.220446049250313e-16,473267.44713921705];
        [0.13078352331944332,-7.444745639303249e+307,2.0,0.7129538171961551];
        new v16();
        return Float32Array;
    }
    #h = Int32Array;
    static #e;
}
new C12();
C12.BYTES_PER_ELEMENT;
const v23 = new C12();
try { v23.toString(); } catch (e) {}
function f25() {
    for (let v26 = 0; v26 < 5; v26++) {
    }
}
for (let v27 = 0; v27 < 5; v27++) {
}
