v0 <- BeginPlainFunction -> v1, v2
    v3 <- BinaryOperation v1, '*', v2
    v4 <- LoadInteger '0'
    v5 <- BinaryOperation v3, '|', v4
    Return v5
EndPlainFunction
v6 <- LoadInteger '0'
v7 <- LoadInteger '0'
v8 <- CallFunction v0, [v6, v7]
v9 <- LoadInteger '0'
v10 <- LoadInteger '0'
v11 <- CallFunction v0, [v9, v10]
v12 <- LoadInteger '0'
v13 <- LoadInteger '0'
v14 <- LoadInteger '1'
v15 <- UnaryOperation '-', v14
v16 <- CallFunction v0, [v13, v15]
v17 <- CallFunction v0, []
v18 <- BeginPlainFunction -> v19, v20
    v21 <- BinaryOperation v19, '/', v20
    v22 <- LoadInteger '0'
    v23 <- BinaryOperation v21, '|', v22
    Return v23
EndPlainFunction
v24 <- LoadInteger '4'
v25 <- LoadInteger '2'
v26 <- CallFunction v18, [v24, v25]
v27 <- LoadInteger '4'
v28 <- LoadInteger '2'
v29 <- CallFunction v18, [v27, v28]
v30 <- LoadInteger '1'
v31 <- LoadInteger '5'
v32 <- LoadInteger '3'
v33 <- CallFunction v18, [v31, v32]
v34 <- CallFunction v18, []


function mul(a1, a2) {
    return (a1 * a2) | 0;
}
mul(0, 0);
mul(0, 0);
mul(0, -1);
mul();
function div(a19, a20) {
    return (a19 / a20) | 0;
}
div(4, 2);
div(4, 2);
div(5, 3);
div();

FuzzIL program written to corpus/regress-2132.fzil
