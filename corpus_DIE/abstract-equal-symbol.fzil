v0 <- BeginPlainFunction -> 
    v1 <- LoadString 'a'
    v2 <- CreateNamedVariable 'Symbol', 'none'
    v3 <- CallFunction v2, [v1]
    v4 <- CreateNamedVariable 'a', 'const', v3
    v5 <- LoadString 'b'
    v6 <- CallFunction v2, [v5]
    v7 <- CreateNamedVariable 'b', 'const', v6
    v8 <- BeginPlainFunction -> 
        v9 <- Compare v4, '==', v7
        Return v9
    EndPlainFunction
    v10 <- CallFunction v8, []
    v11 <- CallFunction v8, []
    v12 <- CallFunction v8, []
EndPlainFunction
v13 <- CallFunction v0, []
v14 <- BeginPlainFunction -> 
    v15 <- LoadString 'a'
    v16 <- CreateNamedVariable 'Symbol', 'none'
    v17 <- CallFunction v16, [v15]
    v18 <- CreateNamedVariable 'a', 'const', v17
    v19 <- LoadString 'b'
    v20 <- CallFunction v16, [v19]
    v21 <- CreateNamedVariable 'b', 'const', v20
    v22 <- BeginPlainFunction -> 
        v23 <- Compare v18, '!=', v21
        Return v23
    EndPlainFunction
    v24 <- CallFunction v22, []
    v25 <- CallFunction v22, []
    v26 <- CallFunction v22, []
EndPlainFunction
v27 <- CallFunction v14, []
v28 <- BeginPlainFunction -> 
    v29 <- LoadString 'a'
    v30 <- CreateNamedVariable 'Symbol', 'none'
    v31 <- CallFunction v30, [v29]
    v32 <- CreateNamedVariable 'a', 'const', v31
    v33 <- LoadString 'b'
    v34 <- CallFunction v30, [v33]
    v35 <- CreateNamedVariable 'b', 'const', v34
    v36 <- BeginPlainFunction -> v37
        v38 <- Compare v37, '==', v35
        Return v38
    EndPlainFunction
    v39 <- CallFunction v36, [v35]
    v40 <- CallFunction v36, [v32]
    v41 <- CallFunction v36, [v35]
    v42 <- CallFunction v36, [v32]
    v43 <- CallFunction v36, [v35]
    v44 <- CallFunction v36, [v32]
    v45 <- CallFunction v36, []
    v46 <- LoadString 'a'
    v47 <- CallFunction v36, [v46]
    v48 <- CallFunction v36, []
    v49 <- LoadString 'a'
    v50 <- CallFunction v36, [v49]
    v51 <- CallFunction v36, []
EndPlainFunction
v52 <- CallFunction v28, []
v53 <- BeginPlainFunction -> 
    v54 <- LoadString 'a'
    v55 <- CreateNamedVariable 'Symbol', 'none'
    v56 <- CallFunction v55, [v54]
    v57 <- CreateNamedVariable 'a', 'const', v56
    v58 <- LoadString 'b'
    v59 <- CallFunction v55, [v58]
    v60 <- CreateNamedVariable 'b', 'const', v59
    v61 <- BeginPlainFunction -> v62
        v63 <- Compare v62, '!=', v60
        Return v63
    EndPlainFunction
    v64 <- CallFunction v61, [v60]
    v65 <- CallFunction v61, [v57]
    v66 <- CallFunction v61, [v60]
    v67 <- CallFunction v61, [v57]
    v68 <- CallFunction v61, [v60]
    v69 <- CallFunction v61, [v57]
    v70 <- LoadString 'a'
    v71 <- CallFunction v61, [v70]
    v72 <- CallFunction v61, []
    v73 <- LoadString 'a'
    v74 <- CallFunction v61, [v73]
    v75 <- CallFunction v61, []
EndPlainFunction
v76 <- CallFunction v53, []
v77 <- BeginPlainFunction -> 
    v78 <- LoadString 'a'
    v79 <- CreateNamedVariable 'Symbol', 'none'
    v80 <- CallFunction v79, [v78]
    v81 <- CreateNamedVariable 'a', 'const', v80
    v82 <- LoadString 'b'
    v83 <- CallFunction v79, [v82]
    v84 <- CreateNamedVariable 'b', 'const', v83
    v85 <- BeginPlainFunction -> v86, v87
        v88 <- Compare v86, '==', v87
        Return v88
    EndPlainFunction
    v89 <- CallFunction v85, [v84, v84]
    v90 <- CallFunction v85, [v81, v84]
    v91 <- CallFunction v85, [v81, v81]
    v92 <- CallFunction v85, [v84, v81]
    v93 <- CallFunction v85, [v81, v81]
    v94 <- CallFunction v85, [v84, v81]
    v95 <- LoadString 'a'
    v96 <- CallFunction v85, [v95, v84]
    v97 <- CallFunction v85, []
    v98 <- LoadString 'a'
    v99 <- CallFunction v85, [v98, v84]
    v100 <- CallFunction v85, []
EndPlainFunction
v101 <- CallFunction v77, []
v102 <- BeginPlainFunction -> 
    v103 <- LoadString 'a'
    v104 <- CreateNamedVariable 'Symbol', 'none'
    v105 <- CallFunction v104, [v103]
    v106 <- CreateNamedVariable 'a', 'const', v105
    v107 <- LoadString 'b'
    v108 <- CallFunction v104, [v107]
    v109 <- CreateNamedVariable 'b', 'const', v108
    v110 <- BeginPlainFunction -> v111, v112
        v113 <- Compare v111, '!=', v112
        Return v113
    EndPlainFunction
    v114 <- CallFunction v110, [v109, v109]
    v115 <- CallFunction v110, [v106, v109]
    v116 <- CallFunction v110, [v106, v106]
    v117 <- CallFunction v110, [v109, v106]
    v118 <- CallFunction v110, [v106, v106]
    v119 <- CallFunction v110, [v109, v106]
    v120 <- LoadString 'a'
    v121 <- CallFunction v110, [v120, v109]
    v122 <- CallFunction v110, []
    v123 <- LoadString 'a'
    v124 <- CallFunction v110, [v123, v109]
    v125 <- CallFunction v110, []
EndPlainFunction
v126 <- CallFunction v102, []


function f0() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo() {
        return a == b;
    }
    foo();
    foo();
    foo();
}
f0();
function f14() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo() {
        return a != b;
    }
    foo();
    foo();
    foo();
}
f14();
function f28() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo(a37) {
        return a37 == b;
    }
    foo(b);
    foo(a);
    foo(b);
    foo(a);
    foo(b);
    foo(a);
    foo();
    foo("a");
    foo();
    foo("a");
    foo();
}
f28();
function f53() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo(a62) {
        return a62 != b;
    }
    foo(b);
    foo(a);
    foo(b);
    foo(a);
    foo(b);
    foo(a);
    foo("a");
    foo();
    foo("a");
    foo();
}
f53();
function f77() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo(a86, a87) {
        return a86 == a87;
    }
    foo(b, b);
    foo(a, b);
    foo(a, a);
    foo(b, a);
    foo(a, a);
    foo(b, a);
    foo("a", b);
    foo();
    foo("a", b);
    foo();
}
f77();
function f102() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo(a111, a112) {
        return a111 != a112;
    }
    foo(b, b);
    foo(a, b);
    foo(a, a);
    foo(b, a);
    foo(a, a);
    foo(b, a);
    foo("a", b);
    foo();
    foo("a", b);
    foo();
}
f102();

FuzzIL program written to corpus/abstract-equal-symbol.fzil
