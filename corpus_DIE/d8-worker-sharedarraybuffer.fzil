v0 <- LoadThis
v1 <- GetProperty v0, 'Worker'
BeginIf v1
    v2 <- BeginPlainFunction -> 
        v3 <- CreateTemplateString ['onmessage = function(m) {\n        var sab = m;\n        var ta = new Uint32Array(sab);\n        if (sab.byteLength !== 16) {\n          throw new Error('SharedArrayBuffer clone byteLength');\n        }\n        for (var i = 0; i < 4; ++i) {\n          if (ta[i] !== i) {\n            throw new Error('SharedArrayBuffer clone value ' + i);\n          }\n        }\n        // Atomically update ta[0]\n        Atomics.store(ta, 0, 100);\n      };'], []
        v4 <- CreateNamedVariable 'workerScript', 'var', v3
        v5 <- CreateNamedVariable 'Worker', 'none'
        v6 <- LoadString 'string'
        BeginObjectLiteral
            ObjectLiteralAddProperty `type`, v6
        v7 <- EndObjectLiteral
        v8 <- Construct v5, [v4, v7]
        v9 <- CreateNamedVariable 'w', 'var', v8
        v10 <- CreateNamedVariable 'Array', 'none'
        v11 <- LoadInteger '16'
        v12 <- Construct v10, [v11]
        v13 <- CreateNamedVariable 'sab', 'var', v12
        v14 <- CreateNamedVariable 'Uint32Array', 'none'
        v15 <- Construct v14, [v13]
        v16 <- CreateNamedVariable 'ta', 'var', v15
        BeginForLoopInitializer
            v17 <- LoadInteger '0'
        BeginForLoopCondition -> v18
            v19 <- LoadInteger '4'
            v20 <- Compare v18, '<', v19
        BeginForLoopAfterthought v20 -> v21
            v22 <- UnaryOperation '++', v21
        BeginForLoopBody -> v23
            SetComputedProperty v16, v23, v23
        EndForLoop
        v24 <- CallMethod v9, 'postMessage', [v13]
        v25 <- LoadInteger '16'
        v26 <- GetProperty v13, 'byteLength'
        v27 <- LoadUndefined
        v28 <- CreateNamedVariable 'ta0', 'var', v27
        BeginWhileLoopHeader
            v29 <- LoadInteger '0'
            v30 <- CreateNamedVariable 'Atomics', 'none'
            v31 <- CallMethod v30, 'load', [v16, v29]
            Reassign v28, v31
            v32 <- LoadInteger '0'
            v33 <- Compare v31, '==', v32
        BeginWhileLoopBody v33
        EndWhileLoop
        v34 <- LoadInteger '100'
        v35 <- CallMethod v9, 'terminate', []
        v36 <- LoadInteger '16'
        v37 <- GetProperty v13, 'byteLength'
    EndPlainFunction
    v38 <- CallFunction v2, []
    v39 <- BeginPlainFunction -> 
        v40 <- CreateTemplateString ['onmessage = function(msg) {\n       var sab = msg.sab;\n       var id = msg.id;\n       var ta = new Uint32Array(sab);\n       Atomics.store(ta, id, 1);\n       postMessage(id);\n      };'], []
        v41 <- CreateNamedVariable 'workerScript', 'var', v40
        v42 <- CreateNamedVariable 'Array', 'none'
        v43 <- LoadInteger '16'
        v44 <- Construct v42, [v43]
        v45 <- CreateNamedVariable 'sab', 'var', v44
        v46 <- CreateNamedVariable 'Uint32Array', 'none'
        v47 <- Construct v46, [v45]
        v48 <- CreateNamedVariable 'ta', 'var', v47
        v49 <- LoadUndefined
        v50 <- CreateNamedVariable 'id', 'var', v49
        v51 <- CreateArray []
        v52 <- CreateNamedVariable 'workers', 'var', v51
        BeginForLoopInitializer
            v53 <- LoadInteger '0'
            Reassign v50, v53
        BeginForLoopCondition
            v54 <- LoadInteger '4'
            v55 <- Compare v50, '<', v54
        BeginForLoopAfterthought v55
            v56 <- UnaryOperation '++', v50
        BeginForLoopBody
            v57 <- CreateNamedVariable 'Worker', 'none'
            v58 <- LoadString 'string'
            BeginObjectLiteral
                ObjectLiteralAddProperty `type`, v58
            v59 <- EndObjectLiteral
            v60 <- Construct v57, [v41, v59]
            SetComputedProperty v52, v50, v60
            BeginObjectLiteral
                ObjectLiteralAddProperty `sab`, v45
                ObjectLiteralAddProperty `id`, v50
            v61 <- EndObjectLiteral
            v62 <- GetComputedProperty v52, v50
            v63 <- CallMethod v62, 'postMessage', [v61]
        EndForLoop
        v64 <- LoadInteger '0'
        v65 <- CreateNamedVariable 'count', 'var', v64
        BeginWhileLoopHeader
            v66 <- LoadInteger '4'
            v67 <- Compare v65, '<', v66
        BeginWhileLoopBody v67
            BeginForLoopInitializer
                v68 <- LoadInteger '0'
                Reassign v50, v68
            BeginForLoopCondition
                v69 <- LoadInteger '4'
                v70 <- Compare v50, '<', v69
            BeginForLoopAfterthought v70
                v71 <- UnaryOperation '++', v50
            BeginForLoopBody
                v72 <- LoadInteger '1'
                v73 <- LoadInteger '1'
                v74 <- UnaryOperation '-', v73
                v75 <- CreateNamedVariable 'Atomics', 'none'
                v76 <- CallMethod v75, 'compareExchange', [v48, v50, v72, v74]
                v77 <- LoadInteger '1'
                v78 <- Compare v76, '==', v77
                BeginIf v78
                    v79 <- GetComputedProperty v52, v50
                    v80 <- CallMethod v79, 'getMessage', []
                    v81 <- GetComputedProperty v52, v50
                    v82 <- CallMethod v81, 'terminate', []
                    v83 <- UnaryOperation v65, '++'
                EndIf
            EndForLoop
        EndWhileLoop
    EndPlainFunction
    v84 <- CallFunction v39, []
EndIf


if (this.Worker) {
    function TestClone() {
        var workerScript = `onmessage = function(m) {\n        var sab = m;\n        var ta = new Uint32Array(sab);\n        if (sab.byteLength !== 16) {\n          throw new Error('SharedArrayBuffer clone byteLength');\n        }\n        for (var i = 0; i < 4; ++i) {\n          if (ta[i] !== i) {\n            throw new Error('SharedArrayBuffer clone value ' + i);\n          }\n        }\n        // Atomically update ta[0]\n        Atomics.store(ta, 0, 100);\n      };`;
        const v8 = new Worker(workerScript, { type: "string" });
        var w = v8;
        const v12 = new Array(16);
        var sab = v12;
        const v15 = new Uint32Array(sab);
        var ta = v15;
        for (let i18 = 0; i18 < 4; ++i18) {
            ta[i18] = i18;
        }
        w.postMessage(sab);
        sab.byteLength;
        var ta0;
        while ((() => {
                const v31 = Atomics.load(ta, 0);
                ta0 = v31;
                return v31 == 0;
            })()) {
        }
        w.terminate();
        sab.byteLength;
    }
    TestClone();
    function TestCloneMulti() {
        var workerScript = `onmessage = function(msg) {\n       var sab = msg.sab;\n       var id = msg.id;\n       var ta = new Uint32Array(sab);\n       Atomics.store(ta, id, 1);\n       postMessage(id);\n      };`;
        const v44 = new Array(16);
        var sab = v44;
        const v47 = new Uint32Array(sab);
        var ta = v47;
        var id;
        var workers = [];
        for ((() => {
                id = 0;
            })();
            id < 4;
            ++id) {
            const v60 = new Worker(workerScript, { type: "string" });
            workers[id] = v60;
            const v61 = { sab: sab, id: id };
            workers[id].postMessage(v61);
        }
        var count = 0;
        while (count < 4) {
            for ((() => {
                    id = 0;
                })();
                id < 4;
                ++id) {
                if (Atomics.compareExchange(ta, id, 1, -1) == 1) {
                    workers[id].getMessage();
                    workers[id].terminate();
                    count++;
                }
            }
        }
    }
    TestCloneMulti();
}

FuzzIL program written to corpus/d8-worker-sharedarraybuffer.fzil
