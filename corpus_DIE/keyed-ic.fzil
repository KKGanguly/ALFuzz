v0 <- BeginPlainFunction -> 
    v1 <- LoadString 'prototype'
    v2 <- CreateNamedVariable 'initial_P', 'var', v1
    v3 <- CreateNamedVariable 'P', 'var', v2
    v4 <- LoadString 'hasOwnProperty'
    v5 <- CreateNamedVariable 'H', 'var', v4
    v6 <- BeginPlainFunction -> 
    EndPlainFunction
    v7 <- CreateNamedVariable 'f', 'var', v6
    v8 <- BeginPlainFunction -> v9
        BeginForLoopInitializer
            v10 <- LoadInteger '0'
        BeginForLoopCondition -> v11
            v12 <- LoadInteger '10'
            v13 <- Compare v11, '<', v12
        BeginForLoopAfterthought v13 -> v14
            v15 <- UnaryOperation v14, '++'
        BeginForLoopBody -> v16
            v17 <- GetComputedProperty v7, v3
            v18 <- CreateNamedVariable 'property', 'var', v17
            v19 <- Compare v16, '<=', v9
            BeginIf v19
                v20 <- GetProperty v7, 'prototype'
            BeginElse
                v21 <- GetProperty v7, 'hasOwnProperty'
            EndIf
            v22 <- Compare v16, '==', v9
            BeginIf v22
                Reassign v3, v5
            EndIf
        EndForLoop
        Reassign v3, v2
    EndPlainFunction
    BeginForLoopInitializer
        v23 <- LoadInteger '0'
    BeginForLoopCondition -> v24
        v25 <- LoadInteger '10'
        v26 <- Compare v24, '<', v25
    BeginForLoopAfterthought v26 -> v27
        v28 <- UnaryOperation v27, '++'
    BeginForLoopBody -> v29
        v30 <- CallFunction v8, [v29]
    EndForLoop
    v31 <- LoadInteger '43'
    SetProperty v7, 'prototype', v31
    BeginForLoopInitializer
        v32 <- LoadInteger '0'
    BeginForLoopCondition -> v33
        v34 <- LoadInteger '10'
        v35 <- Compare v33, '<', v34
    BeginForLoopAfterthought v35 -> v36
        v37 <- UnaryOperation v36, '++'
    BeginForLoopBody -> v38
        v39 <- CallFunction v8, [v38]
    EndForLoop
EndPlainFunction
v40 <- CreateNamedVariable 'runTest', 'var', v0
v41 <- CallFunction v40, []
v42 <- BeginPlainFunction -> 
    v43 <- LoadString 'length'
    v44 <- CreateNamedVariable 'initial_L', 'var', v43
    v45 <- CreateNamedVariable 'L', 'var', v44
    v46 <- LoadString '0'
    v47 <- CreateNamedVariable 'zero', 'var', v46
    v48 <- CreateNamedVariable 'Array', 'none'
    v49 <- LoadInteger '10'
    v50 <- Construct v48, [v49]
    v51 <- CreateNamedVariable 'a', 'var', v50
    v52 <- BeginPlainFunction -> v53
        BeginForLoopInitializer
            v54 <- LoadInteger '0'
        BeginForLoopCondition -> v55
            v56 <- LoadInteger '10'
            v57 <- Compare v55, '<', v56
        BeginForLoopAfterthought v57 -> v58
            v59 <- UnaryOperation v58, '++'
        BeginForLoopBody -> v60
            v61 <- GetComputedProperty v51, v45
            v62 <- CreateNamedVariable 'l', 'var', v61
            v63 <- Compare v60, '<=', v53
            BeginIf v63
                v64 <- LoadInteger '10'
            BeginElse
                v65 <- LoadUndefined
            EndIf
            v66 <- Compare v60, '==', v53
            BeginIf v66
                Reassign v45, v47
            EndIf
        EndForLoop
        Reassign v45, v44
    EndPlainFunction
    BeginForLoopInitializer
        v67 <- LoadInteger '0'
    BeginForLoopCondition -> v68
        v69 <- LoadInteger '10'
        v70 <- Compare v68, '<', v69
    BeginForLoopAfterthought v70 -> v71
        v72 <- UnaryOperation v71, '++'
    BeginForLoopBody -> v73
        v74 <- CallFunction v52, [v73]
    EndForLoop
EndPlainFunction
Reassign v40, v42
v75 <- CallFunction v40, []
v76 <- BeginPlainFunction -> 
    v77 <- LoadString 'length'
    v78 <- CreateNamedVariable 'initial_L', 'var', v77
    v79 <- CreateNamedVariable 'L', 'var', v78
    v80 <- LoadString '0'
    v81 <- CreateNamedVariable 'zero', 'var', v80
    v82 <- LoadString 'asdf'
    v83 <- CreateNamedVariable 's', 'var', v82
    v84 <- BeginPlainFunction -> v85
        BeginForLoopInitializer
            v86 <- LoadInteger '0'
        BeginForLoopCondition -> v87
            v88 <- LoadInteger '10'
            v89 <- Compare v87, '<', v88
        BeginForLoopAfterthought v89 -> v90
            v91 <- UnaryOperation v90, '++'
        BeginForLoopBody -> v92
            v93 <- GetComputedProperty v83, v79
            v94 <- CreateNamedVariable 'l', 'var', v93
            v95 <- Compare v92, '<=', v85
            BeginIf v95
                v96 <- LoadInteger '4'
            BeginElse
                v97 <- LoadString 'a'
            EndIf
            v98 <- Compare v92, '==', v85
            BeginIf v98
                Reassign v79, v81
            EndIf
        EndForLoop
        Reassign v79, v78
    EndPlainFunction
    BeginForLoopInitializer
        v99 <- LoadInteger '0'
    BeginForLoopCondition -> v100
        v101 <- LoadInteger '10'
        v102 <- Compare v100, '<', v101
    BeginForLoopAfterthought v102 -> v103
        v104 <- UnaryOperation v103, '++'
    BeginForLoopBody -> v105
        v106 <- CallFunction v84, [v105]
    EndForLoop
EndPlainFunction
Reassign v40, v76
v107 <- CallFunction v40, []
v108 <- BeginPlainFunction -> 
    v109 <- LoadInteger '42'
    v110 <- LoadInteger '43'
    BeginObjectLiteral
        ObjectLiteralAddProperty `x`, v109
        ObjectLiteralAddProperty `y`, v110
    v111 <- EndObjectLiteral
    v112 <- CreateNamedVariable 'o', 'var', v111
    v113 <- LoadString 'x'
    v114 <- CreateNamedVariable 'initial_X', 'var', v113
    v115 <- CreateNamedVariable 'X', 'var', v114
    v116 <- LoadString 'y'
    v117 <- CreateNamedVariable 'Y', 'var', v116
    v118 <- BeginPlainFunction -> v119
        BeginForLoopInitializer
            v120 <- LoadInteger '0'
        BeginForLoopCondition -> v121
            v122 <- LoadInteger '10'
            v123 <- Compare v121, '<', v122
        BeginForLoopAfterthought v123 -> v124
            v125 <- UnaryOperation v124, '++'
        BeginForLoopBody -> v126
            v127 <- GetComputedProperty v112, v115
            v128 <- CreateNamedVariable 'property', 'var', v127
            v129 <- Compare v126, '<=', v119
            BeginIf v129
                v130 <- LoadInteger '42'
            BeginElse
                v131 <- LoadInteger '43'
            EndIf
            v132 <- Compare v126, '==', v119
            BeginIf v132
                Reassign v115, v117
            EndIf
        EndForLoop
        Reassign v115, v114
    EndPlainFunction
    BeginForLoopInitializer
        v133 <- LoadInteger '0'
    BeginForLoopCondition -> v134
        v135 <- LoadInteger '10'
        v136 <- Compare v134, '<', v135
    BeginForLoopAfterthought v136 -> v137
        v138 <- UnaryOperation v137, '++'
    BeginForLoopBody -> v139
        v140 <- CallFunction v118, [v139]
    EndForLoop
EndPlainFunction
Reassign v40, v108
v141 <- CallFunction v40, []
v142 <- BeginPlainFunction -> 
    v143 <- LoadInteger '42'
    v144 <- LoadInteger '43'
    v145 <- CreateArray [v143, v144]
    v146 <- CreateNamedVariable 'o', 'var', v145
    v147 <- LoadInteger '0'
    v148 <- CreateNamedVariable 'initial_X', 'var', v147
    v149 <- CreateNamedVariable 'X', 'var', v148
    v150 <- LoadInteger '1'
    v151 <- CreateNamedVariable 'Y', 'var', v150
    v152 <- BeginPlainFunction -> v153
        BeginForLoopInitializer
            v154 <- LoadInteger '0'
        BeginForLoopCondition -> v155
            v156 <- LoadInteger '10'
            v157 <- Compare v155, '<', v156
        BeginForLoopAfterthought v157 -> v158
            v159 <- UnaryOperation v158, '++'
        BeginForLoopBody -> v160
            v161 <- GetComputedProperty v146, v149
            v162 <- CreateNamedVariable 'property', 'var', v161
            v163 <- Compare v160, '<=', v153
            BeginIf v163
                v164 <- LoadInteger '42'
            BeginElse
                v165 <- LoadInteger '43'
            EndIf
            v166 <- Compare v160, '==', v153
            BeginIf v166
                Reassign v149, v151
            EndIf
        EndForLoop
        Reassign v149, v148
    EndPlainFunction
    BeginForLoopInitializer
        v167 <- LoadInteger '0'
    BeginForLoopCondition -> v168
        v169 <- LoadInteger '10'
        v170 <- Compare v168, '<', v169
    BeginForLoopAfterthought v170 -> v171
        v172 <- UnaryOperation v171, '++'
    BeginForLoopBody -> v173
        v174 <- CallFunction v152, [v173]
    EndForLoop
EndPlainFunction
Reassign v40, v142
v175 <- CallFunction v40, []
v176 <- BeginPlainFunction -> 
    v177 <- BeginPlainFunction -> 
    EndPlainFunction
    v178 <- CreateNamedVariable 'Object', 'none'
    v179 <- Construct v178, []
    v180 <- CreateNamedVariable 'o', 'var', v179
    SetProperty v180, 'f', v177
    v181 <- LoadInteger '42'
    SetProperty v180, 'x', v181
    v182 <- LoadString 'f'
    v183 <- CreateNamedVariable 'initial_F', 'var', v182
    v184 <- CreateNamedVariable 'F', 'var', v183
    v185 <- LoadString 'x'
    v186 <- CreateNamedVariable 'X', 'var', v185
    v187 <- BeginPlainFunction -> v188
        BeginForLoopInitializer
            v189 <- LoadInteger '0'
        BeginForLoopCondition -> v190
            v191 <- LoadInteger '10'
            v192 <- Compare v190, '<', v191
        BeginForLoopAfterthought v192 -> v193
            v194 <- UnaryOperation v193, '++'
        BeginForLoopBody -> v195
            v196 <- GetComputedProperty v180, v184
            v197 <- CreateNamedVariable 'property', 'var', v196
            v198 <- Compare v195, '<=', v188
            BeginIf v198
                v199 <- CallFunction v177, []
            BeginElse
                v200 <- LoadInteger '42'
            EndIf
            v201 <- Compare v195, '==', v188
            BeginIf v201
                Reassign v184, v186
            EndIf
        EndForLoop
        Reassign v184, v183
    EndPlainFunction
    BeginForLoopInitializer
        v202 <- LoadInteger '0'
    BeginForLoopCondition -> v203
        v204 <- LoadInteger '10'
        v205 <- Compare v203, '<', v204
    BeginForLoopAfterthought v205 -> v206
        v207 <- UnaryOperation v206, '++'
    BeginForLoopBody -> v208
        v209 <- CallFunction v187, [v208]
    EndForLoop
EndPlainFunction
Reassign v40, v176
v210 <- CallFunction v40, []
v211 <- BeginPlainFunction -> 
    v212 <- LoadInteger '42'
    v213 <- LoadInteger '43'
    BeginObjectLiteral
        ObjectLiteralAddProperty `x`, v212
        ObjectLiteralAddProperty `y`, v213
    v214 <- EndObjectLiteral
    v215 <- CreateNamedVariable 'o', 'var', v214
    v216 <- LoadString 'x'
    v217 <- CreateNamedVariable 'initial_X', 'var', v216
    v218 <- CreateNamedVariable 'X', 'var', v217
    v219 <- LoadString 'y'
    v220 <- CreateNamedVariable 'Y', 'var', v219
    v221 <- BeginPlainFunction -> v222
        BeginForLoopInitializer
            v223 <- LoadInteger '0'
        BeginForLoopCondition -> v224
            v225 <- LoadInteger '10'
            v226 <- Compare v224, '<', v225
        BeginForLoopAfterthought v226 -> v227
            v228 <- UnaryOperation v227, '++'
        BeginForLoopBody -> v229
            SetComputedProperty v215, v218, v218
            v230 <- GetComputedProperty v215, v218
            v231 <- CreateNamedVariable 'property', 'var', v230
            v232 <- Compare v229, '<=', v222
            BeginIf v232
                v233 <- LoadString 'x'
            BeginElse
                v234 <- LoadString 'y'
            EndIf
            v235 <- Compare v229, '==', v222
            BeginIf v235
                Reassign v218, v220
            EndIf
        EndForLoop
        Reassign v218, v217
    EndPlainFunction
    BeginForLoopInitializer
        v236 <- LoadInteger '0'
    BeginForLoopCondition -> v237
        v238 <- LoadInteger '10'
        v239 <- Compare v237, '<', v238
    BeginForLoopAfterthought v239 -> v240
        v241 <- UnaryOperation v240, '++'
    BeginForLoopBody -> v242
        v243 <- CallFunction v221, [v242]
    EndForLoop
EndPlainFunction
Reassign v40, v211
v244 <- CallFunction v40, []


function f0() {
    var initial_P = "prototype";
    var P = initial_P;
    var H = "hasOwnProperty";
    function f6() {
    }
    var f = f6;
    function prototypeTest(a9) {
        for (let i11 = 0; i11 < 10; i11++) {
            var property = f[P];
            if (i11 <= a9) {
                f.prototype;
            } else {
                f.hasOwnProperty;
            }
            if (i11 == a9) {
                P = H;
            }
        }
        P = initial_P;
    }
    for (let i24 = 0; i24 < 10; i24++) {
        prototypeTest(i24);
    }
    f.prototype = 43;
    for (let i33 = 0; i33 < 10; i33++) {
        prototypeTest(i33);
    }
}
var runTest = f0;
runTest();
function f42() {
    var initial_L = "length";
    var L = initial_L;
    var zero = "0";
    const v50 = new Array(10);
    var a = v50;
    function arrayLengthTest(a53) {
        for (let i55 = 0; i55 < 10; i55++) {
            var l = a[L];
            if (i55 <= a53) {
            } else {
            }
            if (i55 == a53) {
                L = zero;
            }
        }
        L = initial_L;
    }
    for (let i68 = 0; i68 < 10; i68++) {
        arrayLengthTest(i68);
    }
}
runTest = f42;
runTest();
function f76() {
    var initial_L = "length";
    var L = initial_L;
    var zero = "0";
    var s = "asdf";
    function stringLengthTest(a85) {
        for (let i87 = 0; i87 < 10; i87++) {
            var l = s[L];
            if (i87 <= a85) {
            } else {
            }
            if (i87 == a85) {
                L = zero;
            }
        }
        L = initial_L;
    }
    for (let i100 = 0; i100 < 10; i100++) {
        stringLengthTest(i100);
    }
}
runTest = f76;
runTest();
function f108() {
    var o = { x: 42, y: 43 };
    var initial_X = "x";
    var X = initial_X;
    var Y = "y";
    function fieldTest(a119) {
        for (let i121 = 0; i121 < 10; i121++) {
            var property = o[X];
            if (i121 <= a119) {
            } else {
            }
            if (i121 == a119) {
                X = Y;
            }
        }
        X = initial_X;
    }
    for (let i134 = 0; i134 < 10; i134++) {
        fieldTest(i134);
    }
}
runTest = f108;
runTest();
function f142() {
    var o = [42,43];
    var initial_X = 0;
    var X = initial_X;
    var Y = 1;
    function fieldTest(a153) {
        for (let i155 = 0; i155 < 10; i155++) {
            var property = o[X];
            if (i155 <= a153) {
            } else {
            }
            if (i155 == a153) {
                X = Y;
            }
        }
        X = initial_X;
    }
    for (let i168 = 0; i168 < 10; i168++) {
        fieldTest(i168);
    }
}
runTest = f142;
runTest();
function f176() {
    function fun() {
    }
    const v179 = new Object();
    var o = v179;
    o.f = fun;
    o.x = 42;
    var initial_F = "f";
    var F = initial_F;
    var X = "x";
    function constantFunctionTest(a188) {
        for (let i190 = 0; i190 < 10; i190++) {
            var property = o[F];
            if (i190 <= a188) {
                fun();
            } else {
            }
            if (i190 == a188) {
                F = X;
            }
        }
        F = initial_F;
    }
    for (let i203 = 0; i203 < 10; i203++) {
        constantFunctionTest(i203);
    }
}
runTest = f176;
runTest();
function f211() {
    var o = { x: 42, y: 43 };
    var initial_X = "x";
    var X = initial_X;
    var Y = "y";
    function fieldTest(a222) {
        for (let i224 = 0; i224 < 10; i224++) {
            o[X] = X;
            var property = o[X];
            if (i224 <= a222) {
            } else {
            }
            if (i224 == a222) {
                X = Y;
            }
        }
        X = initial_X;
    }
    for (let i237 = 0; i237 < 10; i237++) {
        fieldTest(i237);
    }
}
runTest = f211;
runTest();

FuzzIL program written to corpus/keyed-ic.fzil
