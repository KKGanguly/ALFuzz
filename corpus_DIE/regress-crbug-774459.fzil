v0 <- BeginPlainFunction -> 
    v1 <- CreateNamedVariable 'Map', 'none'
    v2 <- Construct v1, []
    v3 <- CreateNamedVariable 'm', 'const', v2
    v4 <- LoadInteger '2'
    v5 <- LoadInteger '31'
    v6 <- CreateNamedVariable 'Math', 'none'
    v7 <- CallMethod v6, 'pow', [v4, v5]
    v8 <- LoadInteger '1'
    v9 <- BinaryOperation v7, '-', v8
    v10 <- CreateNamedVariable 'k', 'const', v9
    v11 <- LoadInteger '1'
    v12 <- CallMethod v3, 'set', [v10, v11]
    v13 <- BeginPlainFunction -> v14, v15
        v16 <- LoadInteger '0'
        v17 <- BinaryOperation v15, '|', v16
        v18 <- CallMethod v14, 'get', [v17]
        Return v18
    EndPlainFunction
    v19 <- LoadInteger '1'
    v20 <- CallFunction v13, [v3, v10]
    v21 <- LoadInteger '1'
    v22 <- CallFunction v13, [v3, v10]
    v23 <- LoadInteger '1'
    v24 <- CallFunction v13, [v3, v10]
EndPlainFunction
v25 <- CallFunction v0, []


function f0() {
    const v2 = new Map();
    const m = v2;
    const k = Math.pow(2, 31) - 1;
    m.set(k, 1);
    function foo(a14, a15) {
        return a14.get(a15 | 0);
    }
    foo(m, k);
    foo(m, k);
    foo(m, k);
}
f0();

FuzzIL program written to corpus/regress-crbug-774459.fzil
