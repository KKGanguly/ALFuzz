v0 <- BeginPlainFunction -> 
    v1 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v2 <- LoadInteger '16'
    v3 <- Construct v1, [v2]
    v4 <- CreateNamedVariable 'ab', 'var', v3
    v5 <- CreateNamedVariable 'Int8Array', 'none'
    v6 <- Construct v5, [v4]
    v7 <- CreateNamedVariable 'i8a', 'var', v6
    v8 <- CreateNamedVariable 'Int16Array', 'none'
    v9 <- Construct v8, [v4]
    v10 <- CreateNamedVariable 'i16a', 'var', v9
    v11 <- CreateNamedVariable 'Int32Array', 'none'
    v12 <- Construct v11, [v4]
    v13 <- CreateNamedVariable 'i32a', 'var', v12
    v14 <- CreateNamedVariable 'Uint8Array', 'none'
    v15 <- Construct v14, [v4]
    v16 <- CreateNamedVariable 'ui8a', 'var', v15
    v17 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
    v18 <- Construct v17, [v4]
    v19 <- CreateNamedVariable 'ui8ca', 'var', v18
    v20 <- CreateNamedVariable 'Uint16Array', 'none'
    v21 <- Construct v20, [v4]
    v22 <- CreateNamedVariable 'ui16a', 'var', v21
    v23 <- CreateNamedVariable 'Uint32Array', 'none'
    v24 <- Construct v23, [v4]
    v25 <- CreateNamedVariable 'ui32a', 'var', v24
    v26 <- CreateNamedVariable 'Float32Array', 'none'
    v27 <- Construct v26, [v4]
    v28 <- CreateNamedVariable 'f32a', 'var', v27
    v29 <- CreateNamedVariable 'Float64Array', 'none'
    v30 <- Construct v29, [v4]
    v31 <- CreateNamedVariable 'f64a', 'var', v30
    v32 <- BeginPlainFunction -> v33
        v34 <- BeginPlainFunction -> 
            v35 <- LoadInteger '0'
            v36 <- LoadInteger '0'
            v37 <- CreateNamedVariable 'Atomics', 'none'
            v38 <- CallMethod v37, 'wait', [v33, v35, v36]
        EndPlainFunction
        v39 <- CallFunction v34, []
        v40 <- BeginPlainFunction -> 
            v41 <- LoadInteger '0'
            v42 <- LoadInteger '1'
            v43 <- CreateNamedVariable 'Atomics', 'none'
            v44 <- CallMethod v43, 'wake', [v33, v41, v42]
        EndPlainFunction
        v45 <- CallFunction v40, []
    EndPlainFunction
    v46 <- CreateArray [v7, v10, v13, v16, v19, v22, v25, v28, v31]
    v47 <- CallMethod v46, 'forEach', [v32]
EndPlainFunction
v48 <- CallFunction v0, []
v49 <- BeginPlainFunction -> 
    v50 <- CreateNamedVariable 'Array', 'none'
    v51 <- LoadInteger '16'
    v52 <- Construct v50, [v51]
    v53 <- CreateNamedVariable 'sab', 'var', v52
    v54 <- CreateNamedVariable 'Int8Array', 'none'
    v55 <- Construct v54, [v53]
    v56 <- CreateNamedVariable 'i8a', 'var', v55
    v57 <- CreateNamedVariable 'Int16Array', 'none'
    v58 <- Construct v57, [v53]
    v59 <- CreateNamedVariable 'i16a', 'var', v58
    v60 <- CreateNamedVariable 'Uint8Array', 'none'
    v61 <- Construct v60, [v53]
    v62 <- CreateNamedVariable 'ui8a', 'var', v61
    v63 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
    v64 <- Construct v63, [v53]
    v65 <- CreateNamedVariable 'ui8ca', 'var', v64
    v66 <- CreateNamedVariable 'Uint16Array', 'none'
    v67 <- Construct v66, [v53]
    v68 <- CreateNamedVariable 'ui16a', 'var', v67
    v69 <- CreateNamedVariable 'Uint32Array', 'none'
    v70 <- Construct v69, [v53]
    v71 <- CreateNamedVariable 'ui32a', 'var', v70
    v72 <- CreateNamedVariable 'Float32Array', 'none'
    v73 <- Construct v72, [v53]
    v74 <- CreateNamedVariable 'f32a', 'var', v73
    v75 <- CreateNamedVariable 'Float64Array', 'none'
    v76 <- Construct v75, [v53]
    v77 <- CreateNamedVariable 'f64a', 'var', v76
    v78 <- BeginPlainFunction -> v79
        v80 <- BeginPlainFunction -> 
            v81 <- LoadInteger '0'
            v82 <- LoadInteger '0'
            v83 <- CreateNamedVariable 'Atomics', 'none'
            v84 <- CallMethod v83, 'wait', [v79, v81, v82]
        EndPlainFunction
        v85 <- CallFunction v80, []
        v86 <- BeginPlainFunction -> 
            v87 <- LoadInteger '0'
            v88 <- LoadInteger '1'
            v89 <- CreateNamedVariable 'Atomics', 'none'
            v90 <- CallMethod v89, 'wake', [v79, v87, v88]
        EndPlainFunction
        v91 <- CallFunction v86, []
    EndPlainFunction
    v92 <- CreateArray [v56, v59, v62, v65, v68, v71, v74, v77]
    v93 <- CallMethod v92, 'forEach', [v78]
EndPlainFunction
v94 <- CallFunction v49, []
v95 <- BeginPlainFunction -> 
    v96 <- CreateNamedVariable 'Array', 'none'
    v97 <- LoadInteger '16'
    v98 <- Construct v96, [v97]
    v99 <- CreateNamedVariable 'sab', 'var', v98
    v100 <- CreateNamedVariable 'Int32Array', 'none'
    v101 <- Construct v100, [v99]
    v102 <- CreateNamedVariable 'i32a', 'var', v101
    v103 <- BeginPlainFunction -> v104
        v105 <- BeginPlainFunction -> 
            v106 <- LoadInteger '0'
            v107 <- CreateNamedVariable 'Atomics', 'none'
            v108 <- CallMethod v107, 'wait', [v102, v104, v106]
        EndPlainFunction
        v109 <- CallFunction v105, []
        v110 <- CreateNamedVariable 'RangeError', 'none'
        v111 <- BeginPlainFunction -> 
            v112 <- LoadInteger '0'
            v113 <- CreateNamedVariable 'Atomics', 'none'
            v114 <- CallMethod v113, 'wake', [v102, v104, v112]
        EndPlainFunction
        v115 <- CallFunction v111, []
        v116 <- LoadInteger '0'
        v117 <- CreateNamedVariable 'validIndex', 'var', v116
    EndPlainFunction
    v118 <- LoadInteger '1'
    v119 <- UnaryOperation '-', v118
    v120 <- LoadInteger '4'
    v121 <- LoadInteger '100'
    v122 <- LoadInteger '4294967295'
    v123 <- CreateArray [v119, v120, v121, v122]
    v124 <- CallMethod v123, 'forEach', [v103]
    v125 <- LoadInteger '8'
    v126 <- Construct v100, [v99, v125]
    Reassign v102, v126
    v127 <- BeginPlainFunction -> v128
        v129 <- BeginPlainFunction -> 
            v130 <- LoadInteger '0'
            v131 <- CreateNamedVariable 'Atomics', 'none'
            v132 <- CallMethod v131, 'wait', [v102, v128, v130]
        EndPlainFunction
        v133 <- CallFunction v129, []
        v134 <- CreateNamedVariable 'RangeError', 'none'
        v135 <- BeginPlainFunction -> 
            v136 <- LoadInteger '0'
            v137 <- CreateNamedVariable 'Atomics', 'none'
            v138 <- CallMethod v137, 'wake', [v102, v128, v136]
        EndPlainFunction
        v139 <- CallFunction v135, []
        v140 <- LoadInteger '0'
        v141 <- CreateNamedVariable 'validIndex', 'var', v140
    EndPlainFunction
    v142 <- LoadInteger '1'
    v143 <- UnaryOperation '-', v142
    v144 <- LoadInteger '2'
    v145 <- LoadInteger '100'
    v146 <- LoadInteger '4294967295'
    v147 <- CreateArray [v143, v144, v145, v146]
    v148 <- CallMethod v147, 'forEach', [v127]
EndPlainFunction
v149 <- CallFunction v95, []
v150 <- BeginPlainFunction -> 
    v151 <- CreateNamedVariable 'Int32Array', 'none'
    v152 <- CreateNamedVariable 'Array', 'none'
    v153 <- LoadInteger '16'
    v154 <- Construct v152, [v153]
    v155 <- Construct v151, [v154]
    v156 <- CreateNamedVariable 'i32a', 'var', v155
    v157 <- LoadInteger '100'
    v158 <- CreateNamedVariable 'waitMs', 'var', v157
    v159 <- CreateNamedVariable 'Date', 'none'
    v160 <- Construct v159, []
    v161 <- CreateNamedVariable 'startTime', 'var', v160
    v162 <- LoadString 'timed-out'
    v163 <- LoadInteger '0'
    v164 <- LoadInteger '0'
    v165 <- CreateNamedVariable 'Atomics', 'none'
    v166 <- CallMethod v165, 'wait', [v156, v163, v164, v158]
    v167 <- Construct v159, []
    v168 <- CreateNamedVariable 'endTime', 'var', v167
    v169 <- BinaryOperation v168, '-', v161
    v170 <- Compare v169, '>=', v158
EndPlainFunction
v171 <- CallFunction v150, []
v172 <- BeginPlainFunction -> 
    v173 <- CreateNamedVariable 'Array', 'none'
    v174 <- LoadInteger '16'
    v175 <- Construct v173, [v174]
    v176 <- CreateNamedVariable 'sab', 'var', v175
    v177 <- CreateNamedVariable 'Int32Array', 'none'
    v178 <- Construct v177, [v176]
    v179 <- CreateNamedVariable 'i32a', 'var', v178
    v180 <- LoadString 'not-equal'
    v181 <- LoadInteger '0'
    v182 <- LoadInteger '42'
    v183 <- CreateNamedVariable 'Atomics', 'none'
    v184 <- CallMethod v183, 'wait', [v179, v181, v182]
    v185 <- LoadInteger '8'
    v186 <- Construct v177, [v176, v185]
    Reassign v179, v186
    v187 <- LoadInteger '1'
    SetElement v179, '0', v187
    v188 <- LoadString 'not-equal'
    v189 <- LoadInteger '0'
    v190 <- LoadInteger '0'
    v191 <- CallMethod v183, 'wait', [v179, v189, v190]
EndPlainFunction
v192 <- CallFunction v172, []
v193 <- BeginPlainFunction -> 
    v194 <- CreateNamedVariable 'Int32Array', 'none'
    v195 <- CreateNamedVariable 'Array', 'none'
    v196 <- LoadInteger '16'
    v197 <- Construct v195, [v196]
    v198 <- Construct v194, [v197]
    v199 <- CreateNamedVariable 'i32a', 'var', v198
    v200 <- LoadString 'timed-out'
    v201 <- LoadInteger '0'
    v202 <- LoadInteger '0'
    v203 <- LoadInteger '1'
    v204 <- UnaryOperation '-', v203
    v205 <- CreateNamedVariable 'Atomics', 'none'
    v206 <- CallMethod v205, 'wait', [v199, v201, v202, v204]
    v207 <- LoadString 'timed-out'
    v208 <- LoadInteger '0'
    v209 <- LoadInteger '0'
    v210 <- CreateNamedVariable 'Infinity', 'none'
    v211 <- UnaryOperation '-', v210
    v212 <- CallMethod v205, 'wait', [v199, v208, v209, v211]
EndPlainFunction
v213 <- CallFunction v193, []
v214 <- BeginPlainFunction -> 
    v215 <- CreateNamedVariable 'Int32Array', 'none'
    v216 <- CreateNamedVariable 'Array', 'none'
    v217 <- LoadInteger '16'
    v218 <- Construct v216, [v217]
    v219 <- Construct v215, [v218]
    v220 <- CreateNamedVariable 'i32a', 'var', v219
    v221 <- BeginPlainFunction -> 
        v222 <- LoadInteger '0'
        v223 <- LoadInteger '0'
        v224 <- LoadInteger '1'
        v225 <- UnaryOperation '-', v224
        v226 <- CreateNamedVariable 'Atomics', 'none'
        v227 <- CallMethod v226, 'wait', [v220, v222, v223, v225]
    EndPlainFunction
    v228 <- CallFunction v221, []
EndPlainFunction
v229 <- CallFunction v214, []
v230 <- BeginPlainFunction -> 
    v231 <- CreateNamedVariable 'Int32Array', 'none'
    v232 <- CreateNamedVariable 'Array', 'none'
    v233 <- LoadInteger '16'
    v234 <- Construct v232, [v233]
    v235 <- Construct v231, [v234]
    v236 <- CreateNamedVariable 'i32a', 'var', v235
    v237 <- LoadInteger '0'
    v238 <- CreateNamedVariable 'Number', 'none'
    v239 <- GetProperty v238, 'POSITIVE_INFINITY'
    v240 <- CreateNamedVariable 'Atomics', 'none'
    v241 <- CallMethod v240, 'wake', [v236, v237, v239]
    v242 <- LoadInteger '0'
    v243 <- GetProperty v238, 'POSITIVE_INFINITY'
    v244 <- CallMethod v240, 'notify', [v236, v242, v243]
EndPlainFunction
v245 <- CallFunction v230, []
v246 <- BeginPlainFunction -> 
    v247 <- CreateNamedVariable 'Array', 'none'
    v248 <- LoadInteger '16'
    v249 <- Construct v247, [v248]
    v250 <- CreateNamedVariable 'sab', 'var', v249
    v251 <- CreateNamedVariable 'Int32Array', 'none'
    v252 <- Construct v251, [v250]
    v253 <- CreateNamedVariable 'i32a', 'var', v252
    v254 <- LoadString 'timed-out'
    v255 <- LoadInteger '0'
    v256 <- CreateNamedVariable 'Math', 'none'
    v257 <- LoadInteger '0'
    v258 <- CreateNamedVariable 'Atomics', 'none'
    v259 <- CallMethod v258, 'wait', [v253, v255, v256, v257]
EndPlainFunction
v260 <- CallFunction v246, []
v261 <- LoadThis
v262 <- GetProperty v261, 'Worker'
BeginIf v262
    v263 <- BeginPlainFunction -> v264, v265
        v266 <- CreateNamedVariable 'Array', 'none'
        v267 <- LoadInteger '16'
        v268 <- Construct v266, [v267]
        v269 <- CreateNamedVariable 'sab', 'var', v268
        v270 <- CreateNamedVariable 'Int32Array', 'none'
        v271 <- Construct v270, [v269]
        v272 <- CreateNamedVariable 'i32a', 'var', v271
        v273 <- CreateTemplateString ['onmessage = function(msg) {\n         var i32a = new Int32Array(msg.sab, msg.offset);\n         var result = Atomics.wait(i32a, 0, 0, ', ');\n         postMessage(result);\n       };'], [v265]
        v274 <- CreateNamedVariable 'workerScript', 'var', v273
        v275 <- CreateNamedVariable 'Worker', 'none'
        v276 <- LoadString 'string'
        BeginObjectLiteral
            ObjectLiteralAddProperty `type`, v276
        v277 <- EndObjectLiteral
        v278 <- Construct v275, [v274, v277]
        v279 <- CreateNamedVariable 'worker', 'var', v278
        v280 <- CreateNamedVariable 'offset', 'none'
        BeginObjectLiteral
            ObjectLiteralAddProperty `sab`, v269
            ObjectLiteralAddProperty `offset`, v280
        v281 <- EndObjectLiteral
        v282 <- CallMethod v279, 'postMessage', [v281]
        v283 <- LoadInteger '0'
        v284 <- LoadInteger '1'
        v285 <- CallFunction v264, [v272, v283, v284]
        v286 <- LoadString 'ok'
        v287 <- CallMethod v279, 'getMessage', []
        v288 <- CallMethod v279, 'terminate', []
        v289 <- LoadString 'string'
        BeginObjectLiteral
            ObjectLiteralAddProperty `type`, v289
        v290 <- EndObjectLiteral
        v291 <- Construct v275, [v274, v290]
        v292 <- CreateNamedVariable 'worker2', 'var', v291
        v293 <- LoadInteger '8'
        v294 <- CreateNamedVariable 'offset', 'var', v293
        v295 <- Construct v270, [v269, v294]
        v296 <- CreateNamedVariable 'i32a2', 'var', v295
        BeginObjectLiteral
            ObjectLiteralAddProperty `sab`, v269
            ObjectLiteralAddProperty `offset`, v294
        v297 <- EndObjectLiteral
        v298 <- CallMethod v292, 'postMessage', [v297]
        v299 <- LoadInteger '0'
        v300 <- LoadInteger '1'
        v301 <- CallFunction v264, [v296, v299, v300]
        v302 <- LoadString 'ok'
        v303 <- CallMethod v292, 'getMessage', []
        v304 <- CallMethod v292, 'terminate', []
        v305 <- LoadString 'string'
        BeginObjectLiteral
            ObjectLiteralAddProperty `type`, v305
        v306 <- EndObjectLiteral
        v307 <- Construct v275, [v274, v306]
        v308 <- CreateNamedVariable 'worker3', 'var', v307
        v309 <- LoadInteger '4'
        v310 <- Construct v270, [v269, v309]
        Reassign v296, v310
        v311 <- LoadInteger '8'
        BeginObjectLiteral
            ObjectLiteralAddProperty `sab`, v269
            ObjectLiteralAddProperty `offset`, v311
        v312 <- EndObjectLiteral
        v313 <- CallMethod v308, 'postMessage', [v312]
        v314 <- LoadInteger '1'
        v315 <- LoadInteger '1'
        v316 <- CallFunction v264, [v296, v314, v315]
        v317 <- LoadString 'ok'
        v318 <- CallMethod v308, 'getMessage', []
        v319 <- CallMethod v308, 'terminate', []
    EndPlainFunction
    v320 <- CreateNamedVariable 'TestWaitWithTimeout', 'var', v263
    v321 <- CreateNamedVariable 'Atomics', 'none'
    v322 <- GetProperty v321, 'wake'
    v323 <- LoadUndefined
    v324 <- CallFunction v320, [v322, v323]
    v325 <- GetProperty v321, 'wake'
    v326 <- CreateNamedVariable 'NaN', 'none'
    v327 <- CallFunction v320, [v325, v326]
    v328 <- GetProperty v321, 'wake'
    v329 <- CreateNamedVariable 'Infinity', 'none'
    v330 <- CallFunction v320, [v328, v329]
    v331 <- GetProperty v321, 'notify'
    v332 <- LoadUndefined
    v333 <- CallFunction v320, [v331, v332]
    v334 <- GetProperty v321, 'notify'
    v335 <- CallFunction v320, [v334, v326]
    v336 <- GetProperty v321, 'notify'
    v337 <- CallFunction v320, [v336, v329]
    v338 <- BeginPlainFunction -> v339
        v340 <- CreateNamedVariable 'Array', 'none'
        v341 <- LoadInteger '20'
        v342 <- Construct v340, [v341]
        v343 <- CreateNamedVariable 'sab', 'var', v342
        v344 <- CreateNamedVariable 'Int32Array', 'none'
        v345 <- Construct v344, [v343]
        v346 <- CreateNamedVariable 'i32a', 'var', v345
        v347 <- CreateTemplateString ['onmessage = function(msg) {\n         var id = msg.id;\n         var i32a = new Int32Array(msg.sab);\n\n         // Wait on i32a[4] (should be zero).\n         var result = Atomics.wait(i32a, 4, 0);\n         // Set i32a[id] to 1 to notify the main thread which workers were\n         // woken up.\n         Atomics.store(i32a, id, 1);\n         postMessage(result);\n       };'], []
        v348 <- CreateNamedVariable 'workerScript', 'var', v347
        v349 <- LoadUndefined
        v350 <- CreateNamedVariable 'id', 'var', v349
        v351 <- CreateArray []
        v352 <- CreateNamedVariable 'workers', 'var', v351
        BeginForLoopInitializer
            v353 <- LoadInteger '0'
            Reassign v350, v353
        BeginForLoopCondition
            v354 <- LoadInteger '4'
            v355 <- Compare v350, '<', v354
        BeginForLoopAfterthought v355
            v356 <- UnaryOperation v350, '++'
        BeginForLoopBody
            v357 <- CreateNamedVariable 'Worker', 'none'
            v358 <- LoadString 'string'
            BeginObjectLiteral
                ObjectLiteralAddProperty `type`, v358
            v359 <- EndObjectLiteral
            v360 <- Construct v357, [v348, v359]
            SetComputedProperty v352, v350, v360
            BeginObjectLiteral
                ObjectLiteralAddProperty `sab`, v343
                ObjectLiteralAddProperty `id`, v350
            v361 <- EndObjectLiteral
            v362 <- GetComputedProperty v352, v350
            v363 <- CallMethod v362, 'postMessage', [v361]
        EndForLoop
        v364 <- LoadInteger '3'
        v365 <- LoadInteger '4'
        v366 <- LoadInteger '3'
        v367 <- CallFunction v339, [v346, v365, v366]
        v368 <- LoadInteger '0'
        v369 <- CreateNamedVariable 'wokenCount', 'var', v368
        v370 <- LoadInteger '0'
        v371 <- LoadInteger '1'
        v372 <- BinaryOperation v370, '+', v371
        v373 <- LoadInteger '2'
        v374 <- BinaryOperation v372, '+', v373
        v375 <- LoadInteger '3'
        v376 <- BinaryOperation v374, '+', v375
        v377 <- CreateNamedVariable 'waitingId', 'var', v376
        BeginWhileLoopHeader
            v378 <- LoadInteger '3'
            v379 <- Compare v369, '<', v378
        BeginWhileLoopBody v379
            BeginForLoopInitializer
                v380 <- LoadInteger '0'
                Reassign v350, v380
            BeginForLoopCondition
                v381 <- LoadInteger '4'
                v382 <- Compare v350, '<', v381
            BeginForLoopAfterthought v382
                v383 <- UnaryOperation v350, '++'
            BeginForLoopBody
                v384 <- LoadInteger '1'
                v385 <- LoadInteger '2'
                v386 <- CallMethod v321, 'compareExchange', [v346, v350, v384, v385]
                v387 <- LoadInteger '1'
                v388 <- Compare v386, '==', v387
                BeginIf v388
                    v389 <- LoadString 'ok'
                    v390 <- GetComputedProperty v352, v350
                    v391 <- CallMethod v390, 'getMessage', []
                    v392 <- GetComputedProperty v352, v350
                    v393 <- CallMethod v392, 'terminate', []
                    Update v377, '-', v350
                    v394 <- UnaryOperation v369, '++'
                EndIf
            EndForLoop
        EndWhileLoop
        v395 <- LoadInteger '3'
        v396 <- LoadInteger '0'
        v397 <- CallMethod v321, 'load', [v346, v377]
        v398 <- LoadInteger '1'
        v399 <- LoadInteger '4'
        v400 <- LoadInteger '1'
        v401 <- CallFunction v339, [v346, v399, v400]
        v402 <- LoadString 'ok'
        v403 <- GetComputedProperty v352, v377
        v404 <- CallMethod v403, 'getMessage', []
        v405 <- GetComputedProperty v352, v377
        v406 <- CallMethod v405, 'terminate', []
    EndPlainFunction
    v407 <- CreateNamedVariable 'TestWakeMulti', 'var', v338
    v408 <- GetProperty v321, 'wake'
    v409 <- CallFunction v407, [v408]
EndIf


function TestFailsWithNonSharedArray() {
    const v3 = new ArrayBuffer(16);
    var ab = v3;
    const v6 = new Int8Array(ab);
    var i8a = v6;
    const v9 = new Int16Array(ab);
    var i16a = v9;
    const v12 = new Int32Array(ab);
    var i32a = v12;
    const v15 = new Uint8Array(ab);
    var ui8a = v15;
    const v18 = new Uint8ClampedArray(ab);
    var ui8ca = v18;
    const v21 = new Uint16Array(ab);
    var ui16a = v21;
    const v24 = new Uint32Array(ab);
    var ui32a = v24;
    const v27 = new Float32Array(ab);
    var f32a = v27;
    const v30 = new Float64Array(ab);
    var f64a = v30;
    function f32(a33) {
        function f34() {
            Atomics.wait(a33, 0, 0);
        }
        f34();
        function f40() {
            Atomics.wake(a33, 0, 1);
        }
        f40();
    }
    ([i8a,i16a,i32a,ui8a,ui8ca,ui16a,ui32a,f32a,f64a]).forEach(f32);
}
TestFailsWithNonSharedArray();
function TestFailsWithNonSharedInt32Array() {
    const v52 = new Array(16);
    var sab = v52;
    const v55 = new Int8Array(sab);
    var i8a = v55;
    const v58 = new Int16Array(sab);
    var i16a = v58;
    const v61 = new Uint8Array(sab);
    var ui8a = v61;
    const v64 = new Uint8ClampedArray(sab);
    var ui8ca = v64;
    const v67 = new Uint16Array(sab);
    var ui16a = v67;
    const v70 = new Uint32Array(sab);
    var ui32a = v70;
    const v73 = new Float32Array(sab);
    var f32a = v73;
    const v76 = new Float64Array(sab);
    var f64a = v76;
    function f78(a79) {
        function f80() {
            Atomics.wait(a79, 0, 0);
        }
        f80();
        function f86() {
            Atomics.wake(a79, 0, 1);
        }
        f86();
    }
    ([i8a,i16a,ui8a,ui8ca,ui16a,ui32a,f32a,f64a]).forEach(f78);
}
TestFailsWithNonSharedInt32Array();
function TestInvalidIndex() {
    const v98 = new Array(16);
    var sab = v98;
    const v101 = new Int32Array(sab);
    var i32a = v101;
    function f103(a104) {
        function f105() {
            Atomics.wait(i32a, a104, 0);
        }
        f105();
        function f111() {
            Atomics.wake(i32a, a104, 0);
        }
        f111();
        var validIndex = 0;
    }
    ([-1,4,100,4294967295]).forEach(f103);
    const v126 = new Int32Array(sab, 8);
    i32a = v126;
    function f127(a128) {
        function f129() {
            Atomics.wait(i32a, a128, 0);
        }
        f129();
        function f135() {
            Atomics.wake(i32a, a128, 0);
        }
        f135();
        var validIndex = 0;
    }
    ([-1,2,100,4294967295]).forEach(f127);
}
TestInvalidIndex();
function TestWaitTimeout() {
    const v154 = new Array(16);
    const v155 = new Int32Array(v154);
    var i32a = v155;
    var waitMs = 100;
    const v160 = new Date();
    var startTime = v160;
    Atomics.wait(i32a, 0, 0, waitMs);
    const v167 = new Date();
    var endTime = v167;
    (endTime - startTime) >= waitMs;
}
TestWaitTimeout();
function TestWaitNotEqual() {
    const v175 = new Array(16);
    var sab = v175;
    const v178 = new Int32Array(sab);
    var i32a = v178;
    Atomics.wait(i32a, 0, 42);
    const v186 = new Int32Array(sab, 8);
    i32a = v186;
    i32a[0] = 1;
    Atomics.wait(i32a, 0, 0);
}
TestWaitNotEqual();
function TestWaitNegativeTimeout() {
    const v197 = new Array(16);
    const v198 = new Int32Array(v197);
    var i32a = v198;
    Atomics.wait(i32a, 0, 0, -1);
    Atomics.wait(i32a, 0, 0, -Infinity);
}
TestWaitNegativeTimeout();
function TestWaitNotAllowed() {
    const v218 = new Array(16);
    const v219 = new Int32Array(v218);
    var i32a = v219;
    function f221() {
        Atomics.wait(i32a, 0, 0, -1);
    }
    f221();
}
TestWaitNotAllowed();
function TestWakePositiveInfinity() {
    const v234 = new Array(16);
    const v235 = new Int32Array(v234);
    var i32a = v235;
    Atomics.wake(i32a, 0, Number.POSITIVE_INFINITY);
    Atomics.notify(i32a, 0, Number.POSITIVE_INFINITY);
}
TestWakePositiveInfinity();
function TestObjectWaitValue() {
    const v249 = new Array(16);
    var sab = v249;
    const v252 = new Int32Array(sab);
    var i32a = v252;
    Atomics.wait(i32a, 0, Math, 0);
}
TestObjectWaitValue();
if (this.Worker) {
    function f263(a264, a265) {
        const v268 = new Array(16);
        var sab = v268;
        const v271 = new Int32Array(sab);
        var i32a = v271;
        var workerScript = `onmessage = function(msg) {\n         var i32a = new Int32Array(msg.sab, msg.offset);\n         var result = Atomics.wait(i32a, 0, 0, ${a265});\n         postMessage(result);\n       };`;
        const v278 = new Worker(workerScript, { type: "string" });
        var worker = v278;
        worker.postMessage({ sab: sab, offset: offset });
        a264(i32a, 0, 1);
        worker.getMessage();
        worker.terminate();
        const v291 = new Worker(workerScript, { type: "string" });
        var worker2 = v291;
        var offset = 8;
        const v295 = new Int32Array(sab, offset);
        var i32a2 = v295;
        worker2.postMessage({ sab: sab, offset: offset });
        a264(i32a2, 0, 1);
        worker2.getMessage();
        worker2.terminate();
        const v307 = new Worker(workerScript, { type: "string" });
        var worker3 = v307;
        const v310 = new Int32Array(sab, 4);
        i32a2 = v310;
        worker3.postMessage({ sab: sab, offset: 8 });
        a264(i32a2, 1, 1);
        worker3.getMessage();
        worker3.terminate();
    }
    var TestWaitWithTimeout = f263;
    TestWaitWithTimeout(Atomics.wake, undefined);
    TestWaitWithTimeout(Atomics.wake, NaN);
    TestWaitWithTimeout(Atomics.wake, Infinity);
    TestWaitWithTimeout(Atomics.notify, undefined);
    TestWaitWithTimeout(Atomics.notify, NaN);
    TestWaitWithTimeout(Atomics.notify, Infinity);
    function f338(a339) {
        const v342 = new Array(20);
        var sab = v342;
        const v345 = new Int32Array(sab);
        var i32a = v345;
        var workerScript = `onmessage = function(msg) {\n         var id = msg.id;\n         var i32a = new Int32Array(msg.sab);\n\n         // Wait on i32a[4] (should be zero).\n         var result = Atomics.wait(i32a, 4, 0);\n         // Set i32a[id] to 1 to notify the main thread which workers were\n         // woken up.\n         Atomics.store(i32a, id, 1);\n         postMessage(result);\n       };`;
        var id;
        var workers = [];
        for ((() => {
                id = 0;
            })();
            id < 4;
            id++) {
            const v360 = new Worker(workerScript, { type: "string" });
            workers[id] = v360;
            const v361 = { sab: sab, id: id };
            workers[id].postMessage(v361);
        }
        a339(i32a, 4, 3);
        var wokenCount = 0;
        var waitingId = ((0 + 1) + 2) + 3;
        while (wokenCount < 3) {
            for ((() => {
                    id = 0;
                })();
                id < 4;
                id++) {
                if (Atomics.compareExchange(i32a, id, 1, 2) == 1) {
                    workers[id].getMessage();
                    workers[id].terminate();
                    waitingId -= id;
                    wokenCount++;
                }
            }
        }
        Atomics.load(i32a, waitingId);
        a339(i32a, 4, 1);
        workers[waitingId].getMessage();
        workers[waitingId].terminate();
    }
    var TestWakeMulti = f338;
    TestWakeMulti(Atomics.wake);
}

FuzzIL program written to corpus/futex.fzil
