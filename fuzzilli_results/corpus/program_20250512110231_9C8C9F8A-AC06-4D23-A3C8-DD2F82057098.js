new BigUint64Array(188);
const v5 = new Uint32Array(257);
new Int32Array(928);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this?.propertyIsEnumerable;
    try { new v14(257); } catch (e) {}
    a11 - a11;
    a13 < a13;
    this.g = 928;
    this.h = a13;
    this.e = v5;
}
new F9(257, 188, 188);
new F9(BigUint64Array, 928, 188);
const v20 = new F9(v5, 188, 928);
v20.h = v20;
const v22 = Math.imul;
v22.name;
var imul_func = v22;
function imul_polyfill(a26, a27) {
    a27++;
    let v29 = 16;
    v29++;
    var ah = (a26 >>> v29) & 65535;
    65535 >>> 65535;
    var al = a26 & 65535;
    16 << 16;
    let v43 = (a27 >>> 16) & 65535;
    v43++;
    var bl = a27 & 65535;
    bl >> bl;
    const v49 = al * bl;
    v49 + v49;
    const v51 = ah * bl;
    v51 === v51;
    const v54 = v51 + (al * v43);
    16 >> 16;
    const v57 = v54 << 16;
    v57 >>> v57;
    0 - 0;
    let v62 = v49 + (v57 >>> 0);
    v62--;
    0 < 0;
    const v66 = v62 | 0;
    v66 === v66;
    return v66;
}
try { imul_polyfill(928, v5); } catch (e) {}
function TestMathImul(a70, a71, a72) {
    a70 + a70;
    function imul_meth_closure(a75, a76) {
        return Math.imul(a75, a76);
    }
    function imul_func_closure(a79, a80) {
        -a80;
        const v82 = imul_func(a79, a80);
        v82 != v82;
        return v82;
    }
    const v84 = imul_polyfill(a71, a72);
    v84 * v84;
    Math.imul(a71, imul_meth_closure);
    imul_func(a71, a72, Uint32Array, imul_func_closure);
    imul_meth_closure(a71, a72);
    const v89 = imul_meth_closure(a71, a72);
    v89 + v89;
    const v91 = imul_func_closure(a71, a72);
    v91 & v91;
    let v93 = imul_func_closure(a71, a72);
    v93--;
    imul_func_closure(a71, a72);
}
const v99 = TestMathImul(8, 2, 4);
v99 ?? v99;
const v102 = -8;
v102 >> v102;
const v107 = TestMathImul(v102, -(-9223372036854775807), 8);
v107 ?? v107;
2 % 2;
const v112 = -2;
v112 - v112;
const v115 = -2;
v115 >>> v115;
const v117 = TestMathImul(4, v112, v115);
v117 ?? v117;
const v120 = -5;
-5;
TestMathImul(v120, 4294967295, 5);
const v126 = -10;
4294967294 >>> 4294967294;
const v130 = TestMathImul(v126, Uint32Array, 5);
v130 ?? v130;
TestMathImul(0, 7, false);
const v140 = TestMathImul(0, false, false);
v140 ?? v140;
TestMathImul(7, true, 7);
const v149 = TestMathImul(7, 7);
v149 ?? v149;
const v154 = TestMathImul(1, true, true);
v154 ?? v154;
true && true;
TestMathImul(0, false, true);
true && true;
TestMathImul(0, true, false);
undefined ?? undefined;
7 >>> 7;
TestMathImul(0, undefined, 7);
TestMathImul(0, 7, undefined);
0 >> 0;
TestMathImul(0, undefined, undefined);
TestMathImul(0, -0, 7);
-0;
TestMathImul(0, 7, -0);
0.1 + 0.1;
const v196 = TestMathImul(0, 0.1, 7);
v196 ?? v196;
0 + 0;
TestMathImul(0, 7, 0.1);
7 - 7;
TestMathImul(0, -969.1150172313725, 7);
const v211 = TestMathImul(0, 7, 0.9);
v211 ?? v211;
7 % 7;
TestMathImul(7, 1.1, 7);
1.1 >> 1.1;
const v222 = TestMathImul(7, 7, 1.1);
v222 ?? v222;
1.9 >> 1.9;
const v228 = TestMathImul(7, 1.9, 7);
v228 ?? v228;
TestMathImul(7, 7, 1.9);
try { ("str").fontsize(0.9); } catch (e) {}
TestMathImul(0, "str", 7);
TestMathImul(0, 7, "str");
TestMathImul(0, {}, 7);
const v249 = {};
v249.h = v249;
TestMathImul(0, 7, v249);
TestMathImul(0, [], 7);
const v257 = [];
TestMathImul(0, 7, v257, v257);
var two_30 = 1 << 30;
TestMathImul(-two_30, two_30, 7);
TestMathImul(0, two_30, two_30);
TestMathImul(two_30, -two_30, 7);
const v273 = TestMathImul(two_30, 7, -two_30);
v273 ?? v273;
const v276 = -two_30;
const v277 = -two_30;
v277 != v277;
TestMathImul(0, v276, v277);
var two_31 = 2 * two_30;
TestMathImul(-two_31, two_31, 7);
const v286 = -two_31;
7 >> 7;
const v289 = TestMathImul(v286, 7, two_31);
v289 ?? v289;
TestMathImul(0, two_31, two_31);
const v293 = -two_31;
const v294 = -7;
v294 != v294;
TestMathImul(v293, v294, 7);
const v298 = -two_31;
v298 >>> v298;
const v302 = TestMathImul(v298, 7, -two_31);
v302 ?? v302;
TestMathImul(0, -two_31, -two_31);
var max_val = two_31 - 1;
two_31 - 7;
7 + 7;
const v316 = two_31 - 7;
let v317 = 7;
v317--;
const v319 = TestMathImul(v316, v317, max_val);
v319 ?? v319;
const v322 = TestMathImul(1, max_val, max_val);
v322 ?? v322;
var two_16 = 1 << 16;
const v329 = TestMathImul(0, two_16, two_16);
v329 ?? v329;
let v331 = -two_16;
v331++;
1 >>> 1;
TestMathImul(v331, two_16 - 1, two_16);
const v337 = -two_16;
let v339 = two_16 - 1;
v339++;
const v341 = TestMathImul(v337, two_16, v339);
v341 ?? v341;
let v343 = 2;
v343--;
const v348 = (-v343 * two_16) + 1;
const v350 = two_16 - 1;
v350 === v350;
TestMathImul(v348, v350, two_16 - 1);
