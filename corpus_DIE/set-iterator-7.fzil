v0 <- CreateNamedVariable 'Set', 'none'
v1 <- LoadInteger '1'
v2 <- LoadInteger '2'
v3 <- LoadInteger '3'
v4 <- CreateArray [v1, v2, v3]
v5 <- Construct v0, [v4]
v6 <- CreateNamedVariable 'set', 'var', v5
v7 <- CallMethod v6, 'entries', []
v8 <- CreateNamedVariable 'iterator', 'var', v7
v9 <- BeginArrowFunction -> 
    v10 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `done`, v10
    v11 <- EndObjectLiteral
    Return v11
EndArrowFunction
v12 <- GetProperty v8, '__proto__'
SetProperty v12, 'next', v9
v13 <- CreateArray []
v14 <- CreateArrayWithSpread [...v6]
v15 <- CreateArray []
v16 <- CallMethod v6, 'entries', []
v17 <- CreateArrayWithSpread [...v16]
v18 <- CreateArray []
v19 <- CallMethod v6, 'keys', []
v20 <- CreateArrayWithSpread [...v19]
v21 <- CreateArray []
v22 <- CallMethod v6, 'values', []
v23 <- CreateArrayWithSpread [...v22]
v24 <- CreateArray []
v25 <- CreateArrayWithSpread [...v8]


const v5 = new Set([1,2,3]);
var set = v5;
var iterator = set.entries();
const v9 = () => {
    return { done: true };
};
const t6 = iterator.__proto__;
t6.next = v9;
[];
[...set];
[];
[...set.entries()];
[];
[...set.keys()];
[];
[...set.values()];
[];
[...iterator];

FuzzIL program written to corpus/set-iterator-7.fzil
