v0 <- BeginPlainFunction -> v1, v2
    v3 <- BinaryOperation v1, '|', v2
    Return v3
EndPlainFunction
v4 <- BeginPlainFunction -> v5
    BeginIf v5
        v6 <- LoadString 'a'
        v7 <- LoadString 'b'
        v8 <- CallFunction v0, [v6, v7]
        v9 <- LoadBoolean 'true'
        v10 <- BinaryOperation v8, '&&', v9
        v11 <- CreateNamedVariable 's', 'var', v10
        Return v11
    EndIf
EndPlainFunction
v12 <- LoadInteger '1'
v13 <- LoadInteger '2'
v14 <- CallFunction v0, [v12, v13]
v15 <- LoadInteger '1'
v16 <- LoadInteger '2'
v17 <- CallFunction v0, [v15, v16]
v18 <- LoadInteger '0'
v19 <- CallFunction v4, [v18]
v20 <- LoadInteger '0'
v21 <- CallFunction v4, [v20]
v22 <- LoadInteger '1'
v23 <- CallFunction v4, [v22]


function g(a1, a2) {
    return a1 | a2;
}
function f(a5) {
    if (a5) {
        var s = g("a", "b") && true;
        return s;
    }
}
g(1, 2);
g(1, 2);
f(0);
f(0);
f(1);

FuzzIL program written to corpus/regress-638132.fzil
