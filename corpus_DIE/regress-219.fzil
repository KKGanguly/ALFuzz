v0 <- BeginPlainFunction -> v1, v2, v3, v4
    v5 <- LoadString ' flag: '
    v6 <- BinaryOperation v1, '+', v5
    v7 <- CreateNamedVariable 'name', 'var', v6
    v8 <- GetProperty v1, 'global'
    v9 <- LoadString 'g'
    v10 <- BinaryOperation v7, '+', v9
    v11 <- CreateNamedVariable 'assertTrue', 'none'
    v12 <- CreateNamedVariable 'assertFalse', 'none'
    v13 <- TernaryOperation v2, v11, v12
    v14 <- CallFunction v13, [v8, v10]
    v15 <- GetProperty v1, 'multiline'
    v16 <- LoadString 'm'
    v17 <- BinaryOperation v7, '+', v16
    v18 <- TernaryOperation v3, v11, v12
    v19 <- CallFunction v18, [v15, v17]
    v20 <- GetProperty v1, 'ignoreCase'
    v21 <- LoadString 'i'
    v22 <- BinaryOperation v7, '+', v21
    v23 <- TernaryOperation v4, v11, v12
    v24 <- CallFunction v23, [v20, v22]
EndPlainFunction
v25 <- LoadRegExp 'a' ''
v26 <- CreateNamedVariable 're', 'var', v25
v27 <- LoadBoolean 'false'
v28 <- LoadBoolean 'false'
v29 <- LoadBoolean 'false'
v30 <- LoadRegExp 'a' 'gim'
Reassign v26, v30
v31 <- LoadBoolean 'true'
v32 <- LoadBoolean 'true'
v33 <- LoadBoolean 'true'
v34 <- LoadString 'a'
v35 <- LoadString ''
v36 <- CreateNamedVariable 'RegExp', 'none'
v37 <- CallFunction v36, [v34, v35]
Reassign v26, v37
v38 <- LoadBoolean 'false'
v39 <- LoadBoolean 'false'
v40 <- LoadBoolean 'false'
v41 <- LoadString 'a'
v42 <- LoadString 'gim'
v43 <- CallFunction v36, [v41, v42]
Reassign v26, v43
v44 <- LoadBoolean 'true'
v45 <- LoadBoolean 'true'
v46 <- LoadBoolean 'true'
v47 <- LoadString '/a/ii'
v48 <- LoadString '/a/gii'
v49 <- LoadString '/a/igi'
v50 <- LoadString '/a/iig'
v51 <- LoadString '/a/gimi'
v52 <- LoadString '/a/giim'
v53 <- LoadString '/a/igim'
v54 <- BeginPlainFunction -> 
    v55 <- LoadString 'a'
    v56 <- LoadString 'ii'
    v57 <- CallFunction v36, [v55, v56]
    Return v57
EndPlainFunction
v58 <- CallFunction v54, []
v59 <- BeginPlainFunction -> 
    v60 <- LoadString 'a'
    v61 <- LoadString 'gii'
    v62 <- CallFunction v36, [v60, v61]
    Return v62
EndPlainFunction
v63 <- CallFunction v59, []
v64 <- BeginPlainFunction -> 
    v65 <- LoadString 'a'
    v66 <- LoadString 'igi'
    v67 <- CallFunction v36, [v65, v66]
    Return v67
EndPlainFunction
v68 <- CallFunction v64, []
v69 <- BeginPlainFunction -> 
    v70 <- LoadString 'a'
    v71 <- LoadString 'iig'
    v72 <- CallFunction v36, [v70, v71]
    Return v72
EndPlainFunction
v73 <- CallFunction v69, []
v74 <- BeginPlainFunction -> 
    v75 <- LoadString 'a'
    v76 <- LoadString 'gimi'
    v77 <- CallFunction v36, [v75, v76]
    Return v77
EndPlainFunction
v78 <- CallFunction v74, []
v79 <- BeginPlainFunction -> 
    v80 <- LoadString 'a'
    v81 <- LoadString 'giim'
    v82 <- CallFunction v36, [v80, v81]
    Return v82
EndPlainFunction
v83 <- CallFunction v79, []
v84 <- BeginPlainFunction -> 
    v85 <- LoadString 'a'
    v86 <- LoadString 'igim'
    v87 <- CallFunction v36, [v85, v86]
    Return v87
EndPlainFunction
v88 <- CallFunction v84, []
v89 <- LoadString '/a/iii'
v90 <- LoadString '/a/giii'
v91 <- LoadString '/a/igii'
v92 <- LoadString '/a/iigi'
v93 <- LoadString '/a/iiig'
v94 <- LoadString '/a/miiig'
v95 <- BeginPlainFunction -> 
    v96 <- LoadString 'a'
    v97 <- LoadString 'iii'
    v98 <- CallFunction v36, [v96, v97]
    Return v98
EndPlainFunction
v99 <- CallFunction v95, []
v100 <- BeginPlainFunction -> 
    v101 <- LoadString 'a'
    v102 <- LoadString 'giii'
    v103 <- CallFunction v36, [v101, v102]
    Return v103
EndPlainFunction
v104 <- CallFunction v100, []
v105 <- BeginPlainFunction -> 
    v106 <- LoadString 'a'
    v107 <- LoadString 'igii'
    v108 <- CallFunction v36, [v106, v107]
    Return v108
EndPlainFunction
v109 <- CallFunction v105, []
v110 <- BeginPlainFunction -> 
    v111 <- LoadString 'a'
    v112 <- LoadString 'iigi'
    v113 <- CallFunction v36, [v111, v112]
    Return v113
EndPlainFunction
v114 <- CallFunction v110, []
v115 <- BeginPlainFunction -> 
    v116 <- LoadString 'a'
    v117 <- LoadString 'iiig'
    v118 <- CallFunction v36, [v116, v117]
    Return v118
EndPlainFunction
v119 <- CallFunction v115, []
v120 <- BeginPlainFunction -> 
    v121 <- LoadString 'a'
    v122 <- LoadString 'miiig'
    v123 <- CallFunction v36, [v121, v122]
    Return v123
EndPlainFunction
v124 <- CallFunction v120, []
v125 <- LoadString '/a/arglebargleglopglyf'
v126 <- LoadString '/a/arglebargleglopglif'
v127 <- LoadString '/a/arglebargleglopglym'
v128 <- LoadString '/a/arglebargleglopglim'
v129 <- LoadRegExp 'a' 'gim'
v130 <- CreateNamedVariable 're', 'var', v129
v131 <- LoadBoolean 'true'
v132 <- LoadBoolean 'true'
v133 <- LoadBoolean 'true'
v134 <- LoadString '/a/Gmi'
v135 <- LoadString '/a/gMi'
v136 <- LoadString '/a/gmI'
v137 <- LoadString '/a/GMi'
v138 <- LoadString '/a/GmI'
v139 <- LoadString '/a/gMI'
v140 <- LoadString '/a/GMI'
v141 <- LoadString '/a/\u0067'
v142 <- LoadString '/a/\u0069'
v143 <- LoadString '/a/\u006d'
v144 <- LoadString '/a/\u006D'


function assertFlags(a1, a2, a3, a4) {
    var name = a1 + " flag: ";
    const v8 = a1.global;
    const v10 = name + "g";
    const t4 = a2 ? assertTrue : assertFalse;
    t4(v8, v10);
    const v15 = a1.multiline;
    const v17 = name + "m";
    const t8 = a3 ? assertTrue : assertFalse;
    t8(v15, v17);
    const v20 = a1.ignoreCase;
    const v22 = name + "i";
    const t12 = a4 ? assertTrue : assertFalse;
    t12(v20, v22);
}
var re = /a/;
re = /a/gim;
re = RegExp("a", "");
re = RegExp("a", "gim");
function f54() {
    return RegExp("a", "ii");
}
f54();
function f59() {
    return RegExp("a", "gii");
}
f59();
function f64() {
    return RegExp("a", "igi");
}
f64();
function f69() {
    return RegExp("a", "iig");
}
f69();
function f74() {
    return RegExp("a", "gimi");
}
f74();
function f79() {
    return RegExp("a", "giim");
}
f79();
function f84() {
    return RegExp("a", "igim");
}
f84();
function f95() {
    return RegExp("a", "iii");
}
f95();
function f100() {
    return RegExp("a", "giii");
}
f100();
function f105() {
    return RegExp("a", "igii");
}
f105();
function f110() {
    return RegExp("a", "iigi");
}
f110();
function f115() {
    return RegExp("a", "iiig");
}
f115();
function f120() {
    return RegExp("a", "miiig");
}
f120();
var re = /a/gim;

FuzzIL program written to corpus/regress-219.fzil
