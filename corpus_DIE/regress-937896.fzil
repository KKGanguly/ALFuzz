v0 <- BeginPlainFunction -> 
    BeginTry
        BeginForLoopInitializer
            v1 <- LoadInteger '0'
        BeginForLoopCondition -> v2
            v3 <- LoadInteger '2'
            v4 <- Compare v2, '<', v3
        BeginForLoopAfterthought v4 -> v5
            v6 <- UnaryOperation v5, '++'
        BeginForLoopBody -> v7
            Continue
            BeginTry
                Continue
                Continue
            BeginCatch -> v8
            EndTryCatch
        EndForLoop
    BeginCatch -> v9
    EndTryCatch
    v10 <- LoadInteger '42'
    Return v10
EndPlainFunction
v11 <- LoadInteger '42'
v12 <- CallFunction v0, []


function f() {
    try {
        for (let i2 = 0; i2 < 2; i2++) {
            continue;
            try {
                continue;
                continue;
            } catch(e8) {
            }
        }
    } catch(e9) {
    }
    return 42;
}
f();

FuzzIL program written to corpus/regress-937896.fzil
