v0 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v1 <- LoadInteger '0'
    BeginForLoopCondition -> v2
        v3 <- LoadInteger '10000'
        v4 <- Compare v2, '<', v3
    BeginForLoopAfterthought v4 -> v5
        v6 <- UnaryOperation v5, '++'
    BeginForLoopBody -> v7
        BeginTry
            BeginForLoopInitializer
                v8 <- LoadInteger '0'
            BeginForLoopCondition -> v9
                v10 <- LoadInteger '2'
                v11 <- Compare v9, '<', v10
            BeginForLoopAfterthought v11 -> v12
                v13 <- UnaryOperation v12, '++'
            BeginForLoopBody -> v14
            EndForLoop
            v15 <- LoadInteger '1'
            ThrowException v15
        BeginCatch -> v16
            v17 <- CreateNamedVariable 'a', 'none'
            v18 <- TypeOf v17
            v19 <- LoadString 'number'
            v20 <- Compare v18, '==', v19
            BeginIf v20
                v21 <- CreateNamedVariable 'b', 'none'
                v22 <- CreateNamedVariable 'isNaN', 'none'
                v23 <- CallFunction v22, [v21]
                v24 <- BinaryOperation v17, '&&', v23
                Return v24
            EndIf
        EndTryCatch
    EndForLoop
EndPlainFunction
v25 <- CallFunction v0, []


function foo() {
    for (let i2 = 0; i2 < 10000; i2++) {
        try {
            for (let i9 = 0; i9 < 2; i9++) {
            }
            throw 1;
        } catch(e16) {
            if (typeof a == "number") {
                return a && isNaN(b);
            }
        }
    }
}
foo();

FuzzIL program written to corpus/regress-628773.fzil
