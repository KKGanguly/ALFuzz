v0 <- LoadBoolean 'false'
v1 <- CreateNamedVariable 'caught', 'var', v0
BeginTry
    BeginObjectLiteral
    v2 <- EndObjectLiteral
    v3 <- CreateNamedVariable 'Function', 'none'
    v4 <- GetProperty v3, 'prototype'
    v5 <- GetProperty v4, 'call'
    v6 <- CallMethod v5, 'call', [v2]
    v7 <- LoadBoolean 'false'
BeginCatch -> v8
    v9 <- LoadBoolean 'true'
    Reassign v1, v9
    v10 <- CreateNamedVariable 'TypeError', 'none'
    v11 <- TestInstanceOf v8, v10
EndTryCatch


var caught = false;
try {
    const v2 = {};
    Function.prototype.call.call(v2);
} catch(e8) {
    caught = true;
    e8 instanceof TypeError;
}

FuzzIL program written to corpus/call-non-function-call.fzil
