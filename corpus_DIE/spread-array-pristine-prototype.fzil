v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '1'
    v2 <- LoadInteger '2'
    v3 <- CreateArray [v1, v2]
    v4 <- CreateNamedVariable 'a', 'var', v3
    v5 <- CreateArrayWithSpread [...v4]
    v6 <- CreateNamedVariable 'b', 'var', v5
    v7 <- LoadInteger '1'
    v8 <- LoadInteger '2'
    v9 <- CreateArray [v7, v8]
    v10 <- LoadString 'a'
    v11 <- LoadString 'b'
    v12 <- LoadString 'c'
    v13 <- LoadString 'd'
    v14 <- LoadString 'e'
    v15 <- LoadString 'f'
    v16 <- CreateArray [v10, v11, v12, v13, v14, v15]
    v17 <- LoadString 'a'
    v18 <- LoadString 'bc'
    v19 <- LoadString 'd'
    v20 <- LoadString 'ef'
    v21 <- CreateArrayWithSpread [v17, ...v18, v19, ...v20]
EndPlainFunction
v22 <- CallFunction v0, []
v23 <- CreateArray []
v24 <- CreateNamedVariable 'log', 'var', v23
v25 <- BeginGeneratorFunction -> v26
    v27 <- LoadInteger '1'
    v28 <- CallMethod v24, 'push', [v26, v27]
    v29 <- LoadInteger '1'
    v30 <- Yield v29
    v31 <- LoadInteger '2'
    v32 <- CallMethod v24, 'push', [v26, v31]
    v33 <- LoadInteger '2'
    v34 <- Yield v33
    v35 <- LoadInteger '3'
    v36 <- CallMethod v24, 'push', [v26, v35]
    v37 <- LoadInteger '3'
    v38 <- Yield v37
    v39 <- LoadString 'done'
    v40 <- CallMethod v24, 'push', [v26, v39]
EndGeneratorFunction
v41 <- BeginPlainFunction -> v42
    v43 <- CallMethod v24, 'push', [v42]
    Return v42
EndPlainFunction
v44 <- BeginPlainFunction -> 
    v45 <- LoadInteger '1'
    v46 <- LoadInteger '2'
    v47 <- LoadInteger '3'
    v48 <- CreateArray [v45, v46, v47]
    v49 <- LoadString 'a'
    v50 <- CreateNamedVariable 'gen', 'none'
    v51 <- CallFunction v50, [v49]
    v52 <- CreateArrayWithSpread [...v51]
    v53 <- LoadString 'x'
    v54 <- LoadInteger '1'
    v55 <- LoadInteger '2'
    v56 <- LoadInteger '3'
    v57 <- LoadString 'y'
    v58 <- LoadInteger '1'
    v59 <- LoadInteger '2'
    v60 <- LoadInteger '3'
    v61 <- LoadString 'z'
    v62 <- CreateArray [v53, v54, v55, v56, v57, v58, v59, v60, v61]
    v63 <- LoadString 'x'
    v64 <- LoadString 'a'
    v65 <- CallFunction v50, [v64]
    v66 <- LoadString 'y'
    v67 <- LoadString 'b'
    v68 <- CallFunction v50, [v67]
    v69 <- LoadString 'z'
    v70 <- CreateArrayWithSpread [v63, ...v65, v66, ...v68, v69]
EndPlainFunction
v71 <- CallFunction v44, []
v72 <- BeginPlainFunction -> 
    v73 <- CreateArray []
    Reassign v24, v73
    v74 <- LoadString 'x'
    v75 <- LoadInteger '1'
    v76 <- LoadInteger '2'
    v77 <- LoadInteger '3'
    v78 <- LoadString 'y'
    v79 <- LoadInteger '1'
    v80 <- LoadInteger '2'
    v81 <- LoadInteger '3'
    v82 <- LoadString 'z'
    v83 <- CreateArray [v74, v75, v76, v77, v78, v79, v80, v81, v82]
    v84 <- LoadString 'x'
    v85 <- CallFunction v41, [v84]
    v86 <- LoadString 'a'
    v87 <- CreateNamedVariable 'gen', 'none'
    v88 <- CallFunction v87, [v86]
    v89 <- LoadString 'y'
    v90 <- CallFunction v41, [v89]
    v91 <- LoadString 'b'
    v92 <- CallFunction v87, [v91]
    v93 <- LoadString 'z'
    v94 <- CallFunction v41, [v93]
    v95 <- CreateArrayWithSpread [v85, ...v88, v90, ...v92, v94]
    v96 <- LoadString 'x'
    v97 <- LoadString 'a'
    v98 <- LoadInteger '1'
    v99 <- LoadString 'a'
    v100 <- LoadInteger '2'
    v101 <- LoadString 'a'
    v102 <- LoadInteger '3'
    v103 <- LoadString 'a'
    v104 <- LoadString 'done'
    v105 <- LoadString 'y'
    v106 <- LoadString 'b'
    v107 <- LoadInteger '1'
    v108 <- LoadString 'b'
    v109 <- LoadInteger '2'
    v110 <- LoadString 'b'
    v111 <- LoadInteger '3'
    v112 <- LoadString 'b'
    v113 <- LoadString 'done'
    v114 <- LoadString 'z'
    v115 <- CreateArray [v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114]
EndPlainFunction
v116 <- CallFunction v72, []
v117 <- BeginPlainFunction -> 
    v118 <- LoadUndefined
    v119 <- CreateNamedVariable 'a', 'var', v118
    v120 <- BeginPlainFunction -> 
        v121 <- LoadInteger '42'
        v122 <- CreateArrayWithSpread [...v121]
        Reassign v119, v122
    EndPlainFunction
    v123 <- CallFunction v120, []
    v124 <- CreateNamedVariable 'TypeError', 'none'
    v125 <- LoadUndefined
EndPlainFunction
v126 <- CallFunction v117, []
v127 <- BeginPlainFunction -> 
    v128 <- LoadInteger '42'
    v129 <- CreateNamedVariable 'Symbol', 'none'
    v130 <- GetProperty v129, 'iterator'
    BeginObjectLiteral
        ObjectLiteralAddComputedProperty v130, v128
    v131 <- EndObjectLiteral
    v132 <- CreateNamedVariable 'iter', 'var', v131
    v133 <- LoadUndefined
    v134 <- CreateNamedVariable 'a', 'var', v133
    v135 <- BeginPlainFunction -> 
        v136 <- CreateArrayWithSpread [...v132]
        Reassign v134, v136
    EndPlainFunction
    v137 <- CallFunction v135, []
    v138 <- CreateNamedVariable 'TypeError', 'none'
    v139 <- LoadUndefined
EndPlainFunction
v140 <- CallFunction v127, []
v141 <- BeginPlainFunction -> 
    v142 <- CreateNamedVariable 'Symbol', 'none'
    v143 <- GetProperty v142, 'iterator'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v143 -> v144
            v145 <- LoadInteger '42'
            Return v145
        EndObjectLiteralComputedMethod
    v146 <- EndObjectLiteral
    v147 <- CreateNamedVariable 'iter', 'var', v146
    v148 <- LoadUndefined
    v149 <- CreateNamedVariable 'a', 'var', v148
    v150 <- BeginPlainFunction -> 
        v151 <- CreateArrayWithSpread [...v147]
        Reassign v149, v151
    EndPlainFunction
    v152 <- CallFunction v150, []
    v153 <- CreateNamedVariable 'TypeError', 'none'
    v154 <- LoadUndefined
EndPlainFunction
v155 <- CallFunction v141, []
v156 <- BeginPlainFunction -> 
    v157 <- CreateNamedVariable 'Symbol', 'none'
    v158 <- GetProperty v157, 'iterator'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v158 -> v159
            BeginObjectLiteral
            v160 <- EndObjectLiteral
            Return v160
        EndObjectLiteralComputedMethod
    v161 <- EndObjectLiteral
    v162 <- CreateNamedVariable 'iter', 'var', v161
    v163 <- LoadUndefined
    v164 <- CreateNamedVariable 'a', 'var', v163
    v165 <- BeginPlainFunction -> 
        v166 <- CreateArrayWithSpread [...v162]
        Reassign v164, v166
    EndPlainFunction
    v167 <- CallFunction v165, []
    v168 <- CreateNamedVariable 'TypeError', 'none'
    v169 <- LoadUndefined
EndPlainFunction
v170 <- CallFunction v156, []
v171 <- BeginPlainFunction -> 
    v172 <- BeginPlainFunction -> 
    EndPlainFunction
    v173 <- CreateNamedVariable 'Symbol', 'none'
    v174 <- GetProperty v173, 'iterator'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v174 -> v175
            BeginObjectLiteral
                BeginObjectLiteralMethod `next` -> v176
                    BeginObjectLiteral
                        BeginObjectLiteralGetter `done` -> v177
                            v178 <- Construct v172, []
                            ThrowException v178
                        EndObjectLiteralGetter
                    v179 <- EndObjectLiteral
                    Return v179
                EndObjectLiteralMethod
            v180 <- EndObjectLiteral
            Return v180
        EndObjectLiteralComputedMethod
    v181 <- EndObjectLiteral
    v182 <- CreateNamedVariable 'iter', 'var', v181
    v183 <- LoadUndefined
    v184 <- CreateNamedVariable 'a', 'var', v183
    v185 <- BeginPlainFunction -> 
        v186 <- CreateArrayWithSpread [...v182]
        Reassign v184, v186
    EndPlainFunction
    v187 <- CallFunction v185, []
    v188 <- CallFunction v172, []
    v189 <- LoadUndefined
EndPlainFunction
v190 <- CallFunction v171, []
v191 <- BeginPlainFunction -> 
    v192 <- BeginPlainFunction -> 
    EndPlainFunction
    v193 <- CreateNamedVariable 'Symbol', 'none'
    v194 <- GetProperty v193, 'iterator'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v194 -> v195
            BeginObjectLiteral
                BeginObjectLiteralMethod `next` -> v196
                    v197 <- LoadBoolean 'false'
                    BeginObjectLiteral
                        ObjectLiteralAddProperty `done`, v197
                        BeginObjectLiteralGetter `value` -> v198
                            v199 <- Construct v192, []
                            ThrowException v199
                        EndObjectLiteralGetter
                    v200 <- EndObjectLiteral
                    Return v200
                EndObjectLiteralMethod
            v201 <- EndObjectLiteral
            Return v201
        EndObjectLiteralComputedMethod
    v202 <- EndObjectLiteral
    v203 <- CreateNamedVariable 'iter', 'var', v202
    v204 <- LoadUndefined
    v205 <- CreateNamedVariable 'a', 'var', v204
    v206 <- BeginPlainFunction -> 
        v207 <- CreateArrayWithSpread [...v203]
        Reassign v205, v207
    EndPlainFunction
    v208 <- CallFunction v206, []
    v209 <- CallFunction v192, []
    v210 <- LoadUndefined
EndPlainFunction
v211 <- CallFunction v191, []
v212 <- BeginPlainFunction -> 
    v213 <- BeginPlainFunction -> 
        v214 <- LoadString 'abc'
        v215 <- CreateArrayWithSpread [...v214]
        Return v215
    EndPlainFunction
    v216 <- LoadString 'a'
    v217 <- LoadString 'b'
    v218 <- LoadString 'c'
    v219 <- CreateArray [v216, v217, v218]
    v220 <- CallFunction v213, []
    v221 <- LoadString 'a'
    v222 <- LoadString 'b'
    v223 <- LoadString 'c'
    v224 <- CreateArray [v221, v222, v223]
    v225 <- CallFunction v213, []
EndPlainFunction
v226 <- CallFunction v212, []
v227 <- BeginPlainFunction -> 
    v228 <- CreateNamedVariable 'Symbol', 'none'
    v229 <- GetProperty v228, 'iterator'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v229 -> v230
            v231 <- LoadInteger '0'
            v232 <- CreateNamedVariable 'i', 'var', v231
            BeginObjectLiteral
                BeginObjectLiteralMethod `next` -> v233
                    v234 <- UnaryOperation '++', v232
                    v235 <- LoadInteger '3'
                    v236 <- Compare v232, '===', v235
                    BeginObjectLiteral
                        ObjectLiteralAddProperty `value`, v234
                        ObjectLiteralAddProperty `done`, v236
                    v237 <- EndObjectLiteral
                    Return v237
                EndObjectLiteralMethod
            v238 <- EndObjectLiteral
            Return v238
        EndObjectLiteralComputedMethod
    v239 <- EndObjectLiteral
    v240 <- CreateNamedVariable 'iter', 'var', v239
    v241 <- BeginPlainFunction -> 
        v242 <- LoadInteger '0'
        v243 <- CreateArrayWithSpread [v242, ...v240]
        Return v243
    EndPlainFunction
    v244 <- LoadInteger '0'
    v245 <- LoadInteger '1'
    v246 <- LoadInteger '2'
    v247 <- CreateArray [v244, v245, v246]
    v248 <- CallFunction v241, []
EndPlainFunction
v249 <- CallFunction v227, []


function TestBasics() {
    var a = [1,2];
    var b = [...a];
    [1,2];
    ["a","b","c","d","e","f"];
    ["a",..."bc","d",..."ef"];
}
TestBasics();
var log = [];
function* gen1(a26) {
    log.push(a26, 1);
    yield 1;
    log.push(a26, 2);
    yield 2;
    log.push(a26, 3);
    yield 3;
    log.push(a26, "done");
}
function id(a42) {
    log.push(a42);
    return a42;
}
function TestGenerator() {
    [1,2,3];
    [...gen("a")];
    ["x",1,2,3,"y",1,2,3,"z"];
    ["x",...gen("a"),"y",...gen("b"),"z"];
}
TestGenerator();
function TestOrderOfExecution() {
    log = [];
    ["x",1,2,3,"y",1,2,3,"z"];
    [id("x"),...gen("a"),id("y"),...gen("b"),id("z")];
    ["x","a",1,"a",2,"a",3,"a","done","y","b",1,"b",2,"b",3,"b","done","z"];
}
TestOrderOfExecution();
function TestNotIterable() {
    var a;
    function f120() {
        a = [...42];
    }
    f120();
}
TestNotIterable();
function TestInvalidIterator() {
    const v130 = Symbol.iterator;
    var iter = { [v130]: 42 };
    var a;
    function f135() {
        a = [...iter];
    }
    f135();
}
TestInvalidIterator();
function TestIteratorNotAnObject() {
    const v143 = Symbol.iterator;
    const v146 = {
        [v143]() {
            return 42;
        },
    };
    var iter = v146;
    var a;
    function f150() {
        a = [...iter];
    }
    f150();
}
TestIteratorNotAnObject();
function TestIteratorNoNext() {
    const v158 = Symbol.iterator;
    const v161 = {
        [v158]() {
            return {};
        },
    };
    var iter = v161;
    var a;
    function f165() {
        a = [...iter];
    }
    f165();
}
TestIteratorNoNext();
function TestIteratorResultDoneThrows() {
    function MyError() {
    }
    const v174 = Symbol.iterator;
    const v181 = {
        [v174]() {
            const v180 = {
                next() {
                    const v179 = {
                        get done() {
                            const v178 = new MyError();
                            throw v178;
                        },
                    };
                    return v179;
                },
            };
            return v180;
        },
    };
    var iter = v181;
    var a;
    function f185() {
        a = [...iter];
    }
    f185();
    MyError();
}
TestIteratorResultDoneThrows();
function TestIteratorResultValueThrows() {
    function MyError() {
    }
    const v194 = Symbol.iterator;
    const v202 = {
        [v194]() {
            const v201 = {
                next() {
                    const v200 = {
                        done: false,
                        get value() {
                            const v199 = new MyError();
                            throw v199;
                        },
                    };
                    return v200;
                },
            };
            return v201;
        },
    };
    var iter = v202;
    var a;
    function f206() {
        a = [...iter];
    }
    f206();
    MyError();
}
TestIteratorResultValueThrows();
function TestOptimize() {
    function f() {
        return [..."abc"];
    }
    ["a","b","c"];
    f();
    ["a","b","c"];
    f();
}
TestOptimize();
function TestDeoptimize() {
    const v229 = Symbol.iterator;
    const v239 = {
        [v229]() {
            var i = 0;
            const v238 = {
                next() {
                    const v234 = ++i;
                    const v236 = i === 3;
                    return { value: v234, done: v236 };
                },
            };
            return v238;
        },
    };
    var iter = v239;
    function f() {
        return [0,...iter];
    }
    [0,1,2];
    f();
}
TestDeoptimize();

FuzzIL program written to corpus/spread-array-pristine-prototype.fzil
