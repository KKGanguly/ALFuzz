v0 <- LoadInteger '0'
v1 <- CreateNamedVariable 'result', 'var', v0
BeginObjectLiteral
v2 <- EndObjectLiteral
v3 <- CreateNamedVariable 'o1', 'var', v2
v4 <- LoadFloat '1.5'
BeginObjectLiteral
    ObjectLiteralAddProperty `y`, v4
v5 <- EndObjectLiteral
v6 <- CreateNamedVariable 'o2', 'none'
Reassign v6, v5
v7 <- LoadInteger '0'
v8 <- CreateNamedVariable 'o2', 'none'
SetProperty v8, 'y', v7
v9 <- GetProperty v8, 'y'
v10 <- CreateNamedVariable 'o3', 'none'
Reassign v10, v9
v11 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v12 <- LoadInteger '0'
    BeginForLoopCondition -> v13
        v14 <- LoadInteger '10'
        v15 <- Compare v13, '<', v14
    BeginForLoopAfterthought v15 -> v16
        v17 <- UnaryOperation v16, '++'
    BeginForLoopBody -> v18
        v19 <- GetProperty v3, 'x'
        v20 <- CreateNamedVariable 'o3', 'none'
        v21 <- GetProperty v20, 'foo'
        v22 <- BinaryOperation v19, '+', v21
        Update v1, '+', v22
    EndForLoop
EndPlainFunction
v23 <- CallFunction v11, []
v24 <- CallFunction v11, []


var result = 0;
var o1 = {};
o2 = { y: 1.5 };
o2.y = 0;
o3 = o2.y;
function crash() {
    for (let i13 = 0; i13 < 10; i13++) {
        result += o1.x + o3.foo;
    }
}
crash();
crash();

FuzzIL program written to corpus/regress-crbug-351320.fzil
