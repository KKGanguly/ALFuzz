v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '42'
    ThrowException v1
EndPlainFunction
v2 <- BeginPlainFunction -> 
    v3 <- LoadInteger '1'
    v4 <- CreateNamedVariable 'a', 'var', v3
    BeginTry
        v5 <- CallFunction v0, []
    BeginCatch -> v6
        v7 <- BinaryOperation v6, '+', v4
        Return v7
    EndTryCatch
EndPlainFunction
v8 <- CallFunction v2, []
v9 <- LoadInteger '43'
v10 <- CallFunction v2, []
v11 <- LoadInteger '43'
v12 <- CallFunction v2, []
v13 <- LoadInteger '43'


function g() {
    throw 42;
}
function f() {
    var a = 1;
    try {
        g();
    } catch(e6) {
        return e6 + a;
    }
}
f();
f();
f();

FuzzIL program written to corpus/deopt-simple-try-catch.fzil
