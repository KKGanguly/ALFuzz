v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '1'
    v2 <- LoadInteger '2'
    v3 <- LoadInteger '3'
    v4 <- LoadInteger '4'
    v5 <- LoadInteger '5'
    v6 <- LoadInteger '6'
    v7 <- LoadInteger '7'
    v8 <- LoadInteger '8'
    v9 <- LoadInteger '9'
    v10 <- LoadInteger '10'
    v11 <- LoadInteger '11'
    v12 <- LoadInteger '12'
    v13 <- LoadInteger '13'
    v14 <- LoadInteger '14'
    v15 <- LoadInteger '15'
    v16 <- LoadInteger '16'
    v17 <- LoadInteger '17'
    v18 <- LoadInteger '18'
    v19 <- LoadInteger '19'
    v20 <- LoadInteger '20'
    v21 <- LoadInteger '21'
    v22 <- LoadInteger '22'
    v23 <- LoadInteger '23'
    v24 <- LoadInteger '24'
    v25 <- LoadInteger '25'
    v26 <- CreateArray [v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25]
    v27 <- CreateNamedVariable 'a', 'var', v26
    v28 <- LoadInteger '0'
    v29 <- CreateNamedVariable 'result', 'var', v28
    v30 <- BeginPlainFunction -> v31
        v32 <- BeginPlainFunction -> v33, v34, v35
            v36 <- LoadInteger '13'
            v37 <- Compare v34, '==', v36
            v38 <- BinaryOperation v37, '&&', v31
            BeginIf v38
                v39 <- LoadInteger '25'
                SetProperty v27, 'abc', v39
            EndIf
            v40 <- LoadInteger '0'
            v41 <- Compare v34, '===', v40
            BeginIf v41
                v42 <- LoadBoolean 'false'
                Return v42
            EndIf
            Update v29, '+', v33
            v43 <- LoadBoolean 'true'
            Return v43
        EndPlainFunction
        v44 <- CreateNamedVariable 'callback', 'var', v32
        v45 <- CallMethod v27, 'filter', [v44]
        Return v45
    EndPlainFunction
    v46 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v30
    v47 <- CallFunction v46, []
    v48 <- CallFunction v46, []
    v49 <- CallFunction v46, []
    v50 <- LoadBoolean 'true'
    v51 <- CallFunction v46, [v50]
    v52 <- CreateNamedVariable 'deopt_result', 'var', v51
    v53 <- LoadInteger '1'
    v54 <- CallMethod v27, 'slice', [v53]
    v55 <- CallFunction v46, []
    v56 <- LoadInteger '1620'
EndPlainFunction
v57 <- CallFunction v0, []
v58 <- BeginPlainFunction -> 
    v59 <- BeginPlainFunction -> v60
        v61 <- LoadInteger '1'
        v62 <- LoadInteger '2'
        v63 <- LoadInteger '3'
        v64 <- LoadInteger '4'
        v65 <- LoadInteger '5'
        v66 <- LoadInteger '6'
        v67 <- LoadInteger '7'
        v68 <- LoadInteger '8'
        v69 <- LoadInteger '9'
        v70 <- LoadInteger '10'
        v71 <- CreateArray [v61, v62, v63, v64, v65, v66, v67, v68, v69, v70]
        v72 <- CreateNamedVariable 'a', 'var', v71
        v73 <- BeginPlainFunction -> v74, v75, v76
            v77 <- LoadInteger '5'
            v78 <- Compare v75, '==', v77
            v79 <- BinaryOperation v78, '&&', v60
            v80 <- LoadInteger '8'
            v81 <- LoadInteger '10'
            v82 <- TernaryOperation v79, v80, v81
            SetProperty v72, 'length', v82
            v83 <- LoadInteger '0'
            v84 <- Compare v75, '==', v83
            v85 <- LoadBoolean 'false'
            v86 <- LoadBoolean 'true'
            v87 <- TernaryOperation v84, v85, v86
            Return v87
        EndPlainFunction
        v88 <- CreateNamedVariable 'callback', 'var', v73
        v89 <- CallMethod v72, 'filter', [v88]
        Return v89
    EndPlainFunction
    v90 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v59
    v91 <- LoadInteger '1'
    v92 <- LoadInteger '2'
    v93 <- LoadInteger '3'
    v94 <- LoadInteger '4'
    v95 <- LoadInteger '5'
    v96 <- LoadInteger '6'
    v97 <- LoadInteger '7'
    v98 <- LoadInteger '8'
    v99 <- LoadInteger '9'
    v100 <- LoadInteger '10'
    v101 <- CreateArray [v91, v92, v93, v94, v95, v96, v97, v98, v99, v100]
    v102 <- CreateNamedVariable 'like_a', 'var', v101
    v103 <- LoadInteger '1'
    v104 <- CallMethod v102, 'slice', [v103]
    v105 <- CallFunction v90, []
    v106 <- CallFunction v90, []
    v107 <- LoadInteger '1'
    v108 <- CallMethod v102, 'slice', [v107]
    v109 <- CallFunction v90, []
    v110 <- LoadInteger '0'
    v111 <- LoadInteger '7'
    v112 <- LoadInteger '1'
    v113 <- CallMethod v102, 'slice', [v112]
    v114 <- CallMethod v113, 'slice', [v110, v111]
    v115 <- LoadBoolean 'true'
    v116 <- CallFunction v90, [v115]
    v117 <- CallFunction v90, []
EndPlainFunction
v118 <- CallFunction v58, []
v119 <- BeginPlainFunction -> 
    v120 <- LoadInteger '1'
    v121 <- LoadInteger '2'
    v122 <- LoadInteger '3'
    v123 <- LoadInteger '4'
    v124 <- LoadInteger '5'
    v125 <- CreateArray [v120, v121, v122, v123, v124]
    v126 <- CreateNamedVariable 'a', 'var', v125
    v127 <- BeginPlainFunction -> v128
        v129 <- BeginPlainFunction -> v130, v131, v132
            v133 <- LoadInteger '2'
            v134 <- Compare v131, '===', v133
            v135 <- BinaryOperation v134, '&&', v128
            BeginIf v135
                v136 <- LoadInteger '100'
                SetElement v126, '2', v136
            EndIf
            v137 <- LoadBoolean 'true'
            Return v137
        EndPlainFunction
        v138 <- CreateNamedVariable 'callback', 'var', v129
        v139 <- CallMethod v126, 'filter', [v138]
        Return v139
    EndPlainFunction
    v140 <- CreateNamedVariable 'lazyChanger', 'var', v127
    v141 <- CallFunction v140, []
    v142 <- CallFunction v140, []
    v143 <- LoadBoolean 'true'
    v144 <- CallFunction v140, [v143]
    v145 <- CreateNamedVariable 'deopt_result', 'var', v144
    v146 <- LoadInteger '1'
    v147 <- LoadInteger '2'
    v148 <- LoadInteger '3'
    v149 <- LoadInteger '4'
    v150 <- LoadInteger '5'
    v151 <- CreateArray [v146, v147, v148, v149, v150]
    v152 <- LoadInteger '1'
    v153 <- LoadInteger '2'
    v154 <- LoadInteger '100'
    v155 <- LoadInteger '4'
    v156 <- LoadInteger '5'
    v157 <- CreateArray [v152, v153, v154, v155, v156]
    v158 <- CallFunction v140, []
EndPlainFunction
v159 <- CallFunction v119, []
v160 <- BeginPlainFunction -> 
    v161 <- LoadInteger '1'
    v162 <- LoadInteger '2'
    v163 <- LoadInteger '3'
    v164 <- LoadInteger '4'
    v165 <- LoadInteger '5'
    v166 <- CreateArray [v161, v162, v163, v164, v165]
    v167 <- CreateNamedVariable 'a', 'var', v166
    v168 <- BeginPlainFunction -> v169
        v170 <- BeginPlainFunction -> v171, v172, v173
            v174 <- LoadInteger '2'
            v175 <- Compare v172, '===', v174
            v176 <- BinaryOperation v175, '&&', v169
            BeginIf v176
                v177 <- LoadBoolean 'false'
                Return v177
            EndIf
            v178 <- LoadBoolean 'true'
            Return v178
        EndPlainFunction
        v179 <- CreateNamedVariable 'callback', 'var', v170
        v180 <- CallMethod v167, 'filter', [v179]
        Return v180
    EndPlainFunction
    v181 <- CreateNamedVariable 'lazyDeselection', 'var', v168
    v182 <- CallFunction v181, []
    v183 <- CallFunction v181, []
    v184 <- LoadBoolean 'true'
    v185 <- CallFunction v181, [v184]
    v186 <- CreateNamedVariable 'deopt_result', 'var', v185
    v187 <- LoadInteger '1'
    v188 <- LoadInteger '2'
    v189 <- LoadInteger '4'
    v190 <- LoadInteger '5'
    v191 <- CreateArray [v187, v188, v189, v190]
    v192 <- LoadInteger '1'
    v193 <- LoadInteger '2'
    v194 <- LoadInteger '3'
    v195 <- LoadInteger '4'
    v196 <- LoadInteger '5'
    v197 <- CreateArray [v192, v193, v194, v195, v196]
    v198 <- CallFunction v181, []
EndPlainFunction
v199 <- CallFunction v160, []
v200 <- BeginPlainFunction -> 
    v201 <- LoadInteger '0'
    v202 <- CreateNamedVariable 'result', 'var', v201
    v203 <- BeginPlainFunction -> v204
        v205 <- LoadInteger '0'
        v206 <- LoadInteger '1'
        v207 <- LoadInteger '2'
        v208 <- LoadInteger '3'
        v209 <- LoadInteger '4'
        v210 <- LoadInteger '5'
        v211 <- CreateArray [v205, v206, v207, v208, v209, v210]
        v212 <- CreateNamedVariable 'a_noescape', 'var', v211
        v213 <- BeginPlainFunction -> v214, v215, v216
            Update v202, '+', v214
            v217 <- LoadInteger '13'
            v218 <- Compare v215, '==', v217
            v219 <- BinaryOperation v218, '&&', v204
            BeginIf v219
                v220 <- LoadInteger '25'
                SetProperty v212, 'length', v220
            EndIf
            v221 <- LoadBoolean 'true'
            Return v221
        EndPlainFunction
        v222 <- CreateNamedVariable 'callback', 'var', v213
        v223 <- CallMethod v212, 'filter', [v222]
    EndPlainFunction
    v224 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v203
    v225 <- CallFunction v224, []
    v226 <- CallFunction v224, []
    v227 <- CallFunction v224, []
    v228 <- LoadBoolean 'true'
    v229 <- CallFunction v224, [v228]
    v230 <- CallFunction v224, []
    v231 <- LoadInteger '75'
EndPlainFunction
v232 <- CallFunction v200, []
v233 <- BeginPlainFunction -> 
    v234 <- LoadInteger '0'
    v235 <- CreateNamedVariable 'result', 'var', v234
    v236 <- BeginPlainFunction -> v237
        v238 <- LoadInteger '1'
        v239 <- LoadInteger '2'
        v240 <- LoadInteger '3'
        v241 <- CreateArray [v238, v239, v240]
        v242 <- CreateNamedVariable 'b', 'var', v241
        v243 <- BeginPlainFunction -> v244, v245, v246
            Update v235, '+', v245
            v247 <- LoadInteger '1'
            v248 <- Compare v245, '==', v247
            v249 <- BinaryOperation v248, '&&', v237
            BeginIf v249
            EndIf
            v250 <- CreateNamedVariable 'gc', 'none'
            v251 <- CallFunction v250, []
            v252 <- CallFunction v250, []
            v253 <- LoadBoolean 'true'
            Return v253
        EndPlainFunction
        v254 <- CreateNamedVariable 'callback', 'var', v243
        v255 <- CallMethod v242, 'filter', [v254]
    EndPlainFunction
    v256 <- CreateNamedVariable 'lazyDeopt', 'var', v236
    v257 <- CallFunction v256, []
    v258 <- CallFunction v256, []
    v259 <- CallFunction v256, []
    v260 <- LoadBoolean 'true'
    v261 <- CallFunction v256, [v260]
    v262 <- CallFunction v256, []
EndPlainFunction
v263 <- CallFunction v233, []
v264 <- BeginPlainFunction -> 
    v265 <- LoadInteger '1'
    v266 <- LoadInteger '2'
    v267 <- LoadInteger '3'
    v268 <- LoadInteger '4'
    v269 <- LoadInteger '5'
    v270 <- LoadInteger '6'
    v271 <- LoadInteger '7'
    v272 <- LoadInteger '8'
    v273 <- LoadInteger '9'
    v274 <- LoadInteger '10'
    v275 <- LoadInteger '11'
    v276 <- LoadInteger '12'
    v277 <- LoadInteger '13'
    v278 <- LoadInteger '14'
    v279 <- LoadInteger '15'
    v280 <- LoadInteger '16'
    v281 <- LoadInteger '17'
    v282 <- LoadInteger '18'
    v283 <- LoadInteger '19'
    v284 <- LoadInteger '20'
    v285 <- LoadInteger '21'
    v286 <- LoadInteger '22'
    v287 <- LoadInteger '23'
    v288 <- LoadInteger '24'
    v289 <- LoadInteger '25'
    v290 <- CreateArray [v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289]
    v291 <- CreateNamedVariable 'a', 'var', v290
    v292 <- LoadInteger '0'
    v293 <- CreateNamedVariable 'result', 'var', v292
    v294 <- BeginPlainFunction -> v295
        v296 <- BeginPlainFunction -> v297, v298, v299
            Update v293, '+', v298
            v300 <- LoadInteger '13'
            v301 <- Compare v298, '==', v300
            v302 <- BinaryOperation v301, '&&', v295
            BeginIf v302
            EndIf
            v303 <- LoadBoolean 'true'
            Return v303
        EndPlainFunction
        v304 <- CreateNamedVariable 'callback', 'var', v296
        v305 <- CallMethod v291, 'filter', [v304]
    EndPlainFunction
    v306 <- CreateNamedVariable 'lazyDeopt', 'var', v294
    v307 <- CallFunction v306, []
    v308 <- CallFunction v306, []
    v309 <- CallFunction v306, []
    v310 <- LoadBoolean 'true'
    v311 <- CallFunction v306, [v310]
    v312 <- CallFunction v306, []
    v313 <- LoadInteger '1500'
EndPlainFunction
v314 <- CallFunction v264, []
v315 <- BeginPlainFunction -> 
    v316 <- LoadInteger '1'
    v317 <- LoadInteger '2'
    v318 <- LoadInteger '3'
    v319 <- LoadInteger '4'
    v320 <- LoadInteger '5'
    v321 <- LoadInteger '6'
    v322 <- LoadInteger '7'
    v323 <- LoadInteger '8'
    v324 <- LoadInteger '9'
    v325 <- LoadInteger '10'
    v326 <- LoadInteger '11'
    v327 <- LoadInteger '12'
    v328 <- LoadInteger '13'
    v329 <- LoadInteger '14'
    v330 <- LoadInteger '15'
    v331 <- LoadInteger '16'
    v332 <- LoadInteger '17'
    v333 <- LoadInteger '18'
    v334 <- LoadInteger '19'
    v335 <- LoadInteger '20'
    v336 <- LoadInteger '21'
    v337 <- LoadInteger '22'
    v338 <- LoadInteger '23'
    v339 <- LoadInteger '24'
    v340 <- LoadInteger '25'
    v341 <- CreateArray [v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340]
    v342 <- CreateNamedVariable 'a', 'var', v341
    v343 <- LoadInteger '0'
    v344 <- CreateNamedVariable 'result', 'var', v343
    v345 <- BeginPlainFunction -> v346
        v347 <- BeginPlainFunction -> v348, v349, v350
            Update v344, '+', v349
            v351 <- LoadInteger '13'
            v352 <- Compare v349, '==', v351
            v353 <- BinaryOperation v352, '&&', v346
            BeginIf v353
            EndIf
            v354 <- LoadBoolean 'true'
            Return v354
        EndPlainFunction
        v355 <- CreateNamedVariable 'callback', 'var', v347
        v356 <- CallMethod v342, 'filter', [v355]
    EndPlainFunction
    v357 <- CreateNamedVariable 'lazyDeopt', 'var', v345
    v358 <- CallFunction v357, []
    v359 <- CallFunction v357, []
    v360 <- CallFunction v357, []
    v361 <- LoadBoolean 'true'
    v362 <- CallFunction v357, [v361]
    v363 <- CallFunction v357, []
    v364 <- LoadInteger '1500'
EndPlainFunction
v365 <- CallFunction v315, []
v366 <- BeginPlainFunction -> 
    v367 <- LoadInteger '1'
    v368 <- LoadInteger '2'
    v369 <- LoadInteger '3'
    v370 <- LoadInteger '4'
    v371 <- LoadInteger '5'
    v372 <- LoadInteger '6'
    v373 <- LoadInteger '7'
    v374 <- LoadInteger '8'
    v375 <- LoadInteger '9'
    v376 <- LoadInteger '10'
    v377 <- LoadInteger '11'
    v378 <- LoadInteger '12'
    v379 <- LoadInteger '13'
    v380 <- LoadInteger '14'
    v381 <- LoadInteger '15'
    v382 <- LoadInteger '16'
    v383 <- LoadInteger '17'
    v384 <- LoadInteger '18'
    v385 <- LoadInteger '19'
    v386 <- LoadInteger '20'
    v387 <- LoadInteger '21'
    v388 <- LoadInteger '22'
    v389 <- LoadInteger '23'
    v390 <- LoadInteger '24'
    v391 <- LoadInteger '25'
    v392 <- CreateArray [v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391]
    v393 <- CreateNamedVariable 'a', 'var', v392
    v394 <- LoadInteger '0'
    v395 <- CreateNamedVariable 'result', 'var', v394
    v396 <- BeginPlainFunction -> v397
        v398 <- BeginPlainFunction -> v399, v400, v401
            Update v395, '+', v400
            v402 <- LoadInteger '13'
            v403 <- Compare v400, '==', v402
            v404 <- BinaryOperation v403, '&&', v397
            BeginIf v404
                v405 <- CreateNamedVariable 'gc', 'none'
                v406 <- CallFunction v405, []
                v407 <- CallFunction v405, []
                v408 <- CallFunction v405, []
            EndIf
            v409 <- LoadBoolean 'true'
            Return v409
        EndPlainFunction
        v410 <- CreateNamedVariable 'callback', 'var', v398
        v411 <- CallMethod v393, 'filter', [v410]
    EndPlainFunction
    v412 <- CreateNamedVariable 'lazyDeopt', 'var', v396
    v413 <- CallFunction v412, []
    v414 <- CallFunction v412, []
    v415 <- CallFunction v412, []
    v416 <- LoadBoolean 'true'
    v417 <- CallFunction v412, [v416]
    v418 <- CallFunction v412, []
    v419 <- LoadInteger '1500'
EndPlainFunction
v420 <- CallFunction v366, []
v421 <- BeginPlainFunction -> 
    v422 <- LoadInteger '1'
    v423 <- LoadInteger '2'
    v424 <- LoadInteger '3'
    v425 <- LoadInteger '4'
    v426 <- LoadInteger '5'
    v427 <- LoadInteger '6'
    v428 <- LoadInteger '7'
    v429 <- LoadInteger '8'
    v430 <- LoadInteger '9'
    v431 <- LoadInteger '10'
    v432 <- LoadInteger '11'
    v433 <- LoadInteger '12'
    v434 <- LoadInteger '13'
    v435 <- LoadInteger '14'
    v436 <- LoadInteger '15'
    v437 <- LoadInteger '16'
    v438 <- LoadInteger '17'
    v439 <- LoadInteger '18'
    v440 <- LoadInteger '19'
    v441 <- LoadInteger '20'
    v442 <- LoadInteger '21'
    v443 <- LoadInteger '22'
    v444 <- LoadInteger '23'
    v445 <- LoadInteger '24'
    v446 <- LoadInteger '25'
    v447 <- CreateArray [v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446]
    v448 <- CreateNamedVariable 'a', 'var', v447
    v449 <- LoadBoolean 'false'
    v450 <- CreateNamedVariable 'caught', 'var', v449
    v451 <- LoadInteger '0'
    v452 <- CreateNamedVariable 'result', 'var', v451
    v453 <- BeginPlainFunction -> v454
        v455 <- BeginPlainFunction -> v456, v457, v458
            Update v452, '+', v457
            v459 <- LoadInteger '1'
            v460 <- Compare v457, '==', v459
            v461 <- BinaryOperation v460, '&&', v454
            BeginIf v461
                v462 <- LoadString 'a'
                ThrowException v462
            EndIf
            v463 <- LoadBoolean 'true'
            Return v463
        EndPlainFunction
        v464 <- CreateNamedVariable 'callback', 'var', v455
        BeginTry
            v465 <- CallMethod v448, 'filter', [v464]
        BeginCatch -> v466
            v467 <- LoadBoolean 'true'
            Reassign v450, v467
        EndTryCatch
    EndPlainFunction
    v468 <- CreateNamedVariable 'lazyDeopt', 'var', v453
    v469 <- CallFunction v468, []
    v470 <- CallFunction v468, []
    v471 <- CallFunction v468, []
    v472 <- BeginArrowFunction -> 
        v473 <- LoadBoolean 'true'
        v474 <- CallFunction v468, [v473]
        Return v474
    EndArrowFunction
    v475 <- CallFunction v472, []
    v476 <- CallFunction v468, []
EndPlainFunction
v477 <- CallFunction v421, []
v478 <- BeginPlainFunction -> 
    v479 <- LoadInteger '1'
    v480 <- LoadInteger '2'
    v481 <- LoadInteger '3'
    v482 <- LoadInteger '4'
    v483 <- LoadInteger '5'
    v484 <- LoadInteger '6'
    v485 <- LoadInteger '7'
    v486 <- LoadInteger '8'
    v487 <- LoadInteger '9'
    v488 <- LoadInteger '10'
    v489 <- CreateArray [v479, v480, v481, v482, v483, v484, v485, v486, v487, v488]
    v490 <- CreateNamedVariable 'a', 'var', v489
    v491 <- LoadBoolean 'false'
    v492 <- CreateNamedVariable 'caught', 'var', v491
    v493 <- LoadInteger '0'
    v494 <- CreateNamedVariable 'result', 'var', v493
    v495 <- BeginPlainFunction -> v496
        v497 <- BeginPlainFunction -> v498, v499, v500
            Update v494, '+', v499
            v501 <- LoadInteger '1'
            v502 <- Compare v499, '==', v501
            v503 <- BinaryOperation v502, '&&', v496
            BeginIf v503
                v504 <- LoadString 'a'
                ThrowException v504
            EndIf
            v505 <- LoadBoolean 'true'
            Return v505
        EndPlainFunction
        v506 <- CreateNamedVariable 'callback', 'var', v497
        BeginTry
            v507 <- CallMethod v490, 'filter', [v506]
        BeginCatch -> v508
            v509 <- LoadBoolean 'true'
            Reassign v492, v509
        EndTryCatch
    EndPlainFunction
    v510 <- CreateNamedVariable 'lazyDeopt', 'var', v495
    v511 <- CallFunction v510, []
    v512 <- CallFunction v510, []
    v513 <- CallFunction v510, []
    v514 <- BeginArrowFunction -> 
        v515 <- LoadBoolean 'true'
        v516 <- CallFunction v510, [v515]
        Return v516
    EndArrowFunction
    v517 <- CallFunction v514, []
    v518 <- CallFunction v510, []
EndPlainFunction
v519 <- CallFunction v478, []
v520 <- BeginPlainFunction -> 
    v521 <- LoadInteger '1'
    v522 <- LoadInteger '2'
    v523 <- LoadInteger '3'
    v524 <- LoadInteger '4'
    v525 <- CreateArray [v521, v522, v523, v524]
    v526 <- CreateNamedVariable 'a', 'var', v525
    v527 <- BeginPlainFunction -> v528
        v529 <- BeginPlainFunction -> v530, v531, v532
            v533 <- LoadInteger '1'
            v534 <- Compare v531, '==', v533
            v535 <- BinaryOperation v534, '&&', v528
            BeginIf v535
                v536 <- LoadString 'some exception'
                ThrowException v536
            EndIf
            v537 <- LoadBoolean 'true'
            Return v537
        EndPlainFunction
        v538 <- CreateNamedVariable 'callback', 'var', v529
        v539 <- LoadInteger '0'
        v540 <- CreateNamedVariable 'result', 'var', v539
        BeginTry
            v541 <- CallMethod v526, 'filter', [v538]
            Reassign v540, v541
        BeginCatch -> v542
            v543 <- LoadString 'some exception'
            v544 <- LoadString 'nope'
            Reassign v540, v544
        EndTryCatch
        Return v540
    EndPlainFunction
    v545 <- CreateNamedVariable 'lazyDeopt', 'var', v527
    v546 <- LoadInteger '1'
    v547 <- LoadInteger '2'
    v548 <- LoadInteger '3'
    v549 <- LoadInteger '4'
    v550 <- CreateArray [v546, v547, v548, v549]
    v551 <- LoadBoolean 'false'
    v552 <- CallFunction v545, [v551]
    v553 <- LoadInteger '1'
    v554 <- LoadInteger '2'
    v555 <- LoadInteger '3'
    v556 <- LoadInteger '4'
    v557 <- CreateArray [v553, v554, v555, v556]
    v558 <- LoadBoolean 'false'
    v559 <- CallFunction v545, [v558]
    v560 <- LoadString 'nope'
    v561 <- LoadBoolean 'true'
    v562 <- CallFunction v545, [v561]
    v563 <- LoadString 'nope'
    v564 <- LoadBoolean 'true'
    v565 <- CallFunction v545, [v564]
    v566 <- LoadInteger '1'
    v567 <- LoadInteger '2'
    v568 <- LoadInteger '3'
    v569 <- LoadInteger '4'
    v570 <- CreateArray [v566, v567, v568, v569]
    v571 <- LoadBoolean 'false'
    v572 <- CallFunction v545, [v571]
    v573 <- LoadString 'nope'
    v574 <- LoadBoolean 'true'
    v575 <- CallFunction v545, [v574]
EndPlainFunction
v576 <- CallFunction v520, []
v577 <- BeginPlainFunction -> 
    v578 <- LoadRegExp 'Array\.filter' ''
    v579 <- CreateNamedVariable 're', 'var', v578
    v580 <- BeginPlainFunction -> v581
        v582 <- LoadInteger '1'
        v583 <- LoadInteger '2'
        v584 <- LoadInteger '3'
        v585 <- CreateArray [v582, v583, v584]
        v586 <- CreateNamedVariable 'b', 'var', v585
        v587 <- LoadInteger '0'
        v588 <- CreateNamedVariable 'result', 'var', v587
        v589 <- BeginPlainFunction -> v590, v591, v592
            Update v588, '+', v590
            v593 <- LoadInteger '1'
            v594 <- Compare v591, '==', v593
            BeginIf v594
                v595 <- CreateNamedVariable 'Error', 'none'
                v596 <- Construct v595, []
                v597 <- CreateNamedVariable 'e', 'var', v596
                v598 <- GetProperty v597, 'stack'
                v599 <- CallMethod v579, 'exec', [v598]
                v600 <- LoadNull
                v601 <- Compare v599, '!==', v600
            EndIf
            v602 <- LoadBoolean 'true'
            Return v602
        EndPlainFunction
        v603 <- CreateNamedVariable 'callback', 'var', v589
        v604 <- LoadInteger '1'
        v605 <- LoadInteger '2'
        v606 <- LoadInteger '3'
        v607 <- CreateArray [v604, v605, v606]
        v608 <- CreateNamedVariable 'o', 'var', v607
        v609 <- CallMethod v586, 'filter', [v603]
    EndPlainFunction
    v610 <- CreateNamedVariable 'lazyDeopt', 'var', v580
    v611 <- CallFunction v610, []
    v612 <- CallFunction v610, []
    v613 <- CallFunction v610, []
EndPlainFunction
v614 <- CallFunction v577, []
v615 <- BeginPlainFunction -> 
    v616 <- LoadRegExp 'Array\.filter' ''
    v617 <- CreateNamedVariable 're', 'var', v616
    v618 <- BeginPlainFunction -> v619
        v620 <- LoadInteger '1'
        v621 <- LoadInteger '2'
        v622 <- LoadInteger '3'
        v623 <- CreateArray [v620, v621, v622]
        v624 <- CreateNamedVariable 'b', 'var', v623
        v625 <- LoadInteger '0'
        v626 <- CreateNamedVariable 'result', 'var', v625
        v627 <- BeginPlainFunction -> v628, v629, v630
            Update v626, '+', v628
            v631 <- LoadInteger '1'
            v632 <- Compare v629, '==', v631
            BeginIf v632
                v633 <- CreateNamedVariable 'Error', 'none'
                v634 <- Construct v633, []
                v635 <- CreateNamedVariable 'e', 'var', v634
                v636 <- GetProperty v635, 'stack'
                v637 <- CallMethod v617, 'exec', [v636]
                v638 <- LoadNull
                v639 <- Compare v637, '!==', v638
            EndIf
            v640 <- LoadBoolean 'true'
            Return v640
        EndPlainFunction
        v641 <- CreateNamedVariable 'callback', 'var', v627
        v642 <- LoadInteger '1'
        v643 <- LoadInteger '2'
        v644 <- LoadInteger '3'
        v645 <- CreateArray [v642, v643, v644]
        v646 <- CreateNamedVariable 'o', 'var', v645
        v647 <- CallMethod v624, 'filter', [v641]
    EndPlainFunction
    v648 <- CreateNamedVariable 'lazyDeopt', 'var', v618
    v649 <- CallFunction v648, []
    v650 <- CallFunction v648, []
    v651 <- CallFunction v648, []
EndPlainFunction
v652 <- CallFunction v615, []
v653 <- BeginPlainFunction -> 
    v654 <- LoadRegExp 'Array\.filter' ''
    v655 <- CreateNamedVariable 're', 'var', v654
    v656 <- BeginPlainFunction -> v657
        v658 <- LoadInteger '1'
        v659 <- LoadInteger '2'
        v660 <- LoadInteger '3'
        v661 <- CreateArray [v658, v659, v660]
        v662 <- CreateNamedVariable 'b', 'var', v661
        v663 <- LoadInteger '0'
        v664 <- CreateNamedVariable 'result', 'var', v663
        v665 <- BeginPlainFunction -> v666, v667, v668
            Update v664, '+', v666
            v669 <- LoadInteger '1'
            v670 <- Compare v667, '==', v669
            BeginIf v670
            BeginElse
                v671 <- LoadInteger '2'
                v672 <- Compare v667, '==', v671
                BeginIf v672
                    v673 <- CreateNamedVariable 'Error', 'none'
                    v674 <- Construct v673, []
                    v675 <- CreateNamedVariable 'e', 'var', v674
                    v676 <- GetProperty v675, 'stack'
                    v677 <- CallMethod v655, 'exec', [v676]
                    v678 <- LoadNull
                    v679 <- Compare v677, '!==', v678
                EndIf
            EndIf
            v680 <- LoadBoolean 'true'
            Return v680
        EndPlainFunction
        v681 <- CreateNamedVariable 'callback', 'var', v665
        v682 <- LoadInteger '1'
        v683 <- LoadInteger '2'
        v684 <- LoadInteger '3'
        v685 <- CreateArray [v682, v683, v684]
        v686 <- CreateNamedVariable 'o', 'var', v685
        v687 <- CallMethod v662, 'filter', [v681]
    EndPlainFunction
    v688 <- CreateNamedVariable 'lazyDeopt', 'var', v656
    v689 <- CallFunction v688, []
    v690 <- CallFunction v688, []
    v691 <- CallFunction v688, []
EndPlainFunction
v692 <- CallFunction v653, []
v693 <- BeginPlainFunction -> 
    v694 <- LoadRegExp 'Array\.filter' ''
    v695 <- CreateNamedVariable 're', 'var', v694
    v696 <- LoadInteger '1'
    v697 <- LoadInteger '2'
    v698 <- LoadInteger '3'
    v699 <- CreateArray [v696, v697, v698]
    v700 <- CreateNamedVariable 'a', 'var', v699
    v701 <- LoadInteger '0'
    v702 <- CreateNamedVariable 'result', 'var', v701
    v703 <- BeginPlainFunction -> 
        v704 <- BeginPlainFunction -> v705, v706, v707
            Update v702, '+', v706
            v708 <- LoadInteger '1'
            v709 <- Compare v706, '==', v708
            BeginIf v709
                v710 <- CreateNamedVariable 'Error', 'none'
                v711 <- Construct v710, []
                ThrowException v711
            EndIf
            v712 <- LoadBoolean 'true'
            Return v712
        EndPlainFunction
        v713 <- CreateNamedVariable 'callback', 'var', v704
        v714 <- CallMethod v700, 'filter', [v713]
    EndPlainFunction
    v715 <- CreateNamedVariable 'lazyDeopt', 'var', v703
    v716 <- BeginArrowFunction -> 
        v717 <- CallFunction v715, []
        Return v717
    EndArrowFunction
    v718 <- CallFunction v716, []
    v719 <- BeginArrowFunction -> 
        v720 <- CallFunction v715, []
        Return v720
    EndArrowFunction
    v721 <- CallFunction v719, []
    BeginTry
        v722 <- CallFunction v715, []
    BeginCatch -> v723
        v724 <- GetProperty v723, 'stack'
        v725 <- CallMethod v695, 'exec', [v724]
        v726 <- LoadNull
        v727 <- Compare v725, '!==', v726
    EndTryCatch
    BeginTry
        v728 <- CallFunction v715, []
    BeginCatch -> v729
        v730 <- GetProperty v729, 'stack'
        v731 <- CallMethod v695, 'exec', [v730]
        v732 <- LoadNull
        v733 <- Compare v731, '!==', v732
    EndTryCatch
EndPlainFunction
v734 <- CallFunction v693, []
v735 <- BeginArrowFunction -> 
    v736 <- LoadInteger '1'
    v737 <- LoadInteger '2'
    v738 <- LoadUndefined
    v739 <- LoadInteger '3'
    v740 <- LoadInteger '4'
    v741 <- CreateArray [v736, v737, v738, v739, v740]
    v742 <- CreateNamedVariable 'a', 'const', v741
    v743 <- CreateArray []
    v744 <- CreateNamedVariable 'callback_values', 'let', v743
    v745 <- BeginPlainFunction -> 
        v746 <- CreateArray []
        Reassign v744, v746
        v747 <- BeginArrowFunction -> v748
            v749 <- CallMethod v744, 'push', [v748]
            v750 <- LoadBoolean 'true'
            Return v750
        EndArrowFunction
        v751 <- CallMethod v742, 'filter', [v747]
        Return v751
    EndPlainFunction
    v752 <- CallFunction v745, []
    v753 <- CallFunction v745, []
    v754 <- LoadInteger '1'
    v755 <- LoadInteger '2'
    v756 <- LoadInteger '3'
    v757 <- LoadInteger '4'
    v758 <- CreateArray [v754, v755, v756, v757]
    v759 <- CallFunction v745, []
    v760 <- LoadInteger '1'
    v761 <- LoadInteger '2'
    v762 <- LoadInteger '3'
    v763 <- LoadInteger '4'
    v764 <- CreateArray [v760, v761, v762, v763]
EndArrowFunction
v765 <- CallFunction v735, []
v766 <- BeginArrowFunction -> 
    v767 <- LoadFloat '1.5'
    v768 <- LoadFloat '2.5'
    v769 <- LoadUndefined
    v770 <- LoadFloat '3.5'
    v771 <- LoadFloat '4.5'
    v772 <- CreateArray [v767, v768, v769, v770, v771]
    v773 <- CreateNamedVariable 'a', 'const', v772
    v774 <- CreateArray []
    v775 <- CreateNamedVariable 'callback_values', 'let', v774
    v776 <- BeginPlainFunction -> 
        v777 <- CreateArray []
        Reassign v775, v777
        v778 <- BeginArrowFunction -> v779
            v780 <- CallMethod v775, 'push', [v779]
            v781 <- LoadBoolean 'true'
            Return v781
        EndArrowFunction
        v782 <- CallMethod v773, 'filter', [v778]
        Return v782
    EndPlainFunction
    v783 <- CallFunction v776, []
    v784 <- CallFunction v776, []
    v785 <- LoadFloat '1.5'
    v786 <- LoadFloat '2.5'
    v787 <- LoadFloat '3.5'
    v788 <- LoadFloat '4.5'
    v789 <- CreateArray [v785, v786, v787, v788]
    v790 <- CallFunction v776, []
    v791 <- LoadFloat '1.5'
    v792 <- LoadFloat '2.5'
    v793 <- LoadFloat '3.5'
    v794 <- LoadFloat '4.5'
    v795 <- CreateArray [v791, v792, v793, v794]
EndArrowFunction
v796 <- CallFunction v766, []
v797 <- BeginArrowFunction -> 
    v798 <- BeginPlainFunction -> v799, v800
        BeginIf v800
            v801 <- LoadInteger '3'
            SetProperty v799, 'foo', v801
        EndIf
        Return v799
    EndPlainFunction
    v802 <- BeginPlainFunction -> v803, v804
        v805 <- BeginArrowFunction -> v806
            v807 <- LoadInteger '2'
            v808 <- BinaryOperation v806, '%', v807
            v809 <- LoadInteger '0'
            v810 <- Compare v808, '===', v809
            Return v810
        EndArrowFunction
        v811 <- CallFunction v798, [v803, v804]
        v812 <- CallMethod v803, 'filter', [v805, v811]
        Return v812
    EndPlainFunction
    v813 <- LoadInteger '1'
    v814 <- LoadInteger '2'
    v815 <- LoadInteger '3'
    v816 <- CreateArray [v813, v814, v815]
    v817 <- CreateNamedVariable 'a', 'let', v816
    v818 <- LoadBoolean 'false'
    v819 <- CallFunction v802, [v817, v818]
    v820 <- LoadBoolean 'false'
    v821 <- CallFunction v802, [v817, v820]
    v822 <- LoadBoolean 'false'
    v823 <- CallFunction v802, [v817, v822]
    v824 <- LoadBoolean 'true'
    v825 <- CallFunction v802, [v817, v824]
EndArrowFunction
v826 <- CallFunction v797, []
v827 <- BeginPlainFunction -> 
    v828 <- LoadInteger '0'
    v829 <- CreateNamedVariable 'result', 'var', v828
    v830 <- LoadInteger '1'
    v831 <- LoadInteger '2'
    v832 <- LoadInteger '3'
    v833 <- CreateArray [v830, v831, v832]
    v834 <- CreateNamedVariable 'a', 'var', v833
    v835 <- BeginPlainFunction -> 
        v836 <- BeginPlainFunction -> v837, v838, v839
            Update v829, '+', v837
            v840 <- LoadBoolean 'true'
            Return v840
        EndPlainFunction
        v841 <- CreateNamedVariable 'callback', 'var', v836
        v842 <- CallMethod v834, 'filter', [v841]
    EndPlainFunction
    v843 <- CreateNamedVariable 'species_breakage', 'var', v835
    v844 <- CallFunction v843, []
    v845 <- CallFunction v843, []
    v846 <- CallFunction v843, []
    BeginObjectLiteral
    v847 <- EndObjectLiteral
    SetProperty v834, 'constructor', v847
    v848 <- BeginPlainFunction -> 
    EndPlainFunction
    v849 <- GetProperty v834, 'constructor'
    v850 <- CreateNamedVariable 'Symbol', 'none'
    v851 <- GetProperty v850, 'species'
    SetComputedProperty v849, v851, v848
    v852 <- CallFunction v843, []
    v853 <- LoadInteger '24'
EndPlainFunction
v854 <- CallFunction v827, []


function f0() {
    var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    var result = 0;
    function f30(a31) {
        function f32(a33, a34, a35) {
            if ((a34 == 13) && a31) {
                a.abc = 25;
            }
            if (a34 === 0) {
                return false;
            }
            result += a33;
            return true;
        }
        var callback = f32;
        return a.filter(callback);
    }
    var eagerDeoptInCalled = f30;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    var deopt_result = eagerDeoptInCalled(true);
    a.slice(1);
    eagerDeoptInCalled();
}
f0();
function f58() {
    function f59(a60) {
        var a = [1,2,3,4,5,6,7,8,9,10];
        function f73(a74, a75, a76) {
            a.length = (a75 == 5) && a60 ? 8 : 10;
            return a75 == 0 ? false : true;
        }
        var callback = f73;
        return a.filter(callback);
    }
    var eagerDeoptInCalled = f59;
    var like_a = [1,2,3,4,5,6,7,8,9,10];
    like_a.slice(1);
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    like_a.slice(1);
    eagerDeoptInCalled();
    like_a.slice(1).slice(0, 7);
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f58();
function f119() {
    var a = [1,2,3,4,5];
    function f127(a128) {
        function f129(a130, a131, a132) {
            if ((a131 === 2) && a128) {
                a[2] = 100;
            }
            return true;
        }
        var callback = f129;
        return a.filter(callback);
    }
    var lazyChanger = f127;
    lazyChanger();
    lazyChanger();
    var deopt_result = lazyChanger(true);
    [1,2,3,4,5];
    [1,2,100,4,5];
    lazyChanger();
}
f119();
function f160() {
    var a = [1,2,3,4,5];
    function f168(a169) {
        function f170(a171, a172, a173) {
            if ((a172 === 2) && a169) {
                return false;
            }
            return true;
        }
        var callback = f170;
        return a.filter(callback);
    }
    var lazyDeselection = f168;
    lazyDeselection();
    lazyDeselection();
    var deopt_result = lazyDeselection(true);
    [1,2,4,5];
    [1,2,3,4,5];
    lazyDeselection();
}
f160();
function f200() {
    var result = 0;
    function f203(a204) {
        var a_noescape = [0,1,2,3,4,5];
        function f213(a214, a215, a216) {
            result += a214;
            if ((a215 == 13) && a204) {
                a_noescape.length = 25;
            }
            return true;
        }
        var callback = f213;
        a_noescape.filter(callback);
    }
    var eagerDeoptInCalled = f203;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f200();
function f233() {
    var result = 0;
    function f236(a237) {
        var b = [1,2,3];
        function f243(a244, a245, a246) {
            result += a245;
            if ((a245 == 1) && a237) {
            }
            gc();
            gc();
            return true;
        }
        var callback = f243;
        b.filter(callback);
    }
    var lazyDeopt = f236;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f233();
function f264() {
    var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    var result = 0;
    function f294(a295) {
        function f296(a297, a298, a299) {
            result += a298;
            if ((a298 == 13) && a295) {
            }
            return true;
        }
        var callback = f296;
        a.filter(callback);
    }
    var lazyDeopt = f294;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f264();
function f315() {
    var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    var result = 0;
    function f345(a346) {
        function f347(a348, a349, a350) {
            result += a349;
            if ((a349 == 13) && a346) {
            }
            return true;
        }
        var callback = f347;
        a.filter(callback);
    }
    var lazyDeopt = f345;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f315();
function f366() {
    var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    var result = 0;
    function f396(a397) {
        function f398(a399, a400, a401) {
            result += a400;
            if ((a400 == 13) && a397) {
                gc();
                gc();
                gc();
            }
            return true;
        }
        var callback = f398;
        a.filter(callback);
    }
    var lazyDeopt = f396;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f366();
function f421() {
    var a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    var caught = false;
    var result = 0;
    function f453(a454) {
        function f455(a456, a457, a458) {
            result += a457;
            if ((a457 == 1) && a454) {
                throw "a";
            }
            return true;
        }
        var callback = f455;
        try {
            a.filter(callback);
        } catch(e466) {
            caught = true;
        }
    }
    var lazyDeopt = f453;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v472 = () => {
        return lazyDeopt(true);
    };
    v472();
    lazyDeopt();
}
f421();
function f478() {
    var a = [1,2,3,4,5,6,7,8,9,10];
    var caught = false;
    var result = 0;
    function f495(a496) {
        function f497(a498, a499, a500) {
            result += a499;
            if ((a499 == 1) && a496) {
                throw "a";
            }
            return true;
        }
        var callback = f497;
        try {
            a.filter(callback);
        } catch(e508) {
            caught = true;
        }
    }
    var lazyDeopt = f495;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v514 = () => {
        return lazyDeopt(true);
    };
    v514();
    lazyDeopt();
}
f478();
function TestThrowIntoDeoptimizedOuter() {
    var a = [1,2,3,4];
    function f527(a528) {
        function f529(a530, a531, a532) {
            if ((a531 == 1) && a528) {
                throw "some exception";
            }
            return true;
        }
        var callback = f529;
        var result = 0;
        try {
            result = a.filter(callback);
        } catch(e542) {
            result = "nope";
        }
        return result;
    }
    var lazyDeopt = f527;
    [1,2,3,4];
    lazyDeopt(false);
    [1,2,3,4];
    lazyDeopt(false);
    lazyDeopt(true);
    lazyDeopt(true);
    [1,2,3,4];
    lazyDeopt(false);
    lazyDeopt(true);
}
TestThrowIntoDeoptimizedOuter();
function f577() {
    var re = /Array\.filter/;
    function f580(a581) {
        var b = [1,2,3];
        var result = 0;
        function f589(a590, a591, a592) {
            result += a590;
            if (a591 == 1) {
                const v596 = new Error();
                var e = v596;
                re.exec(e.stack) !== null;
            }
            return true;
        }
        var callback = f589;
        var o = [1,2,3];
        b.filter(callback);
    }
    var lazyDeopt = f580;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f577();
function f615() {
    var re = /Array\.filter/;
    function f618(a619) {
        var b = [1,2,3];
        var result = 0;
        function f627(a628, a629, a630) {
            result += a628;
            if (a629 == 1) {
                const v634 = new Error();
                var e = v634;
                re.exec(e.stack) !== null;
            }
            return true;
        }
        var callback = f627;
        var o = [1,2,3];
        b.filter(callback);
    }
    var lazyDeopt = f618;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f615();
function f653() {
    var re = /Array\.filter/;
    function f656(a657) {
        var b = [1,2,3];
        var result = 0;
        function f665(a666, a667, a668) {
            result += a666;
            if (a667 == 1) {
            } else {
                if (a667 == 2) {
                    const v674 = new Error();
                    var e = v674;
                    re.exec(e.stack) !== null;
                }
            }
            return true;
        }
        var callback = f665;
        var o = [1,2,3];
        b.filter(callback);
    }
    var lazyDeopt = f656;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f653();
function f693() {
    var re = /Array\.filter/;
    var a = [1,2,3];
    var result = 0;
    function f703() {
        function f704(a705, a706, a707) {
            result += a706;
            if (a706 == 1) {
                const v711 = new Error();
                throw v711;
            }
            return true;
        }
        var callback = f704;
        a.filter(callback);
    }
    var lazyDeopt = f703;
    const v716 = () => {
        return lazyDeopt();
    };
    v716();
    const v719 = () => {
        return lazyDeopt();
    };
    v719();
    try {
        lazyDeopt();
    } catch(e723) {
        re.exec(e723.stack) !== null;
    }
    try {
        lazyDeopt();
    } catch(e729) {
        re.exec(e729.stack) !== null;
    }
}
f693();
const v735 = () => {
    const a = [1,2,,3,4];
    let callback_values = [];
    function withHoles() {
        callback_values = [];
        const v747 = (a748) => {
            callback_values.push(a748);
            return true;
        };
        return a.filter(v747);
    }
    withHoles();
    withHoles();
    [1,2,3,4];
    withHoles();
    [1,2,3,4];
};
v735();
const v766 = () => {
    const a = [1.5,2.5,,3.5,4.5];
    let callback_values = [];
    function withHoles() {
        callback_values = [];
        const v778 = (a779) => {
            callback_values.push(a779);
            return true;
        };
        return a.filter(v778);
    }
    withHoles();
    withHoles();
    [1.5,2.5,3.5,4.5];
    withHoles();
    [1.5,2.5,3.5,4.5];
};
v766();
const v797 = () => {
    function side_effect(a799, a800) {
        if (a800) {
            a799.foo = 3;
        }
        return a799;
    }
    function unreliable(a803, a804) {
        const v805 = (a806) => {
            return (a806 % 2) === 0;
        };
        return a803.filter(v805, side_effect(a803, a804));
    }
    let a = [1,2,3];
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, true);
};
v797();
function f827() {
    var result = 0;
    var a = [1,2,3];
    function f835() {
        function f836(a837, a838, a839) {
            result += a837;
            return true;
        }
        var callback = f836;
        a.filter(callback);
    }
    var species_breakage = f835;
    species_breakage();
    species_breakage();
    species_breakage();
    a.constructor = {};
    function f848() {
    }
    const t477 = a.constructor;
    t477[Symbol.species] = f848;
    species_breakage();
}
f827();

FuzzIL program written to corpus/optimized-filter.fzil
