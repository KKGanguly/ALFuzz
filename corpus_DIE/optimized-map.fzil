v0 <- LoadInteger '0'
v1 <- LoadInteger '1'
v2 <- LoadInteger '2'
v3 <- LoadInteger '3'
v4 <- LoadInteger '4'
v5 <- LoadInteger '5'
v6 <- LoadInteger '6'
v7 <- LoadInteger '7'
v8 <- LoadInteger '8'
v9 <- LoadInteger '9'
v10 <- LoadInteger '10'
v11 <- LoadInteger '11'
v12 <- LoadInteger '12'
v13 <- LoadInteger '13'
v14 <- LoadInteger '14'
v15 <- LoadInteger '15'
v16 <- LoadInteger '16'
v17 <- LoadInteger '17'
v18 <- LoadInteger '18'
v19 <- LoadInteger '19'
v20 <- LoadInteger '20'
v21 <- LoadInteger '21'
v22 <- LoadInteger '22'
v23 <- LoadInteger '23'
v24 <- LoadInteger '24'
v25 <- LoadInteger '0'
v26 <- LoadInteger '0'
v27 <- CreateArray [v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26]
v28 <- CreateNamedVariable 'a', 'var', v27
v29 <- LoadInteger '1'
v30 <- LoadInteger '2'
v31 <- LoadInteger '3'
v32 <- LoadInteger '4'
v33 <- LoadInteger '5'
v34 <- LoadInteger '6'
v35 <- LoadInteger '7'
v36 <- LoadInteger '8'
v37 <- LoadInteger '9'
v38 <- LoadInteger '10'
v39 <- LoadInteger '11'
v40 <- LoadInteger '12'
v41 <- LoadInteger '13'
v42 <- LoadInteger '14'
v43 <- LoadInteger '15'
v44 <- LoadInteger '16'
v45 <- LoadInteger '17'
v46 <- LoadInteger '18'
v47 <- LoadInteger '19'
v48 <- LoadInteger '20'
v49 <- LoadInteger '21'
v50 <- LoadInteger '22'
v51 <- LoadInteger '23'
v52 <- LoadInteger '24'
v53 <- LoadInteger '25'
v54 <- CreateArray [v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53]
v55 <- CreateNamedVariable 'b', 'var', v54
v56 <- LoadInteger '1'
v57 <- LoadInteger '2'
v58 <- LoadInteger '3'
v59 <- LoadInteger '4'
v60 <- LoadInteger '5'
v61 <- LoadInteger '6'
v62 <- LoadInteger '7'
v63 <- LoadInteger '8'
v64 <- LoadInteger '9'
v65 <- LoadInteger '10'
v66 <- LoadInteger '11'
v67 <- LoadInteger '12'
v68 <- LoadInteger '13'
v69 <- LoadInteger '14'
v70 <- LoadInteger '15'
v71 <- LoadInteger '16'
v72 <- LoadInteger '17'
v73 <- LoadInteger '18'
v74 <- LoadInteger '19'
v75 <- LoadInteger '20'
v76 <- LoadInteger '21'
v77 <- LoadInteger '22'
v78 <- LoadInteger '23'
v79 <- LoadInteger '24'
v80 <- LoadInteger '25'
v81 <- CreateArray [v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80]
v82 <- CreateNamedVariable 'c', 'var', v81
v83 <- BeginPlainFunction -> 
    v84 <- LoadInteger '0'
    v85 <- CreateNamedVariable 'result', 'var', v84
    v86 <- BeginPlainFunction -> v87
        v88 <- BeginPlainFunction -> v89, v90, v91
            Update v85, '+', v89
            v92 <- LoadInteger '13'
            v93 <- Compare v90, '==', v92
            v94 <- BinaryOperation v93, '&&', v87
            BeginIf v94
                v95 <- LoadInteger '25'
                SetProperty v28, 'abc', v95
            EndIf
            Return v89
        EndPlainFunction
        v96 <- CreateNamedVariable 'callback', 'var', v88
        v97 <- CallMethod v28, 'map', [v96]
    EndPlainFunction
    v98 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v86
    v99 <- CallFunction v98, []
    v100 <- CallFunction v98, []
    v101 <- CallFunction v98, []
    v102 <- LoadBoolean 'true'
    v103 <- CallFunction v98, [v102]
    v104 <- CallFunction v98, []
    v105 <- LoadInteger '1500'
EndPlainFunction
v106 <- CallFunction v83, []
v107 <- BeginPlainFunction -> 
    v108 <- LoadInteger '0'
    v109 <- CreateNamedVariable 'result', 'var', v108
    v110 <- BeginPlainFunction -> v111
        v112 <- BeginPlainFunction -> v113, v114, v115
            Update v109, '+', v113
            v116 <- LoadInteger '13'
            v117 <- Compare v114, '==', v116
            v118 <- BinaryOperation v117, '&&', v111
            v119 <- LoadInteger '25'
            v120 <- LoadInteger '27'
            v121 <- TernaryOperation v118, v119, v120
            SetProperty v28, 'length', v121
            Return v113
        EndPlainFunction
        v122 <- CreateNamedVariable 'callback', 'var', v112
        v123 <- CallMethod v28, 'map', [v122]
    EndPlainFunction
    v124 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v110
    v125 <- CallFunction v124, []
    v126 <- CallFunction v124, []
    v127 <- CallFunction v124, []
    v128 <- LoadBoolean 'true'
    v129 <- CallFunction v124, [v128]
    v130 <- CallFunction v124, []
    v131 <- LoadInteger '1500'
EndPlainFunction
v132 <- CallFunction v107, []
v133 <- BeginPlainFunction -> 
    v134 <- LoadInteger '0'
    v135 <- CreateNamedVariable 'result', 'var', v134
    v136 <- BeginPlainFunction -> v137
        v138 <- LoadInteger '0'
        v139 <- LoadInteger '1'
        v140 <- LoadInteger '2'
        v141 <- LoadInteger '3'
        v142 <- LoadInteger '4'
        v143 <- LoadInteger '5'
        v144 <- CreateArray [v138, v139, v140, v141, v142, v143]
        v145 <- CreateNamedVariable 'a_noescape', 'var', v144
        v146 <- BeginPlainFunction -> v147, v148, v149
            Update v135, '+', v147
            v150 <- LoadInteger '13'
            v151 <- Compare v148, '==', v150
            v152 <- BinaryOperation v151, '&&', v137
            BeginIf v152
                v153 <- LoadInteger '25'
                SetProperty v145, 'length', v153
            EndIf
            Return v147
        EndPlainFunction
        v154 <- CreateNamedVariable 'callback', 'var', v146
        v155 <- CallMethod v145, 'map', [v154]
    EndPlainFunction
    v156 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v136
    v157 <- CallFunction v156, []
    v158 <- CallFunction v156, []
    v159 <- CallFunction v156, []
    v160 <- LoadBoolean 'true'
    v161 <- CallFunction v156, [v160]
    v162 <- CallFunction v156, []
    v163 <- LoadInteger '75'
EndPlainFunction
v164 <- CallFunction v133, []
v165 <- BeginPlainFunction -> 
    v166 <- LoadInteger '0'
    v167 <- CreateNamedVariable 'result', 'var', v166
    v168 <- BeginPlainFunction -> v169
        v170 <- LoadInteger '1'
        v171 <- LoadInteger '2'
        v172 <- LoadInteger '3'
        v173 <- CreateArray [v170, v171, v172]
        v174 <- CreateNamedVariable 'b', 'var', v173
        v175 <- BeginPlainFunction -> v176, v177, v178
            Update v167, '+', v177
            v179 <- LoadInteger '1'
            v180 <- Compare v177, '==', v179
            v181 <- BinaryOperation v180, '&&', v169
            BeginIf v181
            EndIf
            v182 <- CreateNamedVariable 'gc', 'none'
            v183 <- CallFunction v182, []
            v184 <- CallFunction v182, []
            Return v176
        EndPlainFunction
        v185 <- CreateNamedVariable 'callback', 'var', v175
        v186 <- CallMethod v174, 'map', [v185]
    EndPlainFunction
    v187 <- CreateNamedVariable 'lazyDeopt', 'var', v168
    v188 <- CallFunction v187, []
    v189 <- CallFunction v187, []
    v190 <- CallFunction v187, []
    v191 <- LoadBoolean 'true'
    v192 <- CallFunction v187, [v191]
    v193 <- CallFunction v187, []
EndPlainFunction
v194 <- CallFunction v165, []
v195 <- BeginPlainFunction -> 
    v196 <- BeginPlainFunction -> v197
        v198 <- LoadInteger '1'
        v199 <- LoadInteger '2'
        v200 <- LoadInteger '3'
        v201 <- CreateArray [v198, v199, v200]
        v202 <- CreateNamedVariable 'b', 'var', v201
        v203 <- BeginPlainFunction -> v204, v205, v206
            v207 <- LoadInteger '1'
            v208 <- Compare v205, '==', v207
            v209 <- BinaryOperation v208, '&&', v197
            BeginIf v209
            EndIf
            v210 <- LoadInteger '2'
            v211 <- BinaryOperation v210, '*', v204
            Return v211
        EndPlainFunction
        v212 <- CreateNamedVariable 'callback', 'var', v203
        v213 <- CallMethod v202, 'map', [v212]
        Return v213
    EndPlainFunction
    v214 <- CreateNamedVariable 'lazyDeopt', 'var', v196
    v215 <- LoadInteger '2'
    v216 <- LoadInteger '4'
    v217 <- LoadInteger '6'
    v218 <- CreateArray [v215, v216, v217]
    v219 <- CallFunction v214, []
    v220 <- LoadInteger '2'
    v221 <- LoadInteger '4'
    v222 <- LoadInteger '6'
    v223 <- CreateArray [v220, v221, v222]
    v224 <- CallFunction v214, []
    v225 <- LoadInteger '2'
    v226 <- LoadInteger '4'
    v227 <- LoadInteger '6'
    v228 <- CreateArray [v225, v226, v227]
    v229 <- LoadBoolean 'true'
    v230 <- CallFunction v214, [v229]
EndPlainFunction
v231 <- CallFunction v195, []
v232 <- BeginPlainFunction -> 
    v233 <- LoadInteger '0'
    v234 <- CreateNamedVariable 'result', 'var', v233
    v235 <- BeginPlainFunction -> v236
        v237 <- BeginPlainFunction -> v238, v239, v240
            Update v234, '+', v239
            v241 <- LoadInteger '13'
            v242 <- Compare v239, '==', v241
            v243 <- BinaryOperation v242, '&&', v236
            BeginIf v243
            EndIf
            Return v238
        EndPlainFunction
        v244 <- CreateNamedVariable 'callback', 'var', v237
        v245 <- CallMethod v55, 'map', [v244]
    EndPlainFunction
    v246 <- CreateNamedVariable 'lazyDeopt', 'var', v235
    v247 <- CallFunction v246, []
    v248 <- CallFunction v246, []
    v249 <- CallFunction v246, []
    v250 <- LoadBoolean 'true'
    v251 <- CallFunction v246, [v250]
    v252 <- CallFunction v246, []
    v253 <- LoadInteger '1500'
EndPlainFunction
v254 <- CallFunction v232, []
v255 <- BeginPlainFunction -> 
    v256 <- LoadInteger '0'
    v257 <- CreateNamedVariable 'result', 'var', v256
    v258 <- BeginPlainFunction -> v259
        v260 <- BeginPlainFunction -> v261, v262, v263
            Update v257, '+', v262
            v264 <- LoadInteger '13'
            v265 <- Compare v262, '==', v264
            v266 <- BinaryOperation v265, '&&', v259
            BeginIf v266
            EndIf
            Return v261
        EndPlainFunction
        v267 <- CreateNamedVariable 'callback', 'var', v260
        v268 <- CallMethod v55, 'map', [v267]
    EndPlainFunction
    v269 <- CreateNamedVariable 'lazyDeopt', 'var', v258
    v270 <- CallFunction v269, []
    v271 <- CallFunction v269, []
    v272 <- CallFunction v269, []
    v273 <- LoadBoolean 'true'
    v274 <- CallFunction v269, [v273]
    v275 <- CallFunction v269, []
    v276 <- LoadInteger '1500'
EndPlainFunction
v277 <- CallFunction v255, []
v278 <- BeginPlainFunction -> 
    v279 <- LoadInteger '0'
    v280 <- CreateNamedVariable 'result', 'var', v279
    v281 <- BeginPlainFunction -> v282
        v283 <- BeginPlainFunction -> v284, v285, v286
            Update v280, '+', v285
            v287 <- LoadInteger '13'
            v288 <- Compare v285, '==', v287
            v289 <- BinaryOperation v288, '&&', v282
            BeginIf v289
                v290 <- CreateNamedVariable 'gc', 'none'
                v291 <- CallFunction v290, []
                v292 <- CallFunction v290, []
                v293 <- CallFunction v290, []
            EndIf
            Return v284
        EndPlainFunction
        v294 <- CreateNamedVariable 'callback', 'var', v283
        v295 <- CallMethod v82, 'map', [v294]
    EndPlainFunction
    v296 <- CreateNamedVariable 'lazyDeopt', 'var', v281
    v297 <- CallFunction v296, []
    v298 <- CallFunction v296, []
    v299 <- CallFunction v296, []
    v300 <- LoadBoolean 'true'
    v301 <- CallFunction v296, [v300]
    v302 <- CallFunction v296, []
    v303 <- LoadInteger '1500'
EndPlainFunction
v304 <- CallFunction v278, []
v305 <- BeginPlainFunction -> 
    v306 <- LoadBoolean 'false'
    v307 <- CreateNamedVariable 'caught', 'var', v306
    v308 <- LoadInteger '0'
    v309 <- CreateNamedVariable 'result', 'var', v308
    v310 <- BeginPlainFunction -> v311
        v312 <- BeginPlainFunction -> v313, v314, v315
            Update v309, '+', v314
            v316 <- LoadInteger '1'
            v317 <- Compare v314, '==', v316
            v318 <- BinaryOperation v317, '&&', v311
            BeginIf v318
                v319 <- LoadString 'a'
                ThrowException v319
            EndIf
            Return v313
        EndPlainFunction
        v320 <- CreateNamedVariable 'callback', 'var', v312
        BeginTry
            v321 <- CallMethod v82, 'map', [v320]
        BeginCatch -> v322
            v323 <- LoadBoolean 'true'
            Reassign v307, v323
        EndTryCatch
    EndPlainFunction
    v324 <- CreateNamedVariable 'lazyDeopt', 'var', v310
    v325 <- CallFunction v324, []
    v326 <- CallFunction v324, []
    v327 <- CallFunction v324, []
    v328 <- LoadThis
    v329 <- LoadBoolean 'true'
    v330 <- CallMethod v324, 'bind', [v328, v329]
    v331 <- CallFunction v324, []
EndPlainFunction
v332 <- CallFunction v305, []
v333 <- BeginPlainFunction -> 
    v334 <- LoadBoolean 'false'
    v335 <- CreateNamedVariable 'caught', 'var', v334
    v336 <- LoadInteger '0'
    v337 <- CreateNamedVariable 'result', 'var', v336
    v338 <- BeginPlainFunction -> v339
        v340 <- BeginPlainFunction -> v341, v342, v343
            Update v337, '+', v342
            v344 <- LoadInteger '1'
            v345 <- Compare v342, '==', v344
            v346 <- BinaryOperation v345, '&&', v339
            BeginIf v346
                v347 <- LoadString 'a'
                ThrowException v347
            EndIf
            Return v341
        EndPlainFunction
        v348 <- CreateNamedVariable 'callback', 'var', v340
        BeginTry
            v349 <- CallMethod v82, 'map', [v348]
        BeginCatch -> v350
            v351 <- LoadBoolean 'true'
            Reassign v335, v351
        EndTryCatch
    EndPlainFunction
    v352 <- CreateNamedVariable 'lazyDeopt', 'var', v338
    v353 <- CallFunction v352, []
    v354 <- CallFunction v352, []
    v355 <- CallFunction v352, []
    v356 <- LoadThis
    v357 <- LoadBoolean 'true'
    v358 <- CallMethod v352, 'bind', [v356, v357]
    v359 <- CallFunction v352, []
EndPlainFunction
v360 <- CallFunction v333, []
v361 <- BeginPlainFunction -> 
    v362 <- LoadInteger '1'
    v363 <- LoadInteger '2'
    v364 <- LoadInteger '3'
    v365 <- LoadInteger '4'
    v366 <- CreateArray [v362, v363, v364, v365]
    v367 <- CreateNamedVariable 'a', 'var', v366
    v368 <- BeginPlainFunction -> v369
        v370 <- BeginPlainFunction -> v371, v372, v373
            v374 <- LoadInteger '1'
            v375 <- Compare v372, '==', v374
            v376 <- BinaryOperation v375, '&&', v369
            BeginIf v376
                v377 <- LoadString 'some exception'
                ThrowException v377
            EndIf
            v378 <- LoadInteger '2'
            v379 <- BinaryOperation v378, '*', v371
            Return v379
        EndPlainFunction
        v380 <- CreateNamedVariable 'callback', 'var', v370
        v381 <- LoadInteger '0'
        v382 <- CreateNamedVariable 'result', 'var', v381
        BeginTry
            v383 <- CallMethod v367, 'map', [v380]
            Reassign v382, v383
        BeginCatch -> v384
            v385 <- LoadString 'some exception'
            v386 <- LoadString 'nope'
            Reassign v382, v386
        EndTryCatch
        Return v382
    EndPlainFunction
    v387 <- CreateNamedVariable 'lazyDeopt', 'var', v368
    v388 <- LoadInteger '2'
    v389 <- LoadInteger '4'
    v390 <- LoadInteger '6'
    v391 <- LoadInteger '8'
    v392 <- CreateArray [v388, v389, v390, v391]
    v393 <- LoadBoolean 'false'
    v394 <- CallFunction v387, [v393]
    v395 <- LoadInteger '2'
    v396 <- LoadInteger '4'
    v397 <- LoadInteger '6'
    v398 <- LoadInteger '8'
    v399 <- CreateArray [v395, v396, v397, v398]
    v400 <- LoadBoolean 'false'
    v401 <- CallFunction v387, [v400]
    v402 <- LoadString 'nope'
    v403 <- LoadBoolean 'true'
    v404 <- CallFunction v387, [v403]
    v405 <- LoadString 'nope'
    v406 <- LoadBoolean 'true'
    v407 <- CallFunction v387, [v406]
    v408 <- LoadInteger '2'
    v409 <- LoadInteger '4'
    v410 <- LoadInteger '6'
    v411 <- LoadInteger '8'
    v412 <- CreateArray [v408, v409, v410, v411]
    v413 <- LoadBoolean 'false'
    v414 <- CallFunction v387, [v413]
    v415 <- LoadString 'nope'
    v416 <- LoadBoolean 'true'
    v417 <- CallFunction v387, [v416]
EndPlainFunction
v418 <- CallFunction v361, []
v419 <- BeginPlainFunction -> 
    v420 <- LoadRegExp 'Array\.map' ''
    v421 <- CreateNamedVariable 're', 'var', v420
    v422 <- BeginPlainFunction -> v423
        v424 <- LoadInteger '1'
        v425 <- LoadInteger '2'
        v426 <- LoadInteger '3'
        v427 <- CreateArray [v424, v425, v426]
        v428 <- CreateNamedVariable 'b', 'var', v427
        v429 <- LoadInteger '0'
        v430 <- CreateNamedVariable 'result', 'var', v429
        v431 <- BeginPlainFunction -> v432, v433, v434
            Update v430, '+', v432
            v435 <- LoadInteger '1'
            v436 <- Compare v433, '==', v435
            BeginIf v436
                v437 <- CreateNamedVariable 'Error', 'none'
                v438 <- Construct v437, []
                v439 <- CreateNamedVariable 'e', 'var', v438
                v440 <- GetProperty v439, 'stack'
                v441 <- CallMethod v421, 'exec', [v440]
                v442 <- LoadNull
                v443 <- Compare v441, '!==', v442
            EndIf
            Return v432
        EndPlainFunction
        v444 <- CreateNamedVariable 'callback', 'var', v431
        v445 <- LoadInteger '1'
        v446 <- LoadInteger '2'
        v447 <- LoadInteger '3'
        v448 <- CreateArray [v445, v446, v447]
        v449 <- CreateNamedVariable 'o', 'var', v448
        v450 <- CallMethod v428, 'map', [v444]
    EndPlainFunction
    v451 <- CreateNamedVariable 'lazyDeopt', 'var', v422
    v452 <- CallFunction v451, []
    v453 <- CallFunction v451, []
    v454 <- CallFunction v451, []
EndPlainFunction
v455 <- CallFunction v419, []
v456 <- BeginPlainFunction -> 
    v457 <- LoadRegExp 'Array\.map' ''
    v458 <- CreateNamedVariable 're', 'var', v457
    v459 <- BeginPlainFunction -> v460
        v461 <- LoadInteger '1'
        v462 <- LoadInteger '2'
        v463 <- LoadInteger '3'
        v464 <- CreateArray [v461, v462, v463]
        v465 <- CreateNamedVariable 'b', 'var', v464
        v466 <- LoadInteger '0'
        v467 <- CreateNamedVariable 'result', 'var', v466
        v468 <- BeginPlainFunction -> v469, v470, v471
            Update v467, '+', v469
            v472 <- LoadInteger '1'
            v473 <- Compare v470, '==', v472
            BeginIf v473
                v474 <- CreateNamedVariable 'Error', 'none'
                v475 <- Construct v474, []
                v476 <- CreateNamedVariable 'e', 'var', v475
                v477 <- GetProperty v476, 'stack'
                v478 <- CallMethod v458, 'exec', [v477]
                v479 <- LoadNull
                v480 <- Compare v478, '!==', v479
            EndIf
            Return v469
        EndPlainFunction
        v481 <- CreateNamedVariable 'callback', 'var', v468
        v482 <- LoadInteger '1'
        v483 <- LoadInteger '2'
        v484 <- LoadInteger '3'
        v485 <- CreateArray [v482, v483, v484]
        v486 <- CreateNamedVariable 'o', 'var', v485
        v487 <- CallMethod v465, 'map', [v481]
    EndPlainFunction
    v488 <- CreateNamedVariable 'lazyDeopt', 'var', v459
    v489 <- CallFunction v488, []
    v490 <- CallFunction v488, []
    v491 <- CallFunction v488, []
EndPlainFunction
v492 <- CallFunction v456, []
v493 <- BeginPlainFunction -> 
    v494 <- LoadRegExp 'Array\.map' ''
    v495 <- CreateNamedVariable 're', 'var', v494
    v496 <- BeginPlainFunction -> v497
        v498 <- LoadInteger '1'
        v499 <- LoadInteger '2'
        v500 <- LoadInteger '3'
        v501 <- CreateArray [v498, v499, v500]
        v502 <- CreateNamedVariable 'b', 'var', v501
        v503 <- LoadInteger '0'
        v504 <- CreateNamedVariable 'result', 'var', v503
        v505 <- BeginPlainFunction -> v506, v507, v508
            Update v504, '+', v506
            v509 <- LoadInteger '1'
            v510 <- Compare v507, '==', v509
            BeginIf v510
            BeginElse
                v511 <- LoadInteger '2'
                v512 <- Compare v507, '==', v511
                BeginIf v512
                    v513 <- CreateNamedVariable 'Error', 'none'
                    v514 <- Construct v513, []
                    v515 <- CreateNamedVariable 'e', 'var', v514
                    v516 <- GetProperty v515, 'stack'
                    v517 <- CallMethod v495, 'exec', [v516]
                    v518 <- LoadNull
                    v519 <- Compare v517, '!==', v518
                EndIf
            EndIf
            Return v506
        EndPlainFunction
        v520 <- CreateNamedVariable 'callback', 'var', v505
        v521 <- LoadInteger '1'
        v522 <- LoadInteger '2'
        v523 <- LoadInteger '3'
        v524 <- CreateArray [v521, v522, v523]
        v525 <- CreateNamedVariable 'o', 'var', v524
        v526 <- CallMethod v502, 'map', [v520]
    EndPlainFunction
    v527 <- CreateNamedVariable 'lazyDeopt', 'var', v496
    v528 <- CallFunction v527, []
    v529 <- CallFunction v527, []
    v530 <- CallFunction v527, []
EndPlainFunction
v531 <- CallFunction v493, []
v532 <- BeginPlainFunction -> 
    v533 <- LoadRegExp 'Array\.map' ''
    v534 <- CreateNamedVariable 're', 'var', v533
    v535 <- LoadInteger '1'
    v536 <- LoadInteger '2'
    v537 <- LoadInteger '3'
    v538 <- CreateArray [v535, v536, v537]
    v539 <- CreateNamedVariable 'a', 'var', v538
    v540 <- LoadInteger '0'
    v541 <- CreateNamedVariable 'result', 'var', v540
    v542 <- BeginPlainFunction -> 
        v543 <- BeginPlainFunction -> v544, v545, v546
            Update v541, '+', v545
            v547 <- LoadInteger '1'
            v548 <- Compare v545, '==', v547
            BeginIf v548
                v549 <- CreateNamedVariable 'Error', 'none'
                v550 <- Construct v549, []
                ThrowException v550
            EndIf
            Return v544
        EndPlainFunction
        v551 <- CreateNamedVariable 'callback', 'var', v543
        v552 <- CallMethod v539, 'map', [v551]
    EndPlainFunction
    v553 <- CreateNamedVariable 'lazyDeopt', 'var', v542
    v554 <- BeginArrowFunction -> 
        v555 <- CallFunction v553, []
        Return v555
    EndArrowFunction
    v556 <- CallFunction v554, []
    v557 <- BeginArrowFunction -> 
        v558 <- CallFunction v553, []
        Return v558
    EndArrowFunction
    v559 <- CallFunction v557, []
    BeginTry
        v560 <- CallFunction v553, []
    BeginCatch -> v561
        v562 <- GetProperty v561, 'stack'
        v563 <- CallMethod v534, 'exec', [v562]
        v564 <- LoadNull
        v565 <- Compare v563, '!==', v564
    EndTryCatch
    BeginTry
        v566 <- CallFunction v553, []
    BeginCatch -> v567
        v568 <- GetProperty v567, 'stack'
        v569 <- CallMethod v534, 'exec', [v568]
        v570 <- LoadNull
        v571 <- Compare v569, '!==', v570
    EndTryCatch
EndPlainFunction
v572 <- CallFunction v532, []
v573 <- BeginPlainFunction -> 
    v574 <- LoadInteger '0'
    v575 <- CreateNamedVariable 'result', 'var', v574
    v576 <- BeginPlainFunction -> 
        v577 <- BeginPlainFunction -> v578, v579, v580
            Update v575, '+', v578
            v581 <- LoadInteger '5'
            v582 <- Compare v579, '<', v581
            BeginIf v582
                v583 <- LoadFloat '0.5'
                v584 <- BinaryOperation v578, '+', v583
                Return v584
            BeginElse
                Return v578
            EndIf
        EndPlainFunction
        v585 <- CreateNamedVariable 'callback', 'var', v577
        v586 <- CallMethod v82, 'map', [v585]
        Return v586
    EndPlainFunction
    v587 <- CreateNamedVariable 'to_double', 'var', v576
    v588 <- CallFunction v587, []
    v589 <- CallFunction v587, []
    v590 <- CallFunction v587, []
    v591 <- CreateNamedVariable 'output', 'var', v590
    v592 <- LoadFloat '1.5'
    v593 <- GetElement v591, '0'
    v594 <- LoadInteger '6'
    v595 <- GetElement v591, '5'
    v596 <- LoadInteger '975'
EndPlainFunction
v597 <- CallFunction v573, []
v598 <- BeginPlainFunction -> 
    v599 <- LoadInteger '0'
    v600 <- CreateNamedVariable 'result', 'var', v599
    v601 <- BeginPlainFunction -> 
        v602 <- BeginPlainFunction -> v603, v604, v605
            Update v600, '+', v603
            v606 <- LoadInteger '5'
            v607 <- Compare v604, '<', v606
            BeginIf v607
                v608 <- LoadFloat '0.5'
                v609 <- BinaryOperation v603, '+', v608
                Return v609
            BeginElse
                v610 <- LoadInteger '10'
                v611 <- Compare v604, '<', v610
                BeginIf v611
                    Return v603
                BeginElse
                    v612 <- LoadString 'hello'
                    v613 <- BinaryOperation v603, '+', v612
                    Return v613
                EndIf
            EndIf
        EndPlainFunction
        v614 <- CreateNamedVariable 'callback', 'var', v602
        v615 <- CallMethod v82, 'map', [v614]
        Return v615
    EndPlainFunction
    v616 <- CreateNamedVariable 'to_fast', 'var', v601
    v617 <- CallFunction v616, []
    v618 <- CallFunction v616, []
    v619 <- CallFunction v616, []
    v620 <- CreateNamedVariable 'output', 'var', v619
    v621 <- LoadInteger '975'
    v622 <- LoadString '11hello'
    v623 <- GetElement v620, '10'
EndPlainFunction
v624 <- CallFunction v598, []
v625 <- BeginPlainFunction -> 
    v626 <- LoadInteger '1'
    v627 <- LoadInteger '2'
    v628 <- LoadInteger '3'
    v629 <- CreateArray [v626, v627, v628]
    v630 <- CreateNamedVariable 'a', 'var', v629
    v631 <- BeginPlainFunction -> 
        v632 <- BeginArrowFunction -> v633
            v634 <- LoadFloat '0.5'
            v635 <- BinaryOperation v633, '+', v634
            Return v635
        EndArrowFunction
        v636 <- CreateNamedVariable 'callback', 'var', v632
        v637 <- CallMethod v630, 'map', [v636]
        Return v637
    EndPlainFunction
    v638 <- CallFunction v631, []
    v639 <- CallFunction v631, []
    v640 <- CallFunction v631, []
    v641 <- LoadFloat '1.5'
    v642 <- CallFunction v631, []
    v643 <- GetElement v642, '0'
EndPlainFunction
v644 <- CallFunction v625, []
v645 <- BeginPlainFunction -> 
    v646 <- LoadInteger '1'
    v647 <- LoadInteger '2'
    v648 <- LoadInteger '3'
    v649 <- CreateArray [v646, v647, v648]
    v650 <- CreateNamedVariable 'a', 'var', v649
    v651 <- BeginPlainFunction -> 
        v652 <- BeginArrowFunction -> v653
            v654 <- LoadString 'hello'
            v655 <- CallMethod v653, 'toString', []
            v656 <- BinaryOperation v654, '+', v655
            Return v656
        EndArrowFunction
        v657 <- CreateNamedVariable 'callback', 'var', v652
        v658 <- CallMethod v650, 'map', [v657]
        Return v658
    EndPlainFunction
    v659 <- CallFunction v651, []
    v660 <- CallFunction v651, []
    v661 <- CallFunction v651, []
    v662 <- LoadString 'hello1'
    v663 <- CallFunction v651, []
    v664 <- GetElement v663, '0'
EndPlainFunction
v665 <- CallFunction v645, []
v666 <- BeginArrowFunction -> 
    v667 <- LoadInteger '1'
    v668 <- LoadInteger '2'
    v669 <- LoadUndefined
    v670 <- LoadInteger '3'
    v671 <- LoadInteger '4'
    v672 <- CreateArray [v667, v668, v669, v670, v671]
    v673 <- CreateNamedVariable 'a', 'const', v672
    v674 <- CreateArray []
    v675 <- CreateNamedVariable 'callback_values', 'let', v674
    v676 <- BeginPlainFunction -> 
        v677 <- CreateArray []
        Reassign v675, v677
        v678 <- BeginArrowFunction -> v679
            v680 <- CallMethod v675, 'push', [v679]
            Return v679
        EndArrowFunction
        v681 <- CallMethod v673, 'map', [v678]
        Return v681
    EndPlainFunction
    v682 <- CallFunction v676, []
    v683 <- CallFunction v676, []
    v684 <- LoadInteger '1'
    v685 <- LoadInteger '2'
    v686 <- LoadUndefined
    v687 <- LoadInteger '3'
    v688 <- LoadInteger '4'
    v689 <- CreateArray [v684, v685, v686, v687, v688]
    v690 <- CallFunction v676, []
    v691 <- LoadInteger '1'
    v692 <- LoadInteger '2'
    v693 <- LoadInteger '3'
    v694 <- LoadInteger '4'
    v695 <- CreateArray [v691, v692, v693, v694]
EndArrowFunction
v696 <- CallFunction v666, []
v697 <- BeginArrowFunction -> 
    v698 <- LoadFloat '1.5'
    v699 <- LoadFloat '2.5'
    v700 <- LoadUndefined
    v701 <- LoadFloat '3.5'
    v702 <- LoadFloat '4.5'
    v703 <- CreateArray [v698, v699, v700, v701, v702]
    v704 <- CreateNamedVariable 'a', 'const', v703
    v705 <- CreateArray []
    v706 <- CreateNamedVariable 'callback_values', 'let', v705
    v707 <- BeginPlainFunction -> 
        v708 <- CreateArray []
        Reassign v706, v708
        v709 <- BeginArrowFunction -> v710
            v711 <- CallMethod v706, 'push', [v710]
            Return v710
        EndArrowFunction
        v712 <- CallMethod v704, 'map', [v709]
        Return v712
    EndPlainFunction
    v713 <- CallFunction v707, []
    v714 <- CallFunction v707, []
    v715 <- LoadFloat '1.5'
    v716 <- LoadFloat '2.5'
    v717 <- LoadUndefined
    v718 <- LoadFloat '3.5'
    v719 <- LoadFloat '4.5'
    v720 <- CreateArray [v715, v716, v717, v718, v719]
    v721 <- CallFunction v707, []
    v722 <- LoadFloat '1.5'
    v723 <- LoadFloat '2.5'
    v724 <- LoadFloat '3.5'
    v725 <- LoadFloat '4.5'
    v726 <- CreateArray [v722, v723, v724, v725]
EndArrowFunction
v727 <- CallFunction v697, []
v728 <- BeginArrowFunction -> 
    v729 <- BeginPlainFunction -> v730, v731
        BeginIf v731
            v732 <- LoadInteger '3'
            SetProperty v730, 'foo', v732
        EndIf
        Return v730
    EndPlainFunction
    v733 <- BeginPlainFunction -> v734, v735
        v736 <- BeginArrowFunction -> v737
            v738 <- LoadInteger '2'
            v739 <- BinaryOperation v737, '*', v738
            Return v739
        EndArrowFunction
        v740 <- CallFunction v729, [v734, v735]
        v741 <- CallMethod v734, 'map', [v736, v740]
        Return v741
    EndPlainFunction
    v742 <- LoadInteger '1'
    v743 <- LoadInteger '2'
    v744 <- LoadInteger '3'
    v745 <- CreateArray [v742, v743, v744]
    v746 <- CreateNamedVariable 'a', 'let', v745
    v747 <- LoadBoolean 'false'
    v748 <- CallFunction v733, [v746, v747]
    v749 <- LoadBoolean 'false'
    v750 <- CallFunction v733, [v746, v749]
    v751 <- LoadBoolean 'false'
    v752 <- CallFunction v733, [v746, v751]
    v753 <- LoadBoolean 'true'
    v754 <- CallFunction v733, [v746, v753]
EndArrowFunction
v755 <- CallFunction v728, []
v756 <- BeginPlainFunction -> 
    v757 <- LoadInteger '0'
    v758 <- CreateNamedVariable 'result', 'var', v757
    v759 <- LoadInteger '1'
    v760 <- LoadInteger '2'
    v761 <- LoadInteger '3'
    v762 <- CreateArray [v759, v760, v761]
    v763 <- CreateNamedVariable 'a', 'var', v762
    v764 <- BeginPlainFunction -> 
        v765 <- BeginPlainFunction -> v766, v767, v768
            Update v758, '+', v766
            Return v766
        EndPlainFunction
        v769 <- CreateNamedVariable 'callback', 'var', v765
        v770 <- CallMethod v763, 'map', [v769]
    EndPlainFunction
    v771 <- CreateNamedVariable 'species_breakage', 'var', v764
    v772 <- CallFunction v771, []
    v773 <- CallFunction v771, []
    v774 <- CallFunction v771, []
    BeginObjectLiteral
    v775 <- EndObjectLiteral
    SetProperty v763, 'constructor', v775
    v776 <- BeginPlainFunction -> 
    EndPlainFunction
    v777 <- GetProperty v763, 'constructor'
    v778 <- CreateNamedVariable 'Symbol', 'none'
    v779 <- GetProperty v778, 'species'
    SetComputedProperty v777, v779, v776
    v780 <- CallFunction v771, []
    v781 <- LoadInteger '24'
EndPlainFunction
v782 <- CallFunction v756, []


var a = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0,0];
var b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
var c = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
function f83() {
    var result = 0;
    function f86(a87) {
        function f88(a89, a90, a91) {
            result += a89;
            if ((a90 == 13) && a87) {
                a.abc = 25;
            }
            return a89;
        }
        var callback = f88;
        a.map(callback);
    }
    var eagerDeoptInCalled = f86;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f83();
function f107() {
    var result = 0;
    function f110(a111) {
        function f112(a113, a114, a115) {
            result += a113;
            a.length = (a114 == 13) && a111 ? 25 : 27;
            return a113;
        }
        var callback = f112;
        a.map(callback);
    }
    var eagerDeoptInCalled = f110;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f107();
function f133() {
    var result = 0;
    function f136(a137) {
        var a_noescape = [0,1,2,3,4,5];
        function f146(a147, a148, a149) {
            result += a147;
            if ((a148 == 13) && a137) {
                a_noescape.length = 25;
            }
            return a147;
        }
        var callback = f146;
        a_noescape.map(callback);
    }
    var eagerDeoptInCalled = f136;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f133();
function f165() {
    var result = 0;
    function f168(a169) {
        var b = [1,2,3];
        function f175(a176, a177, a178) {
            result += a177;
            if ((a177 == 1) && a169) {
            }
            gc();
            gc();
            return a176;
        }
        var callback = f175;
        b.map(callback);
    }
    var lazyDeopt = f168;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f165();
function f195() {
    function f196(a197) {
        var b = [1,2,3];
        function f203(a204, a205, a206) {
            if ((a205 == 1) && a197) {
            }
            return 2 * a204;
        }
        var callback = f203;
        return b.map(callback);
    }
    var lazyDeopt = f196;
    [2,4,6];
    lazyDeopt();
    [2,4,6];
    lazyDeopt();
    [2,4,6];
    lazyDeopt(true);
}
f195();
function f232() {
    var result = 0;
    function f235(a236) {
        function f237(a238, a239, a240) {
            result += a239;
            if ((a239 == 13) && a236) {
            }
            return a238;
        }
        var callback = f237;
        b.map(callback);
    }
    var lazyDeopt = f235;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f232();
function f255() {
    var result = 0;
    function f258(a259) {
        function f260(a261, a262, a263) {
            result += a262;
            if ((a262 == 13) && a259) {
            }
            return a261;
        }
        var callback = f260;
        b.map(callback);
    }
    var lazyDeopt = f258;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f255();
function f278() {
    var result = 0;
    function f281(a282) {
        function f283(a284, a285, a286) {
            result += a285;
            if ((a285 == 13) && a282) {
                gc();
                gc();
                gc();
            }
            return a284;
        }
        var callback = f283;
        c.map(callback);
    }
    var lazyDeopt = f281;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f278();
function f305() {
    var caught = false;
    var result = 0;
    function f310(a311) {
        function f312(a313, a314, a315) {
            result += a314;
            if ((a314 == 1) && a311) {
                throw "a";
            }
            return a313;
        }
        var callback = f312;
        try {
            c.map(callback);
        } catch(e322) {
            caught = true;
        }
    }
    var lazyDeopt = f310;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt.bind(this, true);
    lazyDeopt();
}
f305();
function f333() {
    var caught = false;
    var result = 0;
    function f338(a339) {
        function f340(a341, a342, a343) {
            result += a342;
            if ((a342 == 1) && a339) {
                throw "a";
            }
            return a341;
        }
        var callback = f340;
        try {
            c.map(callback);
        } catch(e350) {
            caught = true;
        }
    }
    var lazyDeopt = f338;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt.bind(this, true);
    lazyDeopt();
}
f333();
function TestThrowIntoDeoptimizedOuter() {
    var a = [1,2,3,4];
    function f368(a369) {
        function f370(a371, a372, a373) {
            if ((a372 == 1) && a369) {
                throw "some exception";
            }
            return 2 * a371;
        }
        var callback = f370;
        var result = 0;
        try {
            result = a.map(callback);
        } catch(e384) {
            result = "nope";
        }
        return result;
    }
    var lazyDeopt = f368;
    [2,4,6,8];
    lazyDeopt(false);
    [2,4,6,8];
    lazyDeopt(false);
    lazyDeopt(true);
    lazyDeopt(true);
    [2,4,6,8];
    lazyDeopt(false);
    lazyDeopt(true);
}
TestThrowIntoDeoptimizedOuter();
function f419() {
    var re = /Array\.map/;
    function f422(a423) {
        var b = [1,2,3];
        var result = 0;
        function f431(a432, a433, a434) {
            result += a432;
            if (a433 == 1) {
                const v438 = new Error();
                var e = v438;
                re.exec(e.stack) !== null;
            }
            return a432;
        }
        var callback = f431;
        var o = [1,2,3];
        b.map(callback);
    }
    var lazyDeopt = f422;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f419();
function f456() {
    var re = /Array\.map/;
    function f459(a460) {
        var b = [1,2,3];
        var result = 0;
        function f468(a469, a470, a471) {
            result += a469;
            if (a470 == 1) {
                const v475 = new Error();
                var e = v475;
                re.exec(e.stack) !== null;
            }
            return a469;
        }
        var callback = f468;
        var o = [1,2,3];
        b.map(callback);
    }
    var lazyDeopt = f459;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f456();
function f493() {
    var re = /Array\.map/;
    function f496(a497) {
        var b = [1,2,3];
        var result = 0;
        function f505(a506, a507, a508) {
            result += a506;
            if (a507 == 1) {
            } else {
                if (a507 == 2) {
                    const v514 = new Error();
                    var e = v514;
                    re.exec(e.stack) !== null;
                }
            }
            return a506;
        }
        var callback = f505;
        var o = [1,2,3];
        b.map(callback);
    }
    var lazyDeopt = f496;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f493();
function f532() {
    var re = /Array\.map/;
    var a = [1,2,3];
    var result = 0;
    function f542() {
        function f543(a544, a545, a546) {
            result += a545;
            if (a545 == 1) {
                const v550 = new Error();
                throw v550;
            }
            return a544;
        }
        var callback = f543;
        a.map(callback);
    }
    var lazyDeopt = f542;
    const v554 = () => {
        return lazyDeopt();
    };
    v554();
    const v557 = () => {
        return lazyDeopt();
    };
    v557();
    try {
        lazyDeopt();
    } catch(e561) {
        re.exec(e561.stack) !== null;
    }
    try {
        lazyDeopt();
    } catch(e567) {
        re.exec(e567.stack) !== null;
    }
}
f532();
function f573() {
    var result = 0;
    function f576() {
        function f577(a578, a579, a580) {
            result += a578;
            if (a579 < 5) {
                return a578 + 0.5;
            } else {
                return a578;
            }
        }
        var callback = f577;
        return c.map(callback);
    }
    var to_double = f576;
    to_double();
    to_double();
    var output = to_double();
    output[0];
    output[5];
}
f573();
function f598() {
    var result = 0;
    function f601() {
        function f602(a603, a604, a605) {
            result += a603;
            if (a604 < 5) {
                return a603 + 0.5;
            } else {
                if (a604 < 10) {
                    return a603;
                } else {
                    return a603 + "hello";
                }
            }
        }
        var callback = f602;
        return c.map(callback);
    }
    var to_fast = f601;
    to_fast();
    to_fast();
    var output = to_fast();
    output[10];
}
f598();
function f625() {
    var a = [1,2,3];
    function double_results() {
        const v632 = (a633) => {
            return a633 + 0.5;
        };
        var callback = v632;
        return a.map(callback);
    }
    double_results();
    double_results();
    double_results();
    double_results()[0];
}
f625();
function f645() {
    var a = [1,2,3];
    function string_results() {
        const v652 = (a653) => {
            return "hello" + a653.toString();
        };
        var callback = v652;
        return a.map(callback);
    }
    string_results();
    string_results();
    string_results();
    string_results()[0];
}
f645();
const v666 = () => {
    const a = [1,2,,3,4];
    let callback_values = [];
    function withHoles() {
        callback_values = [];
        const v678 = (a679) => {
            callback_values.push(a679);
            return a679;
        };
        return a.map(v678);
    }
    withHoles();
    withHoles();
    [1,2,,3,4];
    withHoles();
    [1,2,3,4];
};
v666();
const v697 = () => {
    const a = [1.5,2.5,,3.5,4.5];
    let callback_values = [];
    function withHoles() {
        callback_values = [];
        const v709 = (a710) => {
            callback_values.push(a710);
            return a710;
        };
        return a.map(v709);
    }
    withHoles();
    withHoles();
    [1.5,2.5,,3.5,4.5];
    withHoles();
    [1.5,2.5,3.5,4.5];
};
v697();
const v728 = () => {
    function side_effect(a730, a731) {
        if (a731) {
            a730.foo = 3;
        }
        return a730;
    }
    function unreliable(a734, a735) {
        const v736 = (a737) => {
            return a737 * 2;
        };
        return a734.map(v736, side_effect(a734, a735));
    }
    let a = [1,2,3];
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, true);
};
v728();
function f756() {
    var result = 0;
    var a = [1,2,3];
    function f764() {
        function f765(a766, a767, a768) {
            result += a766;
            return a766;
        }
        var callback = f765;
        a.map(callback);
    }
    var species_breakage = f764;
    species_breakage();
    species_breakage();
    species_breakage();
    a.constructor = {};
    function f776() {
    }
    const t516 = a.constructor;
    t516[Symbol.species] = f776;
    species_breakage();
}
f756();

FuzzIL program written to corpus/optimized-map.fzil
