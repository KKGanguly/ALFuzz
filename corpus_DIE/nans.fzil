v0 <- BeginPlainFunction -> 
    v1 <- CreateNamedVariable 'Uint32Array', 'none'
    v2 <- CreateNamedVariable 'Uint8Array', 'none'
    v3 <- LoadInteger '4'
    v4 <- LoadInteger '3'
    v5 <- LoadInteger '2'
    v6 <- LoadInteger '1'
    v7 <- CreateArray [v3, v4, v5, v6]
    v8 <- Construct v2, [v7]
    v9 <- GetProperty v8, 'buffer'
    v10 <- Construct v1, [v9]
    v11 <- GetElement v10, '0'
    v12 <- LoadInteger '16909060'
    v13 <- Compare v11, '==', v12
    Return v13
EndPlainFunction
v14 <- BeginPlainFunction -> v15
    v16 <- CallFunction v15, []
    v17 <- CallFunction v15, []
    v18 <- CallFunction v15, []
    v19 <- CallFunction v15, []
EndPlainFunction
v20 <- BeginPlainFunction -> 
    v21 <- BeginPlainFunction -> 
        v22 <- CallFunction v0, []
        BeginIf v22
            v23 <- CreateNamedVariable 'Uint32Array', 'none'
            v24 <- LoadInteger '1'
            v25 <- LoadInteger '2146435072'
            v26 <- CreateArray [v24, v25]
            v27 <- Construct v23, [v26]
            v28 <- CreateNamedVariable 'bytes', 'var', v27
        BeginElse
            v29 <- CreateNamedVariable 'Uint32Array', 'none'
            v30 <- LoadInteger '2146435072'
            v31 <- LoadInteger '1'
            v32 <- CreateArray [v30, v31]
            v33 <- Construct v29, [v32]
            v34 <- CreateNamedVariable 'bytes', 'var', v33
        EndIf
        v35 <- CreateNamedVariable 'Float64Array', 'none'
        v36 <- CreateNamedVariable 'bytes', 'none'
        v37 <- GetProperty v36, 'buffer'
        v38 <- Construct v35, [v37]
        v39 <- CreateNamedVariable 'doubles', 'var', v38
        v40 <- GetElement v39, '0'
        v41 <- CreateNamedVariable 'isNaN', 'none'
        v42 <- CallFunction v41, [v40]
        v43 <- GetElement v39, '0'
        v44 <- LoadInteger '2'
        v45 <- BinaryOperation v43, '*', v44
        v46 <- CallFunction v41, [v45]
        v47 <- GetElement v39, '0'
        v48 <- LoadFloat '0.5'
        v49 <- BinaryOperation v47, '+', v48
        v50 <- CallFunction v41, [v49]
    EndPlainFunction
    v51 <- CallFunction v14, [v21]
EndPlainFunction
v52 <- CallFunction v20, []
v53 <- BeginPlainFunction -> 
    v54 <- BeginPlainFunction -> 
        v55 <- CallFunction v0, []
        BeginIf v55
            v56 <- CreateNamedVariable 'Uint32Array', 'none'
            v57 <- LoadInteger '0'
            v58 <- LoadInteger '2146959360'
            v59 <- CreateArray [v57, v58]
            v60 <- Construct v56, [v59]
            v61 <- CreateNamedVariable 'bytes', 'var', v60
        BeginElse
            v62 <- CreateNamedVariable 'Uint32Array', 'none'
            v63 <- LoadInteger '2146959360'
            v64 <- LoadInteger '0'
            v65 <- CreateArray [v63, v64]
            v66 <- Construct v62, [v65]
            v67 <- CreateNamedVariable 'bytes', 'var', v66
        EndIf
        v68 <- CreateNamedVariable 'Float64Array', 'none'
        v69 <- CreateNamedVariable 'bytes', 'none'
        v70 <- GetProperty v69, 'buffer'
        v71 <- Construct v68, [v70]
        v72 <- CreateNamedVariable 'doubles', 'var', v71
        v73 <- GetElement v72, '0'
        v74 <- CreateNamedVariable 'isNaN', 'none'
        v75 <- CallFunction v74, [v73]
        v76 <- GetElement v72, '0'
        v77 <- LoadInteger '2'
        v78 <- BinaryOperation v76, '*', v77
        v79 <- CallFunction v74, [v78]
        v80 <- GetElement v72, '0'
        v81 <- LoadFloat '0.5'
        v82 <- BinaryOperation v80, '+', v81
        v83 <- CallFunction v74, [v82]
    EndPlainFunction
    v84 <- CallFunction v14, [v54]
EndPlainFunction
v85 <- CallFunction v53, []
v86 <- BeginPlainFunction -> 
    v87 <- BeginPlainFunction -> 
        v88 <- CreateNamedVariable 'Uint32Array', 'none'
        v89 <- LoadInteger '2139095041'
        v90 <- CreateArray [v89]
        v91 <- Construct v88, [v90]
        v92 <- CreateNamedVariable 'bytes', 'var', v91
        v93 <- CreateNamedVariable 'Float32Array', 'none'
        v94 <- GetProperty v92, 'buffer'
        v95 <- Construct v93, [v94]
        v96 <- CreateNamedVariable 'floats', 'var', v95
        v97 <- GetElement v96, '0'
        v98 <- CreateNamedVariable 'isNaN', 'none'
        v99 <- CallFunction v98, [v97]
        v100 <- GetElement v96, '0'
        v101 <- LoadInteger '2'
        v102 <- BinaryOperation v100, '*', v101
        v103 <- CallFunction v98, [v102]
        v104 <- GetElement v96, '0'
        v105 <- LoadFloat '0.5'
        v106 <- BinaryOperation v104, '+', v105
        v107 <- CallFunction v98, [v106]
    EndPlainFunction
    v108 <- CallFunction v14, [v87]
EndPlainFunction
v109 <- CallFunction v86, []
v110 <- BeginPlainFunction -> 
    v111 <- BeginPlainFunction -> 
        v112 <- CreateNamedVariable 'Uint32Array', 'none'
        v113 <- LoadInteger '2143289344'
        v114 <- CreateArray [v113]
        v115 <- Construct v112, [v114]
        v116 <- CreateNamedVariable 'bytes', 'var', v115
        v117 <- CreateNamedVariable 'Float32Array', 'none'
        v118 <- GetProperty v116, 'buffer'
        v119 <- Construct v117, [v118]
        v120 <- CreateNamedVariable 'floats', 'var', v119
        v121 <- GetElement v120, '0'
        v122 <- CreateNamedVariable 'isNaN', 'none'
        v123 <- CallFunction v122, [v121]
        v124 <- GetElement v120, '0'
        v125 <- LoadInteger '2'
        v126 <- BinaryOperation v124, '*', v125
        v127 <- CallFunction v122, [v126]
        v128 <- GetElement v120, '0'
        v129 <- LoadFloat '0.5'
        v130 <- BinaryOperation v128, '+', v129
        v131 <- CallFunction v122, [v130]
    EndPlainFunction
    v132 <- CallFunction v14, [v111]
EndPlainFunction
v133 <- CallFunction v110, []


function isLittleEndian() {
    const v8 = new Uint8Array([4,3,2,1]);
    const v10 = new Uint32Array(v8.buffer);
    return v10[0] == 16909060;
}
function TestAllModes(a15) {
    a15();
    a15();
    a15();
    a15();
}
function TestDoubleSignalingNan() {
    function f() {
        if (isLittleEndian()) {
            const v27 = new Uint32Array([1,2146435072]);
            var bytes = v27;
        } else {
            const v33 = new Uint32Array([2146435072,1]);
            var bytes = v33;
        }
        const v38 = new Float64Array(bytes.buffer);
        var doubles = v38;
        isNaN(doubles[0]);
        isNaN(doubles[0] * 2);
        isNaN(doubles[0] + 0.5);
    }
    TestAllModes(f);
}
TestDoubleSignalingNan();
function TestDoubleQuietNan() {
    function f() {
        if (isLittleEndian()) {
            const v60 = new Uint32Array([0,2146959360]);
            var bytes = v60;
        } else {
            const v66 = new Uint32Array([2146959360,0]);
            var bytes = v66;
        }
        const v71 = new Float64Array(bytes.buffer);
        var doubles = v71;
        isNaN(doubles[0]);
        isNaN(doubles[0] * 2);
        isNaN(doubles[0] + 0.5);
    }
    TestAllModes(f);
}
TestDoubleQuietNan();
function TestFloatSignalingNan() {
    function f() {
        const v91 = new Uint32Array([2139095041]);
        var bytes = v91;
        const v95 = new Float32Array(bytes.buffer);
        var floats = v95;
        isNaN(floats[0]);
        isNaN(floats[0] * 2);
        isNaN(floats[0] + 0.5);
    }
    TestAllModes(f);
}
TestFloatSignalingNan();
function TestFloatQuietNan() {
    function f() {
        const v115 = new Uint32Array([2143289344]);
        var bytes = v115;
        const v119 = new Float32Array(bytes.buffer);
        var floats = v119;
        isNaN(floats[0]);
        isNaN(floats[0] * 2);
        isNaN(floats[0] + 0.5);
    }
    TestAllModes(f);
}
TestFloatQuietNan();

FuzzIL program written to corpus/nans.fzil
