v0 <- LoadInteger '8192'
v1 <- CreateNamedVariable 'MIN_DICTIONARY_INDEX', 'const', v0
v2 <- BeginPlainFunction -> 
    v3 <- BeginPlainFunction -> 
    EndPlainFunction
    v4 <- LoadInteger '0'
    v5 <- CreateNamedVariable 'callCount', 'let', v4
    v6 <- LoadInteger '1'
    v7 <- LoadInteger '2'
    v8 <- CreateArray [v6, v7]
    v9 <- CreateNamedVariable 'a', 'const', v8
    v10 <- BeginArrowFunction -> 
        BeginObjectLiteral
            BeginObjectLiteralMethod `toString` -> v11
                v12 <- UnaryOperation v5, '++'
                v13 <- Construct v3, []
                ThrowException v13
            EndObjectLiteralMethod
        v14 <- EndObjectLiteral
        v15 <- CallMethod v9, 'join', [v14]
        Return v15
    EndArrowFunction
    v16 <- CallFunction v10, []
    v17 <- CallFunction v3, []
    v18 <- LoadInteger '1'
    v19 <- LoadString '1,2'
    v20 <- CallMethod v9, 'join', []
EndPlainFunction
v21 <- CallFunction v2, []
v22 <- BeginPlainFunction -> 
    v23 <- LoadInteger '1'
    v24 <- LoadInteger '2'
    v25 <- LoadInteger '3'
    v26 <- CreateArray [v23, v24, v25]
    v27 <- CreateNamedVariable 'a', 'const', v26
    v28 <- LoadInteger '0'
    v29 <- CreateNamedVariable 'callCount', 'let', v28
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v30
            v31 <- UnaryOperation v29, '++'
            v32 <- LoadString '-'
            v33 <- CallMethod v27, 'join', [v32]
            Return v33
        EndObjectLiteralMethod
    v34 <- EndObjectLiteral
    v35 <- CreateNamedVariable 'sep', 'const', v34
    v36 <- LoadString '11-2-321-2-33'
    v37 <- CallMethod v27, 'join', [v35]
    v38 <- LoadInteger '1'
    v39 <- LoadString '1,2,3'
    v40 <- CallMethod v27, 'join', []
EndPlainFunction
v41 <- CallFunction v22, []
v42 <- BeginPlainFunction -> 
    v43 <- LoadInteger '1'
    v44 <- LoadInteger '2'
    v45 <- LoadInteger '3'
    v46 <- CreateArray [v43, v44, v45]
    v47 <- CreateNamedVariable 'a', 'const', v46
    v48 <- LoadInteger '0'
    v49 <- CreateNamedVariable 'callCount', 'let', v48
    v50 <- LoadString '1,2,3'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v51
            v52 <- UnaryOperation v49, '++'
            v53 <- LoadInteger '4'
            v54 <- CallMethod v47, 'push', [v53]
            v55 <- LoadString ','
            Return v55
        EndObjectLiteralMethod
    v56 <- EndObjectLiteral
    v57 <- CallMethod v47, 'join', [v56]
    v58 <- LoadInteger '1'
    v59 <- LoadString '1,2,3,4'
    v60 <- CallMethod v47, 'join', []
EndPlainFunction
v61 <- CallFunction v42, []
v62 <- BeginPlainFunction -> 
    v63 <- LoadInteger '1'
    v64 <- LoadInteger '2'
    v65 <- LoadInteger '3'
    v66 <- CreateArray [v63, v64, v65]
    v67 <- CreateNamedVariable 'a', 'const', v66
    v68 <- LoadInteger '0'
    v69 <- CreateNamedVariable 'callCount', 'let', v68
    v70 <- LoadString '1,2,'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v71
            v72 <- UnaryOperation v69, '++'
            v73 <- CallMethod v67, 'pop', []
            v74 <- LoadString ','
            Return v74
        EndObjectLiteralMethod
    v75 <- EndObjectLiteral
    v76 <- CallMethod v67, 'join', [v75]
    v77 <- LoadInteger '1'
    v78 <- LoadString '1,2'
    v79 <- CallMethod v67, 'join', []
EndPlainFunction
v80 <- CallFunction v62, []
v81 <- BeginPlainFunction -> 
    v82 <- LoadInteger '1'
    v83 <- LoadInteger '2'
    v84 <- LoadInteger '3'
    v85 <- CreateArray [v82, v83, v84]
    v86 <- CreateNamedVariable 'a', 'const', v85
    v87 <- LoadInteger '0'
    v88 <- CreateNamedVariable 'callCount', 'let', v87
    v89 <- LoadString ',,'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v90
            v91 <- UnaryOperation v88, '++'
            v92 <- LoadInteger '0'
            SetProperty v86, 'length', v92
            v93 <- LoadString ','
            Return v93
        EndObjectLiteralMethod
    v94 <- EndObjectLiteral
    v95 <- CallMethod v86, 'join', [v94]
    v96 <- LoadInteger '1'
EndPlainFunction
v97 <- CallFunction v81, []
v98 <- BeginPlainFunction -> 
    v99 <- CreateArray []
    v100 <- CreateNamedVariable 'a', 'const', v99
    v101 <- LoadInteger '1'
    SetElement v100, '0', v101
    v102 <- LoadInteger '2'
    SetComputedProperty v100, v1, v102
    v103 <- LoadInteger '0'
    v104 <- CreateNamedVariable 'callCount', 'let', v103
    v105 <- LoadString '-'
    v106 <- CallMethod v105, 'repeat', [v1]
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v107
            v108 <- UnaryOperation v104, '++'
            v109 <- LoadInteger '0'
            SetProperty v100, 'length', v109
            v110 <- LoadString '-'
            Return v110
        EndObjectLiteralMethod
    v111 <- EndObjectLiteral
    v112 <- CallMethod v100, 'join', [v111]
    v113 <- LoadInteger '1'
EndPlainFunction
v114 <- CallFunction v98, []
v115 <- BeginPlainFunction -> 
    v116 <- CreateArray []
    v117 <- CreateNamedVariable 'a', 'const', v116
    v118 <- LoadInteger '1'
    SetElement v117, '0', v118
    v119 <- LoadInteger '2'
    SetComputedProperty v117, v1, v119
    v120 <- LoadInteger '0'
    v121 <- CreateNamedVariable 'callCount', 'let', v120
    v122 <- LoadString ''
    v123 <- CallMethod v122, 'repeat', [v1]
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v124
            v125 <- UnaryOperation v121, '++'
            v126 <- LoadInteger '0'
            SetProperty v117, 'length', v126
            v127 <- LoadString ''
            Return v127
        EndObjectLiteralMethod
    v128 <- EndObjectLiteral
    v129 <- CallMethod v117, 'join', [v128]
    v130 <- LoadInteger '1'
EndPlainFunction
v131 <- CallFunction v115, []
v132 <- BeginPlainFunction -> 
    v133 <- LoadInteger '1'
    v134 <- LoadInteger '2'
    v135 <- LoadInteger '3'
    v136 <- CreateArray [v133, v134, v135]
    v137 <- CreateNamedVariable 'a', 'const', v136
    v138 <- LoadInteger '0'
    v139 <- CreateNamedVariable 'callCount', 'let', v138
    v140 <- LoadString '1.5,2,3'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v141
            v142 <- UnaryOperation v139, '++'
            v143 <- LoadFloat '1.5'
            SetElement v137, '0', v143
            v144 <- LoadString ','
            Return v144
        EndObjectLiteralMethod
    v145 <- EndObjectLiteral
    v146 <- CallMethod v137, 'join', [v145]
    v147 <- LoadInteger '1'
    v148 <- LoadString '1.5,2,3'
    v149 <- CallMethod v137, 'join', []
EndPlainFunction
v150 <- CallFunction v132, []
v151 <- BeginPlainFunction -> 
    v152 <- LoadFloat '1.5'
    v153 <- LoadFloat '2.5'
    v154 <- LoadFloat '3.5'
    v155 <- CreateArray [v152, v153, v154]
    v156 <- CreateNamedVariable 'a', 'const', v155
    v157 <- LoadInteger '0'
    v158 <- CreateNamedVariable 'callCount', 'let', v157
    v159 <- LoadString 'one,2.5,3.5'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v160
            v161 <- UnaryOperation v158, '++'
            v162 <- LoadString 'one'
            SetElement v156, '0', v162
            v163 <- LoadString ','
            Return v163
        EndObjectLiteralMethod
    v164 <- EndObjectLiteral
    v165 <- CallMethod v156, 'join', [v164]
    v166 <- LoadInteger '1'
    v167 <- LoadString 'one,2.5,3.5'
    v168 <- CallMethod v156, 'join', []
EndPlainFunction
v169 <- CallFunction v151, []
v170 <- BeginPlainFunction -> 
    v171 <- LoadInteger '1'
    v172 <- LoadInteger '2'
    v173 <- LoadInteger '3'
    v174 <- CreateArray [v171, v172, v173]
    v175 <- CreateNamedVariable 'a', 'const', v174
    v176 <- LoadInteger '0'
    v177 <- CreateNamedVariable 'callCount', 'let', v176
    v178 <- LoadString '666,2,3'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v179
            v180 <- UnaryOperation v177, '++'
            v181 <- LoadString '0'
            BeginObjectLiteral
                BeginObjectLiteralMethod `get` -> v182
                    v183 <- LoadInteger '666'
                    Return v183
                EndObjectLiteralMethod
            v184 <- EndObjectLiteral
            v185 <- CreateNamedVariable 'Object', 'none'
            v186 <- CallMethod v185, 'defineProperty', [v175, v181, v184]
            v187 <- LoadString ','
            Return v187
        EndObjectLiteralMethod
    v188 <- EndObjectLiteral
    v189 <- CallMethod v175, 'join', [v188]
    v190 <- LoadInteger '1'
    v191 <- LoadString '666,2,3'
    v192 <- CallMethod v175, 'join', []
EndPlainFunction
v193 <- CallFunction v170, []
v194 <- BeginPlainFunction -> 
    v195 <- LoadInteger '1'
    v196 <- LoadInteger '2'
    v197 <- CreateArray [v195, v196]
    v198 <- CreateNamedVariable 'a', 'const', v197
    v199 <- LoadInteger '3'
    SetProperty v198, 'length', v199
    v200 <- LoadInteger '0'
    v201 <- CreateNamedVariable 'callCount', 'let', v200
    v202 <- LoadString '1,2,4'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v203
            v204 <- UnaryOperation v201, '++'
            v205 <- LoadInteger '4'
            BeginObjectLiteral
                ObjectLiteralAddProperty `2`, v205
            v206 <- EndObjectLiteral
            SetProperty v198, '__proto__', v206
            v207 <- LoadString ','
            Return v207
        EndObjectLiteralMethod
    v208 <- EndObjectLiteral
    v209 <- CallMethod v198, 'join', [v208]
    v210 <- LoadInteger '1'
    v211 <- CreateNamedVariable 'Array', 'none'
    v212 <- GetProperty v211, 'prototype'
    SetProperty v198, '__proto__', v212
    v213 <- LoadString '1,2,'
    v214 <- CallMethod v198, 'join', []
EndPlainFunction
v215 <- CallFunction v194, []
v216 <- BeginPlainFunction -> 
    v217 <- LoadInteger '1'
    v218 <- LoadInteger '2'
    v219 <- LoadInteger '3'
    v220 <- CreateArray [v217, v218, v219]
    v221 <- CreateNamedVariable 'a', 'const', v220
    v222 <- LoadInteger '0'
    v223 <- CreateNamedVariable 'callCount', 'let', v222
    v224 <- LoadString '1,2,777'
    BeginObjectLiteral
        BeginObjectLiteralMethod `toString` -> v225
            v226 <- UnaryOperation v223, '++'
            v227 <- CallMethod v221, 'pop', []
            v228 <- CreateNamedVariable 'Array', 'none'
            v229 <- GetProperty v228, 'prototype'
            v230 <- LoadString '2'
            BeginObjectLiteral
                BeginObjectLiteralMethod `get` -> v231
                    v232 <- LoadInteger '777'
                    Return v232
                EndObjectLiteralMethod
            v233 <- EndObjectLiteral
            v234 <- CreateNamedVariable 'Object', 'none'
            v235 <- CallMethod v234, 'defineProperty', [v229, v230, v233]
            v236 <- LoadString ','
            Return v236
        EndObjectLiteralMethod
    v237 <- EndObjectLiteral
    v238 <- CallMethod v221, 'join', [v237]
    v239 <- LoadInteger '1'
    v240 <- LoadString '1,2'
    v241 <- CallMethod v221, 'join', []
EndPlainFunction
v242 <- CallFunction v216, []


const MIN_DICTIONARY_INDEX = 8192;
function ToStringThrows() {
    function TestError() {
    }
    let callCount = 0;
    const a = [1,2];
    const v10 = () => {
        const v14 = {
            toString() {
                callCount++;
                const v13 = new TestError();
                throw v13;
            },
        };
        return a.join(v14);
    };
    v10();
    TestError();
    a.join();
}
ToStringThrows();
function RecursiveJoinCall() {
    const a = [1,2,3];
    let callCount = 0;
    const v34 = {
        toString() {
            callCount++;
            return a.join("-");
        },
    };
    const sep = v34;
    a.join(sep);
    a.join();
}
RecursiveJoinCall();
function ArrayLengthIncreased() {
    const a = [1,2,3];
    let callCount = 0;
    const v56 = {
        toString() {
            callCount++;
            a.push(4);
            return ",";
        },
    };
    a.join(v56);
    a.join();
}
ArrayLengthIncreased();
function ArrayLengthDecreased() {
    const a = [1,2,3];
    let callCount = 0;
    const v75 = {
        toString() {
            callCount++;
            a.pop();
            return ",";
        },
    };
    a.join(v75);
    a.join();
}
ArrayLengthDecreased();
function ArrayEmptied() {
    const a = [1,2,3];
    let callCount = 0;
    const v94 = {
        toString() {
            callCount++;
            a.length = 0;
            return ",";
        },
    };
    a.join(v94);
}
ArrayEmptied();
function NumberDictionaryEmptied() {
    const a = [];
    a[0] = 1;
    a[MIN_DICTIONARY_INDEX] = 2;
    let callCount = 0;
    ("-").repeat(MIN_DICTIONARY_INDEX);
    const v111 = {
        toString() {
            callCount++;
            a.length = 0;
            return "-";
        },
    };
    a.join(v111);
}
NumberDictionaryEmptied();
function NumberDictionaryEmptiedEmptySeparator() {
    const a = [];
    a[0] = 1;
    a[MIN_DICTIONARY_INDEX] = 2;
    let callCount = 0;
    ("").repeat(MIN_DICTIONARY_INDEX);
    const v128 = {
        toString() {
            callCount++;
            a.length = 0;
            return "";
        },
    };
    a.join(v128);
}
NumberDictionaryEmptiedEmptySeparator();
function ElementsKindSmiToDoubles() {
    const a = [1,2,3];
    let callCount = 0;
    const v145 = {
        toString() {
            callCount++;
            a[0] = 1.5;
            return ",";
        },
    };
    a.join(v145);
    a.join();
}
ElementsKindSmiToDoubles();
function ElementsKindDoublesToObjects() {
    const a = [1.5,2.5,3.5];
    let callCount = 0;
    const v164 = {
        toString() {
            callCount++;
            a[0] = "one";
            return ",";
        },
    };
    a.join(v164);
    a.join();
}
ElementsKindDoublesToObjects();
function ArrayIsNoLongerFast() {
    const a = [1,2,3];
    let callCount = 0;
    const v188 = {
        toString() {
            callCount++;
            const v184 = {
                get() {
                    return 666;
                },
            };
            Object.defineProperty(a, "0", v184);
            return ",";
        },
    };
    a.join(v188);
    a.join();
}
ArrayIsNoLongerFast();
function ArrayPrototypeUnset() {
    const a = [1,2];
    a.length = 3;
    let callCount = 0;
    const v208 = {
        toString() {
            callCount++;
            a.__proto__ = { 2: 4 };
            return ",";
        },
    };
    a.join(v208);
    a.__proto__ = Array.prototype;
    a.join();
}
ArrayPrototypeUnset();
function ArrayPrototypeIsNoLongerFast() {
    const a = [1,2,3];
    let callCount = 0;
    const v237 = {
        toString() {
            callCount++;
            a.pop();
            const v229 = Array.prototype;
            const v233 = {
                get() {
                    return 777;
                },
            };
            Object.defineProperty(v229, "2", v233);
            return ",";
        },
    };
    a.join(v237);
    a.join();
}
ArrayPrototypeIsNoLongerFast();

FuzzIL program written to corpus/array-join-separator-tostring-side-effects.fzil
