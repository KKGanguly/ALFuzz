v0 <- CreateArray []
v1 <- CreateNamedVariable 'tests', 'var', v0
v2 <- BeginPlainFunction -> v3
    v4 <- LoadInteger '5'
    v5 <- LoadInteger '6'
    v6 <- LoadInteger '2'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v4
        ObjectLiteralAddElement `1`, v5
        ObjectLiteralAddProperty `length`, v6
    v7 <- EndObjectLiteral
    v8 <- CreateNamedVariable 'myObject', 'var', v7
    v9 <- Construct v3, [v8]
    v10 <- CreateNamedVariable 'arr', 'none'
    Reassign v10, v9
    v11 <- LoadInteger '2'
    v12 <- CreateNamedVariable 'arr', 'none'
    v13 <- GetProperty v12, 'length'
    v14 <- LoadInteger '5'
    v15 <- GetElement v12, '0'
    v16 <- LoadInteger '6'
    v17 <- GetElement v12, '1'
EndPlainFunction
v18 <- CallMethod v1, 'push', [v2]
v19 <- BeginPlainFunction -> v20
    BeginObjectLiteral
    v21 <- EndObjectLiteral
    v22 <- CreateNamedVariable 'myObject', 'var', v21
    v23 <- LoadInteger '128'
    v24 <- CreateNamedVariable 'n', 'const', v23
    BeginForLoopInitializer
        v25 <- LoadInteger '0'
    BeginForLoopCondition -> v26
        v27 <- Compare v26, '<', v24
    BeginForLoopAfterthought v27 -> v28
        v29 <- UnaryOperation v28, '++'
    BeginForLoopBody -> v30
        SetComputedProperty v22, v30, v30
    EndForLoop
    SetProperty v22, 'length', v24
    v31 <- Construct v20, [v22]
    v32 <- CreateNamedVariable 'arr', 'none'
    Reassign v32, v31
    v33 <- CreateNamedVariable 'arr', 'none'
    v34 <- GetProperty v33, 'length'
    BeginForLoopInitializer
        v35 <- LoadInteger '0'
    BeginForLoopCondition -> v36
        v37 <- Compare v36, '<', v24
    BeginForLoopAfterthought v37 -> v38
        v39 <- UnaryOperation v38, '++'
    BeginForLoopBody -> v40
        v41 <- GetComputedProperty v33, v40
    EndForLoop
EndPlainFunction
v42 <- CallMethod v1, 'push', [v19]
v43 <- BeginPlainFunction -> v44
    BeginObjectLiteral
        BeginObjectLiteralMethod `valueOf` -> v45
            v46 <- LoadInteger '20'
            v47 <- CreateNamedVariable 'arr', 'none'
            SetElement v47, '1', v46
            v48 <- LoadInteger '1'
            Return v48
        EndObjectLiteralMethod
    v49 <- EndObjectLiteral
    v50 <- LoadInteger '2'
    v51 <- CreateArray [v49, v50]
    v52 <- CreateNamedVariable 'arr', 'var', v51
    v53 <- Construct v44, [v52]
    v54 <- CreateNamedVariable 'ta', 'var', v53
    v55 <- LoadInteger '1'
    v56 <- GetElement v54, '0'
    v57 <- LoadInteger '2'
    v58 <- GetElement v54, '1'
EndPlainFunction
v59 <- CallMethod v1, 'push', [v43]
v60 <- BeginPlainFunction -> v61
    BeginObjectLiteral
        BeginObjectLiteralMethod `valueOf` -> v62
            v63 <- LoadInteger '20'
            v64 <- CreateNamedVariable 'arr', 'none'
            SetElement v64, '1', v63
            v65 <- LoadInteger '1'
            Return v65
        EndObjectLiteralMethod
    v66 <- EndObjectLiteral
    v67 <- LoadInteger '2'
    v68 <- LoadUndefined
    v69 <- LoadInteger '4'
    v70 <- CreateArray [v66, v67, v68, v69]
    v71 <- CreateNamedVariable 'arr', 'var', v70
    v72 <- Construct v61, [v71]
    v73 <- CreateNamedVariable 'ta', 'var', v72
    v74 <- LoadInteger '1'
    v75 <- GetElement v73, '0'
    v76 <- LoadInteger '2'
    v77 <- GetElement v73, '1'
    v78 <- LoadInteger '4'
    v79 <- GetElement v73, '3'
EndPlainFunction
v80 <- CallMethod v1, 'push', [v60]
v81 <- BeginPlainFunction -> v82
    v83 <- LoadInteger '0'
    v84 <- LoadInteger '1'
    v85 <- LoadUndefined
    v86 <- LoadInteger '3'
    v87 <- CreateArray [v83, v84, v85, v86]
    v88 <- CreateNamedVariable 'arr', 'var', v87
    v89 <- Construct v82, [v88]
    v90 <- CreateNamedVariable 'ta', 'var', v89
    v91 <- LoadInteger '0'
    v92 <- LoadInteger '1'
    v93 <- CreateNamedVariable 'defaultValue', 'none'
    v94 <- CallFunction v93, [v82]
    v95 <- LoadInteger '3'
    v96 <- CreateArray [v91, v92, v94, v95]
EndPlainFunction
v97 <- CallMethod v1, 'push', [v81]
v98 <- BeginPlainFunction -> v99
    v100 <- LoadInteger '0'
    v101 <- LoadInteger '1'
    v102 <- LoadUndefined
    v103 <- LoadInteger '3'
    v104 <- CreateArray [v100, v101, v102, v103]
    v105 <- CreateNamedVariable 'arr', 'var', v104
    v106 <- Construct v99, [v105]
    v107 <- CreateNamedVariable 'ta', 'var', v106
    v108 <- LoadInteger '0'
    v109 <- LoadInteger '1'
    v110 <- CreateNamedVariable 'defaultValue', 'none'
    v111 <- CallFunction v110, [v99]
    v112 <- LoadInteger '3'
    v113 <- CreateArray [v108, v109, v111, v112]
EndPlainFunction
v114 <- CallMethod v1, 'push', [v98]
v115 <- BeginPlainFunction -> v116
    v117 <- LoadInteger '0'
    v118 <- LoadInteger '1'
    v119 <- LoadUndefined
    v120 <- LoadInteger '3'
    v121 <- CreateArray [v117, v118, v119, v120]
    v122 <- CreateNamedVariable 'arr', 'var', v121
    v123 <- LoadInteger '2'
    BeginObjectLiteral
        ObjectLiteralAddElement `2`, v123
    v124 <- EndObjectLiteral
    v125 <- CreateNamedVariable 'Object', 'none'
    v126 <- CallMethod v125, 'setPrototypeOf', [v122, v124]
    v127 <- Construct v116, [v122]
    v128 <- CreateNamedVariable 'ta', 'var', v127
    v129 <- LoadInteger '0'
    v130 <- LoadInteger '1'
    v131 <- LoadInteger '2'
    v132 <- LoadInteger '3'
    v133 <- CreateArray [v129, v130, v131, v132]
EndPlainFunction
v134 <- CallMethod v1, 'push', [v115]
v135 <- BeginPlainFunction -> v136
    v137 <- LoadInteger '0'
    v138 <- LoadInteger '1'
    v139 <- LoadUndefined
    v140 <- LoadInteger '3'
    v141 <- CreateArray [v137, v138, v139, v140]
    v142 <- CreateNamedVariable 'arr', 'var', v141
    v143 <- CreateNamedVariable 'Proxy', 'none'
    v144 <- CreateArray []
    v145 <- BeginPlainFunction -> v146, v147
        v148 <- CreateNamedVariable 'Symbol', 'none'
        v149 <- GetProperty v148, 'iterator'
        v150 <- Compare v147, '===', v149
        BeginIf v150
            v151 <- LoadUndefined
            Return v151
        EndIf
        v152 <- LoadInteger '2'
        v153 <- Compare v147, '==', v152
        BeginIf v153
            v154 <- LoadInteger '2'
            Return v154
        EndIf
        v155 <- GetComputedProperty v146, v147
        Return v155
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v145
    v156 <- EndObjectLiteral
    v157 <- Construct v143, [v144, v156]
    v158 <- CreateNamedVariable 'proxy', 'var', v157
    v159 <- CreateNamedVariable 'Object', 'none'
    v160 <- CallMethod v159, 'setPrototypeOf', [v142, v158]
    v161 <- Construct v136, [v142]
    v162 <- CreateNamedVariable 'ta', 'var', v161
    v163 <- LoadInteger '0'
    v164 <- LoadInteger '1'
    v165 <- LoadInteger '2'
    v166 <- LoadInteger '3'
    v167 <- CreateArray [v163, v164, v165, v166]
EndPlainFunction
v168 <- CallMethod v1, 'push', [v135]
v169 <- BeginPlainFunction -> v170
    v171 <- CreateNamedVariable 'Array', 'none'
    v172 <- BeginClassDefinition v171
    EndClassDefinition
    v173 <- LoadInteger '0'
    v174 <- LoadInteger '1'
    v175 <- Construct v172, [v173, v174]
    v176 <- CreateNamedVariable 'arr', 'var', v175
    v177 <- LoadInteger '3'
    SetElement v176, '3', v177
    v178 <- Construct v170, [v176]
    v179 <- CreateNamedVariable 'ta', 'var', v178
    v180 <- LoadInteger '0'
    v181 <- LoadInteger '1'
    v182 <- CreateNamedVariable 'defaultValue', 'none'
    v183 <- CallFunction v182, [v170]
    v184 <- LoadInteger '3'
    v185 <- CreateArray [v180, v181, v183, v184]
EndPlainFunction
v186 <- CallMethod v1, 'push', [v169]
v187 <- BeginPlainFunction -> v188
    v189 <- LoadInteger '1'
    v190 <- LoadInteger '2'
    v191 <- LoadInteger '3'
    v192 <- CreateArray [v189, v190, v191]
    v193 <- CreateNamedVariable 'arr', 'var', v192
    v194 <- LoadUndefined
    v195 <- CreateNamedVariable 'Symbol', 'none'
    v196 <- GetProperty v195, 'iterator'
    SetComputedProperty v193, v196, v194
    v197 <- LoadString '2'
    BeginObjectLiteral
        BeginObjectLiteralMethod `get` -> v198
            v199 <- LoadInteger '22'
            Return v199
        EndObjectLiteralMethod
    v200 <- EndObjectLiteral
    v201 <- CreateNamedVariable 'Object', 'none'
    v202 <- CallMethod v201, 'defineProperty', [v193, v197, v200]
    v203 <- Construct v188, [v193]
    v204 <- CreateNamedVariable 'ta', 'var', v203
    v205 <- LoadInteger '1'
    v206 <- LoadInteger '2'
    v207 <- LoadInteger '22'
    v208 <- CreateArray [v205, v206, v207]
EndPlainFunction
v209 <- CallMethod v1, 'push', [v187]
v210 <- BeginPlainFunction -> v211
    v212 <- LoadInteger '1'
    v213 <- LoadInteger '2'
    v214 <- LoadInteger '3'
    v215 <- CreateArray [v212, v213, v214]
    v216 <- CreateNamedVariable 'arr', 'var', v215
    v217 <- LoadNull
    v218 <- CreateNamedVariable 'Symbol', 'none'
    v219 <- GetProperty v218, 'iterator'
    SetComputedProperty v216, v219, v217
    v220 <- CreateNamedVariable 'Uint8Array', 'none'
    v221 <- Construct v220, [v216]
    v222 <- CreateNamedVariable 'ta', 'var', v221
    v223 <- LoadInteger '1'
    v224 <- LoadInteger '2'
    v225 <- LoadInteger '3'
    v226 <- CreateArray [v223, v224, v225]
EndPlainFunction
v227 <- CallMethod v1, 'push', [v210]
v228 <- BeginPlainFunction -> v229
    v230 <- LoadInteger '1'
    v231 <- LoadInteger '2'
    v232 <- LoadInteger '3'
    v233 <- CreateArray [v230, v231, v232]
    v234 <- CreateNamedVariable 'arr', 'var', v233
    v235 <- LoadUndefined
    v236 <- CreateNamedVariable 'Symbol', 'none'
    v237 <- GetProperty v236, 'iterator'
    SetComputedProperty v234, v237, v235
    v238 <- CreateNamedVariable 'Uint8Array', 'none'
    v239 <- Construct v238, [v234]
    v240 <- CreateNamedVariable 'ta', 'var', v239
    v241 <- LoadInteger '1'
    v242 <- LoadInteger '2'
    v243 <- LoadInteger '3'
    v244 <- CreateArray [v241, v242, v243]
EndPlainFunction
v245 <- CallMethod v1, 'push', [v228]
v246 <- BeginPlainFunction -> v247
    v248 <- LoadInteger '1'
    v249 <- LoadInteger '2'
    v250 <- LoadInteger '3'
    v251 <- CreateArray [v248, v249, v250]
    v252 <- CreateNamedVariable 'arr', 'var', v251
    v253 <- LoadInteger '1'
    v254 <- CreateNamedVariable 'Symbol', 'none'
    v255 <- GetProperty v254, 'iterator'
    SetComputedProperty v252, v255, v253
    v256 <- BeginArrowFunction -> 
        v257 <- CreateNamedVariable 'Uint8Array', 'none'
        v258 <- Construct v257, [v252]
        Return v258
    EndArrowFunction
    v259 <- CallFunction v256, []
    v260 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v261 <- CallMethod v1, 'push', [v246]
v262 <- BeginPlainFunction -> v263
    v264 <- LoadInteger '64'
    v265 <- CreateNamedVariable 'n', 'var', v264
    v266 <- CreateArray []
    v267 <- CreateNamedVariable 'jsArray', 'var', v266
    BeginForLoopInitializer
        v268 <- LoadInteger '0'
    BeginForLoopCondition -> v269
        v270 <- Compare v269, '<', v265
    BeginForLoopAfterthought v270 -> v271
        v272 <- UnaryOperation v271, '++'
    BeginForLoopBody -> v273
        SetComputedProperty v267, v273, v273
    EndForLoop
    v274 <- Construct v263, [v267]
    v275 <- CreateNamedVariable 'arr', 'var', v274
    v276 <- GetProperty v275, 'length'
    BeginForLoopInitializer
        v277 <- LoadInteger '0'
    BeginForLoopCondition -> v278
        v279 <- Compare v278, '<', v265
    BeginForLoopAfterthought v279 -> v280
        v281 <- UnaryOperation v280, '++'
    BeginForLoopBody -> v282
        v283 <- GetComputedProperty v275, v282
    EndForLoop
EndPlainFunction
v284 <- CallMethod v1, 'push', [v262]
v285 <- BeginPlainFunction -> v286
    v287 <- LoadInteger '64'
    v288 <- CreateNamedVariable 'n', 'var', v287
    v289 <- Construct v286, [v288]
    v290 <- CreateNamedVariable 'ta', 'var', v289
    BeginForLoopInitializer
        v291 <- LoadInteger '0'
    BeginForLoopCondition -> v292
        v293 <- GetProperty v290, 'length'
        v294 <- Compare v292, '<', v293
    BeginForLoopAfterthought v294 -> v295
        v296 <- UnaryOperation v295, '++'
    BeginForLoopBody -> v297
        SetComputedProperty v290, v297, v297
    EndForLoop
    v298 <- Construct v286, [v290]
    v299 <- CreateNamedVariable 'arr', 'var', v298
    v300 <- GetProperty v299, 'length'
    BeginForLoopInitializer
        v301 <- LoadInteger '0'
    BeginForLoopCondition -> v302
        v303 <- Compare v302, '<', v288
    BeginForLoopAfterthought v303 -> v304
        v305 <- UnaryOperation v304, '++'
    BeginForLoopBody -> v306
        v307 <- GetComputedProperty v299, v306
    EndForLoop
EndPlainFunction
v308 <- CallMethod v1, 'push', [v285]
v309 <- BeginPlainFunction -> v310
    v311 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v312 <- LoadInteger '16'
    v313 <- Construct v311, [v312]
    v314 <- CreateNamedVariable 'b', 'var', v313
    v315 <- Construct v310, [v314]
    v316 <- CreateNamedVariable 'a1', 'var', v315
    v317 <- LoadInteger '0'
    v318 <- CreateNamedVariable 'constructor_read', 'var', v317
    v319 <- GetProperty v314, 'constructor'
    v320 <- CreateNamedVariable 'cons', 'var', v319
    v321 <- LoadString 'constructor'
    v322 <- BeginPlainFunction -> 
        v323 <- UnaryOperation v318, '++'
        Return v320
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v322
    v324 <- EndObjectLiteral
    v325 <- CreateNamedVariable 'Object', 'none'
    v326 <- CallMethod v325, 'defineProperty', [v314, v321, v324]
    v327 <- Construct v310, [v316]
    v328 <- CreateNamedVariable 'a2', 'var', v327
    v329 <- LoadInteger '1'
EndPlainFunction
v330 <- CallMethod v1, 'push', [v309]
v331 <- BeginPlainFunction -> v332
    v333 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v334 <- LoadInteger '16'
    v335 <- Construct v333, [v334]
    v336 <- CreateNamedVariable 'b', 'var', v335
    v337 <- Construct v332, [v336]
    v338 <- CreateNamedVariable 'a1', 'var', v337
    v339 <- LoadInteger '0'
    v340 <- CreateNamedVariable 'constructor_read', 'var', v339
    v341 <- GetProperty v336, 'constructor'
    v342 <- CreateNamedVariable 'cons', 'var', v341
    v343 <- LoadString 'constructor'
    v344 <- BeginPlainFunction -> 
        Return v342
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v344
    v345 <- EndObjectLiteral
    v346 <- CreateNamedVariable 'Object', 'none'
    v347 <- CallMethod v346, 'defineProperty', [v336, v343, v345]
    v348 <- BeginArrowFunction -> 
        v349 <- Construct v332, [v338]
        Return v349
    EndArrowFunction
    v350 <- CallFunction v348, []
EndPlainFunction
v351 <- CallMethod v1, 'push', [v331]
v352 <- BeginPlainFunction -> v353
    v354 <- LoadInteger '5'
    v355 <- LoadInteger '6'
    v356 <- LoadInteger '65535'
    v357 <- LoadInteger '1'
    v358 <- BinaryOperation v356, '+', v357
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v354
        ObjectLiteralAddElement `1`, v355
        ObjectLiteralAddProperty `length`, v358
    v359 <- EndObjectLiteral
    v360 <- CreateNamedVariable 'myObject', 'var', v359
    v361 <- BeginPlainFunction -> 
        v362 <- Construct v353, [v360]
    EndPlainFunction
    v363 <- CallFunction v361, []
    v364 <- CreateNamedVariable 'RangeError', 'none'
EndPlainFunction
v365 <- CallMethod v1, 'push', [v352]
v366 <- BeginPlainFunction -> v367
    v368 <- LoadInteger '0'
    v369 <- LoadInteger '2'
    v370 <- LoadInteger '3'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v368
        ObjectLiteralAddElement `2`, v369
        ObjectLiteralAddProperty `length`, v370
    v371 <- EndObjectLiteral
    v372 <- CreateNamedVariable 'source', 'var', v371
    v373 <- CreateNamedVariable 'Proxy', 'none'
    BeginObjectLiteral
    v374 <- EndObjectLiteral
    v375 <- Construct v373, [v372, v374]
    v376 <- CreateNamedVariable 'proxy', 'var', v375
    v377 <- Construct v367, [v376]
    v378 <- CreateNamedVariable 'converted', 'var', v377
    v379 <- LoadInteger '0'
    v380 <- CreateNamedVariable 'defaultValue', 'none'
    v381 <- CallFunction v380, [v367]
    v382 <- LoadInteger '2'
    v383 <- CreateArray [v379, v381, v382]
EndPlainFunction
v384 <- CallMethod v1, 'push', [v366]
v385 <- BeginPlainFunction -> v386
    v387 <- BeginPlainFunction -> 
        v388 <- CreateNamedVariable 'TypeError', 'none'
        v389 <- Construct v388, []
        ThrowException v389
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v387
    v390 <- EndObjectLiteral
    v391 <- CreateNamedVariable 'thrower', 'var', v390
    v392 <- LoadInteger '0'
    v393 <- LoadInteger '2'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v392
        ObjectLiteralAddElement `1`, v391
        ObjectLiteralAddProperty `length`, v393
    v394 <- EndObjectLiteral
    v395 <- CreateNamedVariable 'source', 'var', v394
    v396 <- CreateNamedVariable 'Proxy', 'none'
    BeginObjectLiteral
    v397 <- EndObjectLiteral
    v398 <- Construct v396, [v395, v397]
    v399 <- CreateNamedVariable 'proxy', 'var', v398
    v400 <- BeginArrowFunction -> 
        v401 <- Construct v386, [v399]
        Return v401
    EndArrowFunction
    v402 <- CallFunction v400, []
    v403 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v404 <- CallMethod v1, 'push', [v385]
v405 <- BeginPlainFunction -> v406
    v407 <- BeginPlainFunction -> 
        v408 <- CreateNamedVariable 'TypeError', 'none'
        v409 <- Construct v408, []
        ThrowException v409
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v407
    v410 <- EndObjectLiteral
    v411 <- CreateNamedVariable 'thrower', 'var', v410
    v412 <- LoadInteger '0'
    v413 <- LoadInteger '2'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v412
        ObjectLiteralAddElement `1`, v411
        ObjectLiteralAddProperty `length`, v413
    v414 <- EndObjectLiteral
    v415 <- CreateNamedVariable 'obj', 'var', v414
    v416 <- BeginArrowFunction -> 
        v417 <- Construct v406, [v415]
        Return v417
    EndArrowFunction
    v418 <- CallFunction v416, []
    v419 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v420 <- CallMethod v1, 'push', [v405]
v421 <- BeginPlainFunction -> v422
    v423 <- LoadInteger '1'
    v424 <- LoadInteger '2'
    v425 <- LoadInteger '3'
    v426 <- LoadInteger '4'
    v427 <- LoadInteger '127'
    v428 <- CreateArray [v423, v424, v425, v426, v427]
    v429 <- Construct v422, [v428]
    v430 <- CreateNamedVariable 'ta', 'var', v429
    v431 <- LoadInteger '5'
    v432 <- GetProperty v422, 'BYTES_PER_ELEMENT'
    v433 <- BinaryOperation v431, '*', v432
    v434 <- GetProperty v430, 'byteLength'
    v435 <- LoadInteger '1'
    v436 <- LoadInteger '2'
    v437 <- LoadInteger '3'
    v438 <- LoadInteger '4'
    v439 <- LoadInteger '127'
    v440 <- CreateArray [v435, v436, v437, v438, v439]
EndPlainFunction
v441 <- CallMethod v1, 'push', [v421]
v442 <- BeginPlainFunction -> v443
    v444 <- LoadInteger '4'
    v445 <- CreateNamedVariable 'TestOffsetIsUsedRunner', 'none'
    v446 <- CallFunction v445, [v443, v444]
    v447 <- LoadInteger '16'
    v448 <- CallFunction v445, [v443, v447]
    v449 <- LoadInteger '32'
    v450 <- CallFunction v445, [v443, v449]
    v451 <- LoadInteger '128'
    v452 <- CallFunction v445, [v443, v451]
EndPlainFunction
v453 <- CallMethod v1, 'push', [v442]
v454 <- BeginPlainFunction -> v455
    v456 <- LoadInteger '65535'
    v457 <- UnaryOperation '-', v456
    v458 <- LoadInteger '2'
    v459 <- BinaryOperation v457, '-', v458
    BeginObjectLiteral
        ObjectLiteralAddProperty `length`, v459
    v460 <- EndObjectLiteral
    v461 <- Construct v455, [v460]
    v462 <- CreateNamedVariable 'ta', 'var', v461
    v463 <- LoadInteger '0'
    v464 <- GetProperty v462, 'length'
EndPlainFunction
v465 <- CallMethod v1, 'push', [v454]
v466 <- BeginPlainFunction -> v467, v468
    v469 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v470 <- GetProperty v467, 'BYTES_PER_ELEMENT'
    v471 <- BinaryOperation v470, '*', v468
    v472 <- Construct v469, [v471]
    v473 <- CreateNamedVariable 'buffer', 'var', v472
    v474 <- Construct v467, [v473]
    v475 <- CreateNamedVariable 'whole_ta', 'var', v474
    v476 <- GetProperty v475, 'length'
    BeginForLoopInitializer
        v477 <- LoadInteger '0'
    BeginForLoopCondition -> v478
        v479 <- GetProperty v475, 'length'
        v480 <- Compare v478, '<', v479
    BeginForLoopAfterthought v480 -> v481
        v482 <- UnaryOperation v481, '++'
    BeginForLoopBody -> v483
        SetComputedProperty v475, v483, v483
    EndForLoop
    v484 <- GetProperty v467, 'BYTES_PER_ELEMENT'
    v485 <- BinaryOperation v484, '*', v468
    v486 <- LoadInteger '2'
    v487 <- BinaryOperation v485, '/', v486
    v488 <- Construct v467, [v473, v487]
    v489 <- CreateNamedVariable 'half_ta', 'var', v488
    v490 <- LoadInteger '2'
    v491 <- BinaryOperation v468, '/', v490
    v492 <- GetProperty v489, 'length'
    v493 <- Construct v467, [v489]
    v494 <- CreateNamedVariable 'arr', 'var', v493
    v495 <- LoadInteger '2'
    v496 <- BinaryOperation v468, '/', v495
    v497 <- GetProperty v494, 'length'
    BeginForLoopInitializer
        v498 <- LoadInteger '0'
    BeginForLoopCondition -> v499
        v500 <- GetProperty v494, 'length'
        v501 <- Compare v499, '<', v500
    BeginForLoopAfterthought v501 -> v502
        v503 <- UnaryOperation v502, '++'
    BeginForLoopBody -> v504
        v505 <- LoadInteger '2'
        v506 <- BinaryOperation v468, '/', v505
        v507 <- BinaryOperation v506, '+', v504
        v508 <- GetComputedProperty v494, v504
    EndForLoop
EndPlainFunction
v509 <- BeginPlainFunction -> v510
    v511 <- CreateNamedVariable 'Float32Array', 'none'
    v512 <- Compare v510, '==', v511
    v513 <- CreateNamedVariable 'Float64Array', 'none'
    v514 <- Compare v510, '==', v513
    v515 <- BinaryOperation v512, '||', v514
    BeginIf v515
        v516 <- CreateNamedVariable 'NaN', 'none'
        Return v516
    EndIf
    v517 <- LoadInteger '0'
    Return v517
EndPlainFunction
v518 <- BeginArrowFunction -> v519
    v520 <- CreateNamedVariable 'Test', 'none'
    v521 <- CallFunction v520, [v519]
    Return v521
EndArrowFunction
v522 <- CallMethod v1, 'forEach', [v518]
v523 <- BeginPlainFunction -> v524
    v525 <- CreateNamedVariable 'Uint8Array', 'none'
    v526 <- CallFunction v524, [v525]
    v527 <- CreateNamedVariable 'Int8Array', 'none'
    v528 <- CallFunction v524, [v527]
    v529 <- CreateNamedVariable 'Uint16Array', 'none'
    v530 <- CallFunction v524, [v529]
    v531 <- CreateNamedVariable 'Int16Array', 'none'
    v532 <- CallFunction v524, [v531]
    v533 <- CreateNamedVariable 'Uint32Array', 'none'
    v534 <- CallFunction v524, [v533]
    v535 <- CreateNamedVariable 'Int32Array', 'none'
    v536 <- CallFunction v524, [v535]
    v537 <- CreateNamedVariable 'Float32Array', 'none'
    v538 <- CallFunction v524, [v537]
    v539 <- CreateNamedVariable 'Float64Array', 'none'
    v540 <- CallFunction v524, [v539]
    v541 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
    v542 <- CallFunction v524, [v541]
EndPlainFunction
v543 <- BeginPlainFunction -> 
    v544 <- CreateNamedVariable 'Int8Array', 'none'
    v545 <- LoadInteger '1'
    v546 <- UnaryOperation '-', v545
    v547 <- LoadInteger '0'
    v548 <- LoadFloat '1.1'
    v549 <- LoadInteger '255'
    v550 <- LoadInteger '256'
    v551 <- CreateArray [v546, v547, v548, v549, v550]
    v552 <- Construct v544, [v551]
    v553 <- CreateNamedVariable 'arr', 'var', v552
    v554 <- LoadInteger '1'
    v555 <- UnaryOperation '-', v554
    v556 <- LoadInteger '0'
    v557 <- LoadInteger '1'
    v558 <- LoadInteger '1'
    v559 <- UnaryOperation '-', v558
    v560 <- LoadInteger '0'
    v561 <- CreateArray [v555, v556, v557, v559, v560]
    v562 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
    v563 <- LoadInteger '0'
    v564 <- LoadInteger '0'
    v565 <- LoadInteger '1'
    v566 <- LoadInteger '0'
    v567 <- LoadInteger '0'
    v568 <- CreateArray [v563, v564, v565, v566, v567]
    v569 <- Construct v562, [v568]
    v570 <- CreateNamedVariable 'expected', 'var', v569
    v571 <- Construct v562, [v553]
    v572 <- CreateNamedVariable 'converted', 'var', v571
    v573 <- LoadInteger '0'
    v574 <- LoadInteger '0'
    v575 <- LoadInteger '1'
    v576 <- LoadInteger '0'
    v577 <- LoadInteger '0'
    v578 <- CreateArray [v573, v574, v575, v576, v577]
EndPlainFunction
v579 <- CallFunction v543, []
v580 <- BeginPlainFunction -> 
    v581 <- CreateNamedVariable 'Uint8Array', 'none'
    v582 <- LoadInteger '0'
    v583 <- LoadInteger '1'
    v584 <- LoadInteger '127'
    v585 <- LoadInteger '128'
    v586 <- LoadInteger '255'
    v587 <- LoadInteger '256'
    v588 <- CreateArray [v582, v583, v584, v585, v586, v587]
    v589 <- Construct v581, [v588]
    v590 <- CreateNamedVariable 'source', 'var', v589
    v591 <- LoadInteger '0'
    v592 <- LoadInteger '1'
    v593 <- LoadInteger '127'
    v594 <- LoadInteger '128'
    v595 <- LoadInteger '255'
    v596 <- LoadInteger '0'
    v597 <- CreateArray [v591, v592, v593, v594, v595, v596]
    v598 <- CreateNamedVariable 'Int8Array', 'none'
    v599 <- Construct v598, [v590]
    v600 <- CreateNamedVariable 'converted', 'var', v599
    v601 <- LoadInteger '0'
    v602 <- LoadInteger '1'
    v603 <- LoadInteger '127'
    v604 <- LoadInteger '128'
    v605 <- UnaryOperation '-', v604
    v606 <- LoadInteger '1'
    v607 <- UnaryOperation '-', v606
    v608 <- LoadInteger '0'
    v609 <- CreateArray [v601, v602, v603, v605, v607, v608]
EndPlainFunction
v610 <- CallFunction v580, []
v611 <- BeginPlainFunction -> 
    v612 <- CreateNamedVariable 'Uint16Array', 'none'
    v613 <- LoadInteger '0'
    v614 <- LoadInteger '1'
    v615 <- LoadInteger '32767'
    v616 <- LoadInteger '32768'
    v617 <- LoadInteger '65535'
    v618 <- LoadInteger '65536'
    v619 <- CreateArray [v613, v614, v615, v616, v617, v618]
    v620 <- Construct v612, [v619]
    v621 <- CreateNamedVariable 'source', 'var', v620
    v622 <- LoadInteger '0'
    v623 <- LoadInteger '1'
    v624 <- LoadInteger '32767'
    v625 <- LoadInteger '32768'
    v626 <- LoadInteger '65535'
    v627 <- LoadInteger '0'
    v628 <- CreateArray [v622, v623, v624, v625, v626, v627]
    v629 <- CreateNamedVariable 'Int16Array', 'none'
    v630 <- Construct v629, [v621]
    v631 <- CreateNamedVariable 'converted', 'var', v630
    v632 <- LoadInteger '0'
    v633 <- LoadInteger '1'
    v634 <- LoadInteger '32767'
    v635 <- LoadInteger '32768'
    v636 <- UnaryOperation '-', v635
    v637 <- LoadInteger '1'
    v638 <- UnaryOperation '-', v637
    v639 <- LoadInteger '0'
    v640 <- CreateArray [v632, v633, v634, v636, v638, v639]
EndPlainFunction
v641 <- CallFunction v611, []
v642 <- BeginPlainFunction -> 
    v643 <- CreateNamedVariable 'Uint32Array', 'none'
    v644 <- LoadInteger '0'
    v645 <- LoadInteger '1'
    v646 <- LoadInteger '2147483647'
    v647 <- LoadInteger '2147483648'
    v648 <- LoadInteger '4294967295'
    v649 <- LoadInteger '4294967296'
    v650 <- CreateArray [v644, v645, v646, v647, v648, v649]
    v651 <- Construct v643, [v650]
    v652 <- CreateNamedVariable 'source', 'var', v651
    v653 <- LoadInteger '0'
    v654 <- LoadInteger '1'
    v655 <- LoadInteger '2147483647'
    v656 <- LoadInteger '2147483648'
    v657 <- LoadInteger '4294967295'
    v658 <- LoadInteger '0'
    v659 <- CreateArray [v653, v654, v655, v656, v657, v658]
    v660 <- CreateNamedVariable 'Int32Array', 'none'
    v661 <- Construct v660, [v652]
    v662 <- CreateNamedVariable 'converted', 'var', v661
    v663 <- LoadInteger '0'
    v664 <- LoadInteger '1'
    v665 <- LoadInteger '2147483647'
    v666 <- LoadInteger '2147483648'
    v667 <- UnaryOperation '-', v666
    v668 <- LoadInteger '1'
    v669 <- UnaryOperation '-', v668
    v670 <- LoadInteger '0'
    v671 <- CreateArray [v663, v664, v665, v667, v669, v670]
EndPlainFunction
v672 <- CallFunction v642, []


var tests = [];
function TestConstructSmallObject(a3) {
    var myObject = { 0: 5, 1: 6, length: 2 };
    const v9 = new a3(myObject);
    arr = v9;
    arr.length;
    arr[0];
    arr[1];
}
tests.push(TestConstructSmallObject);
function TestConstructLargeObject(a20) {
    var myObject = {};
    const n = 128;
    for (let i26 = 0; i26 < n; i26++) {
        myObject[i26] = i26;
    }
    myObject.length = n;
    const v31 = new a20(myObject);
    arr = v31;
    arr.length;
    for (let i36 = 0; i36 < n; i36++) {
        arr[i36];
    }
}
tests.push(TestConstructLargeObject);
function TestConstructFromArrayWithSideEffects(a44) {
    const v49 = {
        valueOf() {
            arr[1] = 20;
            return 1;
        },
    };
    var arr = [v49,2];
    const v53 = new a44(arr);
    var ta = v53;
    ta[0];
    ta[1];
}
tests.push(TestConstructFromArrayWithSideEffects);
function TestConstructFromArrayWithSideEffectsHoley(a61) {
    const v66 = {
        valueOf() {
            arr[1] = 20;
            return 1;
        },
    };
    var arr = [v66,2,,4];
    const v72 = new a61(arr);
    var ta = v72;
    ta[0];
    ta[1];
    ta[3];
}
tests.push(TestConstructFromArrayWithSideEffectsHoley);
function TestConstructFromArrayHoleySmi(a82) {
    var arr = [0,1,,3];
    const v89 = new a82(arr);
    var ta = v89;
    [0,1,defaultValue(a82),3];
}
tests.push(TestConstructFromArrayHoleySmi);
function TestConstructFromArrayHoleyDouble(a99) {
    var arr = [0,1,,3];
    const v106 = new a99(arr);
    var ta = v106;
    [0,1,defaultValue(a99),3];
}
tests.push(TestConstructFromArrayHoleyDouble);
function TestConstructFromArrayHoleySmiWithOtherPrototype(a116) {
    var arr = [0,1,,3];
    Object.setPrototypeOf(arr, { 2: 2 });
    const v127 = new a116(arr);
    var ta = v127;
    [0,1,2,3];
}
tests.push(TestConstructFromArrayHoleySmiWithOtherPrototype);
function TestConstructFromArrayWithProxyPrototype(a136) {
    var arr = [0,1,,3];
    const v144 = [];
    function f145(a146, a147) {
        if (a147 === Symbol.iterator) {
            return undefined;
        }
        if (a147 == 2) {
            return 2;
        }
        return a146[a147];
    }
    const v157 = new Proxy(v144, { get: f145 });
    var proxy = v157;
    Object.setPrototypeOf(arr, proxy);
    const v161 = new a136(arr);
    var ta = v161;
    [0,1,2,3];
}
tests.push(TestConstructFromArrayWithProxyPrototype);
function TestConstructFromArrayHoleySmiWithSubclass(a170) {
    class C172 extends Array {
    }
    const v175 = new C172(0, 1);
    var arr = v175;
    arr[3] = 3;
    const v178 = new a170(arr);
    var ta = v178;
    [0,1,defaultValue(a170),3];
}
tests.push(TestConstructFromArrayHoleySmiWithSubclass);
function TestConstructFromArrayNoIteratorWithGetter(a188) {
    var arr = [1,2,3];
    arr[Symbol.iterator] = undefined;
    const v200 = {
        get() {
            return 22;
        },
    };
    Object.defineProperty(arr, "2", v200);
    const v203 = new a188(arr);
    var ta = v203;
    [1,2,22];
}
tests.push(TestConstructFromArrayNoIteratorWithGetter);
function TestConstructFromArrayNullIterator(a211) {
    var arr = [1,2,3];
    arr[Symbol.iterator] = null;
    const v221 = new Uint8Array(arr);
    var ta = v221;
    [1,2,3];
}
tests.push(TestConstructFromArrayNullIterator);
function TestConstructFromArrayUndefinedIterator(a229) {
    var arr = [1,2,3];
    arr[Symbol.iterator] = undefined;
    const v239 = new Uint8Array(arr);
    var ta = v239;
    [1,2,3];
}
tests.push(TestConstructFromArrayUndefinedIterator);
function TestConstructFromArrayNonCallableIterator(a247) {
    var arr = [1,2,3];
    arr[Symbol.iterator] = 1;
    const v256 = () => {
        const v258 = new Uint8Array(arr);
        return v258;
    };
    v256();
}
tests.push(TestConstructFromArrayNonCallableIterator);
function TestConstructFromArray(a263) {
    var n = 64;
    var jsArray = [];
    for (let i269 = 0; i269 < n; i269++) {
        jsArray[i269] = i269;
    }
    const v274 = new a263(jsArray);
    var arr = v274;
    arr.length;
    for (let i278 = 0; i278 < n; i278++) {
        arr[i278];
    }
}
tests.push(TestConstructFromArray);
function TestConstructFromTypedArray(a286) {
    var n = 64;
    const v289 = new a286(n);
    var ta = v289;
    for (let i292 = 0; i292 < ta.length; i292++) {
        ta[i292] = i292;
    }
    const v298 = new a286(ta);
    var arr = v298;
    arr.length;
    for (let i302 = 0; i302 < n; i302++) {
        arr[i302];
    }
}
tests.push(TestConstructFromTypedArray);
function TestFromTypedArraySpecies(a310) {
    const v313 = new ArrayBuffer(16);
    var b = v313;
    const v315 = new a310(b);
    var a1 = v315;
    var constructor_read = 0;
    var cons = b.constructor;
    function f322() {
        constructor_read++;
        return cons;
    }
    Object.defineProperty(b, "constructor", { get: f322 });
    const v327 = new a310(a1);
    var a2 = v327;
}
tests.push(TestFromTypedArraySpecies);
function TestFromTypedArraySpeciesDetachsBuffer(a332) {
    const v335 = new ArrayBuffer(16);
    var b = v335;
    const v337 = new a332(b);
    var a1 = v337;
    var constructor_read = 0;
    var cons = b.constructor;
    function f344() {
        return cons;
    }
    Object.defineProperty(b, "constructor", { get: f344 });
    const v348 = () => {
        const v349 = new a332(a1);
        return v349;
    };
    v348();
}
tests.push(TestFromTypedArraySpeciesDetachsBuffer);
function TestLengthIsMaxSmi(a353) {
    const v358 = 65535 + 1;
    var myObject = { 0: 5, 1: 6, length: v358 };
    function f361() {
        new a353(myObject);
    }
    f361();
}
tests.push(TestLengthIsMaxSmi);
function TestProxyHoleConverted(a367) {
    var source = { 0: 0, 2: 2, length: 3 };
    const v375 = new Proxy(source, {});
    var proxy = v375;
    const v377 = new a367(proxy);
    var converted = v377;
    [0,defaultValue(a367),2];
}
tests.push(TestProxyHoleConverted);
function TestProxyToObjectValueOfCalled(a386) {
    function f387() {
        const v389 = new TypeError();
        throw v389;
    }
    var thrower = { valueOf: f387 };
    var source = { 0: 0, 1: thrower, length: 2 };
    const v398 = new Proxy(source, {});
    var proxy = v398;
    const v400 = () => {
        const v401 = new a386(proxy);
        return v401;
    };
    v400();
}
tests.push(TestProxyToObjectValueOfCalled);
function TestObjectValueOfCalled(a406) {
    function f407() {
        const v409 = new TypeError();
        throw v409;
    }
    var thrower = { valueOf: f407 };
    var obj = { 0: 0, 1: thrower, length: 2 };
    const v416 = () => {
        const v417 = new a406(obj);
        return v417;
    };
    v416();
}
tests.push(TestObjectValueOfCalled);
function TestSmiPackedArray(a422) {
    const v429 = new a422([1,2,3,4,127]);
    var ta = v429;
    5 * a422.BYTES_PER_ELEMENT;
    ta.byteLength;
    [1,2,3,4,127];
}
tests.push(TestSmiPackedArray);
function TestOffsetIsUsed(a443) {
    TestOffsetIsUsedRunner(a443, 4);
    TestOffsetIsUsedRunner(a443, 16);
    TestOffsetIsUsedRunner(a443, 32);
    TestOffsetIsUsedRunner(a443, 128);
}
tests.push(TestOffsetIsUsed);
function TestLengthIsNonSmiNegativeNumber(a455) {
    const v459 = -65535 - 2;
    const v461 = new a455({ length: v459 });
    var ta = v461;
    ta.length;
}
tests.push(TestLengthIsNonSmiNegativeNumber);
function TestOffsetIsUsedRunner(a467, a468) {
    const v472 = new ArrayBuffer(a467.BYTES_PER_ELEMENT * a468);
    var buffer = v472;
    const v474 = new a467(buffer);
    var whole_ta = v474;
    whole_ta.length;
    for (let i478 = 0; i478 < whole_ta.length; i478++) {
        whole_ta[i478] = i478;
    }
    const v488 = new a467(buffer, (a467.BYTES_PER_ELEMENT * a468) / 2);
    var half_ta = v488;
    a468 / 2;
    half_ta.length;
    const v493 = new a467(half_ta);
    var arr = v493;
    a468 / 2;
    arr.length;
    for (let i499 = 0; i499 < arr.length; i499++) {
        (a468 / 2) + i499;
        arr[i499];
    }
}
function defaultValue(a510) {
    if ((a510 == Float32Array) || (a510 == Float64Array)) {
        return NaN;
    }
    return 0;
}
const v518 = (a519) => {
    return Test(a519);
};
tests.forEach(v518);
function Test(a524) {
    a524(Uint8Array);
    a524(Int8Array);
    a524(Uint16Array);
    a524(Int16Array);
    a524(Uint32Array);
    a524(Int32Array);
    a524(Float32Array);
    a524(Float64Array);
    a524(Uint8ClampedArray);
}
function TestUint8ClampedIsNotBitCopied() {
    const v552 = new Int8Array([-1,0,1.1,255,256]);
    var arr = v552;
    [-1,0,1,-1,0];
    const v569 = new Uint8ClampedArray([0,0,1,0,0]);
    var expected = v569;
    const v571 = new Uint8ClampedArray(arr);
    var converted = v571;
    [0,0,1,0,0];
}
TestUint8ClampedIsNotBitCopied();
function TestInt8ArrayCopying() {
    const v589 = new Uint8Array([0,1,127,128,255,256]);
    var source = v589;
    [0,1,127,128,255,0];
    const v599 = new Int8Array(source);
    var converted = v599;
    [0,1,127,-128,-1,0];
}
TestInt8ArrayCopying();
function TestInt16ArrayCopying() {
    const v620 = new Uint16Array([0,1,32767,32768,65535,65536]);
    var source = v620;
    [0,1,32767,32768,65535,0];
    const v630 = new Int16Array(source);
    var converted = v630;
    [0,1,32767,-32768,-1,0];
}
TestInt16ArrayCopying();
function TestInt32ArrayCopying() {
    const v651 = new Uint32Array([0,1,2147483647,2147483648,4294967295,4294967296]);
    var source = v651;
    [0,1,2147483647,2147483648,4294967295,0];
    const v661 = new Int32Array(source);
    var converted = v661;
    [0,1,2147483647,-2147483648,-1,0];
}
TestInt32ArrayCopying();

FuzzIL program written to corpus/typedarray-construct-by-array-like.fzil
