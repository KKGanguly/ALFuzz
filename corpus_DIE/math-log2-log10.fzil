v0 <- BeginPlainFunction -> v1
    v2 <- CreateNamedVariable 'NaN', 'none'
    v3 <- CallFunction v1, [v2]
    v4 <- CreateNamedVariable 'isNaN', 'none'
    v5 <- CallFunction v4, [v3]
    v6 <- CallFunction v1, [v1]
    v7 <- CallFunction v4, [v6]
    v8 <- BeginPlainFunction -> 
        Return v2
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `toString`, v8
    v9 <- EndObjectLiteral
    v10 <- CallFunction v1, [v9]
    v11 <- CallFunction v4, [v10]
    v12 <- BeginPlainFunction -> 
        v13 <- LoadInteger '1'
        v14 <- UnaryOperation '-', v13
        Return v14
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v12
    v15 <- EndObjectLiteral
    v16 <- CallFunction v1, [v15]
    v17 <- CallFunction v4, [v16]
    v18 <- BeginPlainFunction -> 
        v19 <- LoadString 'abc'
        Return v19
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v18
    v20 <- EndObjectLiteral
    v21 <- CallFunction v1, [v20]
    v22 <- CallFunction v4, [v21]
    v23 <- LoadFloat '0.1'
    v24 <- UnaryOperation '-', v23
    v25 <- CallFunction v1, [v24]
    v26 <- CallFunction v4, [v25]
    v27 <- LoadInteger '1'
    v28 <- UnaryOperation '-', v27
    v29 <- CallFunction v1, [v28]
    v30 <- CallFunction v4, [v29]
    v31 <- LoadString '-Infinity'
    v32 <- LoadInteger '0'
    v33 <- CallFunction v1, [v32]
    v34 <- CreateNamedVariable 'String', 'none'
    v35 <- CallFunction v34, [v33]
    v36 <- LoadString '-Infinity'
    v37 <- LoadInteger '0'
    v38 <- UnaryOperation '-', v37
    v39 <- CallFunction v1, [v38]
    v40 <- CallFunction v34, [v39]
    v41 <- LoadInteger '0'
    v42 <- LoadInteger '1'
    v43 <- CallFunction v1, [v42]
    v44 <- LoadString 'Infinity'
    v45 <- CreateNamedVariable 'Infinity', 'none'
    v46 <- CallFunction v1, [v45]
    v47 <- CallFunction v34, [v46]
EndPlainFunction
v48 <- CreateNamedVariable 'Math', 'none'
v49 <- GetProperty v48, 'log10'
v50 <- GetProperty v48, 'log2'
v51 <- CreateArray [v49, v50]
v52 <- CallMethod v51, 'forEach', [v0]
BeginForLoopInitializer
    v53 <- LoadInteger '310'
    v54 <- UnaryOperation '-', v53
BeginForLoopCondition -> v55
    v56 <- LoadInteger '308'
    v57 <- Compare v55, '<=', v56
BeginForLoopAfterthought v57 -> v58
    v59 <- LoadFloat '0.5'
    Update v58, '+', v59
BeginForLoopBody -> v60
    v61 <- LoadInteger '10'
    v62 <- CallMethod v48, 'pow', [v61, v60]
    v63 <- CallMethod v48, 'log10', [v62]
    v64 <- LoadFloat '0.5'
    v65 <- UnaryOperation '-', v64
    v66 <- Compare v60, '!=', v65
    v67 <- LoadFloat '0.5'
    v68 <- Compare v60, '!=', v67
    v69 <- BinaryOperation v66, '&&', v68
    BeginIf v69
        v70 <- LoadInteger '2'
        v71 <- CallMethod v48, 'pow', [v70, v60]
        v72 <- CallMethod v48, 'log2', [v71]
        v73 <- CreateNamedVariable 'Number', 'none'
        v74 <- GetProperty v73, 'EPSILON'
    EndIf
EndForLoop
v75 <- LoadFloat '307.77759430519706'
v76 <- UnaryOperation '-', v75
v77 <- LoadFloat '1.5'
v78 <- LoadInteger '2'
v79 <- LoadInteger '1023'
v80 <- UnaryOperation '-', v79
v81 <- CallMethod v48, 'pow', [v78, v80]
v82 <- BinaryOperation v77, '*', v81
v83 <- CallMethod v48, 'log10', [v82]
v84 <- LoadFloat '9.643274665532873e-17'
v85 <- UnaryOperation '-', v84
v86 <- LoadInteger '1'
v87 <- CreateNamedVariable 'Number', 'none'
v88 <- GetProperty v87, 'EPSILON'
v89 <- BinaryOperation v86, '-', v88
v90 <- CallMethod v48, 'log10', [v89]
v91 <- LoadFloat '3e-32'
v92 <- LoadInteger '1074'
v93 <- UnaryOperation '-', v92
v94 <- CreateNamedVariable 'n', 'var', v93
BeginForLoopInitializer
    v95 <- LoadInteger '1'
BeginForLoopCondition -> v96
    v97 <- LoadInteger '2147483648'
    v98 <- Compare v96, '<=', v97
BeginForLoopAfterthought v98 -> v99
    v100 <- LoadInteger '2'
    Update v99, '*', v100
BeginForLoopBody -> v101
    v102 <- LoadInteger '0'
    v103 <- CreateNamedVariable 'f1', 'none'
    v104 <- CallFunction v103, [v102, v101]
    v105 <- CreateNamedVariable 'x', 'var', v104
    v106 <- CallMethod v48, 'log2', [v105]
    v107 <- UnaryOperation v94, '++'
EndForLoop
BeginForLoopInitializer
    v108 <- LoadInteger '1'
BeginForLoopCondition -> v109
    v110 <- LoadInteger '524288'
    v111 <- Compare v109, '<=', v110
BeginForLoopAfterthought v111 -> v112
    v113 <- LoadInteger '2'
    Update v112, '*', v113
BeginForLoopBody -> v114
    v115 <- LoadInteger '0'
    v116 <- CreateNamedVariable 'f1', 'none'
    v117 <- CallFunction v116, [v114, v115]
    v118 <- CreateNamedVariable 'x', 'var', v117
    v119 <- CallMethod v48, 'log2', [v118]
    v120 <- UnaryOperation v94, '++'
EndForLoop
v121 <- LoadInteger '1'
v122 <- CreateNamedVariable 'x', 'var', v121
BeginForLoopInitializer
    v123 <- LoadInteger '1022'
    v124 <- UnaryOperation '-', v123
BeginForLoopCondition -> v125
    v126 <- LoadInteger '1023'
    v127 <- Compare v125, '<=', v126
BeginForLoopAfterthought v127 -> v128
    v129 <- UnaryOperation '++', v128
BeginForLoopBody -> v130
    v131 <- LoadInteger '2'
    v132 <- CallMethod v48, 'pow', [v131, v130]
    v133 <- CreateNamedVariable 'x', 'var', v132
    v134 <- CallMethod v48, 'log2', [v133]
EndForLoop
v135 <- LoadFloat '0.5000000000000001'
v136 <- GetProperty v48, 'SQRT2'
v137 <- CallMethod v48, 'log2', [v136]
v138 <- LoadFloat '0.4999999999999999'
v139 <- UnaryOperation '-', v138
v140 <- GetProperty v48, 'SQRT1_2'
v141 <- CallMethod v48, 'log2', [v140]
v142 <- LoadFloat '3.321928094887362'
v143 <- LoadInteger '10'
v144 <- CallMethod v48, 'log2', [v143]
v145 <- LoadFloat '6.643856189774724'
v146 <- LoadInteger '100'
v147 <- CallMethod v48, 'log2', [v146]
v148 <- LoadInteger '1'
Reassign v122, v148
BeginForLoopInitializer
    v149 <- LoadInteger '0'
BeginForLoopCondition -> v150
    v151 <- LoadInteger '1000'
    v152 <- Compare v150, '<', v151
BeginForLoopAfterthought v152 -> v153
    v154 <- UnaryOperation '++', v153
BeginForLoopBody -> v155
    v156 <- CallMethod v48, 'log2', [v122]
    v157 <- LoadInteger '1'
    v158 <- BinaryOperation v157, '/', v122
    v159 <- CallMethod v48, 'log2', [v158]
    v160 <- BinaryOperation v156, '+', v159
    v161 <- CallMethod v48, 'abs', [v160]
    v162 <- CreateNamedVariable 'y', 'var', v161
    v163 <- LoadInteger '0'
    v164 <- LoadFloat '1.5e-14'
    v165 <- LoadFloat '1.1'
    Update v122, '*', v165
EndForLoop
v166 <- LoadInteger '2'
v167 <- LoadInteger '100'
v168 <- UnaryOperation '-', v167
v169 <- CallMethod v48, 'pow', [v166, v168]
Reassign v122, v169
BeginForLoopInitializer
    v170 <- LoadInteger '0'
BeginForLoopCondition -> v171
    v172 <- LoadInteger '1000'
    v173 <- Compare v171, '<', v172
BeginForLoopAfterthought v173 -> v174
    v175 <- UnaryOperation '++', v174
BeginForLoopBody -> v176
    v177 <- CallMethod v48, 'log2', [v122]
    v178 <- CreateNamedVariable 'y', 'var', v177
    v179 <- CallMethod v48, 'log', [v122]
    v180 <- GetProperty v48, 'LN2'
    v181 <- BinaryOperation v179, '/', v180
    v182 <- CreateNamedVariable 'expected', 'var', v181
    v183 <- BinaryOperation v178, '-', v182
    v184 <- CallMethod v48, 'abs', [v183]
    v185 <- BinaryOperation v184, '/', v182
    v186 <- CreateNamedVariable 'err', 'var', v185
    v187 <- LoadInteger '0'
    v188 <- LoadFloat '1e-15'
    v189 <- LoadFloat '1.1'
    Update v122, '*', v189
EndForLoop


function f0(a1) {
    isNaN(a1(NaN));
    isNaN(a1(a1));
    function f8() {
        return NaN;
    }
    isNaN(a1({ toString: f8 }));
    function f12() {
        return -1;
    }
    isNaN(a1({ valueOf: f12 }));
    function f18() {
        return "abc";
    }
    isNaN(a1({ valueOf: f18 }));
    isNaN(a1(-0.1));
    isNaN(a1(-1));
    String(a1(0));
    String(a1(-0));
    a1(1);
    String(a1(Infinity));
}
([Math.log10,Math.log2]).forEach(f0);
for (let i55 = -310; i55 <= 308; i55 += 0.5) {
    Math.log10(Math.pow(10, i55));
    if ((i55 != -0.5) && (i55 != 0.5)) {
        Math.log2(Math.pow(2, i55));
        Number.EPSILON;
    }
}
-307.77759430519706;
Math.log10(1.5 * Math.pow(2, -1023));
-9.643274665532873e-17;
Math.log10(1 - Number.EPSILON);
var n = -1074;
for (let i96 = 1; i96 <= 2147483648; i96 *= 2) {
    var x = f1(0, i96);
    Math.log2(x);
    n++;
}
for (let i109 = 1; i109 <= 524288; i109 *= 2) {
    var x = f1(i109, 0);
    Math.log2(x);
    n++;
}
var x = 1;
for (let i125 = -1022; i125 <= 1023; ++i125) {
    var x = Math.pow(2, i125);
    Math.log2(x);
}
Math.log2(Math.SQRT2);
-0.4999999999999999;
Math.log2(Math.SQRT1_2);
Math.log2(10);
Math.log2(100);
x = 1;
for (let i150 = 0; i150 < 1000; ++i150) {
    var y = Math.abs(Math.log2(x) + Math.log2(1 / x));
    x *= 1.1;
}
x = Math.pow(2, -100);
for (let i171 = 0; i171 < 1000; ++i171) {
    var y = Math.log2(x);
    var expected = Math.log(x) / Math.LN2;
    var err = Math.abs(y - expected) / expected;
    x *= 1.1;
}

FuzzIL program written to corpus/math-log2-log10.fzil
