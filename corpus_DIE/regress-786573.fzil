v0 <- LoadInteger '0'
v1 <- CreateNamedVariable 'cnt', 'let', v0
v2 <- LoadRegExp '.' 'g'
v3 <- CreateNamedVariable 'reg', 'let', v2
v4 <- BeginArrowFunction -> 
    v5 <- UnaryOperation v1, '++'
    v6 <- LoadInteger '0'
    v7 <- Compare v5, '==', v6
    BeginIf v7
        v8 <- LoadInteger '2'
        v9 <- LoadInteger '16'
        v10 <- BinaryOperation v8, '**', v9
        BeginObjectLiteral
            ObjectLiteralAddProperty `length`, v10
        v11 <- EndObjectLiteral
        Return v11
    EndIf
    v12 <- LoadInteger '0'
    Reassign v1, v12
    v13 <- LoadNull
    Return v13
EndArrowFunction
SetProperty v3, 'exec', v4
v14 <- BeginArrowFunction -> 
    v15 <- BeginArrowFunction -> 
    EndArrowFunction
    v16 <- LoadString ''
    v17 <- CallMethod v16, 'replace', [v3, v15]
    Return v17
EndArrowFunction
v18 <- CallFunction v14, []
v19 <- CreateNamedVariable 'RangeError', 'none'


let cnt = 0;
let reg = /./g;
const v4 = () => {
    if (cnt++ == 0) {
        const v10 = 2 ** 16;
        return { length: v10 };
    }
    cnt = 0;
    return null;
};
reg.exec = v4;
const v14 = () => {
    const v15 = () => {
    };
    return ("").replace(reg, v15);
};
v14();

FuzzIL program written to corpus/regress-786573.fzil
