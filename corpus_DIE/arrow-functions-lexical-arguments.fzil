v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '0'
    v2 <- CreateNamedVariable 'calls', 'var', v1
    v3 <- BeginPlainFunction -> 
        v4 <- BeginArrowFunction -> 
            v5 <- UnaryOperation v2, '++'
            v6 <- LoadInteger '2'
            v7 <- LoadArguments
            v8 <- GetProperty v7, 'length'
            v9 <- LoadString 'a'
            v10 <- LoadArguments
            v11 <- GetElement v10, '0'
            v12 <- LoadString 'b'
            v13 <- LoadArguments
            v14 <- GetElement v13, '1'
        EndArrowFunction
        v15 <- CallFunction v4, []
    EndPlainFunction
    v16 <- LoadString 'a'
    v17 <- LoadString 'b'
    v18 <- CallFunction v3, [v16, v17]
    v19 <- LoadInteger '1'
    v20 <- LoadInteger '0'
    Reassign v2, v20
    v21 <- LoadString 'a'
    v22 <- LoadString 'b'
    v23 <- Construct v3, [v21, v22]
    v24 <- LoadInteger '1'
EndPlainFunction
v25 <- CallFunction v0, []
v26 <- BeginPlainFunction -> 
    v27 <- LoadInteger '0'
    v28 <- CreateNamedVariable 'calls', 'var', v27
    v29 <- BeginPlainFunction -> 
        v30 <- BeginArrowFunction -> 
            v31 <- UnaryOperation v28, '++'
            v32 <- LoadInteger '2'
            v33 <- LoadArguments
            v34 <- GetProperty v33, 'length'
            v35 <- LoadString 'a'
            v36 <- LoadArguments
            v37 <- GetElement v36, '0'
            v38 <- LoadString 'b'
            v39 <- LoadArguments
            v40 <- GetElement v39, '1'
        EndArrowFunction
        v41 <- CallFunction v30, []
    EndPlainFunction
    v42 <- CreateNamedVariable 'f', 'var', v29
    v43 <- LoadString 'a'
    v44 <- LoadString 'b'
    v45 <- CallFunction v42, [v43, v44]
    v46 <- LoadInteger '1'
EndPlainFunction
v47 <- CallFunction v26, []
v48 <- BeginPlainFunction -> 
    Directive 'use strict'
    v49 <- LoadInteger '0'
    v50 <- CreateNamedVariable 'calls', 'var', v49
    v51 <- BeginClassDefinition
        BeginClassConstructor -> v52
            v53 <- BeginArrowFunction -> 
                v54 <- UnaryOperation v50, '++'
                v55 <- LoadInteger '2'
                v56 <- LoadArguments
                v57 <- GetProperty v56, 'length'
                v58 <- LoadString 'a'
                v59 <- LoadArguments
                v60 <- GetElement v59, '0'
                v61 <- LoadString 'b'
                v62 <- LoadArguments
                v63 <- GetElement v62, '1'
            EndArrowFunction
            v64 <- CallFunction v53, []
        EndClassConstructor
    EndClassDefinition
    v65 <- LoadString 'a'
    v66 <- LoadString 'b'
    v67 <- Construct v51, [v65, v66]
    v68 <- LoadInteger '1'
EndPlainFunction
v69 <- CallFunction v48, []
v70 <- BeginPlainFunction -> 
    Directive 'use strict'
    v71 <- LoadInteger '0'
    v72 <- CreateNamedVariable 'calls', 'var', v71
    BeginObjectLiteral
        BeginObjectLiteralSetter `x` -> v73, v74
            v75 <- BeginArrowFunction -> 
                v76 <- UnaryOperation v72, '++'
                v77 <- LoadInteger '1'
                v78 <- LoadArguments
                v79 <- GetProperty v78, 'length'
                v80 <- LoadString 'a'
                v81 <- LoadArguments
                v82 <- GetElement v81, '0'
            EndArrowFunction
            v83 <- CallFunction v75, []
        EndObjectLiteralSetter
    v84 <- EndObjectLiteral
    v85 <- CreateNamedVariable 'o', 'var', v84
    v86 <- LoadString 'a'
    SetProperty v85, 'x', v86
    v87 <- LoadInteger '1'
EndPlainFunction
v88 <- CallFunction v70, []
v89 <- BeginPlainFunction -> 
    v90 <- LoadInteger '0'
    v91 <- CreateNamedVariable 'calls', 'var', v90
    v92 <- BeginPlainFunction -> v93
        v94 <- LoadString 'c'
        Reassign v93, v94
        v95 <- BeginArrowFunction -> 
            v96 <- UnaryOperation v91, '++'
            v97 <- LoadInteger '2'
            v98 <- LoadArguments
            v99 <- GetProperty v98, 'length'
            v100 <- LoadString 'c'
            v101 <- LoadArguments
            v102 <- GetElement v101, '0'
            v103 <- LoadString 'a'
            Reassign v93, v103
            v104 <- LoadString 'a'
            v105 <- LoadArguments
            v106 <- GetElement v105, '0'
            v107 <- LoadString 'b'
            v108 <- LoadArguments
            v109 <- GetElement v108, '1'
        EndArrowFunction
        v110 <- CallFunction v95, []
    EndPlainFunction
    v111 <- LoadString 'a'
    v112 <- LoadString 'b'
    v113 <- CallFunction v92, [v111, v112]
    v114 <- LoadInteger '1'
EndPlainFunction
v115 <- CallFunction v89, []
v116 <- BeginPlainFunction -> 
    Directive 'use strict'
    v117 <- LoadInteger '0'
    v118 <- CreateNamedVariable 'calls', 'var', v117
    v119 <- BeginPlainFunction -> v120
        v121 <- LoadString 'c'
        Reassign v120, v121
        v122 <- BeginArrowFunction -> 
            v123 <- UnaryOperation v118, '++'
            v124 <- LoadInteger '2'
            v125 <- LoadArguments
            v126 <- GetProperty v125, 'length'
            v127 <- LoadString 'a'
            v128 <- LoadArguments
            v129 <- GetElement v128, '0'
            v130 <- LoadString 'b'
            v131 <- LoadArguments
            v132 <- GetElement v131, '1'
        EndArrowFunction
        v133 <- CallFunction v122, []
    EndPlainFunction
    v134 <- LoadString 'a'
    v135 <- LoadString 'b'
    v136 <- CallFunction v119, [v134, v135]
    v137 <- LoadInteger '1'
EndPlainFunction
v138 <- CallFunction v116, []
v139 <- BeginPlainFunction -> 
    v140 <- LoadInteger '0'
    v141 <- CreateNamedVariable 'calls', 'var', v140
    v142 <- BeginPlainFunction -> v143
        v144 <- BeginArrowFunction -> 
            v145 <- UnaryOperation v141, '++'
            v146 <- LoadInteger '2'
            v147 <- LoadArguments
            v148 <- GetProperty v147, 'length'
            v149 <- LoadString 'a'
            v150 <- LoadArguments
            v151 <- GetElement v150, '0'
            v152 <- LoadString 'b'
            v153 <- LoadArguments
            v154 <- GetElement v153, '1'
        EndArrowFunction
        Return v144
    EndPlainFunction
    v155 <- LoadString 'a'
    v156 <- LoadString 'b'
    v157 <- CallFunction v142, [v155, v156]
    v158 <- CallFunction v157, []
    v159 <- LoadInteger '1'
EndPlainFunction
v160 <- CallFunction v139, []
v161 <- BeginPlainFunction -> 
    v162 <- LoadInteger '0'
    v163 <- CreateNamedVariable 'calls', 'var', v162
    v164 <- BeginPlainFunction -> v165
        v166 <- LoadString 'c'
        Reassign v165, v166
        v167 <- BeginArrowFunction -> 
            v168 <- UnaryOperation v163, '++'
            v169 <- LoadInteger '2'
            v170 <- LoadArguments
            v171 <- GetProperty v170, 'length'
            v172 <- LoadString 'c'
            v173 <- LoadArguments
            v174 <- GetElement v173, '0'
            v175 <- LoadString 'a'
            Reassign v165, v175
            v176 <- LoadString 'a'
            v177 <- LoadArguments
            v178 <- GetElement v177, '0'
            v179 <- LoadString 'b'
            v180 <- LoadArguments
            v181 <- GetElement v180, '1'
        EndArrowFunction
        Return v167
    EndPlainFunction
    v182 <- LoadString 'a'
    v183 <- LoadString 'b'
    v184 <- CallFunction v164, [v182, v183]
    v185 <- CallFunction v184, []
    v186 <- LoadInteger '1'
EndPlainFunction
v187 <- CallFunction v161, []
v188 <- BeginPlainFunction -> 
    v189 <- LoadInteger '0'
    v190 <- CreateNamedVariable 'calls', 'var', v189
    v191 <- BeginPlainFunction -> v192
        v193 <- BeginArrowFunction -> 
            v194 <- UnaryOperation v190, '++'
            v195 <- LoadString 'a'
        EndArrowFunction
        v196 <- CallFunction v193, []
    EndPlainFunction
    v197 <- LoadString 'a'
    v198 <- CallFunction v191, [v197]
    v199 <- LoadInteger '1'
EndPlainFunction
v200 <- CallFunction v188, []


function testInFunctionDeclaration() {
    var calls = 0;
    function f() {
        const v4 = () => {
            calls++;
            arguments.length;
            arguments[0];
            arguments[1];
        };
        v4();
    }
    f("a", "b");
    calls = 0;
    new f("a", "b");
}
testInFunctionDeclaration();
function testInFunctionExpression() {
    var calls = 0;
    function f29() {
        const v30 = () => {
            calls++;
            arguments.length;
            arguments[0];
            arguments[1];
        };
        v30();
    }
    var f = f29;
    f("a", "b");
}
testInFunctionExpression();
function testInConstructor() {
    'use strict';
    var calls = 0;
    class C51 {
        constructor() {
            const v53 = () => {
                calls++;
                arguments.length;
                arguments[0];
                arguments[1];
            };
            v53();
        }
    }
    new C51("a", "b");
}
testInConstructor();
function testInSetter() {
    'use strict';
    var calls = 0;
    const v84 = {
        set x(a74) {
            const v75 = () => {
                calls++;
                arguments.length;
                arguments[0];
            };
            v75();
        },
    };
    var o = v84;
    o.x = "a";
}
testInSetter();
function testMappedArguments() {
    var calls = 0;
    function f(a93) {
        a93 = "c";
        const v95 = () => {
            calls++;
            arguments.length;
            arguments[0];
            a93 = "a";
            arguments[0];
            arguments[1];
        };
        v95();
    }
    f("a", "b");
}
testMappedArguments();
function testUnMappedArguments() {
    'use strict';
    var calls = 0;
    function f(a120) {
        a120 = "c";
        const v122 = () => {
            calls++;
            arguments.length;
            arguments[0];
            arguments[1];
        };
        v122();
    }
    f("a", "b");
}
testUnMappedArguments();
function testClosure() {
    var calls = 0;
    function f(a143) {
        const v144 = () => {
            calls++;
            arguments.length;
            arguments[0];
            arguments[1];
        };
        return v144;
    }
    const t109 = f("a", "b");
    t109();
}
testClosure();
function testClosureMappedArguments() {
    var calls = 0;
    function f(a165) {
        a165 = "c";
        const v167 = () => {
            calls++;
            arguments.length;
            arguments[0];
            a165 = "a";
            arguments[0];
            arguments[1];
        };
        return v167;
    }
    const t127 = f("a", "b");
    t127();
}
testClosureMappedArguments();
function testParamNamedArguments() {
    var calls = 0;
    function f(a192) {
        const v193 = () => {
            calls++;
        };
        v193();
    }
    f("a");
}
testParamNamedArguments();

FuzzIL program written to corpus/arrow-functions-lexical-arguments.fzil
