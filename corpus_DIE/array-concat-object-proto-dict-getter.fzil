BeginForLoopInitializer
    v0 <- LoadInteger '0'
BeginForLoopCondition -> v1
    v2 <- LoadInteger '10'
    v3 <- LoadInteger '1000'
    v4 <- BinaryOperation v2, '*', v3
    v5 <- Compare v1, '<', v4
BeginForLoopAfterthought v5 -> v6
    v7 <- UnaryOperation v6, '++'
BeginForLoopBody -> v8
    v9 <- LoadBoolean 'true'
    v10 <- CreateNamedVariable 'Object', 'none'
    v11 <- GetProperty v10, 'prototype'
    v12 <- LoadString 'generatedProperty'
    v13 <- BinaryOperation v12, '+', v8
    SetComputedProperty v11, v13, v9
EndForLoop
v14 <- LoadInteger '1'
v15 <- LoadInteger '2'
v16 <- LoadInteger '3'
v17 <- CreateArray [v14, v15, v16]
v18 <- CreateNamedVariable 'array', 'var', v17
v19 <- LoadInteger '1'
v20 <- LoadString 'a'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v19
    ObjectLiteralAddProperty `0`, v20
v21 <- EndObjectLiteral
v22 <- CreateNamedVariable 'object', 'var', v21
v23 <- BeginPlainFunction -> 
    v24 <- CreateArray []
    v25 <- CallMethod v24, 'concat', [v18]
    v26 <- CreateArray []
    v27 <- CallMethod v18, 'concat', [v26]
    v28 <- LoadInteger '1'
    v29 <- LoadInteger '2'
    v30 <- LoadInteger '3'
    v31 <- LoadInteger '1'
    v32 <- LoadInteger '2'
    v33 <- LoadInteger '3'
    v34 <- CreateArray [v28, v29, v30, v31, v32, v33]
    v35 <- CallMethod v18, 'concat', [v18]
    v36 <- CreateArray [v22]
    v37 <- CreateArray []
    v38 <- CallMethod v37, 'concat', [v22]
    v39 <- LoadInteger '1'
    v40 <- LoadInteger '2'
    v41 <- LoadInteger '3'
    v42 <- CreateArray [v39, v40, v41, v22]
    v43 <- CallMethod v18, 'concat', [v22]
    v44 <- CreateArray [v22]
    v45 <- CreateArray []
    v46 <- CreateNamedVariable 'Array', 'none'
    v47 <- GetProperty v46, 'prototype'
    v48 <- GetProperty v47, 'concat'
    v49 <- CallMethod v48, 'call', [v22, v45]
    v50 <- LoadInteger '1'
    v51 <- LoadInteger '2'
    v52 <- LoadInteger '3'
    v53 <- CreateArray [v22, v50, v51, v52]
    v54 <- GetProperty v46, 'prototype'
    v55 <- GetProperty v54, 'concat'
    v56 <- CallMethod v55, 'call', [v22, v18]
    v57 <- CreateArray [v22, v22]
    v58 <- GetProperty v46, 'prototype'
    v59 <- GetProperty v58, 'concat'
    v60 <- CallMethod v59, 'call', [v22, v22]
EndPlainFunction
v61 <- CallFunction v23, []
v62 <- LoadBoolean 'false'
v63 <- CreateNamedVariable 'concatSpreadable', 'var', v62
v64 <- CreateNamedVariable 'Object', 'none'
v65 <- GetProperty v64, 'prototype'
v66 <- CreateNamedVariable 'Symbol', 'none'
v67 <- GetProperty v66, 'isConcatSpreadable'
v68 <- LoadBoolean 'true'
BeginObjectLiteral
    BeginObjectLiteralMethod `get` -> v69
        Return v63
    EndObjectLiteralMethod
    ObjectLiteralAddProperty `configurable`, v68
v70 <- EndObjectLiteral
v71 <- CallMethod v64, 'defineProperty', [v65, v67, v70]
v72 <- CreateArray []
v73 <- CreateArray [v72, v18]
v74 <- CreateArray []
v75 <- CallMethod v74, 'concat', [v18]
v76 <- CreateArray []
v77 <- CreateArray [v18, v76]
v78 <- CreateArray []
v79 <- CallMethod v18, 'concat', [v78]
v80 <- CreateArray [v18, v18]
v81 <- CallMethod v18, 'concat', [v18]
v82 <- CreateArray []
v83 <- CreateArray [v82, v22]
v84 <- CreateArray []
v85 <- CallMethod v84, 'concat', [v22]
v86 <- CreateArray [v18, v22]
v87 <- CallMethod v18, 'concat', [v22]
v88 <- CreateArray []
v89 <- CreateArray [v22, v88]
v90 <- CreateArray []
v91 <- CreateNamedVariable 'Array', 'none'
v92 <- GetProperty v91, 'prototype'
v93 <- GetProperty v92, 'concat'
v94 <- CallMethod v93, 'call', [v22, v90]
v95 <- CreateArray [v22, v18]
v96 <- GetProperty v91, 'prototype'
v97 <- GetProperty v96, 'concat'
v98 <- CallMethod v97, 'call', [v22, v18]
v99 <- CreateArray [v22, v22]
v100 <- GetProperty v91, 'prototype'
v101 <- GetProperty v100, 'concat'
v102 <- CallMethod v101, 'call', [v22, v22]
v103 <- LoadBoolean 'true'
Reassign v63, v103
v104 <- CreateArray []
v105 <- CallMethod v104, 'concat', [v18]
v106 <- CreateArray []
v107 <- CallMethod v18, 'concat', [v106]
v108 <- LoadInteger '1'
v109 <- LoadInteger '2'
v110 <- LoadInteger '3'
v111 <- LoadInteger '1'
v112 <- LoadInteger '2'
v113 <- LoadInteger '3'
v114 <- CreateArray [v108, v109, v110, v111, v112, v113]
v115 <- CallMethod v18, 'concat', [v18]
v116 <- LoadString 'a'
v117 <- CreateArray [v116]
v118 <- CreateArray []
v119 <- CallMethod v118, 'concat', [v22]
v120 <- LoadInteger '1'
v121 <- LoadInteger '2'
v122 <- LoadInteger '3'
v123 <- LoadString 'a'
v124 <- CreateArray [v120, v121, v122, v123]
v125 <- CallMethod v18, 'concat', [v22]
v126 <- LoadString 'a'
v127 <- CreateArray [v126]
v128 <- CreateArray []
v129 <- GetProperty v91, 'prototype'
v130 <- GetProperty v129, 'concat'
v131 <- CallMethod v130, 'call', [v22, v128]
v132 <- LoadString 'a'
v133 <- LoadInteger '1'
v134 <- LoadInteger '2'
v135 <- LoadInteger '3'
v136 <- CreateArray [v132, v133, v134, v135]
v137 <- GetProperty v91, 'prototype'
v138 <- GetProperty v137, 'concat'
v139 <- CallMethod v138, 'call', [v22, v18]
v140 <- LoadString 'a'
v141 <- LoadString 'a'
v142 <- CreateArray [v140, v141]
v143 <- GetProperty v91, 'prototype'
v144 <- GetProperty v143, 'concat'
v145 <- CallMethod v144, 'call', [v22, v22]
v146 <- GetProperty v64, 'prototype'
v147 <- GetProperty v66, 'isConcatSpreadable'
v148 <- DeleteComputedProperty v146, v147
v149 <- CallFunction v23, []


for (let i1 = 0; i1 < (10 * 1000); i1++) {
    const t1 = Object.prototype;
    t1["generatedProperty" + i1] = true;
}
var array = [1,2,3];
var object = { length: 1, 0: "a" };
function testConcatDefaults() {
    ([]).concat(array);
    array.concat([]);
    [1,2,3,1,2,3];
    array.concat(array);
    [object];
    ([]).concat(object);
    [1,2,3,object];
    array.concat(object);
    [object];
    const v45 = [];
    Array.prototype.concat.call(object, v45);
    [object,1,2,3];
    Array.prototype.concat.call(object, array);
    [object,object];
    Array.prototype.concat.call(object, object);
}
testConcatDefaults();
var concatSpreadable = false;
const v65 = Object.prototype;
const v67 = Symbol.isConcatSpreadable;
const v70 = {
    get() {
        return concatSpreadable;
    },
    configurable: true,
};
Object.defineProperty(v65, v67, v70);
[[],array];
([]).concat(array);
[array,[]];
array.concat([]);
[array,array];
array.concat(array);
[[],object];
([]).concat(object);
[array,object];
array.concat(object);
[object,[]];
const v90 = [];
Array.prototype.concat.call(object, v90);
[object,array];
Array.prototype.concat.call(object, array);
[object,object];
Array.prototype.concat.call(object, object);
concatSpreadable = true;
([]).concat(array);
array.concat([]);
[1,2,3,1,2,3];
array.concat(array);
["a"];
([]).concat(object);
[1,2,3,"a"];
array.concat(object);
["a"];
const v128 = [];
Array.prototype.concat.call(object, v128);
["a",1,2,3];
Array.prototype.concat.call(object, array);
["a","a"];
Array.prototype.concat.call(object, object);
const t62 = Object.prototype;
delete t62[Symbol.isConcatSpreadable];
testConcatDefaults();

FuzzIL program written to corpus/array-concat-object-proto-dict-getter.fzil
