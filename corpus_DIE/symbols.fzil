v0 <- CreateArray []
v1 <- CreateNamedVariable 'symbols', 'var', v0
v2 <- BeginPlainFunction -> v3
    v4 <- LoadString 'Symbol(66)'
    v5 <- LoadString 'Symbol()'
    v6 <- CreateArray [v4, v5]
    v7 <- CallMethod v6, 'indexOf', [v3]
    v8 <- LoadInteger '0'
    v9 <- Compare v7, '>=', v8
    Return v9
EndPlainFunction
v10 <- BeginPlainFunction -> 
    v11 <- BeginPlainFunction -> 
        v12 <- CreateNamedVariable 'Symbol', 'none'
        v13 <- CallFunction v12, []
        Return v13
    EndPlainFunction
    v14 <- BeginPlainFunction -> 
        v15 <- CallFunction v11, []
        Return v15
    EndPlainFunction
    BeginForLoopInitializer
        v16 <- LoadInteger '0'
    BeginForLoopCondition -> v17
        v18 <- LoadInteger '2'
        v19 <- Compare v17, '<', v18
    BeginForLoopAfterthought v19 -> v20
        v21 <- UnaryOperation '++', v20
    BeginForLoopBody -> v22
        BeginForLoopInitializer
            v23 <- LoadInteger '0'
        BeginForLoopCondition -> v24
            v25 <- LoadInteger '5'
            v26 <- Compare v24, '<', v25
        BeginForLoopAfterthought v26 -> v27
            v28 <- UnaryOperation '++', v27
        BeginForLoopBody -> v29
            v30 <- CreateNamedVariable 'Symbol', 'none'
            v31 <- CallFunction v30, []
            v32 <- CallMethod v1, 'push', [v31]
            v33 <- LoadUndefined
            v34 <- CallFunction v30, [v33]
            v35 <- CallMethod v1, 'push', [v34]
            v36 <- LoadString '66'
            v37 <- CallFunction v30, [v36]
            v38 <- CallMethod v1, 'push', [v37]
            v39 <- LoadInteger '66'
            v40 <- CallFunction v30, [v39]
            v41 <- CallMethod v1, 'push', [v40]
            v42 <- CallFunction v30, []
            v43 <- CallMethod v42, 'valueOf', []
            v44 <- CallMethod v1, 'push', [v43]
            v45 <- CallFunction v14, []
            v46 <- CallMethod v1, 'push', [v45]
        EndForLoop
        v47 <- CallFunction v14, []
        v48 <- CreateNamedVariable 'gc', 'none'
        v49 <- CallFunction v48, []
    EndForLoop
    v50 <- BeginPlainFunction -> 
        v51 <- CreateNamedVariable 'Symbol', 'none'
        v52 <- CallFunction v51, []
        v53 <- CallFunction v51, [v52]
    EndPlainFunction
    v54 <- CallFunction v50, []
    v55 <- CreateNamedVariable 'TypeError', 'none'
    v56 <- BeginPlainFunction -> 
        v57 <- CreateNamedVariable 'Symbol', 'none'
        v58 <- LoadInteger '66'
        v59 <- Construct v57, [v58]
    EndPlainFunction
    v60 <- CallFunction v56, []
EndPlainFunction
v61 <- CallFunction v10, []
v62 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v63
        v64 <- LoadString 'symbol'
        v65 <- GetComputedProperty v1, v63
        v66 <- TypeOf v65
        v67 <- GetComputedProperty v1, v63
        v68 <- TypeOf v67
        v69 <- LoadString 'symbol'
        v70 <- Compare v68, '===', v69
    EndForInLoop
EndPlainFunction
v71 <- CallFunction v62, []
v72 <- BeginPlainFunction -> 
    v73 <- CreateNamedVariable 'Object', 'none'
    v74 <- GetProperty v73, 'prototype'
    v75 <- CreateNamedVariable 'Symbol', 'none'
    v76 <- GetProperty v75, 'prototype'
    v77 <- GetProperty v76, '__proto__'
    v78 <- GetProperty v75, 'prototype'
    v79 <- CallFunction v75, []
    v80 <- GetProperty v79, '__proto__'
    v81 <- GetProperty v75, 'prototype'
    v82 <- CallFunction v75, []
    v83 <- CallFunction v73, [v82]
    v84 <- GetProperty v83, '__proto__'
    BeginForInLoop v1 -> v85
        v86 <- GetProperty v75, 'prototype'
        v87 <- GetComputedProperty v1, v85
        v88 <- GetProperty v87, '__proto__'
    EndForInLoop
EndPlainFunction
v89 <- CallFunction v72, []
v90 <- BeginPlainFunction -> 
    v91 <- LoadInteger '0'
    v92 <- CreateNamedVariable 'Symbol', 'none'
    v93 <- GetProperty v92, 'length'
    v94 <- CreateNamedVariable 'Function', 'none'
    v95 <- GetProperty v94, 'prototype'
    v96 <- GetProperty v92, '__proto__'
    v97 <- CreateNamedVariable 'Object', 'none'
    v98 <- GetProperty v92, 'prototype'
    v99 <- GetProperty v98, 'constructor'
    v100 <- Compare v97, '===', v99
    v101 <- GetProperty v97, 'prototype'
    v102 <- GetProperty v101, 'constructor'
    v103 <- Compare v92, '===', v102
    v104 <- GetProperty v92, 'prototype'
    v105 <- GetProperty v104, 'constructor'
    v106 <- CallFunction v92, []
    v107 <- GetProperty v106, '__proto__'
    v108 <- GetProperty v107, 'constructor'
    v109 <- CallFunction v92, []
    v110 <- CallFunction v97, [v109]
    v111 <- GetProperty v110, '__proto__'
    v112 <- GetProperty v111, 'constructor'
    BeginForInLoop v1 -> v113
        v114 <- GetComputedProperty v1, v113
        v115 <- GetProperty v114, '__proto__'
        v116 <- GetProperty v115, 'constructor'
    EndForInLoop
EndPlainFunction
v117 <- CallFunction v90, []
v118 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v119
        v120 <- GetComputedProperty v1, v119
        v121 <- GetComputedProperty v1, v119
        v122 <- CreateNamedVariable 'Object', 'none'
        v123 <- CallFunction v122, [v121]
        v124 <- CallMethod v123, 'valueOf', []
        v125 <- Compare v120, '===', v124
        v126 <- GetComputedProperty v1, v119
        v127 <- GetComputedProperty v1, v119
        v128 <- CallMethod v127, 'valueOf', []
        v129 <- Compare v126, '===', v128
        v130 <- GetComputedProperty v1, v119
        v131 <- CallFunction v122, [v130]
        v132 <- CreateNamedVariable 'Symbol', 'none'
        v133 <- GetProperty v132, 'prototype'
        v134 <- GetProperty v133, 'valueOf'
        v135 <- CallMethod v134, 'call', [v131]
        v136 <- GetComputedProperty v1, v119
        v137 <- Compare v135, '===', v136
        v138 <- GetComputedProperty v1, v119
        v139 <- GetProperty v132, 'prototype'
        v140 <- GetProperty v139, 'valueOf'
        v141 <- CallMethod v140, 'call', [v138]
        v142 <- GetComputedProperty v1, v119
        v143 <- Compare v141, '===', v142
    EndForInLoop
EndPlainFunction
v144 <- CallFunction v118, []
v145 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v146
        v147 <- BeginPlainFunction -> 
            v148 <- CreateNamedVariable 'String', 'none'
            v149 <- GetComputedProperty v1, v146
            v150 <- Construct v148, [v149]
        EndPlainFunction
        v151 <- CallFunction v147, []
        v152 <- CreateNamedVariable 'TypeError', 'none'
        v153 <- GetComputedProperty v1, v146
        v154 <- CallMethod v153, 'toString', []
        v155 <- GetComputedProperty v1, v146
        v156 <- CreateNamedVariable 'String', 'none'
        v157 <- CallFunction v156, [v155]
        v158 <- BeginPlainFunction -> 
            v159 <- GetComputedProperty v1, v146
            v160 <- LoadString ''
            v161 <- BinaryOperation v159, '+', v160
        EndPlainFunction
        v162 <- CallFunction v158, []
        v163 <- BeginPlainFunction -> 
            v164 <- GetComputedProperty v1, v146
            v165 <- CreateNamedVariable 'Object', 'none'
            v166 <- CallFunction v165, [v164]
            v167 <- CallFunction v156, [v166]
        EndPlainFunction
        v168 <- CallFunction v163, []
        v169 <- GetComputedProperty v1, v146
        v170 <- CallMethod v169, 'toString', []
        v171 <- CallFunction v2, [v170]
        v172 <- GetComputedProperty v1, v146
        v173 <- CreateNamedVariable 'Object', 'none'
        v174 <- CallFunction v173, [v172]
        v175 <- CallMethod v174, 'toString', []
        v176 <- CallFunction v2, [v175]
        v177 <- GetComputedProperty v1, v146
        v178 <- CreateNamedVariable 'Symbol', 'none'
        v179 <- GetProperty v178, 'prototype'
        v180 <- GetProperty v179, 'toString'
        v181 <- CallMethod v180, 'call', [v177]
        v182 <- CallFunction v2, [v181]
        v183 <- LoadString '[object Symbol]'
        v184 <- GetComputedProperty v1, v146
        v185 <- GetProperty v173, 'prototype'
        v186 <- GetProperty v185, 'toString'
        v187 <- CallMethod v186, 'call', [v184]
    EndForInLoop
EndPlainFunction
v188 <- CallFunction v145, []
v189 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v190
        v191 <- GetComputedProperty v1, v190
        v192 <- CreateNamedVariable 'Object', 'none'
        v193 <- CallFunction v192, [v191]
        v194 <- CreateNamedVariable 'Boolean', 'none'
        v195 <- CallFunction v194, [v193]
        v196 <- GetComputedProperty v1, v190
        v197 <- CallFunction v192, [v196]
        v198 <- UnaryOperation '!', v197
        v199 <- GetComputedProperty v1, v190
        v200 <- CallFunction v194, [v199]
        v201 <- CallMethod v200, 'valueOf', []
        v202 <- GetComputedProperty v1, v190
        v203 <- UnaryOperation '!', v202
        v204 <- GetComputedProperty v1, v190
        v205 <- UnaryOperation '!', v204
        v206 <- UnaryOperation '!', v205
        v207 <- GetComputedProperty v1, v190
        v208 <- LoadBoolean 'true'
        v209 <- BinaryOperation v207, '&&', v208
        v210 <- GetComputedProperty v1, v190
        v211 <- UnaryOperation '!', v210
        v212 <- LoadBoolean 'false'
        v213 <- BinaryOperation v211, '&&', v212
        v214 <- GetComputedProperty v1, v190
        v215 <- UnaryOperation '!', v214
        v216 <- LoadBoolean 'true'
        v217 <- BinaryOperation v215, '||', v216
        v218 <- LoadInteger '1'
        v219 <- GetComputedProperty v1, v190
        v220 <- LoadInteger '1'
        v221 <- LoadInteger '2'
        v222 <- TernaryOperation v219, v220, v221
        v223 <- LoadInteger '2'
        v224 <- GetComputedProperty v1, v190
        v225 <- UnaryOperation '!', v224
        v226 <- LoadInteger '1'
        v227 <- LoadInteger '2'
        v228 <- TernaryOperation v225, v226, v227
        v229 <- GetComputedProperty v1, v190
        v230 <- UnaryOperation '!', v229
        BeginIf v230
        EndIf
        v231 <- GetComputedProperty v1, v190
        BeginIf v231
        BeginElse
        EndIf
    EndForInLoop
EndPlainFunction
v232 <- CallFunction v189, []
v233 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v234
        v235 <- BeginPlainFunction -> 
            v236 <- GetComputedProperty v1, v234
            v237 <- CreateNamedVariable 'Object', 'none'
            v238 <- CallFunction v237, [v236]
            v239 <- CreateNamedVariable 'Number', 'none'
            v240 <- CallFunction v239, [v238]
        EndPlainFunction
        v241 <- CallFunction v235, []
        v242 <- CreateNamedVariable 'TypeError', 'none'
        v243 <- BeginPlainFunction -> 
            v244 <- GetComputedProperty v1, v234
            v245 <- CreateNamedVariable 'Object', 'none'
            v246 <- CallFunction v245, [v244]
            v247 <- UnaryOperation '+', v246
        EndPlainFunction
        v248 <- CallFunction v243, []
        v249 <- BeginPlainFunction -> 
            v250 <- GetComputedProperty v1, v234
            v251 <- CreateNamedVariable 'Number', 'none'
            v252 <- CallFunction v251, [v250]
        EndPlainFunction
        v253 <- CallFunction v249, []
        v254 <- BeginPlainFunction -> 
            v255 <- GetComputedProperty v1, v234
            v256 <- LoadInteger '0'
            v257 <- BinaryOperation v255, '+', v256
        EndPlainFunction
        v258 <- CallFunction v254, []
    EndForInLoop
EndPlainFunction
v259 <- CallFunction v233, []
v260 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v261
        v262 <- GetComputedProperty v1, v261
        v263 <- GetComputedProperty v1, v261
        v264 <- GetComputedProperty v1, v261
        v265 <- GetComputedProperty v1, v261
        v266 <- GetComputedProperty v1, v261
        v267 <- GetComputedProperty v1, v261
        v268 <- CreateNamedVariable 'Object', 'none'
        v269 <- CallMethod v268, 'is', [v266, v267]
        v270 <- GetComputedProperty v1, v261
        v271 <- GetComputedProperty v1, v261
        v272 <- Compare v270, '===', v271
        v273 <- GetComputedProperty v1, v261
        v274 <- GetComputedProperty v1, v261
        v275 <- Compare v273, '==', v274
        v276 <- GetComputedProperty v1, v261
        v277 <- GetComputedProperty v1, v261
        v278 <- CallFunction v268, [v277]
        v279 <- Compare v276, '===', v278
        v280 <- GetComputedProperty v1, v261
        v281 <- CallFunction v268, [v280]
        v282 <- GetComputedProperty v1, v261
        v283 <- Compare v281, '===', v282
        v284 <- GetComputedProperty v1, v261
        v285 <- GetComputedProperty v1, v261
        v286 <- CallFunction v268, [v285]
        v287 <- Compare v284, '==', v286
        v288 <- GetComputedProperty v1, v261
        v289 <- CallFunction v268, [v288]
        v290 <- GetComputedProperty v1, v261
        v291 <- Compare v289, '==', v290
        v292 <- GetComputedProperty v1, v261
        v293 <- GetComputedProperty v1, v261
        v294 <- CallMethod v293, 'valueOf', []
        v295 <- Compare v292, '===', v294
        v296 <- GetComputedProperty v1, v261
        v297 <- CallMethod v296, 'valueOf', []
        v298 <- GetComputedProperty v1, v261
        v299 <- Compare v297, '===', v298
        v300 <- GetComputedProperty v1, v261
        v301 <- GetComputedProperty v1, v261
        v302 <- CallMethod v301, 'valueOf', []
        v303 <- Compare v300, '==', v302
        v304 <- GetComputedProperty v1, v261
        v305 <- CallMethod v304, 'valueOf', []
        v306 <- GetComputedProperty v1, v261
        v307 <- Compare v305, '==', v306
        v308 <- GetComputedProperty v1, v261
        v309 <- CallFunction v268, [v308]
        v310 <- GetComputedProperty v1, v261
        v311 <- CallFunction v268, [v310]
        v312 <- Compare v309, '===', v311
        v313 <- GetComputedProperty v1, v261
        v314 <- CallFunction v268, [v313]
        v315 <- CallMethod v314, 'valueOf', []
        v316 <- GetComputedProperty v1, v261
        v317 <- CallFunction v268, [v316]
        v318 <- CallMethod v317, 'valueOf', []
    EndForInLoop
    BeginForLoopInitializer
        v319 <- LoadInteger '0'
    BeginForLoopCondition -> v320
        v321 <- GetProperty v1, 'length'
        v322 <- Compare v320, '<', v321
    BeginForLoopAfterthought v322 -> v323
        v324 <- UnaryOperation '++', v323
    BeginForLoopBody -> v325
        BeginForLoopInitializer
            v326 <- LoadInteger '1'
            v327 <- BinaryOperation v325, '+', v326
        BeginForLoopCondition -> v328
            v329 <- GetProperty v1, 'length'
            v330 <- Compare v328, '<', v329
        BeginForLoopAfterthought v330 -> v331
            v332 <- UnaryOperation '++', v331
        BeginForLoopBody -> v333
            v334 <- GetComputedProperty v1, v325
            v335 <- GetComputedProperty v1, v333
            v336 <- CreateNamedVariable 'Object', 'none'
            v337 <- CallMethod v336, 'is', [v334, v335]
            v338 <- GetComputedProperty v1, v325
            v339 <- GetComputedProperty v1, v333
            v340 <- Compare v338, '===', v339
            v341 <- GetComputedProperty v1, v325
            v342 <- GetComputedProperty v1, v333
            v343 <- Compare v341, '==', v342
        EndForLoop
    EndForLoop
    v344 <- LoadInteger '347'
    v345 <- LoadFloat '1.275'
    v346 <- CreateNamedVariable 'NaN', 'none'
    v347 <- LoadString 'string'
    v348 <- LoadNull
    v349 <- LoadUndefined
    BeginObjectLiteral
    v350 <- EndObjectLiteral
    v351 <- BeginPlainFunction -> 
    EndPlainFunction
    v352 <- CreateArray [v344, v345, v346, v347, v348, v349, v350, v351]
    v353 <- CreateNamedVariable 'values', 'var', v352
    BeginForInLoop v1 -> v354
        BeginForInLoop v353 -> v355
            v356 <- GetComputedProperty v1, v354
            v357 <- GetComputedProperty v353, v355
            v358 <- Compare v356, '===', v357
            v359 <- GetComputedProperty v353, v355
            v360 <- GetComputedProperty v1, v354
            v361 <- Compare v359, '===', v360
            v362 <- GetComputedProperty v1, v354
            v363 <- GetComputedProperty v353, v355
            v364 <- Compare v362, '==', v363
            v365 <- GetComputedProperty v353, v355
            v366 <- GetComputedProperty v1, v354
            v367 <- Compare v365, '==', v366
        EndForInLoop
    EndForInLoop
EndPlainFunction
v368 <- CallFunction v260, []
v369 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v370
        v371 <- GetComputedProperty v1, v370
        v372 <- CallMethod v371, 'toString', []
        v373 <- CallFunction v2, [v372]
        v374 <- GetComputedProperty v1, v370
        v375 <- GetComputedProperty v1, v370
        v376 <- CallMethod v375, 'valueOf', []
        v377 <- LoadUndefined
        v378 <- GetComputedProperty v1, v370
        v379 <- GetProperty v378, 'a'
        v380 <- LoadUndefined
        v381 <- GetComputedProperty v1, v370
        v382 <- LoadString 'a'
        v383 <- LoadString 'b'
        v384 <- BinaryOperation v382, '+', v383
        v385 <- GetComputedProperty v381, v384
        v386 <- LoadUndefined
        v387 <- GetComputedProperty v1, v370
        v388 <- LoadString ''
        v389 <- LoadString '1'
        v390 <- BinaryOperation v388, '+', v389
        v391 <- GetComputedProperty v387, v390
        v392 <- LoadUndefined
        v393 <- GetComputedProperty v1, v370
        v394 <- GetElement v393, '62'
    EndForInLoop
EndPlainFunction
v395 <- CallFunction v369, []
v396 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v397
        v398 <- LoadInteger '0'
        v399 <- GetComputedProperty v1, v397
        SetProperty v399, 'toString', v398
        v400 <- GetComputedProperty v1, v397
        v401 <- CallMethod v400, 'toString', []
        v402 <- CallFunction v2, [v401]
        v403 <- LoadInteger '0'
        v404 <- GetComputedProperty v1, v397
        SetProperty v404, 'valueOf', v403
        v405 <- GetComputedProperty v1, v397
        v406 <- GetComputedProperty v1, v397
        v407 <- CallMethod v406, 'valueOf', []
        v408 <- LoadInteger '0'
        v409 <- GetComputedProperty v1, v397
        SetProperty v409, 'a', v408
        v410 <- LoadUndefined
        v411 <- GetComputedProperty v1, v397
        v412 <- GetProperty v411, 'a'
        v413 <- LoadInteger '0'
        v414 <- GetComputedProperty v1, v397
        v415 <- LoadString 'a'
        v416 <- LoadString 'b'
        v417 <- BinaryOperation v415, '+', v416
        SetComputedProperty v414, v417, v413
        v418 <- LoadUndefined
        v419 <- GetComputedProperty v1, v397
        v420 <- LoadString 'a'
        v421 <- LoadString 'b'
        v422 <- BinaryOperation v420, '+', v421
        v423 <- GetComputedProperty v419, v422
        v424 <- LoadInteger '0'
        v425 <- GetComputedProperty v1, v397
        SetElement v425, '62', v424
        v426 <- LoadUndefined
        v427 <- GetComputedProperty v1, v397
        v428 <- GetElement v427, '62'
    EndForInLoop
EndPlainFunction
v429 <- CallFunction v396, []
v430 <- BeginPlainFunction -> 
    v431 <- LoadThis
    v432 <- CreateNamedVariable 'Object', 'none'
    v433 <- CallMethod v432, 'getPrototypeOf', [v431]
    Return v433
EndPlainFunction
v434 <- CreateNamedVariable 'Symbol', 'none'
v435 <- GetProperty v434, 'prototype'
SetProperty v435, 'getThisProto', v430
v436 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v437
        v438 <- GetComputedProperty v1, v437
        v439 <- CallMethod v438, 'getThisProto', []
        v440 <- GetProperty v434, 'prototype'
        v441 <- Compare v439, '===', v440
    EndForInLoop
EndPlainFunction
v442 <- CallFunction v436, []
v443 <- BeginPlainFunction -> 
    v444 <- CreateNamedVariable 'Set', 'none'
    v445 <- Construct v444, []
    v446 <- CreateNamedVariable 'set', 'var', v445
    v447 <- CreateNamedVariable 'Map', 'none'
    v448 <- Construct v447, []
    v449 <- CreateNamedVariable 'map', 'var', v448
    BeginForInLoop v1 -> v450
        v451 <- GetComputedProperty v1, v450
        v452 <- CallMethod v446, 'add', [v451]
        v453 <- GetComputedProperty v1, v450
        v454 <- CallMethod v449, 'set', [v453, v450]
    EndForInLoop
    v455 <- GetProperty v1, 'length'
    v456 <- GetProperty v446, 'size'
    v457 <- GetProperty v1, 'length'
    v458 <- GetProperty v449, 'size'
    BeginForInLoop v1 -> v459
        v460 <- GetComputedProperty v1, v459
        v461 <- CallMethod v446, 'has', [v460]
        v462 <- GetComputedProperty v1, v459
        v463 <- CallMethod v449, 'has', [v462]
        v464 <- GetComputedProperty v1, v459
        v465 <- CallMethod v449, 'get', [v464]
    EndForInLoop
    BeginForInLoop v1 -> v466
        v467 <- GetComputedProperty v1, v466
        v468 <- CallMethod v446, 'delete', [v467]
        v469 <- GetComputedProperty v1, v466
        v470 <- CallMethod v449, 'delete', [v469]
    EndForInLoop
    v471 <- LoadInteger '0'
    v472 <- GetProperty v446, 'size'
    v473 <- LoadInteger '0'
    v474 <- GetProperty v449, 'size'
EndPlainFunction
v475 <- CallFunction v443, []
v476 <- BeginPlainFunction -> v477
    BeginForLoopInitializer
        v478 <- LoadInteger '0'
    BeginForLoopCondition -> v479
        v480 <- GetProperty v1, 'length'
        v481 <- Compare v479, '<', v480
    BeginForLoopAfterthought v481 -> v482
        v483 <- LoadInteger '2'
        Update v482, '+', v483
    BeginForLoopBody -> v484
        v485 <- GetComputedProperty v1, v484
        SetComputedProperty v477, v485, v484
    EndForLoop
EndPlainFunction
v486 <- BeginPlainFunction -> v487
    BeginForLoopInitializer
        v488 <- LoadInteger '1'
    BeginForLoopCondition -> v489
        v490 <- GetProperty v1, 'length'
        v491 <- Compare v489, '<', v490
    BeginForLoopAfterthought v491 -> v492
        v493 <- LoadInteger '2'
        Update v492, '+', v493
    BeginForLoopBody -> v494
        v495 <- GetComputedProperty v1, v494
        v496 <- LoadBoolean 'true'
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v494
            ObjectLiteralAddProperty `configurable`, v496
        v497 <- EndObjectLiteral
        v498 <- CreateNamedVariable 'Object', 'none'
        v499 <- CallMethod v498, 'defineProperty', [v487, v495, v497]
    EndForLoop
EndPlainFunction
v500 <- BeginPlainFunction -> v501
    v502 <- CreateNamedVariable 'Object', 'none'
    v503 <- CallMethod v502, 'create', [v501]
    v504 <- CreateNamedVariable 'obj2', 'var', v503
    BeginForInLoop v1 -> v505
        v506 <- LoadInteger '0'
        v507 <- BinaryOperation v505, '|', v506
        v508 <- GetComputedProperty v1, v505
        v509 <- GetComputedProperty v501, v508
        v510 <- LoadInteger '0'
        v511 <- BinaryOperation v505, '|', v510
        v512 <- GetComputedProperty v1, v505
        v513 <- GetComputedProperty v504, v512
    EndForInLoop
EndPlainFunction
v514 <- BeginPlainFunction -> v515
    BeginForInLoop v1 -> v516
        v517 <- GetComputedProperty v1, v516
        v518 <- TestIn v517, v515
        v519 <- GetComputedProperty v1, v516
        v520 <- CreateNamedVariable 'Object', 'none'
        v521 <- GetProperty v520, 'hasOwnProperty'
        v522 <- CallMethod v521, 'call', [v515, v519]
    EndForInLoop
EndPlainFunction
v523 <- BeginPlainFunction -> v524
    BeginForInLoop v524 -> v525
        v526 <- LoadString 'string'
        v527 <- TypeOf v525
    EndForInLoop
EndPlainFunction
v528 <- BeginPlainFunction -> v529
    v530 <- LoadInteger '0'
    v531 <- CreateNamedVariable 'Object', 'none'
    v532 <- CallMethod v531, 'keys', [v529]
    v533 <- GetProperty v532, 'length'
    v534 <- CallMethod v531, 'getOwnPropertyNames', [v529]
    v535 <- CreateNamedVariable 'names', 'var', v534
    BeginForInLoop v535 -> v536
        v537 <- LoadString 'string'
        v538 <- GetComputedProperty v535, v536
        v539 <- TypeOf v538
    EndForInLoop
EndPlainFunction
v540 <- BeginPlainFunction -> v541
    v542 <- CreateNamedVariable 'Object', 'none'
    v543 <- CallMethod v542, 'getOwnPropertySymbols', [v541]
    v544 <- CreateNamedVariable 'syms', 'var', v543
    v545 <- GetProperty v544, 'length'
    v546 <- GetProperty v1, 'length'
    BeginForInLoop v544 -> v547
        v548 <- LoadString 'symbol'
        v549 <- GetComputedProperty v544, v547
        v550 <- TypeOf v549
    EndForInLoop
EndPlainFunction
v551 <- BeginPlainFunction -> v552
    BeginForInLoop v1 -> v553
        v554 <- GetComputedProperty v1, v553
        v555 <- CreateNamedVariable 'Object', 'none'
        v556 <- CallMethod v555, 'getOwnPropertyDescriptor', [v552, v554]
        v557 <- CreateNamedVariable 'desc', 'var', v556
        v558 <- LoadInteger '0'
        v559 <- BinaryOperation v553, '|', v558
        v560 <- GetProperty v557, 'value'
        v561 <- GetProperty v557, 'configurable'
        v562 <- LoadInteger '2'
        v563 <- BinaryOperation v553, '%', v562
        v564 <- LoadInteger '0'
        v565 <- Compare v563, '==', v564
        v566 <- GetProperty v557, 'writable'
        v567 <- LoadInteger '2'
        v568 <- BinaryOperation v553, '%', v567
        v569 <- LoadInteger '0'
        v570 <- Compare v568, '==', v569
        v571 <- GetProperty v557, 'enumerable'
        v572 <- LoadInteger '2'
        v573 <- BinaryOperation v553, '%', v572
        v574 <- LoadInteger '0'
        v575 <- Compare v573, '==', v574
        v576 <- GetComputedProperty v1, v553
        v577 <- GetProperty v555, 'prototype'
        v578 <- GetProperty v577, 'propertyIsEnumerable'
        v579 <- CallMethod v578, 'call', [v552, v576]
    EndForInLoop
EndPlainFunction
v580 <- BeginPlainFunction -> v581
    BeginForInLoop v1 -> v582
        v583 <- GetComputedProperty v1, v582
        v584 <- DeleteComputedProperty v581, v583
    EndForInLoop
    BeginForInLoop v1 -> v585
        v586 <- LoadUndefined
        v587 <- GetComputedProperty v1, v585
        v588 <- CreateNamedVariable 'Object', 'none'
        v589 <- CallMethod v588, 'getOwnPropertyDescriptor', [v581, v587]
    EndForInLoop
EndPlainFunction
BeginObjectLiteral
v590 <- EndObjectLiteral
v591 <- CreateArray []
BeginObjectLiteral
v592 <- EndObjectLiteral
v593 <- CreateNamedVariable 'Object', 'none'
v594 <- CallMethod v593, 'create', [v592]
v595 <- LoadInteger '1'
v596 <- CallFunction v593, [v595]
v597 <- CreateNamedVariable 'Map', 'none'
v598 <- Construct v597, []
v599 <- BeginPlainFunction -> 
EndPlainFunction
v600 <- CreateArray [v590, v591, v594, v596, v598, v599]
v601 <- CreateNamedVariable 'objs', 'var', v600
BeginForInLoop v601 -> v602
    v603 <- GetComputedProperty v601, v602
    v604 <- CreateNamedVariable 'obj', 'var', v603
    v605 <- CallFunction v476, [v604]
    v606 <- CallFunction v486, [v604]
    v607 <- CallFunction v500, [v604]
    v608 <- CallFunction v514, [v604]
    v609 <- CallFunction v523, [v604]
    v610 <- CallFunction v528, [v604]
    v611 <- CallFunction v540, [v604]
    v612 <- CallFunction v551, [v604]
    v613 <- CallFunction v580, [v604]
EndForInLoop
v614 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v615 <- EndObjectLiteral
    v616 <- CreateNamedVariable 'properties', 'var', v615
    BeginForInLoop v1 -> v617
        v618 <- GetComputedProperty v1, v617
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v617
        v619 <- EndObjectLiteral
        v620 <- LoadInteger '2'
        v621 <- BinaryOperation v617, '%', v620
        v622 <- LoadInteger '0'
        v623 <- Compare v621, '===', v622
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v619
            ObjectLiteralAddProperty `enumerable`, v623
        v624 <- EndObjectLiteral
        v625 <- CallMethod v593, 'defineProperty', [v616, v618, v624]
    EndForInLoop
    BeginObjectLiteral
    v626 <- EndObjectLiteral
    v627 <- CallMethod v593, 'defineProperties', [v626, v616]
    v628 <- CreateNamedVariable 'o', 'var', v627
    BeginForInLoop v1 -> v629
        v630 <- LoadInteger '2'
        v631 <- BinaryOperation v629, '%', v630
        v632 <- LoadInteger '0'
        v633 <- Compare v631, '===', v632
        v634 <- GetComputedProperty v1, v629
        v635 <- TestIn v634, v628
    EndForInLoop
EndPlainFunction
v636 <- CallFunction v614, []
v637 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v638 <- EndObjectLiteral
    v639 <- CreateNamedVariable 'properties', 'var', v638
    BeginForInLoop v1 -> v640
        v641 <- GetComputedProperty v1, v640
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v640
        v642 <- EndObjectLiteral
        v643 <- LoadInteger '2'
        v644 <- BinaryOperation v640, '%', v643
        v645 <- LoadInteger '0'
        v646 <- Compare v644, '===', v645
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v642
            ObjectLiteralAddProperty `enumerable`, v646
        v647 <- EndObjectLiteral
        v648 <- CallMethod v593, 'defineProperty', [v639, v641, v647]
    EndForInLoop
    v649 <- GetProperty v593, 'prototype'
    v650 <- CallMethod v593, 'create', [v649, v639]
    v651 <- CreateNamedVariable 'o', 'var', v650
    BeginForInLoop v1 -> v652
        v653 <- LoadInteger '2'
        v654 <- BinaryOperation v652, '%', v653
        v655 <- LoadInteger '0'
        v656 <- Compare v654, '===', v655
        v657 <- GetComputedProperty v1, v652
        v658 <- TestIn v657, v651
    EndForInLoop
EndPlainFunction
v659 <- CallFunction v637, []
v660 <- BeginPlainFunction -> 
    v661 <- CreateNamedVariable 'gc', 'none'
    v662 <- CallFunction v661, []
    v663 <- LoadString 'key'
    v664 <- CallFunction v434, [v663]
    v665 <- CreateNamedVariable 'key', 'var', v664
    BeginObjectLiteral
    v666 <- EndObjectLiteral
    v667 <- CreateNamedVariable 'a', 'var', v666
    v668 <- LoadString 'abc'
    SetComputedProperty v667, v665, v668
    BeginForLoopInitializer
        v669 <- LoadInteger '0'
    BeginForLoopCondition -> v670
        v671 <- LoadInteger '100000'
        v672 <- Compare v670, '<', v671
    BeginForLoopAfterthought v672 -> v673
        v674 <- UnaryOperation v673, '++'
    BeginForLoopBody -> v675
        v676 <- LoadString 'a'
        UpdateComputedProperty v667, v665, '+',v676
    EndForLoop
EndPlainFunction
v677 <- CallFunction v660, []
v678 <- BeginPlainFunction -> 
    v679 <- LoadInteger '0'
    v680 <- LoadInteger '30'
    v681 <- CallMethod v1, 'slice', [v679, v680]
    v682 <- CreateNamedVariable 'syms', 'var', v681
    BeginObjectLiteral
    v683 <- EndObjectLiteral
    v684 <- CreateNamedVariable 'proto', 'var', v683
    v685 <- CallMethod v593, 'create', [v684]
    v686 <- CreateNamedVariable 'object', 'var', v685
    BeginForLoopInitializer
        v687 <- LoadInteger '0'
    BeginForLoopCondition -> v688
        v689 <- GetProperty v682, 'length'
        v690 <- Compare v688, '<', v689
    BeginForLoopAfterthought v690 -> v691
        v692 <- UnaryOperation v691, '++'
    BeginForLoopBody -> v693
        v694 <- LoadInteger '2'
        v695 <- BinaryOperation v693, '%', v694
        BeginIf v695
            v696 <- GetComputedProperty v682, v693
            SetComputedProperty v684, v696, v693
        BeginElse
            v697 <- GetComputedProperty v682, v693
            SetComputedProperty v686, v697, v693
        EndIf
    EndForLoop
    v698 <- CallMethod v593, 'getOwnPropertySymbols', [v686]
    v699 <- CreateNamedVariable 'objectOwnSymbols', 'var', v698
    v700 <- GetProperty v699, 'length'
    v701 <- GetProperty v682, 'length'
    v702 <- LoadInteger '2'
    v703 <- BinaryOperation v701, '/', v702
    BeginForLoopInitializer
        v704 <- LoadInteger '0'
    BeginForLoopCondition -> v705
        v706 <- GetProperty v699, 'length'
        v707 <- Compare v705, '<', v706
    BeginForLoopAfterthought v707 -> v708
        v709 <- UnaryOperation v708, '++'
    BeginForLoopBody -> v710
        v711 <- GetComputedProperty v699, v710
        v712 <- LoadInteger '2'
        v713 <- BinaryOperation v710, '*', v712
        v714 <- GetComputedProperty v682, v713
    EndForLoop
EndPlainFunction
v715 <- CallFunction v678, []
v716 <- BeginPlainFunction -> 
    v717 <- LoadString 'hasInstance'
    v718 <- LoadString 'iterator'
    v719 <- LoadString 'unscopables'
    v720 <- CreateArray [v717, v718, v719]
    v721 <- CreateNamedVariable 'symbols', 'var', v720
    BeginForInLoop v721 -> v722
        v723 <- GetComputedProperty v721, v722
        v724 <- CreateNamedVariable 'name', 'var', v723
        v725 <- CallMethod v593, 'getOwnPropertyDescriptor', [v434, v724]
        v726 <- CreateNamedVariable 'desc', 'var', v725
        v727 <- LoadString 'symbol'
        v728 <- GetProperty v726, 'value'
        v729 <- TypeOf v728
        v730 <- LoadString 'Symbol(Symbol.'
        v731 <- BinaryOperation v730, '+', v724
        v732 <- LoadString ')'
        v733 <- BinaryOperation v731, '+', v732
        v734 <- GetProperty v726, 'value'
        v735 <- CallMethod v734, 'toString', []
        v736 <- GetProperty v726, 'writable'
        v737 <- GetProperty v726, 'configurable'
        v738 <- GetProperty v726, 'enumerable'
        v739 <- LoadString 'Symbol.'
        v740 <- BinaryOperation v739, '+', v724
        v741 <- CallMethod v434, 'for', [v740]
        v742 <- GetProperty v726, 'value'
        v743 <- Compare v741, '===', v742
        v744 <- GetProperty v726, 'value'
        v745 <- CallMethod v434, 'keyFor', [v744]
        v746 <- LoadUndefined
        v747 <- Compare v745, '===', v746
    EndForInLoop
EndPlainFunction
v748 <- CallFunction v716, []
v749 <- BeginPlainFunction -> 
    v750 <- LoadString 'x1'
    v751 <- CallMethod v434, 'for', [v750]
    v752 <- CreateNamedVariable 'symbol1', 'var', v751
    v753 <- LoadString 'x2'
    v754 <- CallMethod v434, 'for', [v753]
    v755 <- CreateNamedVariable 'symbol2', 'var', v754
    v756 <- Compare v752, '===', v755
    v757 <- LoadString 'x1'
    v758 <- CallMethod v434, 'for', [v757]
    v759 <- LoadString 'x2'
    v760 <- CallMethod v434, 'for', [v759]
    v761 <- LoadString 'x1'
    v762 <- CallMethod v434, 'keyFor', [v752]
    v763 <- LoadString 'x2'
    v764 <- CallMethod v434, 'keyFor', [v755]
    v765 <- LoadString '1'
    v766 <- CallMethod v434, 'for', [v765]
    v767 <- LoadInteger '1'
    v768 <- CallMethod v434, 'for', [v767]
    v769 <- BeginPlainFunction -> 
        v770 <- LoadString 'bla'
        v771 <- CallMethod v434, 'keyFor', [v770]
    EndPlainFunction
    v772 <- CallFunction v769, []
    v773 <- CreateNamedVariable 'TypeError', 'none'
    v774 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v775 <- EndObjectLiteral
        v776 <- CallMethod v434, 'keyFor', [v775]
    EndPlainFunction
    v777 <- CallFunction v774, []
EndPlainFunction
v778 <- CallFunction v749, []
v779 <- BeginPlainFunction -> 
    v780 <- LoadBoolean 'true'
    v781 <- CallMethod v593, 'getOwnPropertySymbols', [v780]
    v782 <- CreateArray []
    v783 <- LoadInteger '5000'
    v784 <- CallMethod v593, 'getOwnPropertySymbols', [v783]
    v785 <- CreateArray []
    v786 <- LoadString 'OK'
    v787 <- CallMethod v593, 'getOwnPropertySymbols', [v786]
    v788 <- CreateArray []
EndPlainFunction
v789 <- CallFunction v779, []
v790 <- BeginPlainFunction -> 
    v791 <- BeginPlainFunction -> 
        v792 <- CallFunction v434, []
        v793 <- CreateNamedVariable 'a', 'var', v792
        v794 <- CallFunction v434, []
        v795 <- CreateNamedVariable 'b', 'var', v794
        v796 <- Compare v793, '<', v795
    EndPlainFunction
    v797 <- BeginPlainFunction -> 
        v798 <- CallFunction v434, []
        v799 <- CreateNamedVariable 'a', 'var', v798
        v800 <- CallFunction v434, []
        v801 <- CreateNamedVariable 'b', 'var', v800
        v802 <- Compare v799, '>', v801
    EndPlainFunction
    v803 <- BeginPlainFunction -> 
        v804 <- CallFunction v434, []
        v805 <- CreateNamedVariable 'a', 'var', v804
        v806 <- CallFunction v434, []
        v807 <- CreateNamedVariable 'b', 'var', v806
        v808 <- Compare v805, '<=', v807
    EndPlainFunction
    v809 <- BeginPlainFunction -> 
        v810 <- CallFunction v434, []
        v811 <- CreateNamedVariable 'a', 'var', v810
        v812 <- CallFunction v434, []
        v813 <- CreateNamedVariable 'b', 'var', v812
        v814 <- Compare v811, '>=', v813
    EndPlainFunction
    v815 <- BeginPlainFunction -> 
        v816 <- CallFunction v434, []
        v817 <- CreateNamedVariable 'a', 'var', v816
        v818 <- Compare v817, '<', v817
    EndPlainFunction
    v819 <- BeginPlainFunction -> 
        v820 <- CallFunction v434, []
        v821 <- CreateNamedVariable 'a', 'var', v820
        v822 <- Compare v821, '>', v821
    EndPlainFunction
    v823 <- BeginPlainFunction -> 
        v824 <- CallFunction v434, []
        v825 <- CreateNamedVariable 'a', 'var', v824
        v826 <- Compare v825, '<=', v825
    EndPlainFunction
    v827 <- BeginPlainFunction -> 
        v828 <- CallFunction v434, []
        v829 <- CreateNamedVariable 'a', 'var', v828
        v830 <- Compare v829, '>=', v829
    EndPlainFunction
    v831 <- CreateArray [v791, v797, v803, v809, v815, v819, v823, v827]
    v832 <- CreateNamedVariable 'throwFuncs', 'var', v831
    BeginForOfLoop v832 -> v833
        v834 <- CreateNamedVariable 'TypeError', 'none'
    EndForOfLoop
EndPlainFunction
v835 <- CallFunction v790, []
v836 <- BeginPlainFunction -> 
    v837 <- BeginPlainFunction -> v838, v839
        BeginTry
            v840 <- Construct v838, []
        BeginCatch -> v841
            v842 <- GetProperty v841, '__proto__'
            v843 <- GetProperty v839, '__proto__'
            v844 <- Compare v842, '===', v843
            Return v844
        EndTryCatch
        v845 <- LoadBoolean 'false'
    EndPlainFunction
    v846 <- CreateNamedVariable 'TypeError', 'none'
    v847 <- CallFunction v846, []
    v848 <- CallFunction v837, [v434, v847]
EndPlainFunction
v849 <- CallFunction v836, []
v850 <- BeginPlainFunction -> v851, v852
    v853 <- CreateNamedVariable 'JSON', 'none'
    v854 <- CallMethod v853, 'stringify', [v852]
    v855 <- BeginArrowFunction -> v856, v857
        Return v857
    EndArrowFunction
    v858 <- CallMethod v853, 'stringify', [v852, v855]
    v859 <- LoadNull
    v860 <- LoadString '='
    v861 <- CallMethod v853, 'stringify', [v852, v859, v860]
    v862 <- BeginArrowFunction -> v863, v864
        Return v864
    EndArrowFunction
    v865 <- LoadString '='
    v866 <- CallMethod v853, 'stringify', [v852, v862, v865]
EndPlainFunction
v867 <- LoadUndefined
v868 <- LoadString 'a'
v869 <- CallFunction v434, [v868]
v870 <- CallFunction v850, [v867, v869]
v871 <- LoadString '[{}]'
v872 <- CallFunction v434, []
v873 <- CallFunction v593, [v872]
v874 <- CreateArray [v873]
v875 <- CallFunction v850, [v871, v874]
v876 <- LoadString 'a'
v877 <- CallFunction v434, [v876]
v878 <- CallFunction v593, [v877]
v879 <- CreateNamedVariable 'symbol_wrapper', 'var', v878
v880 <- LoadString '{}'
v881 <- CallFunction v850, [v880, v879]
v882 <- LoadInteger '1'
SetProperty v879, 'a', v882
v883 <- LoadString '{"a":1}'
v884 <- CallFunction v850, [v883, v879]


var symbols = [];
function isValidSymbolString(a3) {
    return (["Symbol(66)","Symbol()"]).indexOf(a3) >= 0;
}
function TestNew() {
    function indirectSymbol() {
        return Symbol();
    }
    function indirect() {
        return indirectSymbol();
    }
    for (let i17 = 0; i17 < 2; ++i17) {
        for (let i24 = 0; i24 < 5; ++i24) {
            symbols.push(Symbol());
            symbols.push(Symbol(undefined));
            symbols.push(Symbol("66"));
            symbols.push(Symbol(66));
            symbols.push(Symbol().valueOf());
            symbols.push(indirect());
        }
        indirect();
        gc();
    }
    function f50() {
        Symbol(Symbol());
    }
    f50();
    function f56() {
        new Symbol(66);
    }
    f56();
}
TestNew();
function TestType() {
    for (const v63 in symbols) {
        typeof symbols[v63];
        typeof symbols[v63] === "symbol";
    }
}
TestType();
function TestPrototype() {
    Object.prototype;
    Symbol.prototype.__proto__;
    Symbol.prototype;
    Symbol().__proto__;
    Symbol.prototype;
    Object(Symbol()).__proto__;
    for (const v85 in symbols) {
        Symbol.prototype;
        symbols[v85].__proto__;
    }
}
TestPrototype();
function TestConstructor() {
    Symbol.length;
    Function.prototype;
    Symbol.__proto__;
    Object === Symbol.prototype.constructor;
    Symbol === Object.prototype.constructor;
    Symbol.prototype.constructor;
    Symbol().__proto__.constructor;
    Object(Symbol()).__proto__.constructor;
    for (const v113 in symbols) {
        symbols[v113].__proto__.constructor;
    }
}
TestConstructor();
function TestValueOf() {
    for (const v119 in symbols) {
        symbols[v119] === Object(symbols[v119]).valueOf();
        symbols[v119] === symbols[v119].valueOf();
        const v131 = Object(symbols[v119]);
        Symbol.prototype.valueOf.call(v131) === symbols[v119];
        const v138 = symbols[v119];
        Symbol.prototype.valueOf.call(v138) === symbols[v119];
    }
}
TestValueOf();
function TestToString() {
    for (const v146 in symbols) {
        function f147() {
            new String(symbols[v146]);
        }
        f147();
        symbols[v146].toString();
        String(symbols[v146]);
        function f158() {
            symbols[v146] + "";
        }
        f158();
        function f163() {
            String(Object(symbols[v146]));
        }
        f163();
        isValidSymbolString(symbols[v146].toString());
        isValidSymbolString(Object(symbols[v146]).toString());
        const v177 = symbols[v146];
        isValidSymbolString(Symbol.prototype.toString.call(v177));
        const v184 = symbols[v146];
        Object.prototype.toString.call(v184);
    }
}
TestToString();
function TestToBoolean() {
    for (const v190 in symbols) {
        Boolean(Object(symbols[v190]));
        !Object(symbols[v190]);
        Boolean(symbols[v190]).valueOf();
        !symbols[v190];
        !(!symbols[v190]);
        symbols[v190] && true;
        !symbols[v190] && false;
        !symbols[v190] || true;
        symbols[v190] ? 1 : 2;
        !symbols[v190] ? 1 : 2;
        if (!symbols[v190]) {
        }
        if (symbols[v190]) {
        } else {
        }
    }
}
TestToBoolean();
function TestToNumber() {
    for (const v234 in symbols) {
        function f235() {
            Number(Object(symbols[v234]));
        }
        f235();
        function f243() {
            +Object(symbols[v234]);
        }
        f243();
        function f249() {
            Number(symbols[v234]);
        }
        f249();
        function f254() {
            symbols[v234] + 0;
        }
        f254();
    }
}
TestToNumber();
function TestEquality() {
    for (const v261 in symbols) {
        symbols[v261];
        symbols[v261];
        symbols[v261];
        symbols[v261];
        Object.is(symbols[v261], symbols[v261]);
        symbols[v261] === symbols[v261];
        symbols[v261] == symbols[v261];
        symbols[v261] === Object(symbols[v261]);
        Object(symbols[v261]) === symbols[v261];
        symbols[v261] == Object(symbols[v261]);
        Object(symbols[v261]) == symbols[v261];
        symbols[v261] === symbols[v261].valueOf();
        symbols[v261].valueOf() === symbols[v261];
        symbols[v261] == symbols[v261].valueOf();
        symbols[v261].valueOf() == symbols[v261];
        Object(symbols[v261]) === Object(symbols[v261]);
        Object(symbols[v261]).valueOf();
        Object(symbols[v261]).valueOf();
    }
    for (let i320 = 0; i320 < symbols.length; ++i320) {
        for (let i328 = i320 + 1; i328 < symbols.length; ++i328) {
            Object.is(symbols[i320], symbols[i328]);
            symbols[i320] === symbols[i328];
            symbols[i320] == symbols[i328];
        }
    }
    const v350 = {};
    function f351() {
    }
    var values = [347,1.275,NaN,"string",null,,v350,f351];
    for (const v354 in symbols) {
        for (const v355 in values) {
            symbols[v354] === values[v355];
            values[v355] === symbols[v354];
            symbols[v354] == values[v355];
            values[v355] == symbols[v354];
        }
    }
}
TestEquality();
function TestGet() {
    for (const v370 in symbols) {
        isValidSymbolString(symbols[v370].toString());
        symbols[v370];
        symbols[v370].valueOf();
        symbols[v370].a;
        symbols[v370]["a" + "b"];
        symbols[v370]["" + "1"];
        symbols[v370][62];
    }
}
TestGet();
function TestSet() {
    for (const v397 in symbols) {
        const t200 = symbols[v397];
        t200.toString = 0;
        isValidSymbolString(symbols[v397].toString());
        const t202 = symbols[v397];
        t202.valueOf = 0;
        symbols[v397];
        symbols[v397].valueOf();
        const t205 = symbols[v397];
        t205.a = 0;
        symbols[v397].a;
        const t209 = symbols[v397];
        t209["a" + "b"] = 0;
        symbols[v397]["a" + "b"];
        const t212 = symbols[v397];
        t212[62] = 0;
        symbols[v397][62];
    }
}
TestSet();
function f430() {
    return Object.getPrototypeOf(this);
}
const t222 = Symbol.prototype;
t222.getThisProto = f430;
function TestCall() {
    for (const v437 in symbols) {
        symbols[v437].getThisProto() === Symbol.prototype;
    }
}
TestCall();
function TestCollections() {
    const v445 = new Set();
    var set = v445;
    const v448 = new Map();
    var map = v448;
    for (const v450 in symbols) {
        set.add(symbols[v450]);
        map.set(symbols[v450], v450);
    }
    symbols.length;
    set.size;
    symbols.length;
    map.size;
    for (const v459 in symbols) {
        set.has(symbols[v459]);
        map.has(symbols[v459]);
        map.get(symbols[v459]);
    }
    for (const v466 in symbols) {
        set.delete(symbols[v466]);
        map.delete(symbols[v466]);
    }
    set.size;
    map.size;
}
TestCollections();
function TestKeySet(a477) {
    for (let i479 = 0; i479 < symbols.length; i479 += 2) {
        a477[symbols[i479]] = i479;
    }
}
function TestKeyDefine(a487) {
    for (let i489 = 1; i489 < symbols.length; i489 += 2) {
        const v495 = symbols[i489];
        Object.defineProperty(a487, v495, { value: i489, configurable: true });
    }
}
function TestKeyGet(a501) {
    var obj2 = Object.create(a501);
    for (const v505 in symbols) {
        v505 | 0;
        a501[symbols[v505]];
        v505 | 0;
        obj2[symbols[v505]];
    }
}
function TestKeyHas(a515) {
    for (const v516 in symbols) {
        symbols[v516] in a515;
        const v519 = symbols[v516];
        Object.hasOwnProperty.call(a515, v519);
    }
}
function TestKeyEnum(a524) {
    for (const v525 in a524) {
        typeof v525;
    }
}
function TestKeyNames(a529) {
    Object.keys(a529).length;
    var names = Object.getOwnPropertyNames(a529);
    for (const v536 in names) {
        typeof names[v536];
    }
}
function TestGetOwnPropertySymbols(a541) {
    var syms = Object.getOwnPropertySymbols(a541);
    syms.length;
    symbols.length;
    for (const v547 in syms) {
        typeof syms[v547];
    }
}
function TestKeyDescriptor(a552) {
    for (const v553 in symbols) {
        var desc = Object.getOwnPropertyDescriptor(a552, symbols[v553]);
        v553 | 0;
        desc.value;
        desc.configurable;
        (v553 % 2) == 0;
        desc.writable;
        (v553 % 2) == 0;
        desc.enumerable;
        (v553 % 2) == 0;
        const v576 = symbols[v553];
        Object.prototype.propertyIsEnumerable.call(a552, v576);
    }
}
function TestKeyDelete(a581) {
    for (const v582 in symbols) {
        delete a581[symbols[v582]];
    }
    for (const v585 in symbols) {
        Object.getOwnPropertyDescriptor(a581, symbols[v585]);
    }
}
const v590 = {};
const v591 = [];
const v594 = Object.create({});
const v596 = Object(1);
const v598 = new Map();
function f599() {
}
var objs = [v590,v591,v594,v596,v598,f599];
for (const v602 in objs) {
    var obj = objs[v602];
    TestKeySet(obj);
    TestKeyDefine(obj);
    TestKeyGet(obj);
    TestKeyHas(obj);
    TestKeyEnum(obj);
    TestKeyNames(obj);
    TestGetOwnPropertySymbols(obj);
    TestKeyDescriptor(obj);
    TestKeyDelete(obj);
}
function TestDefineProperties() {
    var properties = {};
    for (const v617 in symbols) {
        const v618 = symbols[v617];
        const v619 = { value: v617 };
        const v623 = (v617 % 2) === 0;
        Object.defineProperty(properties, v618, { value: v619, enumerable: v623 });
    }
    var o = Object.defineProperties({}, properties);
    for (const v629 in symbols) {
        (v629 % 2) === 0;
        symbols[v629] in o;
    }
}
TestDefineProperties();
function TestCreate() {
    var properties = {};
    for (const v640 in symbols) {
        const v641 = symbols[v640];
        const v642 = { value: v640 };
        const v646 = (v640 % 2) === 0;
        Object.defineProperty(properties, v641, { value: v642, enumerable: v646 });
    }
    var o = Object.create(Object.prototype, properties);
    for (const v652 in symbols) {
        (v652 % 2) === 0;
        symbols[v652] in o;
    }
}
TestCreate();
function TestCachedKeyAfterScavenge() {
    gc();
    var key = Symbol("key");
    var a = {};
    a[key] = "abc";
    for (let i670 = 0; i670 < 100000; i670++) {
        a[key] += "a";
    }
}
TestCachedKeyAfterScavenge();
function TestGetOwnPropertySymbolsWithProto() {
    var syms = symbols.slice(0, 30);
    var proto = {};
    var object = Object.create(proto);
    for (let i688 = 0; i688 < syms.length; i688++) {
        if (i688 % 2) {
            proto[syms[i688]] = i688;
        } else {
            object[syms[i688]] = i688;
        }
    }
    var objectOwnSymbols = Object.getOwnPropertySymbols(object);
    objectOwnSymbols.length;
    syms.length / 2;
    for (let i705 = 0; i705 < objectOwnSymbols.length; i705++) {
        objectOwnSymbols[i705];
        syms[i705 * 2];
    }
}
TestGetOwnPropertySymbolsWithProto();
function TestWellKnown() {
    var symbols = ["hasInstance","iterator","unscopables"];
    for (const v722 in symbols) {
        var name = symbols[v722];
        var desc = Object.getOwnPropertyDescriptor(Symbol, name);
        typeof desc.value;
        ("Symbol(Symbol." + name) + ")";
        desc.value.toString();
        desc.writable;
        desc.configurable;
        desc.enumerable;
        Symbol.for("Symbol." + name) === desc.value;
        Symbol.keyFor(desc.value) === undefined;
    }
}
TestWellKnown();
function TestRegistry() {
    var symbol1 = Symbol.for("x1");
    var symbol2 = Symbol.for("x2");
    symbol1 === symbol2;
    Symbol.for("x1");
    Symbol.for("x2");
    Symbol.keyFor(symbol1);
    Symbol.keyFor(symbol2);
    Symbol.for("1");
    Symbol.for(1);
    function f769() {
        Symbol.keyFor("bla");
    }
    f769();
    function f774() {
        Symbol.keyFor({});
    }
    f774();
}
TestRegistry();
function TestGetOwnPropertySymbolsOnPrimitives() {
    Object.getOwnPropertySymbols(true);
    [];
    Object.getOwnPropertySymbols(5000);
    [];
    Object.getOwnPropertySymbols("OK");
    [];
}
TestGetOwnPropertySymbolsOnPrimitives();
function TestComparison() {
    function lt() {
        var a = Symbol();
        var b = Symbol();
        a < b;
    }
    function gt() {
        var a = Symbol();
        var b = Symbol();
        a > b;
    }
    function le() {
        var a = Symbol();
        var b = Symbol();
        a <= b;
    }
    function ge() {
        var a = Symbol();
        var b = Symbol();
        a >= b;
    }
    function lt_same() {
        var a = Symbol();
        a < a;
    }
    function gt_same() {
        var a = Symbol();
        a > a;
    }
    function le_same() {
        var a = Symbol();
        a <= a;
    }
    function ge_same() {
        var a = Symbol();
        a >= a;
    }
    var throwFuncs = [lt,gt,le,ge,lt_same,gt_same,le_same,ge_same];
    for (const v833 of throwFuncs) {
    }
}
TestComparison();
function TestContext() {
    function verifier(a838, a839) {
        try {
            new a838();
        } catch(e841) {
            return e841.__proto__ === a839.__proto__;
        }
    }
    verifier(Symbol, TypeError());
}
TestContext();
function TestStringify(a851, a852) {
    JSON.stringify(a852);
    const v855 = (a856, a857) => {
        return a857;
    };
    JSON.stringify(a852, v855);
    JSON.stringify(a852, null, "=");
    const v862 = (a863, a864) => {
        return a864;
    };
    JSON.stringify(a852, v862, "=");
}
TestStringify(undefined, Symbol("a"));
TestStringify("[{}]", [Object(Symbol())]);
var symbol_wrapper = Object(Symbol("a"));
TestStringify("{}", symbol_wrapper);
symbol_wrapper.a = 1;
TestStringify("{"a":1}", symbol_wrapper);

FuzzIL program written to corpus/symbols.fzil
