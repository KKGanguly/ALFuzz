v0 <- LoadString 'Method Error.prototype.toString called on incompatible receiver '
v1 <- CreateNamedVariable 'msg', 'var', v0
v2 <- LoadString 'invalid'
v3 <- LoadInteger '23'
v4 <- LoadUndefined
v5 <- LoadNull
v6 <- CreateArray [v2, v3, v4, v5]
v7 <- CreateNamedVariable 'invalid_this', 'var', v6
BeginForLoopInitializer
    v8 <- LoadInteger '0'
BeginForLoopCondition -> v9
    v10 <- GetProperty v7, 'length'
    v11 <- Compare v9, '<', v10
BeginForLoopAfterthought v11 -> v12
    v13 <- UnaryOperation v12, '++'
BeginForLoopBody -> v14
    v15 <- LoadBoolean 'false'
    v16 <- CreateNamedVariable 'exception', 'var', v15
    BeginTry
        v17 <- GetComputedProperty v7, v14
        v18 <- CreateNamedVariable 'Error', 'none'
        v19 <- GetProperty v18, 'prototype'
        v20 <- GetProperty v19, 'toString'
        v21 <- CallMethod v20, 'call', [v17]
    BeginCatch -> v22
        v23 <- LoadBoolean 'true'
        Reassign v16, v23
        v24 <- GetComputedProperty v7, v14
        v25 <- BinaryOperation v1, '+', v24
        v26 <- GetProperty v22, 'message'
    EndTryCatch
EndForLoop


var msg = "Method Error.prototype.toString called on incompatible receiver ";
var invalid_this = ["invalid",23,,null];
for (let i9 = 0; i9 < invalid_this.length; i9++) {
    var exception = false;
    try {
        const v17 = invalid_this[i9];
        Error.prototype.toString.call(v17);
    } catch(e22) {
        exception = true;
        msg + invalid_this[i9];
        e22.message;
    }
}

FuzzIL program written to corpus/regress-1980.fzil
