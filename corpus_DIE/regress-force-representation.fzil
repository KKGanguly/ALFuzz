v0 <- BeginPlainFunction -> v1
    v2 <- CallFunction v1, []
    v3 <- CallFunction v1, []
    v4 <- CallFunction v1, []
EndPlainFunction
v5 <- BeginPlainFunction -> 
    v6 <- LoadInteger '0'
    v7 <- CreateNamedVariable 'v1', 'var', v6
    v8 <- LoadInteger '0'
    v9 <- UnaryOperation '-', v8
    v10 <- CreateNamedVariable 'v2', 'var', v9
    v11 <- UnaryOperation v10, '++'
    v12 <- CreateNamedVariable 't', 'var', v11
    v13 <- UnaryOperation v10, '++'
    v14 <- UnaryOperation v10, '++'
    v15 <- UnaryOperation v7, '++'
    v16 <- CreateNamedVariable 'Math', 'none'
    v17 <- CallMethod v16, 'max', [v14, v15]
    Return v17
EndPlainFunction
v18 <- CallFunction v0, [v5]


function optimize(a1) {
    a1();
    a1();
    a1();
}
function f() {
    var v1 = 0;
    var v2 = -0;
    var t = v2++;
    v2++;
    return Math.max(v2++, v1++);
}
optimize(f);

FuzzIL program written to corpus/regress-force-representation.fzil
