v0 <- BeginGeneratorFunction -> 
EndGeneratorFunction
v1 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v2 <- LoadInteger '0'
    BeginForLoopCondition -> v3
        v4 <- LoadInteger '100'
        v5 <- Compare v3, '<', v4
    BeginForLoopAfterthought v5 -> v6
        v7 <- UnaryOperation '++', v6
    BeginForLoopBody -> v8
        v9 <- CreateNamedVariable 'gen', 'none'
        v10 <- CallFunction v9, []
        v11 <- CreateNamedVariable 'g', 'var', v10
        v12 <- LoadInteger '42'
        SetProperty v11, 'p', v12
    EndForLoop
EndPlainFunction
v13 <- CallFunction v1, []
v14 <- CreateNamedVariable 'gc', 'none'
v15 <- CallFunction v14, []
v16 <- CreateNamedVariable 'gen', 'none'
v17 <- CallFunction v16, []
v18 <- CallFunction v16, []


function* gen1() {
}
function warmup() {
    for (let i3 = 0; i3 < 100; ++i3) {
        var g = gen();
        g.p = 42;
    }
}
warmup();
gc();
gen();
gen();

FuzzIL program written to corpus/regress-crbug-741078.fzil
