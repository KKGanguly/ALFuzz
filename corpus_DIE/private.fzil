v0 <- CreateArray []
v1 <- CreateNamedVariable 'symbols', 'var', v0
v2 <- BeginPlainFunction -> v3
    v4 <- LoadString 'Symbol(66)'
    v5 <- CreateArray [v4]
    v6 <- CallMethod v5, 'indexOf', [v3]
    v7 <- LoadInteger '0'
    v8 <- Compare v6, '>=', v7
    Return v8
EndPlainFunction
v9 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v10 <- LoadInteger '0'
    BeginForLoopCondition -> v11
        v12 <- LoadInteger '2'
        v13 <- Compare v11, '<', v12
    BeginForLoopAfterthought v13 -> v14
        v15 <- UnaryOperation '++', v14
    BeginForLoopBody -> v16
        BeginForLoopInitializer
            v17 <- LoadInteger '0'
        BeginForLoopCondition -> v18
            v19 <- LoadInteger '5'
            v20 <- Compare v18, '<', v19
        BeginForLoopAfterthought v20 -> v21
            v22 <- UnaryOperation '++', v21
        BeginForLoopBody -> v23
            v24 <- LoadString '66'
            v25 <- CreateNamedVariable 'f', 'none'
            v26 <- CallFunction v25, [v24]
            v27 <- CallMethod v1, 'push', [v26]
            v28 <- LoadString '66'
            v29 <- CallFunction v25, [v28]
            v30 <- CreateNamedVariable 'Object', 'none'
            v31 <- CallFunction v30, [v29]
            v32 <- CallMethod v31, 'valueOf', []
            v33 <- CallMethod v1, 'push', [v32]
        EndForLoop
        v34 <- CreateNamedVariable 'gc', 'none'
        v35 <- CallFunction v34, []
    EndForLoop
EndPlainFunction
v36 <- CallFunction v9, []
v37 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v38
        v39 <- LoadString 'symbol'
        v40 <- GetComputedProperty v1, v38
        v41 <- TypeOf v40
        v42 <- GetComputedProperty v1, v38
        v43 <- TypeOf v42
        v44 <- LoadString 'symbol'
        v45 <- Compare v43, '===', v44
    EndForInLoop
EndPlainFunction
v46 <- CallFunction v37, []
v47 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v48
        v49 <- CreateNamedVariable 'Symbol', 'none'
        v50 <- GetProperty v49, 'prototype'
        v51 <- GetComputedProperty v1, v48
        v52 <- GetProperty v51, '__proto__'
    EndForInLoop
EndPlainFunction
v53 <- CallFunction v47, []
v54 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v55
        v56 <- CreateNamedVariable 'Symbol', 'none'
        v57 <- GetComputedProperty v1, v55
        v58 <- GetProperty v57, '__proto__'
        v59 <- GetProperty v58, 'constructor'
        v60 <- GetComputedProperty v1, v55
        v61 <- CreateNamedVariable 'Object', 'none'
        v62 <- CallFunction v61, [v60]
        v63 <- GetProperty v62, '__proto__'
        v64 <- GetProperty v63, 'constructor'
    EndForInLoop
EndPlainFunction
v65 <- CallFunction v54, []
v66 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v67
        v68 <- BeginPlainFunction -> 
            v69 <- CreateNamedVariable 'String', 'none'
            v70 <- GetComputedProperty v1, v67
            v71 <- Construct v69, [v70]
        EndPlainFunction
        v72 <- CallFunction v68, []
        v73 <- CreateNamedVariable 'TypeError', 'none'
        v74 <- GetComputedProperty v1, v67
        v75 <- CallMethod v74, 'toString', []
        v76 <- GetComputedProperty v1, v67
        v77 <- CreateNamedVariable 'String', 'none'
        v78 <- CallFunction v77, [v76]
        v79 <- BeginPlainFunction -> 
            v80 <- GetComputedProperty v1, v67
            v81 <- LoadString ''
            v82 <- BinaryOperation v80, '+', v81
        EndPlainFunction
        v83 <- CallFunction v79, []
        v84 <- GetComputedProperty v1, v67
        v85 <- CallMethod v84, 'toString', []
        v86 <- CallFunction v2, [v85]
        v87 <- GetComputedProperty v1, v67
        v88 <- CreateNamedVariable 'Object', 'none'
        v89 <- CallFunction v88, [v87]
        v90 <- CallMethod v89, 'toString', []
        v91 <- CallFunction v2, [v90]
        v92 <- GetComputedProperty v1, v67
        v93 <- CreateNamedVariable 'Symbol', 'none'
        v94 <- GetProperty v93, 'prototype'
        v95 <- GetProperty v94, 'toString'
        v96 <- CallMethod v95, 'call', [v92]
        v97 <- CallFunction v2, [v96]
        v98 <- LoadString '[object Symbol]'
        v99 <- GetComputedProperty v1, v67
        v100 <- GetProperty v88, 'prototype'
        v101 <- GetProperty v100, 'toString'
        v102 <- CallMethod v101, 'call', [v99]
    EndForInLoop
EndPlainFunction
v103 <- CallFunction v66, []
v104 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v105
        v106 <- GetComputedProperty v1, v105
        v107 <- CreateNamedVariable 'Boolean', 'none'
        v108 <- CallFunction v107, [v106]
        v109 <- CallMethod v108, 'valueOf', []
        v110 <- GetComputedProperty v1, v105
        v111 <- UnaryOperation '!', v110
        v112 <- GetComputedProperty v1, v105
        v113 <- UnaryOperation '!', v112
        v114 <- UnaryOperation '!', v113
        v115 <- GetComputedProperty v1, v105
        v116 <- LoadBoolean 'true'
        v117 <- BinaryOperation v115, '&&', v116
        v118 <- GetComputedProperty v1, v105
        v119 <- UnaryOperation '!', v118
        v120 <- LoadBoolean 'false'
        v121 <- BinaryOperation v119, '&&', v120
        v122 <- GetComputedProperty v1, v105
        v123 <- UnaryOperation '!', v122
        v124 <- LoadBoolean 'true'
        v125 <- BinaryOperation v123, '||', v124
        v126 <- LoadInteger '1'
        v127 <- GetComputedProperty v1, v105
        v128 <- LoadInteger '1'
        v129 <- LoadInteger '2'
        v130 <- TernaryOperation v127, v128, v129
        v131 <- LoadInteger '2'
        v132 <- GetComputedProperty v1, v105
        v133 <- UnaryOperation '!', v132
        v134 <- LoadInteger '1'
        v135 <- LoadInteger '2'
        v136 <- TernaryOperation v133, v134, v135
        v137 <- GetComputedProperty v1, v105
        v138 <- UnaryOperation '!', v137
        BeginIf v138
        EndIf
        v139 <- GetComputedProperty v1, v105
        BeginIf v139
        BeginElse
        EndIf
    EndForInLoop
EndPlainFunction
v140 <- CallFunction v104, []
v141 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v142
        v143 <- BeginPlainFunction -> 
            v144 <- GetComputedProperty v1, v142
            v145 <- CreateNamedVariable 'Number', 'none'
            v146 <- CallFunction v145, [v144]
        EndPlainFunction
        v147 <- CallFunction v143, []
        v148 <- CreateNamedVariable 'TypeError', 'none'
        v149 <- BeginPlainFunction -> 
            v150 <- GetComputedProperty v1, v142
            v151 <- LoadInteger '0'
            v152 <- BinaryOperation v150, '+', v151
        EndPlainFunction
        v153 <- CallFunction v149, []
    EndForInLoop
EndPlainFunction
v154 <- CallFunction v141, []
v155 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v156
        v157 <- GetComputedProperty v1, v156
        v158 <- GetComputedProperty v1, v156
        v159 <- GetComputedProperty v1, v156
        v160 <- GetComputedProperty v1, v156
        v161 <- GetComputedProperty v1, v156
        v162 <- GetComputedProperty v1, v156
        v163 <- CreateNamedVariable 'Object', 'none'
        v164 <- CallMethod v163, 'is', [v161, v162]
        v165 <- GetComputedProperty v1, v156
        v166 <- GetComputedProperty v1, v156
        v167 <- Compare v165, '===', v166
        v168 <- GetComputedProperty v1, v156
        v169 <- GetComputedProperty v1, v156
        v170 <- Compare v168, '==', v169
        v171 <- GetComputedProperty v1, v156
        v172 <- GetComputedProperty v1, v156
        v173 <- CallFunction v163, [v172]
        v174 <- Compare v171, '===', v173
        v175 <- GetComputedProperty v1, v156
        v176 <- CallFunction v163, [v175]
        v177 <- GetComputedProperty v1, v156
        v178 <- Compare v176, '===', v177
        v179 <- GetComputedProperty v1, v156
        v180 <- GetComputedProperty v1, v156
        v181 <- CallFunction v163, [v180]
        v182 <- Compare v179, '==', v181
        v183 <- GetComputedProperty v1, v156
        v184 <- CallFunction v163, [v183]
        v185 <- GetComputedProperty v1, v156
        v186 <- Compare v184, '==', v185
        v187 <- GetComputedProperty v1, v156
        v188 <- GetComputedProperty v1, v156
        v189 <- CallMethod v188, 'valueOf', []
        v190 <- Compare v187, '===', v189
        v191 <- GetComputedProperty v1, v156
        v192 <- CallMethod v191, 'valueOf', []
        v193 <- GetComputedProperty v1, v156
        v194 <- Compare v192, '===', v193
        v195 <- GetComputedProperty v1, v156
        v196 <- GetComputedProperty v1, v156
        v197 <- CallMethod v196, 'valueOf', []
        v198 <- Compare v195, '==', v197
        v199 <- GetComputedProperty v1, v156
        v200 <- CallMethod v199, 'valueOf', []
        v201 <- GetComputedProperty v1, v156
        v202 <- Compare v200, '==', v201
    EndForInLoop
    BeginForLoopInitializer
        v203 <- LoadInteger '0'
    BeginForLoopCondition -> v204
        v205 <- GetProperty v1, 'length'
        v206 <- Compare v204, '<', v205
    BeginForLoopAfterthought v206 -> v207
        v208 <- UnaryOperation '++', v207
    BeginForLoopBody -> v209
        BeginForLoopInitializer
            v210 <- LoadInteger '1'
            v211 <- BinaryOperation v209, '+', v210
        BeginForLoopCondition -> v212
            v213 <- GetProperty v1, 'length'
            v214 <- Compare v212, '<', v213
        BeginForLoopAfterthought v214 -> v215
            v216 <- UnaryOperation '++', v215
        BeginForLoopBody -> v217
            v218 <- GetComputedProperty v1, v209
            v219 <- GetComputedProperty v1, v217
            v220 <- CreateNamedVariable 'Object', 'none'
            v221 <- CallMethod v220, 'is', [v218, v219]
            v222 <- GetComputedProperty v1, v209
            v223 <- GetComputedProperty v1, v217
            v224 <- Compare v222, '===', v223
            v225 <- GetComputedProperty v1, v209
            v226 <- GetComputedProperty v1, v217
            v227 <- Compare v225, '==', v226
        EndForLoop
    EndForLoop
    v228 <- LoadInteger '347'
    v229 <- LoadFloat '1.275'
    v230 <- CreateNamedVariable 'NaN', 'none'
    v231 <- LoadString 'string'
    v232 <- LoadNull
    v233 <- LoadUndefined
    BeginObjectLiteral
    v234 <- EndObjectLiteral
    v235 <- BeginPlainFunction -> 
    EndPlainFunction
    v236 <- CreateArray [v228, v229, v230, v231, v232, v233, v234, v235]
    v237 <- CreateNamedVariable 'values', 'var', v236
    BeginForInLoop v1 -> v238
        BeginForInLoop v237 -> v239
            v240 <- GetComputedProperty v1, v238
            v241 <- GetComputedProperty v237, v239
            v242 <- Compare v240, '===', v241
            v243 <- GetComputedProperty v237, v239
            v244 <- GetComputedProperty v1, v238
            v245 <- Compare v243, '===', v244
            v246 <- GetComputedProperty v1, v238
            v247 <- GetComputedProperty v237, v239
            v248 <- Compare v246, '==', v247
            v249 <- GetComputedProperty v237, v239
            v250 <- GetComputedProperty v1, v238
            v251 <- Compare v249, '==', v250
        EndForInLoop
    EndForInLoop
EndPlainFunction
v252 <- CallFunction v155, []
v253 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v254
        v255 <- GetComputedProperty v1, v254
        v256 <- CallMethod v255, 'toString', []
        v257 <- CallFunction v2, [v256]
        v258 <- GetComputedProperty v1, v254
        v259 <- GetComputedProperty v1, v254
        v260 <- CallMethod v259, 'valueOf', []
        v261 <- LoadUndefined
        v262 <- GetComputedProperty v1, v254
        v263 <- GetProperty v262, 'a'
        v264 <- LoadUndefined
        v265 <- GetComputedProperty v1, v254
        v266 <- LoadString 'a'
        v267 <- LoadString 'b'
        v268 <- BinaryOperation v266, '+', v267
        v269 <- GetComputedProperty v265, v268
        v270 <- LoadUndefined
        v271 <- GetComputedProperty v1, v254
        v272 <- LoadString ''
        v273 <- LoadString '1'
        v274 <- BinaryOperation v272, '+', v273
        v275 <- GetComputedProperty v271, v274
        v276 <- LoadUndefined
        v277 <- GetComputedProperty v1, v254
        v278 <- GetElement v277, '62'
    EndForInLoop
EndPlainFunction
v279 <- CallFunction v253, []
v280 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v281
        v282 <- LoadInteger '0'
        v283 <- GetComputedProperty v1, v281
        SetProperty v283, 'toString', v282
        v284 <- GetComputedProperty v1, v281
        v285 <- CallMethod v284, 'toString', []
        v286 <- CallFunction v2, [v285]
        v287 <- LoadInteger '0'
        v288 <- GetComputedProperty v1, v281
        SetProperty v288, 'valueOf', v287
        v289 <- GetComputedProperty v1, v281
        v290 <- GetComputedProperty v1, v281
        v291 <- CallMethod v290, 'valueOf', []
        v292 <- LoadInteger '0'
        v293 <- GetComputedProperty v1, v281
        SetProperty v293, 'a', v292
        v294 <- LoadUndefined
        v295 <- GetComputedProperty v1, v281
        v296 <- GetProperty v295, 'a'
        v297 <- LoadInteger '0'
        v298 <- GetComputedProperty v1, v281
        v299 <- LoadString 'a'
        v300 <- LoadString 'b'
        v301 <- BinaryOperation v299, '+', v300
        SetComputedProperty v298, v301, v297
        v302 <- LoadUndefined
        v303 <- GetComputedProperty v1, v281
        v304 <- LoadString 'a'
        v305 <- LoadString 'b'
        v306 <- BinaryOperation v304, '+', v305
        v307 <- GetComputedProperty v303, v306
        v308 <- LoadInteger '0'
        v309 <- GetComputedProperty v1, v281
        SetElement v309, '62', v308
        v310 <- LoadUndefined
        v311 <- GetComputedProperty v1, v281
        v312 <- GetElement v311, '62'
    EndForInLoop
EndPlainFunction
v313 <- CallFunction v280, []
v314 <- BeginPlainFunction -> 
    v315 <- CreateNamedVariable 'Set', 'none'
    v316 <- Construct v315, []
    v317 <- CreateNamedVariable 'set', 'var', v316
    v318 <- CreateNamedVariable 'Map', 'none'
    v319 <- Construct v318, []
    v320 <- CreateNamedVariable 'map', 'var', v319
    BeginForInLoop v1 -> v321
        v322 <- GetComputedProperty v1, v321
        v323 <- CallMethod v317, 'add', [v322]
        v324 <- GetComputedProperty v1, v321
        v325 <- CallMethod v320, 'set', [v324, v321]
    EndForInLoop
    v326 <- GetProperty v1, 'length'
    v327 <- GetProperty v317, 'size'
    v328 <- GetProperty v1, 'length'
    v329 <- GetProperty v320, 'size'
    BeginForInLoop v1 -> v330
        v331 <- GetComputedProperty v1, v330
        v332 <- CallMethod v317, 'has', [v331]
        v333 <- GetComputedProperty v1, v330
        v334 <- CallMethod v320, 'has', [v333]
        v335 <- GetComputedProperty v1, v330
        v336 <- CallMethod v320, 'get', [v335]
    EndForInLoop
    BeginForInLoop v1 -> v337
        v338 <- GetComputedProperty v1, v337
        v339 <- CallMethod v317, 'delete', [v338]
        v340 <- GetComputedProperty v1, v337
        v341 <- CallMethod v320, 'delete', [v340]
    EndForInLoop
    v342 <- LoadInteger '0'
    v343 <- GetProperty v317, 'size'
    v344 <- LoadInteger '0'
    v345 <- GetProperty v320, 'size'
EndPlainFunction
v346 <- CallFunction v314, []
v347 <- BeginPlainFunction -> v348
    BeginForLoopInitializer
        v349 <- LoadInteger '0'
    BeginForLoopCondition -> v350
        v351 <- GetProperty v1, 'length'
        v352 <- Compare v350, '<', v351
    BeginForLoopAfterthought v352 -> v353
        v354 <- LoadInteger '2'
        Update v353, '+', v354
    BeginForLoopBody -> v355
        v356 <- GetComputedProperty v1, v355
        SetComputedProperty v348, v356, v355
    EndForLoop
EndPlainFunction
v357 <- BeginPlainFunction -> v358
    BeginForLoopInitializer
        v359 <- LoadInteger '1'
    BeginForLoopCondition -> v360
        v361 <- GetProperty v1, 'length'
        v362 <- Compare v360, '<', v361
    BeginForLoopAfterthought v362 -> v363
        v364 <- LoadInteger '2'
        Update v363, '+', v364
    BeginForLoopBody -> v365
        v366 <- GetComputedProperty v1, v365
        v367 <- LoadBoolean 'true'
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v365
            ObjectLiteralAddProperty `configurable`, v367
        v368 <- EndObjectLiteral
        v369 <- CreateNamedVariable 'Object', 'none'
        v370 <- CallMethod v369, 'defineProperty', [v358, v366, v368]
    EndForLoop
EndPlainFunction
v371 <- BeginPlainFunction -> v372
    v373 <- CreateNamedVariable 'Object', 'none'
    v374 <- CallMethod v373, 'create', [v372]
    v375 <- CreateNamedVariable 'obj2', 'var', v374
    BeginForInLoop v1 -> v376
        v377 <- LoadInteger '0'
        v378 <- BinaryOperation v376, '|', v377
        v379 <- GetComputedProperty v1, v376
        v380 <- GetComputedProperty v372, v379
        v381 <- LoadUndefined
        v382 <- GetComputedProperty v1, v376
        v383 <- GetComputedProperty v375, v382
    EndForInLoop
EndPlainFunction
v384 <- BeginPlainFunction -> 
    BeginForInLoop v1 -> v385
        v386 <- GetComputedProperty v1, v385
        v387 <- CreateNamedVariable 'obj', 'none'
        v388 <- TestIn v386, v387
        v389 <- GetComputedProperty v1, v385
        v390 <- CreateNamedVariable 'Object', 'none'
        v391 <- GetProperty v390, 'hasOwnProperty'
        v392 <- CallMethod v391, 'call', [v387, v389]
    EndForInLoop
EndPlainFunction
v393 <- BeginPlainFunction -> v394
    BeginForInLoop v394 -> v395
        v396 <- LoadString 'string'
        v397 <- TypeOf v395
    EndForInLoop
EndPlainFunction
v398 <- BeginPlainFunction -> v399
    v400 <- LoadInteger '0'
    v401 <- CreateNamedVariable 'Object', 'none'
    v402 <- CallMethod v401, 'keys', [v399]
    v403 <- GetProperty v402, 'length'
    v404 <- CallMethod v401, 'getOwnPropertyNames', [v399]
    v405 <- CreateNamedVariable 'names', 'var', v404
    BeginForInLoop v405 -> v406
        v407 <- LoadString 'string'
        v408 <- GetComputedProperty v405, v406
        v409 <- TypeOf v408
    EndForInLoop
EndPlainFunction
v410 <- BeginPlainFunction -> v411
    BeginForInLoop v1 -> v412
        v413 <- GetComputedProperty v1, v412
        v414 <- CreateNamedVariable 'Object', 'none'
        v415 <- CallMethod v414, 'getOwnPropertyDescriptor', [v411, v413]
        v416 <- CreateNamedVariable 'desc', 'var', v415
        v417 <- LoadInteger '0'
        v418 <- BinaryOperation v412, '|', v417
        v419 <- GetProperty v416, 'value'
        v420 <- GetProperty v416, 'configurable'
        v421 <- LoadInteger '2'
        v422 <- BinaryOperation v412, '%', v421
        v423 <- LoadInteger '0'
        v424 <- Compare v422, '==', v423
        v425 <- GetProperty v416, 'writable'
        v426 <- LoadBoolean 'false'
        v427 <- GetProperty v416, 'enumerable'
        v428 <- LoadBoolean 'false'
        v429 <- GetComputedProperty v1, v412
        v430 <- GetProperty v414, 'prototype'
        v431 <- GetProperty v430, 'propertyIsEnumerable'
        v432 <- CallMethod v431, 'call', [v411, v429]
    EndForInLoop
EndPlainFunction
v433 <- BeginPlainFunction -> v434
    BeginForInLoop v1 -> v435
        v436 <- GetComputedProperty v1, v435
        v437 <- DeleteComputedProperty v434, v436
    EndForInLoop
    BeginForInLoop v1 -> v438
        v439 <- LoadUndefined
        v440 <- GetComputedProperty v1, v438
        v441 <- CreateNamedVariable 'Object', 'none'
        v442 <- CallMethod v441, 'getOwnPropertyDescriptor', [v434, v440]
    EndForInLoop
EndPlainFunction
BeginObjectLiteral
v443 <- EndObjectLiteral
v444 <- CreateArray []
BeginObjectLiteral
v445 <- EndObjectLiteral
v446 <- CreateNamedVariable 'Object', 'none'
v447 <- CallMethod v446, 'create', [v445]
v448 <- LoadInteger '1'
v449 <- CallFunction v446, [v448]
v450 <- CreateNamedVariable 'Map', 'none'
v451 <- Construct v450, []
v452 <- BeginPlainFunction -> 
EndPlainFunction
v453 <- CreateArray [v443, v444, v447, v449, v451, v452]
v454 <- CreateNamedVariable 'objs', 'var', v453
BeginForInLoop v454 -> v455
    v456 <- GetComputedProperty v454, v455
    v457 <- CreateNamedVariable 'obj', 'var', v456
    v458 <- CallFunction v347, [v457]
    v459 <- CallFunction v357, [v457]
    v460 <- CallFunction v371, [v457]
    v461 <- CallFunction v384, [v457]
    v462 <- CallFunction v393, [v457]
    v463 <- CallFunction v398, [v457]
    v464 <- CallFunction v410, [v457]
    v465 <- CallFunction v433, [v457]
EndForInLoop
v466 <- BeginPlainFunction -> 
    v467 <- CreateNamedVariable 'gc', 'none'
    v468 <- CallFunction v467, []
    v469 <- LoadString 'key'
    v470 <- CreateNamedVariable 'Symbol', 'none'
    v471 <- CallFunction v470, [v469]
    v472 <- CreateNamedVariable 'key', 'var', v471
    BeginObjectLiteral
    v473 <- EndObjectLiteral
    v474 <- CreateNamedVariable 'a', 'var', v473
    v475 <- LoadString 'abc'
    SetComputedProperty v474, v472, v475
    BeginForLoopInitializer
        v476 <- LoadInteger '0'
    BeginForLoopCondition -> v477
        v478 <- LoadInteger '100000'
        v479 <- Compare v477, '<', v478
    BeginForLoopAfterthought v479 -> v480
        v481 <- UnaryOperation v480, '++'
    BeginForLoopBody -> v482
        v483 <- LoadString 'a'
        UpdateComputedProperty v474, v472, '+',v483
    EndForLoop
EndPlainFunction
v484 <- CallFunction v466, []
v485 <- BeginPlainFunction -> 
    v486 <- LoadString 'private'
    v487 <- CreateNamedVariable 'f', 'none'
    v488 <- CallFunction v487, [v486]
    v489 <- CreateNamedVariable 'privateSymbol', 'var', v488
    v490 <- CreateNamedVariable 'Symbol', 'none'
    v491 <- CallFunction v490, []
    v492 <- CreateNamedVariable 'publicSymbol', 'var', v491
    v493 <- CallFunction v490, []
    v494 <- CreateNamedVariable 'publicSymbol2', 'var', v493
    BeginObjectLiteral
    v495 <- EndObjectLiteral
    v496 <- CreateNamedVariable 'obj', 'var', v495
    v497 <- LoadInteger '1'
    SetComputedProperty v496, v492, v497
    v498 <- LoadInteger '2'
    SetComputedProperty v496, v489, v498
    v499 <- LoadInteger '3'
    SetComputedProperty v496, v494, v499
    v500 <- CallMethod v446, 'getOwnPropertySymbols', [v496]
    v501 <- CreateNamedVariable 'syms', 'var', v500
    v502 <- CreateArray [v492, v494]
EndPlainFunction
v503 <- CallFunction v485, []
v504 <- BeginPlainFunction -> v505, v506, v507
    v508 <- LoadString 'private'
    v509 <- CreateNamedVariable 'f', 'none'
    v510 <- CallFunction v509, [v508]
    v511 <- CreateNamedVariable 'sym', 'var', v510
    v512 <- CallFunction v505, []
    v513 <- CreateNamedVariable 'obj', 'var', v512
    v514 <- LoadInteger '1'
    SetComputedProperty v513, v511, v514
    v515 <- CallFunction v506, [v513]
    v516 <- CallFunction v507, [v513]
    v517 <- LoadInteger '2'
    SetComputedProperty v513, v511, v517
    v518 <- LoadInteger '2'
    v519 <- GetComputedProperty v513, v511
    v520 <- DeleteComputedProperty v513, v511
    v521 <- LoadUndefined
    v522 <- GetComputedProperty v513, v511
EndPlainFunction
v523 <- BeginArrowFunction -> 
    BeginObjectLiteral
    v524 <- EndObjectLiteral
    v525 <- CreateNamedVariable 'obj', 'var', v524
    Return v525
EndArrowFunction
v526 <- CreateNamedVariable 'fastObj', 'var', v523
v527 <- BeginArrowFunction -> 
    v528 <- LoadNull
    v529 <- CallMethod v446, 'create', [v528]
    v530 <- CreateNamedVariable 'obj', 'var', v529
    v531 <- LoadInteger '1'
    SetProperty v530, 'a', v531
    v532 <- DeleteProperty v530, 'a'
    Return v530
EndArrowFunction
v533 <- CreateNamedVariable 'dictObj', 'var', v527
v534 <- GetProperty v446, 'seal'
v535 <- GetProperty v446, 'isSealed'
v536 <- CallFunction v504, [v526, v534, v535]
v537 <- GetProperty v446, 'freeze'
v538 <- GetProperty v446, 'isFrozen'
v539 <- CallFunction v504, [v526, v537, v538]
v540 <- GetProperty v446, 'preventExtensions'
v541 <- BeginArrowFunction -> v542
    v543 <- CallMethod v446, 'isExtensible', [v542]
    v544 <- UnaryOperation '!', v543
    Return v544
EndArrowFunction
v545 <- CallFunction v504, [v526, v540, v541]
v546 <- GetProperty v446, 'seal'
v547 <- GetProperty v446, 'isSealed'
v548 <- CallFunction v504, [v533, v546, v547]
v549 <- GetProperty v446, 'freeze'
v550 <- GetProperty v446, 'isFrozen'
v551 <- CallFunction v504, [v533, v549, v550]
v552 <- GetProperty v446, 'preventExtensions'
v553 <- BeginArrowFunction -> v554
    v555 <- CallMethod v446, 'isExtensible', [v554]
    v556 <- UnaryOperation '!', v555
    Return v556
EndArrowFunction
v557 <- CallFunction v504, [v533, v552, v553]
v558 <- LoadString 's'
v559 <- CreateNamedVariable 'f', 'none'
v560 <- CallFunction v559, [v558]
v561 <- CreateNamedVariable 's', 'var', v560
v562 <- LoadString 's1'
v563 <- CallFunction v559, [v562]
v564 <- CreateNamedVariable 's1', 'var', v563
v565 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v566 <- EndObjectLiteral
    v567 <- CreateNamedVariable 'p', 'var', v566
    v568 <- LoadString 'moo'
    SetComputedProperty v567, v561, v568
    v569 <- CallMethod v446, 'create', [v567]
    v570 <- CreateNamedVariable 'o', 'var', v569
    v571 <- LoadUndefined
    v572 <- GetComputedProperty v570, v561
    v573 <- LoadString 'moo'
    v574 <- GetComputedProperty v567, v561
    v575 <- LoadString 'bow-wow'
    SetComputedProperty v570, v561, v575
    v576 <- LoadString 'bow-wow'
    v577 <- GetComputedProperty v570, v561
    v578 <- LoadString 'moo'
    v579 <- GetComputedProperty v567, v561
EndPlainFunction
v580 <- CallFunction v565, []
v581 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v582 <- EndObjectLiteral
    v583 <- CreateNamedVariable 'p', 'var', v582
    v584 <- LoadString 'moo'
    SetComputedProperty v583, v561, v584
    v585 <- CallMethod v446, 'create', [v583]
    v586 <- CreateNamedVariable 'o', 'var', v585
    v587 <- LoadString 'bow-wow'
    SetComputedProperty v586, v564, v587
    v588 <- BeginPlainFunction -> v589
        v590 <- LoadUndefined
        v591 <- GetComputedProperty v589, v561
        v592 <- LoadString 'bow-wow'
        v593 <- GetComputedProperty v589, v564
    EndPlainFunction
    v594 <- CallFunction v588, [v586]
    BeginForLoopInitializer
        v595 <- LoadInteger '0'
    BeginForLoopCondition -> v596
        v597 <- LoadInteger '1000'
        v598 <- Compare v596, '<', v597
    BeginForLoopAfterthought v598 -> v599
        v600 <- UnaryOperation v599, '++'
    BeginForLoopBody -> v601
        v602 <- CallFunction v588, [v586]
    EndForLoop
    BeginForLoopInitializer
        v603 <- LoadInteger '0'
    BeginForLoopCondition -> v604
        v605 <- LoadInteger '1000'
        v606 <- Compare v604, '<', v605
    BeginForLoopAfterthought v606 -> v607
        v608 <- UnaryOperation v607, '++'
    BeginForLoopBody -> v609
        v610 <- CallMethod v446, 'create', [v583]
        v611 <- CreateNamedVariable 'oNew', 'var', v610
        v612 <- LoadString 's'
        v613 <- BinaryOperation v612, '+', v609
        SetComputedProperty v611, v613, v609
        v614 <- LoadString 'bow-wow'
        SetComputedProperty v611, v564, v614
        v615 <- CallFunction v588, [v611]
    EndForLoop
EndPlainFunction
v616 <- CallFunction v581, []


var symbols = [];
function isValidSymbolString(a3) {
    return (["Symbol(66)"]).indexOf(a3) >= 0;
}
function TestNew() {
    for (let i11 = 0; i11 < 2; ++i11) {
        for (let i18 = 0; i18 < 5; ++i18) {
            symbols.push(f("66"));
            symbols.push(Object(f("66")).valueOf());
        }
        gc();
    }
}
TestNew();
function TestType() {
    for (const v38 in symbols) {
        typeof symbols[v38];
        typeof symbols[v38] === "symbol";
    }
}
TestType();
function TestPrototype() {
    for (const v48 in symbols) {
        Symbol.prototype;
        symbols[v48].__proto__;
    }
}
TestPrototype();
function TestConstructor() {
    for (const v55 in symbols) {
        symbols[v55].__proto__.constructor;
        Object(symbols[v55]).__proto__.constructor;
    }
}
TestConstructor();
function TestToString() {
    for (const v67 in symbols) {
        function f68() {
            new String(symbols[v67]);
        }
        f68();
        symbols[v67].toString();
        String(symbols[v67]);
        function f79() {
            symbols[v67] + "";
        }
        f79();
        isValidSymbolString(symbols[v67].toString());
        isValidSymbolString(Object(symbols[v67]).toString());
        const v92 = symbols[v67];
        isValidSymbolString(Symbol.prototype.toString.call(v92));
        const v99 = symbols[v67];
        Object.prototype.toString.call(v99);
    }
}
TestToString();
function TestToBoolean() {
    for (const v105 in symbols) {
        Boolean(symbols[v105]).valueOf();
        !symbols[v105];
        !(!symbols[v105]);
        symbols[v105] && true;
        !symbols[v105] && false;
        !symbols[v105] || true;
        symbols[v105] ? 1 : 2;
        !symbols[v105] ? 1 : 2;
        if (!symbols[v105]) {
        }
        if (symbols[v105]) {
        } else {
        }
    }
}
TestToBoolean();
function TestToNumber() {
    for (const v142 in symbols) {
        function f143() {
            Number(symbols[v142]);
        }
        f143();
        function f149() {
            symbols[v142] + 0;
        }
        f149();
    }
}
TestToNumber();
function TestEquality() {
    for (const v156 in symbols) {
        symbols[v156];
        symbols[v156];
        symbols[v156];
        symbols[v156];
        Object.is(symbols[v156], symbols[v156]);
        symbols[v156] === symbols[v156];
        symbols[v156] == symbols[v156];
        symbols[v156] === Object(symbols[v156]);
        Object(symbols[v156]) === symbols[v156];
        symbols[v156] == Object(symbols[v156]);
        Object(symbols[v156]) == symbols[v156];
        symbols[v156] === symbols[v156].valueOf();
        symbols[v156].valueOf() === symbols[v156];
        symbols[v156] == symbols[v156].valueOf();
        symbols[v156].valueOf() == symbols[v156];
    }
    for (let i204 = 0; i204 < symbols.length; ++i204) {
        for (let i212 = i204 + 1; i212 < symbols.length; ++i212) {
            Object.is(symbols[i204], symbols[i212]);
            symbols[i204] === symbols[i212];
            symbols[i204] == symbols[i212];
        }
    }
    const v234 = {};
    function f235() {
    }
    var values = [347,1.275,NaN,"string",null,,v234,f235];
    for (const v238 in symbols) {
        for (const v239 in values) {
            symbols[v238] === values[v239];
            values[v239] === symbols[v238];
            symbols[v238] == values[v239];
            values[v239] == symbols[v238];
        }
    }
}
TestEquality();
function TestGet() {
    for (const v254 in symbols) {
        isValidSymbolString(symbols[v254].toString());
        symbols[v254];
        symbols[v254].valueOf();
        symbols[v254].a;
        symbols[v254]["a" + "b"];
        symbols[v254]["" + "1"];
        symbols[v254][62];
    }
}
TestGet();
function TestSet() {
    for (const v281 in symbols) {
        const t140 = symbols[v281];
        t140.toString = 0;
        isValidSymbolString(symbols[v281].toString());
        const t142 = symbols[v281];
        t142.valueOf = 0;
        symbols[v281];
        symbols[v281].valueOf();
        const t145 = symbols[v281];
        t145.a = 0;
        symbols[v281].a;
        const t149 = symbols[v281];
        t149["a" + "b"] = 0;
        symbols[v281]["a" + "b"];
        const t152 = symbols[v281];
        t152[62] = 0;
        symbols[v281][62];
    }
}
TestSet();
function TestCollections() {
    const v316 = new Set();
    var set = v316;
    const v319 = new Map();
    var map = v319;
    for (const v321 in symbols) {
        set.add(symbols[v321]);
        map.set(symbols[v321], v321);
    }
    symbols.length;
    set.size;
    symbols.length;
    map.size;
    for (const v330 in symbols) {
        set.has(symbols[v330]);
        map.has(symbols[v330]);
        map.get(symbols[v330]);
    }
    for (const v337 in symbols) {
        set.delete(symbols[v337]);
        map.delete(symbols[v337]);
    }
    set.size;
    map.size;
}
TestCollections();
function TestKeySet(a348) {
    for (let i350 = 0; i350 < symbols.length; i350 += 2) {
        a348[symbols[i350]] = i350;
    }
}
function TestKeyDefine(a358) {
    for (let i360 = 1; i360 < symbols.length; i360 += 2) {
        const v366 = symbols[i360];
        Object.defineProperty(a358, v366, { value: i360, configurable: true });
    }
}
function TestKeyGet(a372) {
    var obj2 = Object.create(a372);
    for (const v376 in symbols) {
        v376 | 0;
        a372[symbols[v376]];
        obj2[symbols[v376]];
    }
}
function TestKeyHas() {
    for (const v385 in symbols) {
        symbols[v385] in obj;
        const v389 = symbols[v385];
        Object.hasOwnProperty.call(obj, v389);
    }
}
function TestKeyEnum(a394) {
    for (const v395 in a394) {
        typeof v395;
    }
}
function TestKeyNames(a399) {
    Object.keys(a399).length;
    var names = Object.getOwnPropertyNames(a399);
    for (const v406 in names) {
        typeof names[v406];
    }
}
function TestKeyDescriptor(a411) {
    for (const v412 in symbols) {
        var desc = Object.getOwnPropertyDescriptor(a411, symbols[v412]);
        v412 | 0;
        desc.value;
        desc.configurable;
        (v412 % 2) == 0;
        desc.writable;
        desc.enumerable;
        const v429 = symbols[v412];
        Object.prototype.propertyIsEnumerable.call(a411, v429);
    }
}
function TestKeyDelete(a434) {
    for (const v435 in symbols) {
        delete a434[symbols[v435]];
    }
    for (const v438 in symbols) {
        Object.getOwnPropertyDescriptor(a434, symbols[v438]);
    }
}
const v443 = {};
const v444 = [];
const v447 = Object.create({});
const v449 = Object(1);
const v451 = new Map();
function f452() {
}
var objs = [v443,v444,v447,v449,v451,f452];
for (const v455 in objs) {
    var obj = objs[v455];
    TestKeySet(obj);
    TestKeyDefine(obj);
    TestKeyGet(obj);
    TestKeyHas(obj);
    TestKeyEnum(obj);
    TestKeyNames(obj);
    TestKeyDescriptor(obj);
    TestKeyDelete(obj);
}
function TestCachedKeyAfterScavenge() {
    gc();
    var key = Symbol("key");
    var a = {};
    a[key] = "abc";
    for (let i477 = 0; i477 < 100000; i477++) {
        a[key] += "a";
    }
}
TestCachedKeyAfterScavenge();
function TestGetOwnPropertySymbols() {
    var privateSymbol = f("private");
    var publicSymbol = Symbol();
    var publicSymbol2 = Symbol();
    var obj = {};
    obj[publicSymbol] = 1;
    obj[privateSymbol] = 2;
    obj[publicSymbol2] = 3;
    var syms = Object.getOwnPropertySymbols(obj);
    [publicSymbol,publicSymbol2];
}
TestGetOwnPropertySymbols();
function TestSealAndFreeze(a505, a506, a507) {
    var sym = f("private");
    var obj = a505();
    obj[sym] = 1;
    a506(obj);
    a507(obj);
    obj[sym] = 2;
    obj[sym];
    delete obj[sym];
    obj[sym];
}
const v523 = () => {
    var obj = {};
    return obj;
};
var fastObj = v523;
const v527 = () => {
    var obj = Object.create(null);
    obj.a = 1;
    delete obj.a;
    return obj;
};
var dictObj = v527;
TestSealAndFreeze(fastObj, Object.seal, Object.isSealed);
TestSealAndFreeze(fastObj, Object.freeze, Object.isFrozen);
const v540 = Object.preventExtensions;
const v541 = (a542) => {
    return !Object.isExtensible(a542);
};
TestSealAndFreeze(fastObj, v540, v541);
TestSealAndFreeze(dictObj, Object.seal, Object.isSealed);
TestSealAndFreeze(dictObj, Object.freeze, Object.isFrozen);
const v552 = Object.preventExtensions;
const v553 = (a554) => {
    return !Object.isExtensible(a554);
};
TestSealAndFreeze(dictObj, v552, v553);
var s = f("s");
var s1 = f("s1");
function TestSimple() {
    var p = {};
    p[s] = "moo";
    var o = Object.create(p);
    o[s];
    p[s];
    o[s] = "bow-wow";
    o[s];
    p[s];
}
TestSimple();
function TestICs() {
    var p = {};
    p[s] = "moo";
    var o = Object.create(p);
    o[s1] = "bow-wow";
    function checkNonOwn(a589) {
        a589[s];
        a589[s1];
    }
    checkNonOwn(o);
    for (let i596 = 0; i596 < 1000; i596++) {
        checkNonOwn(o);
    }
    for (let i604 = 0; i604 < 1000; i604++) {
        var oNew = Object.create(p);
        oNew["s" + i604] = i604;
        oNew[s1] = "bow-wow";
        checkNonOwn(oNew);
    }
}
TestICs();

FuzzIL program written to corpus/private.fzil
