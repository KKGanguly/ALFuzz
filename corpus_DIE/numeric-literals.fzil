v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '0'
    v2 <- LoadInteger '0'
    v3 <- LoadInteger '0'
    v4 <- LoadInteger '0'
    v5 <- LoadInteger '1'
    v6 <- LoadInteger '1'
    v7 <- LoadInteger '7'
    v8 <- LoadInteger '7'
    v9 <- LoadInteger '8'
    v10 <- LoadInteger '8'
    v11 <- LoadInteger '63'
    v12 <- LoadInteger '63'
EndPlainFunction
v13 <- CallFunction v0, []
v14 <- BeginPlainFunction -> 
    v15 <- LoadInteger '0'
    v16 <- LoadString '0o0'
    v17 <- CreateNamedVariable 'Number', 'none'
    v18 <- CallFunction v17, [v16]
    v19 <- LoadInteger '0'
    v20 <- LoadString '0O0'
    v21 <- CallFunction v17, [v20]
    v22 <- LoadInteger '1'
    v23 <- LoadString '0o1'
    v24 <- CallFunction v17, [v23]
    v25 <- LoadInteger '7'
    v26 <- LoadString '0o7'
    v27 <- CallFunction v17, [v26]
    v28 <- LoadInteger '8'
    v29 <- LoadString '0o10'
    v30 <- CallFunction v17, [v29]
    v31 <- LoadInteger '63'
    v32 <- LoadString '0o77'
    v33 <- CallFunction v17, [v32]
EndPlainFunction
v34 <- CallFunction v14, []
v35 <- BeginPlainFunction -> 
    v36 <- LoadInteger '0'
    v37 <- LoadInteger '0'
    v38 <- LoadInteger '0'
    v39 <- LoadInteger '0'
    v40 <- LoadInteger '1'
    v41 <- LoadInteger '1'
    v42 <- LoadInteger '2'
    v43 <- LoadInteger '2'
    v44 <- LoadInteger '3'
    v45 <- LoadInteger '3'
EndPlainFunction
v46 <- CallFunction v35, []
v47 <- BeginPlainFunction -> 
    v48 <- LoadInteger '0'
    v49 <- LoadString '0b0'
    v50 <- CreateNamedVariable 'Number', 'none'
    v51 <- CallFunction v50, [v49]
    v52 <- LoadInteger '0'
    v53 <- LoadString '0B0'
    v54 <- CallFunction v50, [v53]
    v55 <- LoadInteger '1'
    v56 <- LoadString '0b1'
    v57 <- CallFunction v50, [v56]
    v58 <- LoadInteger '2'
    v59 <- LoadString '0b10'
    v60 <- CallFunction v50, [v59]
    v61 <- LoadInteger '3'
    v62 <- LoadString '0b11'
    v63 <- CallFunction v50, [v62]
EndPlainFunction
v64 <- CallFunction v47, []
v65 <- BeginPlainFunction -> 
    v66 <- LoadInteger '0'
    v67 <- LoadString '0o77'
    v68 <- CreateNamedVariable 'parseInt', 'none'
    v69 <- CallFunction v68, [v67]
    v70 <- LoadInteger '0'
    v71 <- LoadString '0o77'
    v72 <- LoadInteger '8'
    v73 <- CallFunction v68, [v71, v72]
    v74 <- LoadInteger '0'
    v75 <- LoadString '0b11'
    v76 <- CallFunction v68, [v75]
    v77 <- LoadInteger '0'
    v78 <- LoadString '0b11'
    v79 <- LoadInteger '2'
    v80 <- CallFunction v68, [v78, v79]
EndPlainFunction
v81 <- CallFunction v65, []
v82 <- BeginPlainFunction -> 
    v83 <- LoadInteger '0'
    v84 <- LoadString '0o77'
    v85 <- CreateNamedVariable 'parseFloat', 'none'
    v86 <- CallFunction v85, [v84]
    v87 <- LoadInteger '0'
    v88 <- LoadString '0b11'
    v89 <- CallFunction v85, [v88]
EndPlainFunction
v90 <- CallFunction v82, []


function TestOctalLiteral() {
}
TestOctalLiteral();
function TestOctalLiteralUsingNumberFunction() {
    Number("0o0");
    Number("0O0");
    Number("0o1");
    Number("0o7");
    Number("0o10");
    Number("0o77");
}
TestOctalLiteralUsingNumberFunction();
function TestBinaryLiteral() {
}
TestBinaryLiteral();
function TestBinaryLiteralUsingNumberFunction() {
    Number("0b0");
    Number("0B0");
    Number("0b1");
    Number("0b10");
    Number("0b11");
}
TestBinaryLiteralUsingNumberFunction();
function TestParseIntDoesNotSupportOctalNorBinary() {
    parseInt("0o77");
    parseInt("0o77", 8);
    parseInt("0b11");
    parseInt("0b11", 2);
}
TestParseIntDoesNotSupportOctalNorBinary();
function TestParseFloatDoesNotSupportOctalNorBinary() {
    parseFloat("0o77");
    parseFloat("0b11");
}
TestParseFloatDoesNotSupportOctalNorBinary();

FuzzIL program written to corpus/numeric-literals.fzil
