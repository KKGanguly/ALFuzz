v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> v2, v3, v4
        v5 <- CreateNamedVariable 'Object', 'none'
        v6 <- CallMethod v5, 'freeze', [v4]
    EndPlainFunction
    v7 <- BeginPlainFunction -> 
        v8 <- LoadInteger '1'
        v9 <- LoadInteger '2'
        v10 <- LoadInteger '3'
        v11 <- CreateArray [v8, v9, v10]
        v12 <- CallMethod v11, 'forEach', [v1]
    EndPlainFunction
    v13 <- CallFunction v7, []
    v14 <- CallFunction v7, []
    v15 <- CallFunction v7, []
    v16 <- CallFunction v7, []
    v17 <- CallFunction v7, []
EndPlainFunction
v18 <- CallFunction v0, []
v19 <- BeginPlainFunction -> 
    v20 <- BeginPlainFunction -> v21, v22, v23
        v24 <- CreateNamedVariable 'Object', 'none'
        v25 <- CallMethod v24, 'freeze', [v23]
        v26 <- LoadBoolean 'false'
        Return v26
    EndPlainFunction
    v27 <- BeginPlainFunction -> 
        v28 <- LoadInteger '1'
        v29 <- LoadInteger '2'
        v30 <- LoadInteger '3'
        v31 <- CreateArray [v28, v29, v30]
        v32 <- CallMethod v31, 'find', [v20]
    EndPlainFunction
    v33 <- CallFunction v27, []
    v34 <- CallFunction v27, []
    v35 <- CallFunction v27, []
    v36 <- CallFunction v27, []
    v37 <- CallFunction v27, []
EndPlainFunction
v38 <- CallFunction v19, []
v39 <- BeginPlainFunction -> 
    v40 <- BeginPlainFunction -> v41, v42, v43
        v44 <- CreateNamedVariable 'Object', 'none'
        v45 <- CallMethod v44, 'freeze', [v43]
        v46 <- LoadBoolean 'false'
        Return v46
    EndPlainFunction
    v47 <- BeginPlainFunction -> 
        v48 <- LoadInteger '1'
        v49 <- LoadInteger '2'
        v50 <- LoadInteger '3'
        v51 <- CreateArray [v48, v49, v50]
        v52 <- CallMethod v51, 'map', [v40]
    EndPlainFunction
    v53 <- CallFunction v47, []
    v54 <- CallFunction v47, []
    v55 <- CallFunction v47, []
    v56 <- CallFunction v47, []
    v57 <- CallFunction v47, []
EndPlainFunction
v58 <- CallFunction v39, []
v59 <- BeginPlainFunction -> 
    v60 <- BeginPlainFunction -> v61, v62, v63
        v64 <- CreateNamedVariable 'Object', 'none'
        v65 <- CallMethod v64, 'freeze', [v63]
        v66 <- LoadBoolean 'true'
        Return v66
    EndPlainFunction
    v67 <- BeginPlainFunction -> 
        v68 <- LoadInteger '1'
        v69 <- LoadInteger '2'
        v70 <- LoadInteger '3'
        v71 <- CreateArray [v68, v69, v70]
        v72 <- CallMethod v71, 'filter', [v60]
    EndPlainFunction
    v73 <- CallFunction v67, []
    v74 <- CallFunction v67, []
    v75 <- CallFunction v67, []
    v76 <- CallFunction v67, []
    v77 <- CallFunction v67, []
EndPlainFunction
v78 <- CallFunction v59, []
v79 <- BeginPlainFunction -> 
    v80 <- BeginPlainFunction -> v81, v82, v83
        v84 <- LoadInteger '2'
        SetProperty v83, 'length', v84
    EndPlainFunction
    v85 <- BeginPlainFunction -> 
        v86 <- LoadInteger '1'
        v87 <- LoadInteger '2'
        v88 <- LoadInteger '3'
        v89 <- CreateArray [v86, v87, v88]
        v90 <- CallMethod v89, 'forEach', [v80]
    EndPlainFunction
    v91 <- CallFunction v85, []
    v92 <- CallFunction v85, []
    v93 <- CallFunction v85, []
    v94 <- CallFunction v85, []
    v95 <- CallFunction v85, []
EndPlainFunction
v96 <- CallFunction v79, []
v97 <- BeginPlainFunction -> 
    v98 <- BeginPlainFunction -> v99, v100, v101
        v102 <- LoadInteger '2'
        SetProperty v101, 'length', v102
        v103 <- LoadBoolean 'false'
        Return v103
    EndPlainFunction
    v104 <- BeginPlainFunction -> 
        v105 <- LoadInteger '1'
        v106 <- LoadInteger '2'
        v107 <- LoadInteger '3'
        v108 <- CreateArray [v105, v106, v107]
        v109 <- CallMethod v108, 'find', [v98]
    EndPlainFunction
    v110 <- CallFunction v104, []
    v111 <- CallFunction v104, []
    v112 <- CallFunction v104, []
    v113 <- CallFunction v104, []
    v114 <- CallFunction v104, []
EndPlainFunction
v115 <- CallFunction v97, []
v116 <- BeginPlainFunction -> 
    v117 <- BeginPlainFunction -> v118, v119, v120
        v121 <- LoadInteger '2'
        SetProperty v120, 'length', v121
        v122 <- LoadBoolean 'false'
        Return v122
    EndPlainFunction
    v123 <- BeginPlainFunction -> 
        v124 <- LoadInteger '1'
        v125 <- LoadInteger '2'
        v126 <- LoadInteger '3'
        v127 <- CreateArray [v124, v125, v126]
        v128 <- CallMethod v127, 'map', [v117]
    EndPlainFunction
    v129 <- CallFunction v123, []
    v130 <- CallFunction v123, []
    v131 <- CallFunction v123, []
    v132 <- CallFunction v123, []
    v133 <- CallFunction v123, []
EndPlainFunction
v134 <- CallFunction v116, []
v135 <- BeginPlainFunction -> 
    v136 <- BeginPlainFunction -> v137, v138, v139
        v140 <- LoadInteger '2'
        SetProperty v139, 'length', v140
        v141 <- LoadBoolean 'true'
        Return v141
    EndPlainFunction
    v142 <- BeginPlainFunction -> 
        v143 <- LoadInteger '1'
        v144 <- LoadInteger '2'
        v145 <- LoadInteger '3'
        v146 <- CreateArray [v143, v144, v145]
        v147 <- CallMethod v146, 'filter', [v136]
    EndPlainFunction
    v148 <- CallFunction v142, []
    v149 <- CallFunction v142, []
    v150 <- CallFunction v142, []
    v151 <- CallFunction v142, []
    v152 <- CallFunction v142, []
    v153 <- CallFunction v142, []
    v154 <- CallFunction v142, []
EndPlainFunction
v155 <- CallFunction v135, []


function testForEachMapCheck() {
    function f(a2, a3, a4) {
        Object.freeze(a4);
    }
    function g() {
        ([1,2,3]).forEach(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testForEachMapCheck();
function testFindMapCheck() {
    function f(a21, a22, a23) {
        Object.freeze(a23);
        return false;
    }
    function g() {
        ([1,2,3]).find(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testFindMapCheck();
function testMapMapCheck() {
    function f(a41, a42, a43) {
        Object.freeze(a43);
        return false;
    }
    function g() {
        ([1,2,3]).map(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testMapMapCheck();
function testFilterMapCheck() {
    function f(a61, a62, a63) {
        Object.freeze(a63);
        return true;
    }
    function g() {
        ([1,2,3]).filter(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testFilterMapCheck();
function testForEachCheckBounds() {
    function f(a81, a82, a83) {
        a83.length = 2;
    }
    function g() {
        ([1,2,3]).forEach(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testForEachCheckBounds();
function testFindCheckBounds() {
    function f(a99, a100, a101) {
        a101.length = 2;
        return false;
    }
    function g() {
        ([1,2,3]).find(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testFindCheckBounds();
function testMapCheckBounds() {
    function f(a118, a119, a120) {
        a120.length = 2;
        return false;
    }
    function g() {
        ([1,2,3]).map(f);
    }
    g();
    g();
    g();
    g();
    g();
}
testMapCheckBounds();
function testFilterCheckBounds() {
    function f(a137, a138, a139) {
        a139.length = 2;
        return true;
    }
    function g() {
        ([1,2,3]).filter(f);
    }
    g();
    g();
    g();
    g();
    g();
    g();
    g();
}
testFilterCheckBounds();

FuzzIL program written to corpus/deopt-array-builtins.fzil
