v0 <- LoadInteger '65535'
v1 <- LoadInteger '1'
v2 <- BinaryOperation v0, '+', v1
v3 <- CreateNamedVariable 'limit', 'const', v2
v4 <- BeginPlainFunction -> 
    v5 <- BeginPlainFunction -> 
        BeginTry
            v6 <- CreateNamedVariable 'Int8Array', 'none'
            v7 <- Construct v6, [v3]
        BeginCatch -> v8
            v9 <- GetProperty v8, 'stack'
            Return v9
        EndTryCatch
    EndPlainFunction
    v10 <- CallFunction v5, []
    v11 <- LoadRegExp 'new Int8Array' ''
    v12 <- CallMethod v11, 'test', [v10]
    v13 <- CallFunction v5, []
    v14 <- LoadRegExp 'new Int8Array' ''
    v15 <- CallMethod v14, 'test', [v13]
    v16 <- CallFunction v5, []
    v17 <- LoadRegExp 'new Int8Array' ''
    v18 <- CallMethod v17, 'test', [v16]
EndPlainFunction
v19 <- CallFunction v4, []
v20 <- BeginPlainFunction -> 
    v21 <- BeginPlainFunction -> 
        BeginTry
            v22 <- CreateNamedVariable 'Uint8Array', 'none'
            v23 <- Construct v22, [v3]
        BeginCatch -> v24
            v25 <- GetProperty v24, 'stack'
            Return v25
        EndTryCatch
    EndPlainFunction
    v26 <- CallFunction v21, []
    v27 <- LoadRegExp 'new Uint8Array' ''
    v28 <- CallMethod v27, 'test', [v26]
    v29 <- CallFunction v21, []
    v30 <- LoadRegExp 'new Uint8Array' ''
    v31 <- CallMethod v30, 'test', [v29]
    v32 <- CallFunction v21, []
    v33 <- LoadRegExp 'new Uint8Array' ''
    v34 <- CallMethod v33, 'test', [v32]
EndPlainFunction
v35 <- CallFunction v20, []
v36 <- BeginPlainFunction -> 
    v37 <- BeginPlainFunction -> 
        BeginTry
            v38 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
            v39 <- Construct v38, [v3]
        BeginCatch -> v40
            v41 <- GetProperty v40, 'stack'
            Return v41
        EndTryCatch
    EndPlainFunction
    v42 <- CallFunction v37, []
    v43 <- LoadRegExp 'new Uint8ClampedArray' ''
    v44 <- CallMethod v43, 'test', [v42]
    v45 <- CallFunction v37, []
    v46 <- LoadRegExp 'new Uint8ClampedArray' ''
    v47 <- CallMethod v46, 'test', [v45]
    v48 <- CallFunction v37, []
    v49 <- LoadRegExp 'new Uint8ClampedArray' ''
    v50 <- CallMethod v49, 'test', [v48]
EndPlainFunction
v51 <- CallFunction v36, []
v52 <- BeginPlainFunction -> 
    v53 <- BeginPlainFunction -> 
        BeginTry
            v54 <- CreateNamedVariable 'Int16Array', 'none'
            v55 <- Construct v54, [v3]
        BeginCatch -> v56
            v57 <- GetProperty v56, 'stack'
            Return v57
        EndTryCatch
    EndPlainFunction
    v58 <- CallFunction v53, []
    v59 <- LoadRegExp 'new Int16Array' ''
    v60 <- CallMethod v59, 'test', [v58]
    v61 <- CallFunction v53, []
    v62 <- LoadRegExp 'new Int16Array' ''
    v63 <- CallMethod v62, 'test', [v61]
    v64 <- CallFunction v53, []
    v65 <- LoadRegExp 'new Int16Array' ''
    v66 <- CallMethod v65, 'test', [v64]
EndPlainFunction
v67 <- CallFunction v52, []
v68 <- BeginPlainFunction -> 
    v69 <- BeginPlainFunction -> 
        BeginTry
            v70 <- CreateNamedVariable 'Uint16Array', 'none'
            v71 <- Construct v70, [v3]
        BeginCatch -> v72
            v73 <- GetProperty v72, 'stack'
            Return v73
        EndTryCatch
    EndPlainFunction
    v74 <- CallFunction v69, []
    v75 <- LoadRegExp 'new Uint16Array' ''
    v76 <- CallMethod v75, 'test', [v74]
    v77 <- CallFunction v69, []
    v78 <- LoadRegExp 'new Uint16Array' ''
    v79 <- CallMethod v78, 'test', [v77]
    v80 <- CallFunction v69, []
    v81 <- LoadRegExp 'new Uint16Array' ''
    v82 <- CallMethod v81, 'test', [v80]
EndPlainFunction
v83 <- CallFunction v68, []
v84 <- BeginPlainFunction -> 
    v85 <- BeginPlainFunction -> 
        BeginTry
            v86 <- CreateNamedVariable 'Int32Array', 'none'
            v87 <- Construct v86, [v3]
        BeginCatch -> v88
            v89 <- GetProperty v88, 'stack'
            Return v89
        EndTryCatch
    EndPlainFunction
    v90 <- CallFunction v85, []
    v91 <- LoadRegExp 'new Int32Array' ''
    v92 <- CallMethod v91, 'test', [v90]
    v93 <- CallFunction v85, []
    v94 <- LoadRegExp 'new Int32Array' ''
    v95 <- CallMethod v94, 'test', [v93]
    v96 <- CallFunction v85, []
    v97 <- LoadRegExp 'new Int32Array' ''
    v98 <- CallMethod v97, 'test', [v96]
EndPlainFunction
v99 <- CallFunction v84, []
v100 <- BeginPlainFunction -> 
    v101 <- BeginPlainFunction -> 
        BeginTry
            v102 <- CreateNamedVariable 'Uint32Array', 'none'
            v103 <- Construct v102, [v3]
        BeginCatch -> v104
            v105 <- GetProperty v104, 'stack'
            Return v105
        EndTryCatch
    EndPlainFunction
    v106 <- CallFunction v101, []
    v107 <- LoadRegExp 'new Uint32Array' ''
    v108 <- CallMethod v107, 'test', [v106]
    v109 <- CallFunction v101, []
    v110 <- LoadRegExp 'new Uint32Array' ''
    v111 <- CallMethod v110, 'test', [v109]
    v112 <- CallFunction v101, []
    v113 <- LoadRegExp 'new Uint32Array' ''
    v114 <- CallMethod v113, 'test', [v112]
EndPlainFunction
v115 <- CallFunction v100, []
v116 <- BeginPlainFunction -> 
    v117 <- BeginPlainFunction -> 
        BeginTry
            v118 <- CreateNamedVariable 'Float32Array', 'none'
            v119 <- Construct v118, [v3]
        BeginCatch -> v120
            v121 <- GetProperty v120, 'stack'
            Return v121
        EndTryCatch
    EndPlainFunction
    v122 <- CallFunction v117, []
    v123 <- LoadRegExp 'new Float32Array' ''
    v124 <- CallMethod v123, 'test', [v122]
    v125 <- CallFunction v117, []
    v126 <- LoadRegExp 'new Float32Array' ''
    v127 <- CallMethod v126, 'test', [v125]
    v128 <- CallFunction v117, []
    v129 <- LoadRegExp 'new Float32Array' ''
    v130 <- CallMethod v129, 'test', [v128]
EndPlainFunction
v131 <- CallFunction v116, []
v132 <- BeginPlainFunction -> 
    v133 <- BeginPlainFunction -> 
        BeginTry
            v134 <- CreateNamedVariable 'Float64Array', 'none'
            v135 <- Construct v134, [v3]
        BeginCatch -> v136
            v137 <- GetProperty v136, 'stack'
            Return v137
        EndTryCatch
    EndPlainFunction
    v138 <- CallFunction v133, []
    v139 <- LoadRegExp 'new Float64Array' ''
    v140 <- CallMethod v139, 'test', [v138]
    v141 <- CallFunction v133, []
    v142 <- LoadRegExp 'new Float64Array' ''
    v143 <- CallMethod v142, 'test', [v141]
    v144 <- CallFunction v133, []
    v145 <- LoadRegExp 'new Float64Array' ''
    v146 <- CallMethod v145, 'test', [v144]
EndPlainFunction
v147 <- CallFunction v132, []
v148 <- BeginPlainFunction -> 
    v149 <- BeginPlainFunction -> 
        BeginTry
            v150 <- CreateNamedVariable 'BigInt64Array', 'none'
            v151 <- Construct v150, [v3]
        BeginCatch -> v152
            v153 <- GetProperty v152, 'stack'
            Return v153
        EndTryCatch
    EndPlainFunction
    v154 <- CallFunction v149, []
    v155 <- LoadRegExp 'new BigInt64Array' ''
    v156 <- CallMethod v155, 'test', [v154]
    v157 <- CallFunction v149, []
    v158 <- LoadRegExp 'new BigInt64Array' ''
    v159 <- CallMethod v158, 'test', [v157]
    v160 <- CallFunction v149, []
    v161 <- LoadRegExp 'new BigInt64Array' ''
    v162 <- CallMethod v161, 'test', [v160]
EndPlainFunction
v163 <- CallFunction v148, []
v164 <- BeginPlainFunction -> 
    v165 <- BeginPlainFunction -> 
        BeginTry
            v166 <- CreateNamedVariable 'BigUint64Array', 'none'
            v167 <- Construct v166, [v3]
        BeginCatch -> v168
            v169 <- GetProperty v168, 'stack'
            Return v169
        EndTryCatch
    EndPlainFunction
    v170 <- CallFunction v165, []
    v171 <- LoadRegExp 'new BigUint64Array' ''
    v172 <- CallMethod v171, 'test', [v170]
    v173 <- CallFunction v165, []
    v174 <- LoadRegExp 'new BigUint64Array' ''
    v175 <- CallMethod v174, 'test', [v173]
    v176 <- CallFunction v165, []
    v177 <- LoadRegExp 'new BigUint64Array' ''
    v178 <- CallMethod v177, 'test', [v176]
EndPlainFunction
v179 <- CallFunction v164, []


const limit = 65535 + 1;
function f4() {
    function foo() {
        try {
            new Int8Array(limit);
        } catch(e8) {
            return e8.stack;
        }
    }
    const v10 = foo();
    /new Int8Array/.test(v10);
    const v13 = foo();
    /new Int8Array/.test(v13);
    const v16 = foo();
    /new Int8Array/.test(v16);
}
f4();
function f20() {
    function foo() {
        try {
            new Uint8Array(limit);
        } catch(e24) {
            return e24.stack;
        }
    }
    const v26 = foo();
    /new Uint8Array/.test(v26);
    const v29 = foo();
    /new Uint8Array/.test(v29);
    const v32 = foo();
    /new Uint8Array/.test(v32);
}
f20();
function f36() {
    function foo() {
        try {
            new Uint8ClampedArray(limit);
        } catch(e40) {
            return e40.stack;
        }
    }
    const v42 = foo();
    /new Uint8ClampedArray/.test(v42);
    const v45 = foo();
    /new Uint8ClampedArray/.test(v45);
    const v48 = foo();
    /new Uint8ClampedArray/.test(v48);
}
f36();
function f52() {
    function foo() {
        try {
            new Int16Array(limit);
        } catch(e56) {
            return e56.stack;
        }
    }
    const v58 = foo();
    /new Int16Array/.test(v58);
    const v61 = foo();
    /new Int16Array/.test(v61);
    const v64 = foo();
    /new Int16Array/.test(v64);
}
f52();
function f68() {
    function foo() {
        try {
            new Uint16Array(limit);
        } catch(e72) {
            return e72.stack;
        }
    }
    const v74 = foo();
    /new Uint16Array/.test(v74);
    const v77 = foo();
    /new Uint16Array/.test(v77);
    const v80 = foo();
    /new Uint16Array/.test(v80);
}
f68();
function f84() {
    function foo() {
        try {
            new Int32Array(limit);
        } catch(e88) {
            return e88.stack;
        }
    }
    const v90 = foo();
    /new Int32Array/.test(v90);
    const v93 = foo();
    /new Int32Array/.test(v93);
    const v96 = foo();
    /new Int32Array/.test(v96);
}
f84();
function f100() {
    function foo() {
        try {
            new Uint32Array(limit);
        } catch(e104) {
            return e104.stack;
        }
    }
    const v106 = foo();
    /new Uint32Array/.test(v106);
    const v109 = foo();
    /new Uint32Array/.test(v109);
    const v112 = foo();
    /new Uint32Array/.test(v112);
}
f100();
function f116() {
    function foo() {
        try {
            new Float32Array(limit);
        } catch(e120) {
            return e120.stack;
        }
    }
    const v122 = foo();
    /new Float32Array/.test(v122);
    const v125 = foo();
    /new Float32Array/.test(v125);
    const v128 = foo();
    /new Float32Array/.test(v128);
}
f116();
function f132() {
    function foo() {
        try {
            new Float64Array(limit);
        } catch(e136) {
            return e136.stack;
        }
    }
    const v138 = foo();
    /new Float64Array/.test(v138);
    const v141 = foo();
    /new Float64Array/.test(v141);
    const v144 = foo();
    /new Float64Array/.test(v144);
}
f132();
function f148() {
    function foo() {
        try {
            new BigInt64Array(limit);
        } catch(e152) {
            return e152.stack;
        }
    }
    const v154 = foo();
    /new BigInt64Array/.test(v154);
    const v157 = foo();
    /new BigInt64Array/.test(v157);
    const v160 = foo();
    /new BigInt64Array/.test(v160);
}
f148();
function f164() {
    function foo() {
        try {
            new BigUint64Array(limit);
        } catch(e168) {
            return e168.stack;
        }
    }
    const v170 = foo();
    /new BigUint64Array/.test(v170);
    const v173 = foo();
    /new BigUint64Array/.test(v173);
    const v176 = foo();
    /new BigUint64Array/.test(v176);
}
f164();

FuzzIL program written to corpus/typed-array-constructor.fzil
