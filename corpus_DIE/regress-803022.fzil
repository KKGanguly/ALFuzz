v0 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v1 <- LoadInteger '0'
    BeginForLoopCondition -> v2
        v3 <- LoadInteger '2'
        v4 <- Compare v2, '<', v3
    BeginForLoopAfterthought v4 -> v5
        v6 <- UnaryOperation v5, '++'
    BeginForLoopBody -> v7
        BeginWhileLoopHeader
            v8 <- LoadInteger '0'
            v9 <- LoadInteger '1'
            v10 <- BinaryOperation v8, '&&', v9
        BeginWhileLoopBody v10
            BeginForLoopInitializer
                v11 <- LoadInteger '1'
            BeginForLoopCondition -> v12
                v13 <- LoadInteger '2'
                v14 <- Compare v12, '<', v13
            BeginForLoopAfterthought v14 -> v15
                v16 <- UnaryOperation v15, '++'
            BeginForLoopBody -> v17
            EndForLoop
        EndWhileLoop
    EndForLoop
EndPlainFunction
v18 <- CallFunction v0, []


function foo() {
    for (let i2 = 0; i2 < 2; i2++) {
        while (0 && 1) {
            for (let i12 = 1; i12 < 2; i12++) {
            }
        }
    }
}
foo();

FuzzIL program written to corpus/regress-803022.fzil
