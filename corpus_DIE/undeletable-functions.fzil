v0 <- LoadUndefined
v1 <- CreateNamedVariable 'array', 'var', v0
v2 <- LoadString 'toString'
v3 <- LoadString 'toLocaleString'
v4 <- LoadString 'join'
v5 <- LoadString 'pop'
v6 <- LoadString 'push'
v7 <- LoadString 'concat'
v8 <- LoadString 'reverse'
v9 <- LoadString 'shift'
v10 <- LoadString 'unshift'
v11 <- LoadString 'slice'
v12 <- LoadString 'splice'
v13 <- LoadString 'sort'
v14 <- LoadString 'filter'
v15 <- LoadString 'forEach'
v16 <- LoadString 'some'
v17 <- LoadString 'every'
v18 <- LoadString 'map'
v19 <- LoadString 'indexOf'
v20 <- LoadString 'lastIndexOf'
v21 <- LoadString 'reduce'
v22 <- LoadString 'reduceRight'
v23 <- CreateArray [v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22]
Reassign v1, v23
v24 <- CreateNamedVariable 'Array', 'none'
v25 <- GetProperty v24, 'prototype'
v26 <- LoadString 'Array prototype'
v27 <- CreateNamedVariable 'CheckEcmaSemantics', 'none'
v28 <- CallFunction v27, [v25, v1, v26]
v29 <- GetProperty v24, 'prototype'
v30 <- CreateNamedVariable 'old_Array_prototype', 'var', v29
BeginObjectLiteral
v31 <- EndObjectLiteral
v32 <- CreateNamedVariable 'new_Array_prototype', 'var', v31
BeginForLoopInitializer
    v33 <- LoadInteger '0'
BeginForLoopCondition -> v34
    v35 <- LoadInteger '7'
    v36 <- Compare v34, '<', v35
BeginForLoopAfterthought v36 -> v37
    v38 <- UnaryOperation v37, '++'
BeginForLoopBody -> v39
    SetProperty v24, 'prototype', v32
    v40 <- GetProperty v24, 'prototype'
EndForLoop
v41 <- LoadString 'toString'
v42 <- LoadString 'toDateString'
v43 <- LoadString 'toTimeString'
v44 <- LoadString 'toLocaleString'
v45 <- LoadString 'toLocaleDateString'
v46 <- LoadString 'toLocaleTimeString'
v47 <- LoadString 'valueOf'
v48 <- LoadString 'getTime'
v49 <- LoadString 'getFullYear'
v50 <- LoadString 'getUTCFullYear'
v51 <- LoadString 'getMonth'
v52 <- LoadString 'getUTCMonth'
v53 <- LoadString 'getDate'
v54 <- LoadString 'getUTCDate'
v55 <- LoadString 'getDay'
v56 <- LoadString 'getUTCDay'
v57 <- LoadString 'getHours'
v58 <- LoadString 'getUTCHours'
v59 <- LoadString 'getMinutes'
v60 <- LoadString 'getUTCMinutes'
v61 <- LoadString 'getSeconds'
v62 <- LoadString 'getUTCSeconds'
v63 <- LoadString 'getMilliseconds'
v64 <- LoadString 'getUTCMilliseconds'
v65 <- LoadString 'getTimezoneOffset'
v66 <- LoadString 'setTime'
v67 <- LoadString 'setMilliseconds'
v68 <- LoadString 'setUTCMilliseconds'
v69 <- LoadString 'setSeconds'
v70 <- LoadString 'setUTCSeconds'
v71 <- LoadString 'setMinutes'
v72 <- LoadString 'setUTCMinutes'
v73 <- LoadString 'setHours'
v74 <- LoadString 'setUTCHours'
v75 <- LoadString 'setDate'
v76 <- LoadString 'setUTCDate'
v77 <- LoadString 'setMonth'
v78 <- LoadString 'setUTCMonth'
v79 <- LoadString 'setFullYear'
v80 <- LoadString 'setUTCFullYear'
v81 <- LoadString 'toGMTString'
v82 <- LoadString 'toUTCString'
v83 <- LoadString 'getYear'
v84 <- LoadString 'setYear'
v85 <- LoadString 'toISOString'
v86 <- LoadString 'toJSON'
v87 <- CreateArray [v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86]
Reassign v1, v87
v88 <- CreateNamedVariable 'Date', 'none'
v89 <- GetProperty v88, 'prototype'
v90 <- LoadString 'Date prototype'
v91 <- CallFunction v27, [v89, v1, v90]
v92 <- LoadString 'random'
v93 <- LoadString 'abs'
v94 <- LoadString 'acos'
v95 <- LoadString 'asin'
v96 <- LoadString 'atan'
v97 <- LoadString 'ceil'
v98 <- LoadString 'cos'
v99 <- LoadString 'exp'
v100 <- LoadString 'floor'
v101 <- LoadString 'log'
v102 <- LoadString 'round'
v103 <- LoadString 'sin'
v104 <- LoadString 'sqrt'
v105 <- LoadString 'tan'
v106 <- LoadString 'atan2'
v107 <- LoadString 'pow'
v108 <- LoadString 'max'
v109 <- LoadString 'min'
v110 <- CreateArray [v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109]
Reassign v1, v110
v111 <- CreateNamedVariable 'Math', 'none'
v112 <- LoadString 'Math1'
v113 <- CallFunction v27, [v111, v1, v112]
v114 <- LoadString 'UTC'
v115 <- LoadString 'parse'
v116 <- LoadString 'now'
v117 <- CreateArray [v114, v115, v116]
v118 <- LoadString 'Date'
v119 <- CallFunction v27, [v88, v117, v118]
v120 <- LoadString 'E'
v121 <- LoadString 'LN10'
v122 <- LoadString 'LN2'
v123 <- LoadString 'LOG2E'
v124 <- LoadString 'LOG10E'
v125 <- LoadString 'PI'
v126 <- LoadString 'SQRT1_2'
v127 <- LoadString 'SQRT2'
v128 <- CreateArray [v120, v121, v122, v123, v124, v125, v126, v127]
Reassign v1, v128
v129 <- LoadString 'Math2'
v130 <- CreateNamedVariable 'CheckDontDelete', 'none'
v131 <- CallFunction v130, [v111, v1, v129]
v132 <- LoadString 'escape'
v133 <- LoadString 'unescape'
v134 <- LoadString 'decodeURI'
v135 <- LoadString 'decodeURIComponent'
v136 <- LoadString 'encodeURI'
v137 <- LoadString 'encodeURIComponent'
v138 <- LoadString 'isNaN'
v139 <- LoadString 'isFinite'
v140 <- LoadString 'parseInt'
v141 <- LoadString 'parseFloat'
v142 <- LoadString 'eval'
v143 <- LoadString 'execScript'
v144 <- CreateArray [v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143]
Reassign v1, v144
v145 <- LoadThis
v146 <- LoadString 'Global'
v147 <- CallFunction v27, [v145, v1, v146]
v148 <- LoadThis
v149 <- LoadString 'Infinity'
v150 <- CreateNamedVariable 'CheckReadOnlyAttr', 'none'
v151 <- CallFunction v150, [v148, v149]
v152 <- LoadThis
v153 <- LoadString 'NaN'
v154 <- CallFunction v150, [v152, v153]
v155 <- LoadThis
v156 <- LoadString 'undefined'
v157 <- CallFunction v150, [v155, v156]
v158 <- LoadString 'exec'
v159 <- LoadString 'test'
v160 <- LoadString 'toString'
v161 <- LoadString 'compile'
v162 <- CreateArray [v158, v159, v160, v161]
Reassign v1, v162
v163 <- CreateNamedVariable 'RegExp', 'none'
v164 <- GetProperty v163, 'prototype'
v165 <- LoadString 'RegExp prototype'
v166 <- CallFunction v27, [v164, v1, v165]
v167 <- LoadString 'toString'
v168 <- LoadString 'toLocaleString'
v169 <- LoadString 'valueOf'
v170 <- LoadString 'hasOwnProperty'
v171 <- LoadString 'isPrototypeOf'
v172 <- LoadString 'propertyIsEnumerable'
v173 <- LoadString '__defineGetter__'
v174 <- LoadString '__lookupGetter__'
v175 <- LoadString '__defineSetter__'
v176 <- LoadString '__lookupSetter__'
v177 <- CreateArray [v167, v168, v169, v170, v171, v172, v173, v174, v175, v176]
Reassign v1, v177
v178 <- CreateNamedVariable 'Object', 'none'
v179 <- GetProperty v178, 'prototype'
v180 <- LoadString 'Object prototype'
v181 <- CallFunction v27, [v179, v1, v180]
v182 <- GetProperty v178, 'prototype'
v183 <- CreateNamedVariable 'old_Object_prototype', 'var', v182
BeginObjectLiteral
v184 <- EndObjectLiteral
v185 <- CreateNamedVariable 'new_Object_prototype', 'var', v184
BeginForLoopInitializer
    v186 <- LoadInteger '0'
BeginForLoopCondition -> v187
    v188 <- LoadInteger '7'
    v189 <- Compare v187, '<', v188
BeginForLoopAfterthought v189 -> v190
    v191 <- UnaryOperation v190, '++'
BeginForLoopBody -> v192
    SetProperty v178, 'prototype', v185
    v193 <- GetProperty v178, 'prototype'
EndForLoop
v194 <- LoadString 'toString'
v195 <- LoadString 'valueOf'
v196 <- LoadString 'toJSON'
v197 <- CreateArray [v194, v195, v196]
Reassign v1, v197
v198 <- CreateNamedVariable 'Boolean', 'none'
v199 <- GetProperty v198, 'prototype'
v200 <- LoadString 'Boolean prototype'
v201 <- CallFunction v27, [v199, v1, v200]
v202 <- LoadString 'toString'
v203 <- LoadString 'toLocaleString'
v204 <- LoadString 'valueOf'
v205 <- LoadString 'toFixed'
v206 <- LoadString 'toExponential'
v207 <- LoadString 'toPrecision'
v208 <- LoadString 'toJSON'
v209 <- CreateArray [v202, v203, v204, v205, v206, v207, v208]
Reassign v1, v209
v210 <- CreateNamedVariable 'Number', 'none'
v211 <- GetProperty v210, 'prototype'
v212 <- LoadString 'Number prototype'
v213 <- CallFunction v27, [v211, v1, v212]
v214 <- CreateNamedVariable 'Function', 'none'
v215 <- GetProperty v214, 'prototype'
v216 <- LoadString 'toString'
v217 <- CreateArray [v216]
v218 <- LoadString 'Function prototype'
v219 <- CallFunction v27, [v215, v217, v218]
v220 <- GetProperty v88, 'prototype'
v221 <- LoadString 'constructor'
v222 <- CreateArray [v221]
v223 <- LoadString 'Date prototype constructor'
v224 <- CallFunction v27, [v220, v222, v223]
v225 <- LoadString 'charAt'
v226 <- LoadString 'charCodeAt'
v227 <- LoadString 'concat'
v228 <- LoadString 'indexOf'
v229 <- LoadString 'lastIndexOf'
v230 <- LoadString 'localeCompare'
v231 <- LoadString 'match'
v232 <- LoadString 'replace'
v233 <- LoadString 'search'
v234 <- LoadString 'slice'
v235 <- LoadString 'split'
v236 <- LoadString 'substring'
v237 <- LoadString 'substr'
v238 <- LoadString 'toLowerCase'
v239 <- LoadString 'toLocaleLowerCase'
v240 <- LoadString 'toUpperCase'
v241 <- LoadString 'toLocaleUpperCase'
v242 <- LoadString 'link'
v243 <- LoadString 'anchor'
v244 <- LoadString 'fontcolor'
v245 <- LoadString 'fontsize'
v246 <- LoadString 'big'
v247 <- LoadString 'blink'
v248 <- LoadString 'bold'
v249 <- LoadString 'fixed'
v250 <- LoadString 'italics'
v251 <- LoadString 'small'
v252 <- LoadString 'strike'
v253 <- LoadString 'sub'
v254 <- LoadString 'sup'
v255 <- LoadString 'toJSON'
v256 <- LoadString 'toString'
v257 <- LoadString 'valueOf'
v258 <- CreateArray [v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257]
Reassign v1, v258
v259 <- CreateNamedVariable 'String', 'none'
v260 <- GetProperty v259, 'prototype'
v261 <- LoadString 'String prototype'
v262 <- CallFunction v27, [v260, v1, v261]
v263 <- LoadString 'fromCharCode'
v264 <- CreateArray [v263]
v265 <- LoadString 'String'
v266 <- CallFunction v27, [v259, v264, v265]
v267 <- BeginPlainFunction -> v268, v269, v270
    v271 <- CreateNamedVariable 'print', 'none'
    v272 <- CallFunction v271, [v270]
    BeginForLoopInitializer
        v273 <- LoadInteger '0'
    BeginForLoopCondition -> v274
        v275 <- GetProperty v269, 'length'
        v276 <- Compare v274, '<', v275
    BeginForLoopAfterthought v276 -> v277
        v278 <- UnaryOperation v277, '++'
    BeginForLoopBody -> v279
        v280 <- GetComputedProperty v269, v279
        v281 <- CreateNamedVariable 'CheckDeletable', 'none'
        v282 <- CallFunction v281, [v268, v280]
    EndForLoop
EndPlainFunction
v283 <- BeginPlainFunction -> v284, v285, v286
    v287 <- CreateNamedVariable 'print', 'none'
    v288 <- CallFunction v287, [v286]
    BeginForLoopInitializer
        v289 <- LoadInteger '0'
    BeginForLoopCondition -> v290
        v291 <- GetProperty v285, 'length'
        v292 <- Compare v290, '<', v291
    BeginForLoopAfterthought v292 -> v293
        v294 <- UnaryOperation v293, '++'
    BeginForLoopBody -> v295
        v296 <- GetComputedProperty v285, v295
        v297 <- CreateNamedVariable 'CheckDontDeleteAttr', 'none'
        v298 <- CallFunction v297, [v284, v296]
    EndForLoop
EndPlainFunction
v299 <- BeginPlainFunction -> v300, v301
    v302 <- GetComputedProperty v300, v301
    v303 <- CreateNamedVariable 'old', 'var', v302
    v304 <- GetProperty v178, 'prototype'
    v305 <- GetProperty v304, 'hasOwnProperty'
    v306 <- CreateNamedVariable 'hasOwnProperty', 'var', v305
    v307 <- GetComputedProperty v300, v301
    v308 <- UnaryOperation '!', v307
    BeginIf v308
        Return
    EndIf
    v309 <- CallMethod v300, 'hasOwnProperty', [v301]
    v310 <- LoadString 'inherited: '
    v311 <- BinaryOperation v310, '+', v301
    v312 <- DeleteComputedProperty v300, v301
    v313 <- CreateNamedVariable 'deleted', 'var', v312
    v314 <- LoadString 'delete operator returned false: '
    v315 <- BinaryOperation v314, '+', v301
    v316 <- CallMethod v306, 'call', [v300, v301]
    v317 <- LoadString 'still there after delete: '
    v318 <- BinaryOperation v317, '+', v301
    v319 <- LoadString 'foo'
    SetComputedProperty v300, v301, v319
    v320 <- LoadString 'foo'
    v321 <- GetComputedProperty v300, v301
    v322 <- LoadString 'not overwritable: '
    v323 <- BinaryOperation v322, '+', v301
    SetComputedProperty v300, v301, v303
EndPlainFunction
v324 <- BeginPlainFunction -> v325, v326
    v327 <- GetComputedProperty v325, v326
    v328 <- CreateNamedVariable 'old', 'var', v327
    v329 <- GetComputedProperty v325, v326
    v330 <- UnaryOperation '!', v329
    BeginIf v330
        Return
    EndIf
    v331 <- CallMethod v325, 'hasOwnProperty', [v326]
    v332 <- LoadString 'inherited: '
    v333 <- BinaryOperation v332, '+', v326
    v334 <- DeleteComputedProperty v325, v326
    v335 <- CreateNamedVariable 'deleted', 'var', v334
    v336 <- LoadString 'delete operator returned true: '
    v337 <- BinaryOperation v336, '+', v326
    v338 <- CallMethod v325, 'hasOwnProperty', [v326]
    v339 <- LoadString 'not there after delete: '
    v340 <- BinaryOperation v339, '+', v326
    v341 <- LoadString 'foo'
    SetComputedProperty v325, v326, v341
    v342 <- LoadString 'foo'
    v343 <- GetComputedProperty v325, v326
    v344 <- Compare v342, '==', v343
    v345 <- LoadString 'overwritable: '
    v346 <- BinaryOperation v345, '+', v326
EndPlainFunction
v347 <- BeginPlainFunction -> v348, v349
    v350 <- GetComputedProperty v348, v349
    v351 <- CreateNamedVariable 'old', 'var', v350
    v352 <- GetComputedProperty v348, v349
    v353 <- UnaryOperation '!', v352
    BeginIf v353
        Return
    EndIf
    v354 <- CallMethod v348, 'hasOwnProperty', [v349]
    v355 <- LoadString 'inherited: '
    v356 <- BinaryOperation v355, '+', v349
    v357 <- DeleteComputedProperty v348, v349
    v358 <- CreateNamedVariable 'deleted', 'var', v357
    v359 <- LoadString 'delete operator returned true: '
    v360 <- BinaryOperation v359, '+', v349
    v361 <- CallMethod v348, 'hasOwnProperty', [v349]
    v362 <- LoadString 'not there after delete: '
    v363 <- BinaryOperation v362, '+', v349
    v364 <- LoadString 'foo'
    SetComputedProperty v348, v349, v364
    v365 <- GetComputedProperty v348, v349
    v366 <- LoadString 'overwritable: '
    v367 <- BinaryOperation v366, '+', v349
EndPlainFunction
v368 <- LoadString 'OK'
v369 <- CreateNamedVariable 'print', 'none'
v370 <- CallFunction v369, [v368]


var array;
array = ["toString","toLocaleString","join","pop","push","concat","reverse","shift","unshift","slice","splice","sort","filter","forEach","some","every","map","indexOf","lastIndexOf","reduce","reduceRight"];
CheckEcmaSemantics(Array.prototype, array, "Array prototype");
var old_Array_prototype = Array.prototype;
var new_Array_prototype = {};
for (let i34 = 0; i34 < 7; i34++) {
    Array.prototype = new_Array_prototype;
    Array.prototype;
}
array = ["toString","toDateString","toTimeString","toLocaleString","toLocaleDateString","toLocaleTimeString","valueOf","getTime","getFullYear","getUTCFullYear","getMonth","getUTCMonth","getDate","getUTCDate","getDay","getUTCDay","getHours","getUTCHours","getMinutes","getUTCMinutes","getSeconds","getUTCSeconds","getMilliseconds","getUTCMilliseconds","getTimezoneOffset","setTime","setMilliseconds","setUTCMilliseconds","setSeconds","setUTCSeconds","setMinutes","setUTCMinutes","setHours","setUTCHours","setDate","setUTCDate","setMonth","setUTCMonth","setFullYear","setUTCFullYear","toGMTString","toUTCString","getYear","setYear","toISOString","toJSON"];
CheckEcmaSemantics(Date.prototype, array, "Date prototype");
array = ["random","abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","atan2","pow","max","min"];
CheckEcmaSemantics(Math, array, "Math1");
CheckEcmaSemantics(Date, ["UTC","parse","now"], "Date");
array = ["E","LN10","LN2","LOG2E","LOG10E","PI","SQRT1_2","SQRT2"];
CheckDontDelete(Math, array, "Math2");
array = ["escape","unescape","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","isNaN","isFinite","parseInt","parseFloat","eval","execScript"];
CheckEcmaSemantics(this, array, "Global");
CheckReadOnlyAttr(this, "Infinity");
CheckReadOnlyAttr(this, "NaN");
CheckReadOnlyAttr(this, "undefined");
array = ["exec","test","toString","compile"];
CheckEcmaSemantics(RegExp.prototype, array, "RegExp prototype");
array = ["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","__defineGetter__","__lookupGetter__","__defineSetter__","__lookupSetter__"];
CheckEcmaSemantics(Object.prototype, array, "Object prototype");
var old_Object_prototype = Object.prototype;
var new_Object_prototype = {};
for (let i187 = 0; i187 < 7; i187++) {
    Object.prototype = new_Object_prototype;
    Object.prototype;
}
array = ["toString","valueOf","toJSON"];
CheckEcmaSemantics(Boolean.prototype, array, "Boolean prototype");
array = ["toString","toLocaleString","valueOf","toFixed","toExponential","toPrecision","toJSON"];
CheckEcmaSemantics(Number.prototype, array, "Number prototype");
CheckEcmaSemantics(Function.prototype, ["toString"], "Function prototype");
CheckEcmaSemantics(Date.prototype, ["constructor"], "Date prototype constructor");
array = ["charAt","charCodeAt","concat","indexOf","lastIndexOf","localeCompare","match","replace","search","slice","split","substring","substr","toLowerCase","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","link","anchor","fontcolor","fontsize","big","blink","bold","fixed","italics","small","strike","sub","sup","toJSON","toString","valueOf"];
CheckEcmaSemantics(String.prototype, array, "String prototype");
CheckEcmaSemantics(String, ["fromCharCode"], "String");
function CheckEcmaSemantics(a268, a269, a270) {
    print(a270);
    for (let i274 = 0; i274 < a269.length; i274++) {
        CheckDeletable(a268, a269[i274]);
    }
}
function CheckDontDelete(a284, a285, a286) {
    print(a286);
    for (let i290 = 0; i290 < a285.length; i290++) {
        CheckDontDeleteAttr(a284, a285[i290]);
    }
}
function CheckDeletable(a300, a301) {
    var old = a300[a301];
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (!a300[a301]) {
        return;
    }
    a300.hasOwnProperty(a301);
    "inherited: " + a301;
    var deleted = delete a300[a301];
    "delete operator returned false: " + a301;
    hasOwnProperty.call(a300, a301);
    "still there after delete: " + a301;
    a300[a301] = "foo";
    a300[a301];
    "not overwritable: " + a301;
    a300[a301] = old;
}
function CheckDontDeleteAttr(a325, a326) {
    var old = a325[a326];
    if (!a325[a326]) {
        return;
    }
    a325.hasOwnProperty(a326);
    "inherited: " + a326;
    var deleted = delete a325[a326];
    "delete operator returned true: " + a326;
    a325.hasOwnProperty(a326);
    "not there after delete: " + a326;
    a325[a326] = "foo";
    "foo" == a325[a326];
    "overwritable: " + a326;
}
function CheckReadOnlyAttr(a348, a349) {
    var old = a348[a349];
    if (!a348[a349]) {
        return;
    }
    a348.hasOwnProperty(a349);
    "inherited: " + a349;
    var deleted = delete a348[a349];
    "delete operator returned true: " + a349;
    a348.hasOwnProperty(a349);
    "not there after delete: " + a349;
    a348[a349] = "foo";
    a348[a349];
    "overwritable: " + a349;
}
print("OK");

FuzzIL program written to corpus/undeletable-functions.fzil
