v0 <- LoadInteger '0'
v1 <- CreateNamedVariable 'global_counter', 'var', v0
v2 <- BeginPlainFunction -> 
    v3 <- UnaryOperation v1, '++'
    v4 <- CreateNamedVariable 'x', 'var', v3
    v5 <- LoadInteger '10'
    v6 <- Compare v4, '==', v5
    BeginIf v6
        v7 <- LoadString 'terminate'
        ThrowException v7
    EndIf
EndPlainFunction
v8 <- BeginPlainFunction -> v9
    BeginForLoopInitializer
        v10 <- LoadInteger '0'
    BeginForLoopCondition -> v11
        v12 <- LoadInteger '3'
        v13 <- Compare v11, '<', v12
    BeginForLoopAfterthought v13 -> v14
        v15 <- UnaryOperation v14, '++'
    BeginForLoopBody -> v16
        v17 <- LoadInteger '0'
        Reassign v1, v17
    EndForLoop
EndPlainFunction
v18 <- BeginPlainFunction -> 
    BeginWhileLoopHeader
        v19 <- LoadBoolean 'true'
    BeginWhileLoopBody v19
        v20 <- CallFunction v2, []
    EndWhileLoop
EndPlainFunction
v21 <- BeginPlainFunction -> 
    BeginWhileLoopHeader
        v22 <- LoadBoolean 'true'
    BeginWhileLoopBody v22
        BeginWhileLoopHeader
            v23 <- LoadBoolean 'true'
        BeginWhileLoopBody v23
            v24 <- CallFunction v2, []
        EndWhileLoop
    EndWhileLoop
EndPlainFunction
v25 <- BeginPlainFunction -> 
    BeginWhileLoopHeader
        v26 <- LoadBoolean 'true'
    BeginWhileLoopBody v26
        BeginWhileLoopHeader
            v27 <- LoadBoolean 'true'
        BeginWhileLoopBody v27
            BeginWhileLoopHeader
                v28 <- LoadBoolean 'true'
            BeginWhileLoopBody v28
                v29 <- CallFunction v2, []
            EndWhileLoop
        EndWhileLoop
    EndWhileLoop
EndPlainFunction
v30 <- BeginPlainFunction -> 
    BeginWhileLoopHeader
        v31 <- LoadBoolean 'true'
    BeginWhileLoopBody v31
        BeginWhileLoopHeader
            v32 <- LoadBoolean 'true'
        BeginWhileLoopBody v32
            BeginWhileLoopHeader
                v33 <- LoadBoolean 'true'
            BeginWhileLoopBody v33
                BeginWhileLoopHeader
                    v34 <- LoadBoolean 'true'
                BeginWhileLoopBody v34
                    v35 <- CallFunction v2, []
                EndWhileLoop
            EndWhileLoop
        EndWhileLoop
    EndWhileLoop
EndPlainFunction
v36 <- BeginPlainFunction -> v37
    BeginWhileLoopHeader
        v38 <- LoadBoolean 'true'
    BeginWhileLoopBody v38
        v39 <- CallFunction v2, []
        BeginIf v37
            Break
        EndIf
    EndWhileLoop
EndPlainFunction
v40 <- BeginPlainFunction -> v41
    BeginWhileLoopHeader
        v42 <- LoadBoolean 'true'
    BeginWhileLoopBody v42
        BeginWhileLoopHeader
            v43 <- LoadBoolean 'true'
        BeginWhileLoopBody v43
            v44 <- CallFunction v2, []
            BeginIf v41
                Break
            EndIf
        EndWhileLoop
    EndWhileLoop
EndPlainFunction
v45 <- BeginPlainFunction -> v46
    BeginWhileLoopHeader
        v47 <- LoadBoolean 'true'
    BeginWhileLoopBody v47
        BeginWhileLoopHeader
            v48 <- LoadBoolean 'true'
        BeginWhileLoopBody v48
            BeginWhileLoopHeader
                v49 <- LoadBoolean 'true'
            BeginWhileLoopBody v49
                v50 <- CallFunction v2, []
                BeginIf v46
                    Break
                EndIf
            EndWhileLoop
            BeginIf v46
                Break
            EndIf
        EndWhileLoop
    EndWhileLoop
EndPlainFunction
v51 <- CallFunction v8, [v18]
v52 <- CallFunction v8, [v21]
v53 <- CallFunction v8, [v25]
v54 <- CallFunction v8, [v30]
v55 <- CallFunction v8, [v36]
v56 <- CallFunction v8, [v40]
v57 <- CallFunction v8, [v45]


var global_counter = 0;
function thrower() {
    var x = global_counter++;
    if (x == 10) {
        throw "terminate";
    }
}
function test(a9) {
    for (let i11 = 0; i11 < 3; i11++) {
        global_counter = 0;
    }
}
function n1() {
    while (true) {
        thrower();
    }
}
function n2() {
    while (true) {
        while (true) {
            thrower();
        }
    }
}
function n3() {
    while (true) {
        while (true) {
            while (true) {
                thrower();
            }
        }
    }
}
function n4() {
    while (true) {
        while (true) {
            while (true) {
                while (true) {
                    thrower();
                }
            }
        }
    }
}
function b1(a37) {
    while (true) {
        thrower();
        if (a37) {
            break;
        }
    }
}
function b2(a41) {
    while (true) {
        while (true) {
            thrower();
            if (a41) {
                break;
            }
        }
    }
}
function b3(a46) {
    while (true) {
        while (true) {
            while (true) {
                thrower();
                if (a46) {
                    break;
                }
            }
            if (a46) {
                break;
            }
        }
    }
}
test(n1);
test(n2);
test(n3);
test(n4);
test(b1);
test(b2);
test(b3);

FuzzIL program written to corpus/osr-infinite.fzil
