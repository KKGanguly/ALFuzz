v0 <- CreateNamedVariable 'Uint8Array', 'none'
v1 <- CreateNamedVariable 'Int8Array', 'none'
v2 <- CreateNamedVariable 'Uint16Array', 'none'
v3 <- CreateNamedVariable 'Int16Array', 'none'
v4 <- CreateNamedVariable 'Uint32Array', 'none'
v5 <- CreateNamedVariable 'Int32Array', 'none'
v6 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
v7 <- CreateNamedVariable 'Float32Array', 'none'
v8 <- CreateNamedVariable 'Float64Array', 'none'
v9 <- CreateArray [v0, v1, v2, v3, v4, v5, v6, v7, v8]
v10 <- CreateNamedVariable 'typedArrayConstructors', 'var', v9
BeginForOfLoop v10 -> v11
    v12 <- LoadInteger '1'
    v13 <- GetProperty v11, 'prototype'
    v14 <- GetProperty v13, 'findIndex'
    v15 <- GetProperty v14, 'length'
    v16 <- LoadInteger '21'
    v17 <- LoadInteger '22'
    v18 <- LoadInteger '23'
    v19 <- LoadInteger '24'
    v20 <- CreateArray [v16, v17, v18, v19]
    v21 <- Construct v11, [v20]
    v22 <- CreateNamedVariable 'a', 'var', v21
    v23 <- LoadInteger '1'
    v24 <- UnaryOperation '-', v23
    v25 <- BeginPlainFunction -> 
        v26 <- LoadBoolean 'false'
        Return v26
    EndPlainFunction
    v27 <- CallMethod v22, 'findIndex', [v25]
    v28 <- LoadInteger '1'
    v29 <- UnaryOperation '-', v28
    v30 <- BeginPlainFunction -> v31
        v32 <- LoadInteger '121'
        v33 <- Compare v32, '===', v31
        Return v33
    EndPlainFunction
    v34 <- CallMethod v22, 'findIndex', [v30]
    v35 <- LoadInteger '0'
    v36 <- BeginPlainFunction -> 
        v37 <- LoadBoolean 'true'
        Return v37
    EndPlainFunction
    v38 <- CallMethod v22, 'findIndex', [v36]
    v39 <- LoadInteger '1'
    v40 <- BeginPlainFunction -> v41
        v42 <- LoadInteger '22'
        v43 <- Compare v42, '===', v41
        Return v43
    EndPlainFunction
    v44 <- CallMethod v22, 'findIndex', [v40]
    v45 <- LoadUndefined
    v46 <- LoadInteger '2'
    v47 <- BeginPlainFunction -> v48
        v49 <- LoadInteger '23'
        v50 <- Compare v49, '===', v48
        Return v50
    EndPlainFunction
    v51 <- CallMethod v22, 'findIndex', [v47]
    v52 <- LoadNull
    v53 <- LoadInteger '3'
    v54 <- BeginPlainFunction -> v55
        v56 <- LoadInteger '24'
        v57 <- Compare v56, '===', v55
        Return v57
    EndPlainFunction
    v58 <- CallMethod v22, 'findIndex', [v54]
    v59 <- BeginPlainFunction -> 
        v60 <- CreateArray []
        v61 <- Construct v11, [v60]
        v62 <- CreateNamedVariable 'a', 'var', v61
        v63 <- LoadInteger '1'
        v64 <- UnaryOperation '-', v63
        v65 <- CreateNamedVariable 'l', 'var', v64
        v66 <- LoadInteger '1'
        v67 <- UnaryOperation '-', v66
        v68 <- CreateNamedVariable 'o', 'var', v67
        v69 <- LoadInteger '1'
        v70 <- UnaryOperation '-', v69
        v71 <- CreateNamedVariable 'v', 'var', v70
        v72 <- LoadInteger '1'
        v73 <- UnaryOperation '-', v72
        v74 <- CreateNamedVariable 'k', 'var', v73
        v75 <- BeginPlainFunction -> v76, v77, v78
            Reassign v68, v78
            v79 <- GetProperty v78, 'length'
            Reassign v65, v79
            Reassign v71, v76
            Reassign v74, v77
            v80 <- LoadBoolean 'false'
            Return v80
        EndPlainFunction
        v81 <- CallMethod v62, 'findIndex', [v75]
        v82 <- LoadInteger '1'
        v83 <- UnaryOperation '-', v82
        v84 <- LoadInteger '1'
        v85 <- UnaryOperation '-', v84
        v86 <- LoadInteger '1'
        v87 <- UnaryOperation '-', v86
        v88 <- LoadInteger '1'
        v89 <- UnaryOperation '-', v88
    EndPlainFunction
    v90 <- CallFunction v59, []
    v91 <- BeginPlainFunction -> 
        v92 <- LoadInteger '5'
        v93 <- CreateArray [v92]
        v94 <- Construct v11, [v93]
        v95 <- CreateNamedVariable 'a', 'var', v94
        v96 <- LoadInteger '1'
        v97 <- UnaryOperation '-', v96
        v98 <- CreateNamedVariable 'l', 'var', v97
        v99 <- LoadInteger '1'
        v100 <- UnaryOperation '-', v99
        v101 <- CreateNamedVariable 'o', 'var', v100
        v102 <- LoadInteger '1'
        v103 <- UnaryOperation '-', v102
        v104 <- CreateNamedVariable 'v', 'var', v103
        v105 <- LoadInteger '1'
        v106 <- UnaryOperation '-', v105
        v107 <- CreateNamedVariable 'k', 'var', v106
        v108 <- BeginPlainFunction -> v109, v110, v111
            Reassign v101, v111
            v112 <- GetProperty v111, 'length'
            Reassign v98, v112
            Reassign v104, v109
            Reassign v107, v110
            v113 <- LoadBoolean 'false'
            Return v113
        EndPlainFunction
        v114 <- CallMethod v95, 'findIndex', [v108]
        v115 <- CreateNamedVariable 'index', 'var', v114
        v116 <- GetProperty v95, 'length'
        v117 <- LoadInteger '5'
        v118 <- LoadInteger '0'
        v119 <- LoadInteger '1'
        v120 <- UnaryOperation '-', v119
    EndPlainFunction
    v121 <- CallFunction v91, []
    v122 <- BeginPlainFunction -> 
        v123 <- LoadInteger '1'
        v124 <- LoadInteger '2'
        v125 <- LoadInteger '3'
        v126 <- LoadInteger '4'
        v127 <- LoadInteger '5'
        v128 <- CreateArray [v123, v124, v125, v126, v127]
        v129 <- Construct v11, [v128]
        v130 <- CreateNamedVariable 'a', 'var', v129
        v131 <- LoadInteger '0'
        v132 <- CreateNamedVariable 'l', 'var', v131
        v133 <- BeginPlainFunction -> 
            v134 <- UnaryOperation v132, '++'
            v135 <- LoadBoolean 'false'
            Return v135
        EndPlainFunction
        v136 <- CallMethod v130, 'findIndex', [v133]
        v137 <- GetProperty v130, 'length'
    EndPlainFunction
    v138 <- CallFunction v122, []
    v139 <- BeginPlainFunction -> 
        v140 <- LoadInteger '1'
        v141 <- LoadInteger '2'
        v142 <- LoadInteger '3'
        v143 <- CreateArray [v140, v141, v142]
        v144 <- Construct v11, [v143]
        Reassign v22, v144
        v145 <- BeginPlainFunction -> v146, v147
            v148 <- UnaryOperation '++', v146
            SetComputedProperty v22, v147, v148
            v149 <- LoadBoolean 'false'
            Return v149
        EndPlainFunction
        v150 <- CallMethod v22, 'findIndex', [v145]
        v151 <- LoadInteger '2'
        v152 <- LoadInteger '3'
        v153 <- LoadInteger '4'
        v154 <- CreateArray [v151, v152, v153]
        v155 <- LoadInteger '3'
        v156 <- GetProperty v22, 'length'
    EndPlainFunction
    v157 <- CallFunction v139, []
    v158 <- BeginPlainFunction -> 
        v159 <- BeginPlainFunction -> v160, v161
            v162 <- CreateNamedVariable 'Number', 'none'
            v163 <- CallFunction v162, [v161]
            v164 <- LoadThis
            v165 <- CallMethod v164, 'charAt', [v163]
            v166 <- CreateNamedVariable 'String', 'none'
            v167 <- CallFunction v166, [v160]
            v168 <- Compare v165, '===', v167
            Return v168
        EndPlainFunction
        v169 <- LoadString '321'
        v170 <- LoadInteger '1'
        v171 <- LoadInteger '2'
        v172 <- LoadInteger '3'
        v173 <- CreateArray [v170, v171, v172]
        v174 <- Construct v11, [v173]
        v175 <- CallMethod v174, 'findIndex', [v159, v169]
        v176 <- CreateNamedVariable 'index', 'var', v175
        v177 <- LoadInteger '1'
        v178 <- BeginPlainFunction -> v179
            v180 <- LoadThis
            v181 <- GetComputedProperty v180, v179
            Return v181
        EndPlainFunction
        BeginObjectLiteral
            ObjectLiteralAddProperty `elementAt`, v178
        v182 <- EndObjectLiteral
        v183 <- CreateNamedVariable 'thisArg', 'var', v182
        v184 <- LoadInteger '3'
        v185 <- LoadInteger '2'
        v186 <- LoadInteger '1'
        v187 <- CreateArray [v184, v185, v186]
        v188 <- CreateNamedVariable 'Array', 'none'
        v189 <- GetProperty v188, 'prototype'
        v190 <- GetProperty v189, 'push'
        v191 <- CallMethod v190, 'apply', [v183, v187]
        v192 <- BeginPlainFunction -> v193, v194
            v195 <- LoadThis
            v196 <- CallMethod v195, 'elementAt', [v194]
            v197 <- Compare v196, '===', v193
            Return v197
        EndPlainFunction
        v198 <- LoadInteger '1'
        v199 <- LoadInteger '2'
        v200 <- LoadInteger '3'
        v201 <- CreateArray [v198, v199, v200]
        v202 <- Construct v11, [v201]
        v203 <- CallMethod v202, 'findIndex', [v192, v183]
        Reassign v176, v203
        v204 <- LoadInteger '1'
        v205 <- CreateArray []
        Reassign v22, v205
        v206 <- BeginPlainFunction -> 
            v207 <- LoadThis
            v208 <- CallMethod v22, 'push', [v207]
        EndPlainFunction
        v209 <- LoadString ''
        v210 <- LoadInteger '1'
        v211 <- LoadInteger '2'
        v212 <- CreateArray [v210, v211]
        v213 <- Construct v11, [v212]
        v214 <- CallMethod v213, 'findIndex', [v206, v209]
        v215 <- GetElement v22, '0'
        v216 <- GetElement v22, '1'
        v217 <- Compare v215, '!==', v216
        v218 <- CreateArray []
        Reassign v22, v218
        v219 <- BeginPlainFunction -> 
            v220 <- LoadThis
            v221 <- CallMethod v22, 'push', [v220]
        EndPlainFunction
        BeginObjectLiteral
        v222 <- EndObjectLiteral
        v223 <- LoadInteger '1'
        v224 <- LoadInteger '2'
        v225 <- CreateArray [v223, v224]
        v226 <- Construct v11, [v225]
        v227 <- CallMethod v226, 'findIndex', [v219, v222]
        v228 <- GetElement v22, '0'
        v229 <- GetElement v22, '1'
        v230 <- CreateArray []
        Reassign v22, v230
        v231 <- BeginPlainFunction -> 
            Directive 'use strict'
            v232 <- LoadThis
            v233 <- CallMethod v22, 'push', [v232]
        EndPlainFunction
        v234 <- LoadString ''
        v235 <- LoadInteger '1'
        v236 <- LoadInteger '2'
        v237 <- CreateArray [v235, v236]
        v238 <- Construct v11, [v237]
        v239 <- CallMethod v238, 'findIndex', [v231, v234]
        v240 <- LoadString ''
        v241 <- GetElement v22, '0'
        v242 <- GetElement v22, '0'
        v243 <- GetElement v22, '1'
    EndPlainFunction
    v244 <- CallFunction v158, []
    v245 <- LoadString 'constructor.prototype.findIndex.call(null, function() { })'
    v246 <- CreateNamedVariable 'TypeError', 'none'
    v247 <- LoadString 'constructor.prototype.findIndex.call(undefined, function() { })'
    v248 <- LoadString 'constructor.prototype.findIndex.apply(null, function() { }, [])'
    v249 <- LoadString 'constructor.prototype.findIndex.apply(undefined, function() { }, [])'
    v250 <- LoadString 'constructor.prototype.findIndex.apply([], function() { }, [])'
    v251 <- LoadString 'constructor.prototype.findIndex.apply({}, function() { }, [])'
    v252 <- LoadString 'constructor.prototype.findIndex.apply("", function() { }, [])'
    v253 <- LoadString 'new constructor([]).findIndex(null)'
    v254 <- LoadString 'new constructor([]).findIndex(undefined)'
    v255 <- LoadString 'new constructor([]).findIndex(0)'
    v256 <- LoadString 'new constructor([]).findIndex(true)'
    v257 <- LoadString 'new constructor([]).findIndex(false)'
    v258 <- LoadString 'new constructor([]).findIndex("")'
    v259 <- LoadString 'new constructor([]).findIndex({})'
    v260 <- LoadString 'new constructor([]).findIndex([])'
    v261 <- LoadString 'new constructor([]).findIndex(/d+/)'
    v262 <- LoadInteger '1'
    v263 <- LoadInteger '2'
    v264 <- CreateArray [v262, v263]
    v265 <- Construct v11, [v264]
    Reassign v22, v265
    v266 <- LoadString 'length'
    v267 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v267
    v268 <- EndObjectLiteral
    v269 <- CreateNamedVariable 'Object', 'none'
    v270 <- CallMethod v269, 'defineProperty', [v22, v266, v268]
    v271 <- LoadInteger '0'
    v272 <- CreateNamedVariable 'x', 'var', v271
    v273 <- BeginPlainFunction -> v274
        Update v272, '+', v274
        v275 <- LoadBoolean 'false'
        Return v275
    EndPlainFunction
    v276 <- CallMethod v22, 'findIndex', [v273]
    v277 <- LoadInteger '1'
    v278 <- UnaryOperation '-', v277
    v279 <- LoadInteger '3'
    v280 <- BeginPlainFunction -> v281
        Update v272, '+', v281
        v282 <- LoadBoolean 'false'
        Return v282
    EndPlainFunction
    v283 <- CreateNamedVariable 'Array', 'none'
    v284 <- GetProperty v283, 'prototype'
    v285 <- GetProperty v284, 'findIndex'
    v286 <- CallMethod v285, 'call', [v22, v280]
    v287 <- LoadInteger '1'
    v288 <- UnaryOperation '-', v287
    v289 <- LoadInteger '4'
    v290 <- CreateNamedVariable 'Symbol', 'none'
    v291 <- GetProperty v290, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v291 -> v292
            v293 <- LoadString 'Parameter should not be processed when '
            v294 <- LoadString 'array.[[ViewedArrayBuffer]] is detached.'
            v295 <- BinaryOperation v293, '+', v294
            v296 <- LoadInteger '0'
            Return v296
        EndObjectLiteralComputedMethod
    v297 <- EndObjectLiteral
    v298 <- CreateNamedVariable 'tmp', 'var', v297
    v299 <- LoadInteger '1'
    v300 <- LoadInteger '2'
    v301 <- LoadInteger '3'
    v302 <- LoadInteger '4'
    v303 <- LoadInteger '5'
    v304 <- LoadInteger '6'
    v305 <- LoadInteger '7'
    v306 <- LoadInteger '8'
    v307 <- LoadInteger '9'
    v308 <- LoadInteger '10'
    v309 <- CreateArray [v299, v300, v301, v302, v303, v304, v305, v306, v307, v308]
    v310 <- Construct v11, [v309]
    v311 <- CreateNamedVariable 'array', 'var', v310
    v312 <- BeginArrowFunction -> 
        v313 <- CallMethod v311, 'findIndex', [v298]
        Return v313
    EndArrowFunction
    v314 <- CallFunction v312, []
EndForOfLoop


var typedArrayConstructors = [Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Uint8ClampedArray,Float32Array,Float64Array];
for (const v11 of typedArrayConstructors) {
    v11.prototype.findIndex.length;
    const v21 = new v11([21,22,23,24]);
    var a = v21;
    -1;
    function f25() {
        return false;
    }
    a.findIndex(f25);
    -1;
    function f30(a31) {
        return 121 === a31;
    }
    a.findIndex(f30);
    function f36() {
        return true;
    }
    a.findIndex(f36);
    function f40(a41) {
        return 22 === a41;
    }
    a.findIndex(f40);
    function f47(a48) {
        return 23 === a48;
    }
    a.findIndex(f47);
    function f54(a55) {
        return 24 === a55;
    }
    a.findIndex(f54);
    function f59() {
        const v61 = new v11([]);
        var a = v61;
        var l = -1;
        var o = -1;
        var v = -1;
        var k = -1;
        function f75(a76, a77, a78) {
            o = a78;
            l = a78.length;
            v = a76;
            k = a77;
            return false;
        }
        a.findIndex(f75);
        -1;
        -1;
        -1;
        -1;
    }
    f59();
    function f91() {
        const v94 = new v11([5]);
        var a = v94;
        var l = -1;
        var o = -1;
        var v = -1;
        var k = -1;
        function f108(a109, a110, a111) {
            o = a111;
            l = a111.length;
            v = a109;
            k = a110;
            return false;
        }
        var index = a.findIndex(f108);
        a.length;
        -1;
    }
    f91();
    function f122() {
        const v129 = new v11([1,2,3,4,5]);
        var a = v129;
        var l = 0;
        function f133() {
            l++;
            return false;
        }
        a.findIndex(f133);
        a.length;
    }
    f122();
    function f139() {
        const v144 = new v11([1,2,3]);
        a = v144;
        function f145(a146, a147) {
            a[a147] = ++a146;
            return false;
        }
        a.findIndex(f145);
        [2,3,4];
        a.length;
    }
    f139();
    function f158() {
        function f159(a160, a161) {
            return this.charAt(Number(a161)) === String(a160);
        }
        const v174 = new v11([1,2,3]);
        var index = v174.findIndex(f159, "321");
        function f178(a179) {
            return this[a179];
        }
        var thisArg = { elementAt: f178 };
        const v187 = [3,2,1];
        Array.prototype.push.apply(thisArg, v187);
        function f192(a193, a194) {
            return this.elementAt(a194) === a193;
        }
        const v202 = new v11([1,2,3]);
        index = v202.findIndex(f192, thisArg);
        a = [];
        function f206() {
            a.push(this);
        }
        const v213 = new v11([1,2]);
        v213.findIndex(f206, "");
        a[0] !== a[1];
        a = [];
        function f219() {
            a.push(this);
        }
        const v222 = {};
        const v226 = new v11([1,2]);
        v226.findIndex(f219, v222);
        a[0];
        a[1];
        a = [];
        function f231() {
            'use strict';
            a.push(this);
        }
        const v238 = new v11([1,2]);
        v238.findIndex(f231, "");
        a[0];
        a[0];
        a[1];
    }
    f158();
    const v265 = new v11([1,2]);
    a = v265;
    Object.defineProperty(a, "length", { value: 1 });
    var x = 0;
    function f273(a274) {
        x += a274;
        return false;
    }
    a.findIndex(f273);
    -1;
    function f280(a281) {
        x += a281;
        return false;
    }
    Array.prototype.findIndex.call(a, f280);
    -1;
    const v291 = Symbol.toPrimitive;
    const v297 = {
        [v291]() {
            "Parameter should not be processed when " + "array.[[ViewedArrayBuffer]] is detached.";
            return 0;
        },
    };
    var tmp = v297;
    const v310 = new v11([1,2,3,4,5,6,7,8,9,10]);
    var array = v310;
    const v312 = () => {
        return array.findIndex(tmp);
    };
    v312();
}

FuzzIL program written to corpus/typedarray-findindex.fzil
