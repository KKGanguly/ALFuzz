v0 <- BeginPlainFunction -> v1, v2
    v3 <- LoadInteger '3'
    v4 <- Compare v1, '==', v3
    v5 <- CreateNamedVariable 'passed', 'var', v4
    BeginIf v5
        BeginIf v5
            v6 <- LoadInteger '4'
            v7 <- Compare v2, '==', v6
            Reassign v5, v7
        EndIf
    EndIf
    Return v5
EndPlainFunction
v8 <- LoadInteger '3'
v9 <- LoadInteger '4'
v10 <- CallFunction v0, [v8, v9]
v11 <- LoadInteger '3'
v12 <- LoadInteger '4'
v13 <- CallFunction v0, [v11, v12]
v14 <- LoadFloat '3.1'
v15 <- LoadInteger '4'
v16 <- CallFunction v0, [v14, v15]
v17 <- LoadInteger '3'
v18 <- LoadFloat '4.1'
v19 <- CallFunction v0, [v17, v18]
v20 <- LoadInteger '3'
v21 <- LoadInteger '4'
v22 <- CallFunction v0, [v20, v21]
v23 <- LoadInteger '3'
v24 <- LoadInteger '4'
v25 <- CallFunction v0, [v23, v24]
v26 <- LoadFloat '3.1'
v27 <- LoadInteger '4'
v28 <- CallFunction v0, [v26, v27]
v29 <- LoadInteger '3'
v30 <- LoadFloat '4.1'
v31 <- CallFunction v0, [v29, v30]


function foo(a1, a2) {
    var passed = a1 == 3;
    if (passed) {
        if (passed) {
            passed = a2 == 4;
        }
    }
    return passed;
}
foo(3, 4);
foo(3, 4);
foo(3.1, 4);
foo(3, 4.1);
foo(3, 4);
foo(3, 4);
foo(3.1, 4);
foo(3, 4.1);

FuzzIL program written to corpus/deopt-bool.fzil
