v0 <- BeginPlainFunction -> v1, v2
    v3 <- BinaryOperation v1, '/', v2
    v4 <- LoadInteger '0'
    v5 <- BinaryOperation v3, '|', v4
    Return v5
EndPlainFunction
v6 <- LoadInteger '17'
v7 <- LoadInteger '51'
v8 <- LoadInteger '3'
v9 <- CallFunction v0, [v7, v8]
v10 <- LoadInteger '13'
v11 <- LoadInteger '65'
v12 <- LoadInteger '5'
v13 <- CallFunction v0, [v11, v12]
v14 <- LoadInteger '11'
v15 <- LoadInteger '77'
v16 <- LoadInteger '7'
v17 <- CallFunction v0, [v15, v16]
v18 <- LoadInteger '2147483648'
v19 <- UnaryOperation '-', v18
v20 <- LoadInteger '2147483648'
v21 <- UnaryOperation '-', v20
v22 <- LoadInteger '1'
v23 <- UnaryOperation '-', v22
v24 <- CallFunction v0, [v21, v23]


function do_div(a1, a2) {
    return (a1 / a2) | 0;
}
do_div(51, 3);
do_div(65, 5);
do_div(77, 7);
-2147483648;
do_div(-2147483648, -1);

FuzzIL program written to corpus/regress-3039.fzil
