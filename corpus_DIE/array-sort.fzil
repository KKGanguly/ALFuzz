v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '200'
    v2 <- LoadInteger '45'
    v3 <- LoadInteger '7'
    v4 <- CreateArray [v1, v2, v3]
    v5 <- CreateNamedVariable 'a', 'var', v4
    v6 <- CallMethod v5, 'sort', []
    v7 <- LoadInteger '200'
    v8 <- LoadInteger '45'
    v9 <- LoadInteger '7'
    v10 <- CreateArray [v7, v8, v9]
    v11 <- BeginPlainFunction -> v12, v13
        v14 <- BinaryOperation v12, '-', v13
        Return v14
    EndPlainFunction
    v15 <- CallMethod v5, 'sort', [v11]
    v16 <- LoadInteger '7'
    v17 <- LoadInteger '45'
    v18 <- LoadInteger '200'
    v19 <- CreateArray [v16, v17, v18]
    v20 <- LoadInteger '12345'
    v21 <- UnaryOperation '-', v20
    v22 <- LoadInteger '123'
    v23 <- UnaryOperation '-', v22
    v24 <- LoadInteger '1234'
    v25 <- UnaryOperation '-', v24
    v26 <- LoadInteger '123456'
    v27 <- UnaryOperation '-', v26
    v28 <- CreateArray [v21, v23, v25, v27]
    Reassign v5, v28
    v29 <- CallMethod v5, 'sort', []
    v30 <- LoadInteger '123'
    v31 <- UnaryOperation '-', v30
    v32 <- LoadInteger '1234'
    v33 <- UnaryOperation '-', v32
    v34 <- LoadInteger '12345'
    v35 <- UnaryOperation '-', v34
    v36 <- LoadInteger '123456'
    v37 <- UnaryOperation '-', v36
    v38 <- CreateArray [v31, v33, v35, v37]
    v39 <- LoadInteger '123456'
    v40 <- LoadInteger '0'
    v41 <- LoadInteger '12345'
    v42 <- UnaryOperation '-', v41
    v43 <- LoadInteger '123'
    v44 <- UnaryOperation '-', v43
    v45 <- LoadInteger '123'
    v46 <- LoadInteger '1234'
    v47 <- LoadInteger '1234'
    v48 <- UnaryOperation '-', v47
    v49 <- LoadInteger '0'
    v50 <- LoadInteger '12345'
    v51 <- LoadInteger '123456'
    v52 <- UnaryOperation '-', v51
    v53 <- CreateArray [v39, v40, v42, v44, v45, v46, v48, v49, v50, v52]
    Reassign v5, v53
    v54 <- CallMethod v5, 'sort', []
    v55 <- LoadInteger '123'
    v56 <- UnaryOperation '-', v55
    v57 <- LoadInteger '1234'
    v58 <- UnaryOperation '-', v57
    v59 <- LoadInteger '12345'
    v60 <- UnaryOperation '-', v59
    v61 <- LoadInteger '123456'
    v62 <- UnaryOperation '-', v61
    v63 <- LoadInteger '0'
    v64 <- LoadInteger '0'
    v65 <- LoadInteger '123'
    v66 <- LoadInteger '1234'
    v67 <- LoadInteger '12345'
    v68 <- LoadInteger '123456'
    v69 <- CreateArray [v56, v58, v60, v62, v63, v64, v65, v66, v67, v68]
    v70 <- LoadInteger '9'
    v71 <- LoadInteger '1000000000'
    v72 <- CreateArray [v70, v71]
    v73 <- CallMethod v72, 'sort', []
    Reassign v5, v73
    v74 <- LoadInteger '1000000000'
    v75 <- LoadInteger '9'
    v76 <- CreateArray [v74, v75]
    v77 <- LoadInteger '1000000000'
    v78 <- LoadInteger '1'
    v79 <- CreateArray [v77, v78]
    v80 <- CallMethod v79, 'sort', []
    Reassign v5, v80
    v81 <- LoadInteger '1'
    v82 <- LoadInteger '1000000000'
    v83 <- CreateArray [v81, v82]
    v84 <- LoadInteger '1000000000'
    v85 <- LoadInteger '0'
    v86 <- CreateArray [v84, v85]
    v87 <- CallMethod v86, 'sort', []
    Reassign v5, v87
    v88 <- LoadInteger '0'
    v89 <- LoadInteger '1000000000'
    v90 <- CreateArray [v88, v89]
    v91 <- LoadInteger '1230'
    v92 <- LoadInteger '123'
    v93 <- CreateArray [v91, v92]
    v94 <- CallMethod v93, 'sort', []
    Reassign v5, v94
    v95 <- LoadInteger '123'
    v96 <- LoadInteger '1230'
    v97 <- CreateArray [v95, v96]
    v98 <- LoadInteger '1231'
    v99 <- LoadInteger '123'
    v100 <- CreateArray [v98, v99]
    v101 <- CallMethod v100, 'sort', []
    Reassign v5, v101
    v102 <- LoadInteger '123'
    v103 <- LoadInteger '1231'
    v104 <- CreateArray [v102, v103]
    v105 <- LoadInteger '1000000000'
    v106 <- LoadInteger '10000000000'
    v107 <- LoadInteger '1000000001'
    v108 <- LoadInteger '1000000000'
    v109 <- UnaryOperation '-', v108
    v110 <- LoadInteger '10000000000'
    v111 <- UnaryOperation '-', v110
    v112 <- LoadInteger '1000000001'
    v113 <- UnaryOperation '-', v112
    v114 <- CreateArray [v105, v106, v107, v109, v111, v113]
    Reassign v5, v114
    v115 <- CallMethod v5, 'sort', []
    v116 <- LoadInteger '1000000000'
    v117 <- UnaryOperation '-', v116
    v118 <- LoadInteger '10000000000'
    v119 <- UnaryOperation '-', v118
    v120 <- LoadInteger '1000000001'
    v121 <- UnaryOperation '-', v120
    v122 <- LoadInteger '1000000000'
    v123 <- LoadInteger '10000000000'
    v124 <- LoadInteger '1000000001'
    v125 <- CreateArray [v117, v119, v121, v122, v123, v124]
EndPlainFunction
v126 <- CallFunction v0, []
v127 <- BeginPlainFunction -> 
    v128 <- LoadString 'cc'
    v129 <- LoadString 'c'
    v130 <- LoadString 'aa'
    v131 <- LoadString 'a'
    v132 <- LoadString 'bb'
    v133 <- LoadString 'b'
    v134 <- LoadString 'ab'
    v135 <- LoadString 'ac'
    v136 <- CreateArray [v128, v129, v130, v131, v132, v133, v134, v135]
    v137 <- CreateNamedVariable 'a', 'var', v136
    v138 <- CallMethod v137, 'sort', []
    v139 <- LoadString 'a'
    v140 <- LoadString 'aa'
    v141 <- LoadString 'ab'
    v142 <- LoadString 'ac'
    v143 <- LoadString 'b'
    v144 <- LoadString 'bb'
    v145 <- LoadString 'c'
    v146 <- LoadString 'cc'
    v147 <- CreateArray [v139, v140, v141, v142, v143, v144, v145, v146]
EndPlainFunction
v148 <- CallFunction v127, []
v149 <- BeginPlainFunction -> 
    v150 <- BeginPlainFunction -> 
        v151 <- LoadString 'a'
        Return v151
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `toString`, v150
    v152 <- EndObjectLiteral
    v153 <- CreateNamedVariable 'obj0', 'var', v152
    v154 <- BeginPlainFunction -> 
        v155 <- LoadString 'b'
        Return v155
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `toString`, v154
    v156 <- EndObjectLiteral
    v157 <- CreateNamedVariable 'obj1', 'var', v156
    v158 <- BeginPlainFunction -> 
        v159 <- LoadString 'c'
        Return v159
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `toString`, v158
    v160 <- EndObjectLiteral
    v161 <- CreateNamedVariable 'obj2', 'var', v160
    v162 <- CreateArray [v161, v153, v157]
    v163 <- CreateNamedVariable 'a', 'var', v162
    v164 <- CallMethod v163, 'sort', []
    v165 <- CreateArray [v153, v157, v161]
EndPlainFunction
v166 <- CallFunction v149, []
v167 <- BeginPlainFunction -> 
    v168 <- CreateArray []
    v169 <- CreateNamedVariable 'a', 'var', v168
    v170 <- LoadString '18'
    SetElement v169, '4', v170
    v171 <- LoadString '12'
    SetElement v169, '10', v171
    v172 <- CallMethod v169, 'sort', []
    v173 <- LoadInteger '11'
    v174 <- GetProperty v169, 'length'
    v175 <- LoadString '12'
    v176 <- GetElement v169, '0'
    v177 <- LoadString '18'
    v178 <- GetElement v169, '1'
EndPlainFunction
v179 <- CallFunction v167, []
v180 <- BeginPlainFunction -> 
    v181 <- LoadInteger '3'
    v182 <- LoadInteger '0'
    v183 <- Void_ v182
    v184 <- LoadInteger '2'
    v185 <- CreateArray [v181, v183, v184]
    v186 <- CreateNamedVariable 'a', 'var', v185
    v187 <- CallMethod v186, 'sort', []
    v188 <- LoadInteger '2'
    v189 <- LoadInteger '3'
    v190 <- LoadInteger '0'
    v191 <- Void_ v190
    v192 <- CreateArray [v188, v189, v191]
EndPlainFunction
v193 <- CallFunction v180, []
v194 <- BeginPlainFunction -> 
    v195 <- LoadInteger '3'
    v196 <- LoadInteger '0'
    v197 <- Void_ v196
    v198 <- LoadInteger '2'
    v199 <- CreateArray [v195, v197, v198]
    v200 <- CreateNamedVariable 'a', 'var', v199
    v201 <- BeginPlainFunction -> v202, v203
        v204 <- LoadInteger '1'
        Return v204
    EndPlainFunction
    v205 <- CallMethod v200, 'sort', [v201]
    v206 <- CallMethod v200, 'sort', []
    v207 <- LoadInteger '2'
    v208 <- LoadInteger '3'
    v209 <- LoadInteger '0'
    v210 <- Void_ v209
    v211 <- CreateArray [v207, v208, v210]
EndPlainFunction
v212 <- CallFunction v194, []
v213 <- BeginPlainFunction -> v214
    v215 <- LoadInteger '101'
    v216 <- Compare v214, '>', v215
    BeginObjectLiteral
        ObjectLiteralAddProperty `length`, v214
    v217 <- EndObjectLiteral
    v218 <- CreateNamedVariable 'obj', 'var', v217
    v219 <- LoadInteger '42'
    SetElement v218, '0', v219
    v220 <- LoadInteger '37'
    SetElement v218, '10', v220
    v221 <- LoadUndefined
    SetElement v218, '100', v221
    v222 <- LoadNull
    v223 <- LoadInteger '1'
    v224 <- BinaryOperation v214, '-', v223
    SetComputedProperty v218, v224, v222
    v225 <- CreateNamedVariable 'Array', 'none'
    v226 <- GetProperty v225, 'prototype'
    v227 <- GetProperty v226, 'sort'
    v228 <- CallMethod v227, 'call', [v218]
    v229 <- GetProperty v218, 'length'
    v230 <- LoadString 'objsort length unaffected'
    v231 <- LoadInteger '37'
    v232 <- GetElement v218, '0'
    v233 <- LoadString 'objsort smallest number'
    v234 <- LoadInteger '42'
    v235 <- GetElement v218, '1'
    v236 <- LoadString 'objsort largest number'
    v237 <- LoadNull
    v238 <- GetElement v218, '2'
    v239 <- LoadString 'objsort null'
    v240 <- LoadUndefined
    v241 <- GetElement v218, '3'
    v242 <- LoadString 'objsort undefined'
    v243 <- LoadInteger '3'
    v244 <- TestIn v243, v218
    v245 <- LoadString 'objsort undefined retained'
    v246 <- LoadInteger '4'
    v247 <- TestIn v246, v218
    v248 <- LoadString 'objsort non-existing retained'
EndPlainFunction
v249 <- LoadInteger '5000'
v250 <- CallFunction v213, [v249]
v251 <- LoadInteger '500000'
v252 <- CallFunction v213, [v251]
v253 <- LoadInteger '2'
v254 <- LoadInteger '31'
v255 <- CreateNamedVariable 'Math', 'none'
v256 <- CallMethod v255, 'pow', [v253, v254]
v257 <- LoadInteger '1'
v258 <- BinaryOperation v256, '+', v257
v259 <- CallFunction v213, [v258]
v260 <- BeginPlainFunction -> v261
    v262 <- CreateNamedVariable 'Array', 'none'
    v263 <- LoadInteger '4'
    v264 <- Construct v262, [v263]
    v265 <- CreateNamedVariable 'x', 'var', v264
    v266 <- LoadInteger '42'
    SetElement v265, '0', v266
    v267 <- LoadInteger '37'
    SetElement v265, '2', v267
    SetProperty v265, 'length', v261
    v268 <- GetProperty v262, 'prototype'
    v269 <- GetProperty v268, 'sort'
    v270 <- CallMethod v269, 'call', [v265]
    v271 <- GetProperty v265, 'length'
    v272 <- LoadString 'longlength length'
    v273 <- LoadInteger '37'
    v274 <- GetElement v265, '0'
    v275 <- LoadString 'longlength first'
    v276 <- LoadInteger '42'
    v277 <- GetElement v265, '1'
    v278 <- LoadString 'longlength second'
    v279 <- LoadInteger '2'
    v280 <- TestIn v279, v265
    v281 <- LoadString 'longlength third'
EndPlainFunction
v282 <- LoadInteger '4'
v283 <- CallFunction v260, [v282]
v284 <- LoadInteger '10'
v285 <- CallFunction v260, [v284]
v286 <- LoadInteger '1000'
v287 <- CallFunction v260, [v286]
v288 <- LoadInteger '500000'
v289 <- CallFunction v260, [v288]
v290 <- LoadInteger '2'
v291 <- LoadInteger '32'
v292 <- CallMethod v255, 'pow', [v290, v291]
v293 <- LoadInteger '1'
v294 <- BinaryOperation v292, '-', v293
v295 <- CallFunction v260, [v294]
v296 <- BeginPlainFunction -> v297
    BeginObjectLiteral
    v298 <- EndObjectLiteral
    v299 <- CreateNamedVariable 'x', 'var', v298
    v300 <- LoadInteger '42'
    SetElement v299, '0', v300
    v301 <- LoadInteger '37'
    SetElement v299, '2', v301
    SetProperty v299, 'length', v297
    v302 <- CreateNamedVariable 'Array', 'none'
    v303 <- GetProperty v302, 'prototype'
    v304 <- GetProperty v303, 'sort'
    v305 <- CallMethod v304, 'call', [v299]
    v306 <- GetProperty v299, 'length'
    v307 <- LoadString 'longlength length'
    v308 <- LoadInteger '37'
    v309 <- GetElement v299, '0'
    v310 <- LoadString 'longlength first'
    v311 <- LoadInteger '42'
    v312 <- GetElement v299, '1'
    v313 <- LoadString 'longlength second'
    v314 <- LoadInteger '2'
    v315 <- TestIn v314, v299
    v316 <- LoadString 'longlength third'
EndPlainFunction
v317 <- LoadInteger '4'
v318 <- CallFunction v296, [v317]
v319 <- LoadInteger '10'
v320 <- CallFunction v296, [v319]
v321 <- LoadInteger '1000'
v322 <- CallFunction v296, [v321]
v323 <- LoadInteger '500000'
v324 <- CallFunction v296, [v323]
v325 <- LoadInteger '2'
v326 <- LoadInteger '32'
v327 <- CallMethod v255, 'pow', [v325, v326]
v328 <- LoadInteger '1'
v329 <- BinaryOperation v327, '-', v328
v330 <- CallFunction v296, [v329]
v331 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v332 <- EndObjectLiteral
    v333 <- CreateNamedVariable 'x', 'var', v332
    v334 <- LoadInteger '42'
    SetElement v333, '0', v334
    v335 <- LoadString '1'
    v336 <- BeginPlainFunction -> 
        v337 <- LoadThis
        v338 <- GetProperty v337, 'foo'
        Return v338
    EndPlainFunction
    v339 <- CallMethod v333, '__defineGetter__', [v335, v336]
    v340 <- LoadString '1'
    v341 <- BeginPlainFunction -> v342
        v343 <- LoadThis
        SetProperty v343, 'foo', v342
    EndPlainFunction
    v344 <- CallMethod v333, '__defineSetter__', [v340, v341]
    v345 <- LoadInteger '49'
    SetElement v333, '1', v345
    v346 <- LoadInteger '37'
    SetElement v333, '3', v346
    v347 <- LoadInteger '4'
    SetProperty v333, 'length', v347
    v348 <- CreateNamedVariable 'Array', 'none'
    v349 <- GetProperty v348, 'prototype'
    v350 <- GetProperty v349, 'sort'
    v351 <- CallMethod v350, 'call', [v333]
    v352 <- LoadInteger '4'
    v353 <- GetProperty v333, 'length'
    v354 <- LoadString 'sortaccessors length'
    v355 <- LoadInteger '37'
    v356 <- GetElement v333, '0'
    v357 <- LoadString 'sortaccessors first'
    v358 <- LoadInteger '42'
    v359 <- GetElement v333, '1'
    v360 <- LoadString 'sortaccessors second'
    v361 <- LoadInteger '49'
    v362 <- GetElement v333, '2'
    v363 <- LoadString 'sortaccessors third'
    v364 <- LoadInteger '3'
    v365 <- TestIn v364, v333
    v366 <- LoadString 'sortaccessors fourth'
EndPlainFunction
v367 <- CallFunction v331, []
v368 <- BeginPlainFunction -> v369
    v370 <- LoadInteger '2'
    v371 <- BinaryOperation v369, '*', v370
    v372 <- LoadInteger '3'
    v373 <- BinaryOperation v371, '+', v372
    v374 <- CreateNamedVariable 'length', 'var', v373
    BeginObjectLiteral
        ObjectLiteralAddProperty `length`, v374
    v375 <- EndObjectLiteral
    v376 <- CreateNamedVariable 'obj', 'var', v375
    v377 <- LoadInteger '0'
    v378 <- LoadInteger '2'
    v379 <- BinaryOperation v369, '*', v378
    v380 <- LoadInteger '1'
    v381 <- BinaryOperation v379, '+', v380
    SetComputedProperty v376, v381, v377
    BeginForLoopInitializer
        v382 <- LoadInteger '0'
    BeginForLoopCondition -> v383
        v384 <- Compare v383, '<', v369
    BeginForLoopAfterthought v384 -> v385
        v386 <- UnaryOperation v385, '++'
    BeginForLoopBody -> v387
        BeginObjectLiteral
        v388 <- EndObjectLiteral
        v389 <- CreateNamedVariable 'newObj', 'var', v388
        SetProperty v389, '__proto__', v376
        v390 <- LoadUndefined
        SetComputedProperty v376, v387, v390
        v391 <- BinaryOperation v369, '-', v387
        v392 <- BinaryOperation v387, '+', v369
        v393 <- LoadInteger '1'
        v394 <- BinaryOperation v392, '+', v393
        SetComputedProperty v376, v394, v391
        Reassign v376, v389
    EndForLoop
    v395 <- BeginPlainFunction -> v396, v397
        v398 <- Compare v397, '<', v396
        v399 <- Compare v396, '<', v397
        v400 <- BinaryOperation v398, '-', v399
        Return v400
    EndPlainFunction
    v401 <- CreateNamedVariable 'Array', 'none'
    v402 <- GetProperty v401, 'prototype'
    v403 <- GetProperty v402, 'sort'
    v404 <- CallMethod v403, 'call', [v376, v395]
    v405 <- LoadString 'SortInherit('
    v406 <- BinaryOperation v405, '+', v369
    v407 <- LoadString ')-'
    v408 <- BinaryOperation v406, '+', v407
    v409 <- CreateNamedVariable 'name', 'var', v408
    v410 <- GetProperty v376, 'length'
    v411 <- LoadString 'length'
    v412 <- BinaryOperation v409, '+', v411
    BeginForLoopInitializer
        v413 <- LoadInteger '0'
    BeginForLoopCondition -> v414
        v415 <- Compare v414, '<=', v369
    BeginForLoopAfterthought v415 -> v416
        v417 <- UnaryOperation v416, '++'
    BeginForLoopBody -> v418
        v419 <- CallMethod v376, 'hasOwnProperty', [v418]
        v420 <- LoadString 'hasvalue'
        v421 <- BinaryOperation v409, '+', v420
        v422 <- BinaryOperation v421, '+', v418
        v423 <- GetComputedProperty v376, v418
        v424 <- LoadString 'value'
        v425 <- BinaryOperation v409, '+', v424
        v426 <- BinaryOperation v425, '+', v418
    EndForLoop
    BeginForLoopInitializer
        v427 <- LoadInteger '1'
        v428 <- BinaryOperation v369, '+', v427
    BeginForLoopCondition -> v429
        v430 <- LoadInteger '2'
        v431 <- BinaryOperation v369, '*', v430
        v432 <- LoadInteger '1'
        v433 <- BinaryOperation v431, '+', v432
        v434 <- Compare v429, '<', v433
    BeginForLoopAfterthought v434 -> v435
        v436 <- UnaryOperation v435, '++'
    BeginForLoopBody -> v437
        v438 <- LoadUndefined
        v439 <- GetComputedProperty v376, v437
        v440 <- LoadString 'undefined'
        v441 <- BinaryOperation v409, '+', v440
        v442 <- BinaryOperation v441, '+', v437
        v443 <- CallMethod v376, 'hasOwnProperty', [v437]
        v444 <- LoadString 'hasundefined'
        v445 <- BinaryOperation v409, '+', v444
        v446 <- BinaryOperation v445, '+', v437
    EndForLoop
    v447 <- LoadInteger '2'
    v448 <- BinaryOperation v369, '*', v447
    v449 <- LoadInteger '1'
    v450 <- BinaryOperation v448, '+', v449
    v451 <- CallMethod v376, 'hasOwnProperty', [v450]
    v452 <- LoadString 'hashole'
    v453 <- BinaryOperation v409, '+', v452
    v454 <- LoadInteger '2'
    v455 <- BinaryOperation v369, '*', v454
    v456 <- LoadInteger '2'
    v457 <- BinaryOperation v455, '+', v456
    v458 <- CallMethod v376, 'hasOwnProperty', [v457]
    v459 <- LoadString 'hashole'
    v460 <- BinaryOperation v409, '+', v459
EndPlainFunction
v461 <- LoadInteger '5'
v462 <- CallFunction v368, [v461]
v463 <- LoadInteger '15'
v464 <- CallFunction v368, [v463]
v465 <- BeginPlainFunction -> v466
    v467 <- LoadInteger '10'
    v468 <- BinaryOperation v466, '*', v467
    v469 <- CreateNamedVariable 'length', 'var', v468
    BeginObjectLiteral
        ObjectLiteralAddProperty `length`, v469
    v470 <- EndObjectLiteral
    v471 <- CreateNamedVariable 'x', 'var', v470
    BeginObjectLiteral
    v472 <- EndObjectLiteral
    v473 <- CreateNamedVariable 'y', 'var', v472
    SetProperty v473, '__proto__', v471
    BeginForLoopInitializer
        v474 <- LoadInteger '0'
    BeginForLoopCondition -> v475
        v476 <- LoadInteger '5'
        v477 <- Compare v475, '<', v476
    BeginForLoopAfterthought v477 -> v478
        v479 <- UnaryOperation v478, '++'
    BeginForLoopBody -> v480
        v481 <- LoadInteger '2'
        v482 <- LoadInteger '4'
        v483 <- BinaryOperation v482, '-', v480
        v484 <- BinaryOperation v481, '*', v483
        v485 <- LoadInteger '2'
        v486 <- BinaryOperation v480, '*', v485
        v487 <- BinaryOperation v486, '*', v466
        SetComputedProperty v471, v487, v484
        v488 <- LoadInteger '2'
        v489 <- LoadInteger '4'
        v490 <- BinaryOperation v489, '-', v480
        v491 <- BinaryOperation v488, '*', v490
        v492 <- LoadInteger '1'
        v493 <- BinaryOperation v491, '+', v492
        v494 <- LoadInteger '2'
        v495 <- BinaryOperation v480, '*', v494
        v496 <- LoadInteger '1'
        v497 <- BinaryOperation v495, '+', v496
        v498 <- BinaryOperation v497, '*', v466
        SetComputedProperty v473, v498, v493
    EndForLoop
    v499 <- LoadString 'SparseSortInherit('
    v500 <- BinaryOperation v499, '+', v466
    v501 <- LoadString ')-'
    v502 <- BinaryOperation v500, '+', v501
    v503 <- CreateNamedVariable 'name', 'var', v502
    v504 <- CreateNamedVariable 'Array', 'none'
    v505 <- GetProperty v504, 'prototype'
    v506 <- GetProperty v505, 'sort'
    v507 <- CallMethod v506, 'call', [v473]
    v508 <- GetProperty v473, 'length'
    v509 <- LoadString 'length'
    v510 <- BinaryOperation v503, '+', v509
    BeginForLoopInitializer
        v511 <- LoadInteger '0'
    BeginForLoopCondition -> v512
        v513 <- LoadInteger '10'
        v514 <- Compare v512, '<', v513
    BeginForLoopAfterthought v514 -> v515
        v516 <- UnaryOperation v515, '++'
    BeginForLoopBody -> v517
        v518 <- CallMethod v473, 'hasOwnProperty', [v517]
        v519 <- LoadString 'hasvalue'
        v520 <- BinaryOperation v503, '+', v519
        v521 <- BinaryOperation v520, '+', v517
        v522 <- GetComputedProperty v473, v517
        v523 <- LoadString 'value'
        v524 <- BinaryOperation v503, '+', v523
        v525 <- BinaryOperation v524, '+', v517
    EndForLoop
    BeginForLoopInitializer
        v526 <- LoadInteger '10'
    BeginForLoopCondition -> v527
        v528 <- Compare v527, '<', v469
    BeginForLoopAfterthought v528 -> v529
        v530 <- UnaryOperation v529, '++'
    BeginForLoopBody -> v531
        v532 <- CallMethod v473, 'hasOwnProperty', [v531]
        v533 <- LoadString 'noundef'
        v534 <- BinaryOperation v503, '+', v533
        v535 <- BinaryOperation v534, '+', v531
        v536 <- CallMethod v471, 'hasOwnProperty', [v531]
        BeginIf v536
            v537 <- LoadInteger '0'
            v538 <- LoadInteger '2'
            v539 <- BinaryOperation v538, '*', v466
            v540 <- BinaryOperation v531, '%', v539
            v541 <- Compare v537, '==', v540
            v542 <- LoadString 'new_x'
            v543 <- BinaryOperation v503, '+', v542
            v544 <- BinaryOperation v543, '+', v531
        EndIf
    EndForLoop
EndPlainFunction
v545 <- LoadInteger '10'
v546 <- CallFunction v465, [v545]
v547 <- LoadInteger '100'
v548 <- CallFunction v465, [v547]
v549 <- LoadInteger '1000'
v550 <- CallFunction v465, [v549]
v551 <- BeginPlainFunction -> 
    v552 <- LoadString 'd1'
    v553 <- LoadString 'c1'
    v554 <- LoadString 'b1'
    v555 <- LoadUndefined
    v556 <- LoadInteger '10000'
    v557 <- LoadString 'e2'
    v558 <- LoadString 'a2'
    v559 <- LoadString 'b2'
    v560 <- LoadString 'c2'
    v561 <- LoadUndefined
    v562 <- LoadString 'd2'
    v563 <- LoadString 'XX'
    v564 <- LoadString 'e3'
    v565 <- LoadString 'd3'
    v566 <- LoadString 'c3'
    v567 <- LoadString 'b3'
    v568 <- LoadString 'f3'
    v569 <- LoadString 'a3'
    v570 <- LoadUndefined
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v564
        ObjectLiteralAddElement `1`, v565
        ObjectLiteralAddElement `2`, v566
        ObjectLiteralAddElement `3`, v567
        ObjectLiteralAddElement `4`, v568
        ObjectLiteralAddElement `5`, v569
        ObjectLiteralAddElement `6`, v570
    v571 <- EndObjectLiteral
    BeginObjectLiteral
        ObjectLiteralAddProperty `length`, v556
        ObjectLiteralAddElement `1`, v557
        ObjectLiteralAddElement `10`, v558
        ObjectLiteralAddElement `100`, v559
        ObjectLiteralAddElement `1000`, v560
        ObjectLiteralAddElement `2000`, v561
        ObjectLiteralAddElement `8000`, v562
        ObjectLiteralAddElement `12000`, v563
        ObjectLiteralAddProperty `__proto__`, v571
    v572 <- EndObjectLiteral
    BeginObjectLiteral
        ObjectLiteralAddElement `1`, v552
        ObjectLiteralAddElement `2`, v553
        ObjectLiteralAddElement `3`, v554
        ObjectLiteralAddElement `4`, v555
        ObjectLiteralAddProperty `__proto__`, v572
    v573 <- EndObjectLiteral
    v574 <- CreateNamedVariable 'x', 'var', v573
    v575 <- CreateNamedVariable 'Array', 'none'
    v576 <- GetProperty v575, 'prototype'
    v577 <- GetProperty v576, 'sort'
    v578 <- CallMethod v577, 'call', [v574]
    v579 <- LoadString 'SpecialInherit-'
    v580 <- CreateNamedVariable 'name', 'var', v579
    v581 <- LoadInteger '10000'
    v582 <- GetProperty v574, 'length'
    v583 <- LoadString 'length'
    v584 <- BinaryOperation v580, '+', v583
    v585 <- LoadString 'a2'
    v586 <- LoadString 'a3'
    v587 <- LoadString 'b1'
    v588 <- LoadString 'b2'
    v589 <- LoadString 'c1'
    v590 <- LoadString 'c2'
    v591 <- LoadString 'd1'
    v592 <- LoadString 'd2'
    v593 <- LoadString 'e3'
    v594 <- LoadUndefined
    v595 <- LoadUndefined
    v596 <- LoadUndefined
    v597 <- CreateArray [v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596]
    v598 <- CreateNamedVariable 'sorted', 'var', v597
    BeginForLoopInitializer
        v599 <- LoadInteger '0'
    BeginForLoopCondition -> v600
        v601 <- GetProperty v598, 'length'
        v602 <- Compare v600, '<', v601
    BeginForLoopAfterthought v602 -> v603
        v604 <- UnaryOperation v603, '++'
    BeginForLoopBody -> v605
        v606 <- CallMethod v574, 'hasOwnProperty', [v605]
        v607 <- LoadString 'has'
        v608 <- BinaryOperation v580, '+', v607
        v609 <- BinaryOperation v608, '+', v605
        v610 <- GetComputedProperty v598, v605
        v611 <- GetComputedProperty v574, v605
        v612 <- BinaryOperation v580, '+', v605
    EndForLoop
    v613 <- GetProperty v598, 'length'
    v614 <- CallMethod v574, 'hasOwnProperty', [v613]
    v615 <- LoadString 'haspost'
    v616 <- BinaryOperation v580, '+', v615
    v617 <- GetProperty v598, 'length'
    v618 <- TestIn v617, v574
    v619 <- LoadString 'haspost2'
    v620 <- BinaryOperation v580, '+', v619
    v621 <- LoadInteger '10'
    v622 <- CallMethod v574, 'hasOwnProperty', [v621]
    v623 <- LoadString 'hasundefined10'
    v624 <- BinaryOperation v580, '+', v623
    v625 <- LoadUndefined
    v626 <- GetElement v574, '10'
    v627 <- LoadString 'undefined10'
    v628 <- BinaryOperation v580, '+', v627
    v629 <- LoadInteger '100'
    v630 <- CallMethod v574, 'hasOwnProperty', [v629]
    v631 <- LoadString 'hasno100'
    v632 <- BinaryOperation v580, '+', v631
    v633 <- LoadString 'b2'
    v634 <- GetElement v574, '100'
    v635 <- LoadString 'inherits100'
    v636 <- LoadInteger '1000'
    v637 <- CallMethod v574, 'hasOwnProperty', [v636]
    v638 <- LoadString 'hasno1000'
    v639 <- BinaryOperation v580, '+', v638
    v640 <- LoadString 'c2'
    v641 <- GetElement v574, '1000'
    v642 <- LoadString 'inherits1000'
    v643 <- LoadInteger '2000'
    v644 <- CallMethod v574, 'hasOwnProperty', [v643]
    v645 <- LoadString 'hasno2000'
    v646 <- BinaryOperation v580, '+', v645
    v647 <- LoadUndefined
    v648 <- GetElement v574, '2000'
    v649 <- LoadString 'inherits2000'
    v650 <- LoadInteger '8000'
    v651 <- CallMethod v574, 'hasOwnProperty', [v650]
    v652 <- LoadString 'hasno8000'
    v653 <- BinaryOperation v580, '+', v652
    v654 <- LoadString 'd2'
    v655 <- GetElement v574, '8000'
    v656 <- LoadString 'inherits8000'
    v657 <- LoadInteger '12000'
    v658 <- CallMethod v574, 'hasOwnProperty', [v657]
    v659 <- LoadString 'has12000'
    v660 <- BinaryOperation v580, '+', v659
    v661 <- LoadString 'XX'
    v662 <- GetElement v574, '12000'
    v663 <- LoadString 'XX12000'
    v664 <- BinaryOperation v580, '+', v663
EndPlainFunction
v665 <- CallFunction v551, []
v666 <- BeginPlainFunction -> v667
    v668 <- GetProperty v666, 'prototype'
    BeginObjectLiteral
        ObjectLiteralAddProperty `__proto__`, v668
        ObjectLiteralAddProperty `val`, v667
    v669 <- EndObjectLiteral
    Return v669
EndPlainFunction
v670 <- LoadInteger '1'
v671 <- CallFunction v666, [v670]
v672 <- LoadInteger '2'
v673 <- CallFunction v666, [v672]
v674 <- LoadInteger '4'
v675 <- CallFunction v666, [v674]
v676 <- LoadInteger '8'
v677 <- CallFunction v666, [v676]
v678 <- LoadInteger '16'
v679 <- CallFunction v666, [v678]
v680 <- LoadInteger '32'
v681 <- CallFunction v666, [v680]
v682 <- LoadInteger '64'
v683 <- CallFunction v666, [v682]
v684 <- LoadInteger '128'
v685 <- CallFunction v666, [v684]
v686 <- LoadInteger '256'
v687 <- CallFunction v666, [v686]
v688 <- LoadInteger '0'
v689 <- UnaryOperation '-', v688
v690 <- CallFunction v666, [v689]
v691 <- CreateArray [v671, v673, v675, v677, v679, v681, v683, v685, v687, v690]
v692 <- CreateNamedVariable 'arr', 'var', v691
v693 <- LoadThis
v694 <- CreateNamedVariable 'global', 'var', v693
v695 <- BeginPlainFunction -> v696, v697
    v698 <- LoadThis
    v699 <- TestInstanceOf v696, v666
    v700 <- TestInstanceOf v697, v666
    v701 <- GetProperty v696, 'val'
    v702 <- GetProperty v697, 'val'
    v703 <- BinaryOperation v701, '-', v702
    Return v703
EndPlainFunction
v704 <- CallMethod v692, 'sort', [v695]
v705 <- BeginPlainFunction -> 
    v706 <- LoadNull
    v707 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `hasOwnProperty`, v706
        ObjectLiteralAddElement `0`, v707
    v708 <- EndObjectLiteral
    v709 <- LoadInteger '5'
    BeginObjectLiteral
        ObjectLiteralAddProperty `__proto__`, v708
        ObjectLiteralAddProperty `length`, v709
    v710 <- EndObjectLiteral
    v711 <- CreateNamedVariable 'Array', 'none'
    v712 <- GetProperty v711, 'prototype'
    v713 <- GetProperty v712, 'sort'
    v714 <- CallMethod v713, 'call', [v710]
    v715 <- LoadInteger '2'
    v716 <- Construct v711, [v715]
    v717 <- CreateNamedVariable 'arr', 'var', v716
    v718 <- LoadInteger '0'
    v719 <- BeginPlainFunction -> 
    EndPlainFunction
    v720 <- BeginPlainFunction -> 
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v719
        ObjectLiteralAddProperty `set`, v720
    v721 <- EndObjectLiteral
    v722 <- CreateNamedVariable 'Object', 'none'
    v723 <- CallMethod v722, 'defineProperty', [v717, v718, v721]
    v724 <- LoadNull
    SetProperty v717, 'hasOwnProperty', v724
    v725 <- CallMethod v717, 'sort', []
EndPlainFunction
v726 <- CallFunction v705, []
v727 <- BeginPlainFunction -> 
    v728 <- CreateArray []
    v729 <- CreateNamedVariable 'arr', 'var', v728
    BeginForLoopInitializer
        v730 <- LoadInteger '0'
    BeginForLoopCondition -> v731
        v732 <- LoadInteger '22'
        v733 <- Compare v731, '<', v732
    BeginForLoopAfterthought v733 -> v734
        v735 <- UnaryOperation v734, '++'
    BeginForLoopBody -> v736
        BeginObjectLiteral
        v737 <- EndObjectLiteral
        SetComputedProperty v729, v736, v737
    EndForLoop
    v738 <- BeginPlainFunction -> 
        v739 <- LoadString 'Should not call push'
        v740 <- CreateNamedVariable 'fail', 'none'
        v741 <- CallFunction v740, [v739]
    EndPlainFunction
    v742 <- CreateNamedVariable 'Array', 'none'
    v743 <- GetProperty v742, 'prototype'
    SetProperty v743, 'push', v738
    v744 <- CallMethod v729, 'sort', []
    v745 <- CreateArray []
    Reassign v729, v745
    BeginForLoopInitializer
        v746 <- LoadInteger '0'
    BeginForLoopCondition -> v747
        v748 <- LoadInteger '2000'
        v749 <- Compare v747, '<', v748
    BeginForLoopAfterthought v749 -> v750
        v751 <- UnaryOperation '++', v750
    BeginForLoopBody -> v752
        BeginObjectLiteral
        v753 <- EndObjectLiteral
        SetComputedProperty v729, v752, v753
    EndForLoop
    v754 <- CallMethod v729, 'sort', []
EndPlainFunction
v755 <- CallFunction v727, []
v756 <- BeginPlainFunction -> 
    v757 <- CreateArray []
    v758 <- CreateNamedVariable 'arr', 'var', v757
    BeginForLoopInitializer
        v759 <- LoadInteger '0'
    BeginForLoopCondition -> v760
        v761 <- LoadInteger '2000'
        v762 <- Compare v760, '<', v761
    BeginForLoopAfterthought v762 -> v763
        v764 <- UnaryOperation v763, '++'
    BeginForLoopBody -> v765
        BeginObjectLiteral
        v766 <- EndObjectLiteral
        SetComputedProperty v758, v765, v766
    EndForLoop
    v767 <- CreateNamedVariable 'Array', 'none'
    v768 <- GetProperty v767, 'prototype'
    v769 <- GetProperty v768, 'sort'
    v770 <- CreateNamedVariable 'sortfn', 'var', v769
    v771 <- BeginPlainFunction -> 
        v772 <- LoadString 'Should not call sort'
        v773 <- CreateNamedVariable 'fail', 'none'
        v774 <- CallFunction v773, [v772]
    EndPlainFunction
    v775 <- GetProperty v767, 'prototype'
    SetProperty v775, 'sort', v771
    v776 <- CallMethod v770, 'call', [v758]
    v777 <- GetProperty v767, 'prototype'
    SetProperty v777, 'sort', v770
EndPlainFunction
v778 <- CallFunction v756, []
v779 <- BeginPlainFunction -> 
    v780 <- LoadInteger '5'
    v781 <- CreateNamedVariable 'Number', 'none'
    v782 <- GetProperty v781, 'prototype'
    SetElement v782, '0', v780
    v783 <- LoadInteger '4'
    v784 <- GetProperty v781, 'prototype'
    SetElement v784, '1', v783
    v785 <- LoadInteger '2'
    v786 <- GetProperty v781, 'prototype'
    SetProperty v786, 'length', v785
    v787 <- LoadInteger '0'
    v788 <- Construct v781, [v787]
    v789 <- CreateNamedVariable 'x', 'none'
    Reassign v789, v788
    v790 <- LoadInteger '0'
    v791 <- CreateNamedVariable 'x', 'none'
    v792 <- CreateNamedVariable 'Array', 'none'
    v793 <- GetProperty v792, 'prototype'
    v794 <- GetProperty v793, 'sort'
    v795 <- CallMethod v794, 'call', [v791]
    v796 <- CallFunction v781, [v795]
    v797 <- LoadInteger '4'
    v798 <- GetElement v791, '0'
    v799 <- LoadInteger '5'
    v800 <- GetElement v791, '1'
    v801 <- LoadString '0'
    v802 <- LoadString '1'
    v803 <- CreateArray [v801, v802]
    v804 <- CreateNamedVariable 'Object', 'none'
    v805 <- CallMethod v804, 'getOwnPropertyNames', [v791]
    v806 <- LoadInteger '0'
    v807 <- LoadInteger '0'
    v808 <- GetProperty v792, 'prototype'
    v809 <- GetProperty v808, 'sort'
    v810 <- CallMethod v809, 'call', [v807]
    v811 <- CallFunction v781, [v810]
EndPlainFunction
v812 <- CallFunction v779, []
v813 <- BeginPlainFunction -> 
    BeginBlockStatement
        v814 <- CreateNamedVariable 'Proxy', 'none'
        v815 <- LoadInteger '2'
        v816 <- LoadInteger '1'
        v817 <- LoadInteger '3'
        v818 <- CreateArray [v815, v816, v817]
        BeginObjectLiteral
        v819 <- EndObjectLiteral
        v820 <- Construct v814, [v818, v819]
        v821 <- CreateNamedVariable 'p', 'var', v820
        v822 <- LoadInteger '1'
        v823 <- LoadInteger '2'
        v824 <- LoadInteger '3'
        v825 <- CreateArray [v822, v823, v824]
        v826 <- CallMethod v821, 'sort', []
    EndBlockStatement
    BeginBlockStatement
        v827 <- BeginPlainFunction -> 
            v828 <- LoadArguments
            Return v828
        EndPlainFunction
        v829 <- LoadInteger '2'
        v830 <- LoadInteger '1'
        v831 <- LoadInteger '3'
        v832 <- CallFunction v827, [v829, v830, v831]
        v833 <- CreateNamedVariable 'a', 'var', v832
        v834 <- CreateNamedVariable 'Proxy', 'none'
        BeginObjectLiteral
        v835 <- EndObjectLiteral
        BeginObjectLiteral
        v836 <- EndObjectLiteral
        v837 <- Construct v834, [v835, v836]
        SetProperty v833, '__proto__', v837
        v838 <- LoadInteger '1'
        v839 <- LoadInteger '2'
        v840 <- LoadInteger '3'
        v841 <- CreateArray [v838, v839, v840]
        v842 <- CreateNamedVariable 'Array', 'none'
        v843 <- GetProperty v842, 'prototype'
        v844 <- GetProperty v843, 'sort'
        v845 <- CallMethod v844, 'apply', [v833]
        v846 <- CreateArrayWithSpread [...v845]
    EndBlockStatement
EndPlainFunction
v847 <- CallFunction v813, []
v848 <- BeginPlainFunction -> 
    BeginBlockStatement
        v849 <- LoadInteger '1'
        v850 <- LoadUndefined
        v851 <- LoadInteger '2'
        v852 <- CreateArray [v849, v850, v851]
        v853 <- CreateNamedVariable 'arr', 'var', v852
        v854 <- CreateNamedVariable 'Object', 'none'
        v855 <- CallMethod v854, 'preventExtensions', [v853]
        v856 <- BeginArrowFunction -> 
            v857 <- CallMethod v853, 'sort', []
            Return v857
        EndArrowFunction
        v858 <- CallFunction v856, []
        v859 <- CreateNamedVariable 'TypeError', 'none'
        v860 <- LoadInteger '1'
        v861 <- LoadUndefined
        v862 <- LoadInteger '2'
        v863 <- CreateArray [v860, v861, v862]
    EndBlockStatement
    BeginBlockStatement
        v864 <- LoadInteger '1'
        v865 <- LoadUndefined
        v866 <- LoadUndefined
        v867 <- CreateArray [v864, v865, v866]
        v868 <- CreateNamedVariable 'arr', 'var', v867
        v869 <- CreateNamedVariable 'Object', 'none'
        v870 <- CallMethod v869, 'preventExtensions', [v868]
        v871 <- BeginArrowFunction -> 
            v872 <- CallMethod v868, 'sort', []
            Return v872
        EndArrowFunction
        v873 <- CallFunction v871, []
        v874 <- CreateNamedVariable 'TypeError', 'none'
        v875 <- LoadInteger '1'
        v876 <- CallMethod v868, 'hasOwnProperty', [v875]
        v877 <- LoadInteger '1'
        v878 <- LoadUndefined
        v879 <- LoadUndefined
        v880 <- CreateArray [v877, v878, v879]
    EndBlockStatement
    BeginBlockStatement
        v881 <- LoadInteger '1'
        v882 <- LoadUndefined
        v883 <- LoadInteger '2'
        v884 <- CreateArray [v881, v882, v883]
        v885 <- CreateNamedVariable 'arr', 'var', v884
        v886 <- CreateNamedVariable 'Object', 'none'
        v887 <- CallMethod v886, 'preventExtensions', [v885]
        v888 <- CallMethod v885, 'sort', []
        v889 <- LoadInteger '1'
        v890 <- LoadInteger '2'
        v891 <- LoadUndefined
        v892 <- CreateArray [v889, v890, v891]
    EndBlockStatement
EndPlainFunction
v893 <- CallFunction v848, []
v894 <- BeginPlainFunction -> 
    v895 <- CreateNamedVariable 'Int8Array', 'none'
    v896 <- LoadInteger '10'
    v897 <- LoadInteger '9'
    v898 <- LoadInteger '8'
    v899 <- LoadInteger '7'
    v900 <- LoadInteger '6'
    v901 <- LoadInteger '5'
    v902 <- LoadInteger '4'
    v903 <- LoadInteger '3'
    v904 <- LoadInteger '2'
    v905 <- LoadInteger '1'
    v906 <- CreateArray [v896, v897, v898, v899, v900, v901, v902, v903, v904, v905]
    v907 <- Construct v895, [v906]
    v908 <- CreateNamedVariable 'array', 'var', v907
    v909 <- LoadString 'length'
    v910 <- LoadInteger '5'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v910
    v911 <- EndObjectLiteral
    v912 <- CreateNamedVariable 'Object', 'none'
    v913 <- CallMethod v912, 'defineProperty', [v908, v909, v911]
    v914 <- CreateNamedVariable 'Array', 'none'
    v915 <- GetProperty v914, 'prototype'
    v916 <- GetProperty v915, 'sort'
    v917 <- CallMethod v916, 'call', [v908]
    v918 <- LoadInteger '10'
    v919 <- LoadInteger '6'
    v920 <- LoadInteger '7'
    v921 <- LoadInteger '8'
    v922 <- LoadInteger '9'
    v923 <- LoadInteger '5'
    v924 <- LoadInteger '4'
    v925 <- LoadInteger '3'
    v926 <- LoadInteger '2'
    v927 <- LoadInteger '1'
    v928 <- CreateArray [v918, v919, v920, v921, v922, v923, v924, v925, v926, v927]
    v929 <- Construct v895, [v928]
    v930 <- LoadInteger '10'
    v931 <- LoadInteger '9'
    v932 <- LoadInteger '8'
    v933 <- LoadInteger '7'
    v934 <- LoadInteger '6'
    v935 <- LoadInteger '5'
    v936 <- LoadInteger '4'
    v937 <- LoadInteger '3'
    v938 <- LoadInteger '2'
    v939 <- LoadInteger '1'
    v940 <- CreateArray [v930, v931, v932, v933, v934, v935, v936, v937, v938, v939]
    v941 <- Construct v895, [v940]
    v942 <- CreateNamedVariable 'array', 'var', v941
    v943 <- LoadString 'length'
    v944 <- LoadInteger '15'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v944
    v945 <- EndObjectLiteral
    v946 <- CallMethod v912, 'defineProperty', [v942, v943, v945]
    v947 <- GetProperty v914, 'prototype'
    v948 <- GetProperty v947, 'sort'
    v949 <- CallMethod v948, 'call', [v942]
    v950 <- LoadInteger '1'
    v951 <- LoadInteger '10'
    v952 <- LoadInteger '2'
    v953 <- LoadInteger '3'
    v954 <- LoadInteger '4'
    v955 <- LoadInteger '5'
    v956 <- LoadInteger '6'
    v957 <- LoadInteger '7'
    v958 <- LoadInteger '8'
    v959 <- LoadInteger '9'
    v960 <- CreateArray [v950, v951, v952, v953, v954, v955, v956, v957, v958, v959]
    v961 <- Construct v895, [v960]
EndPlainFunction
v962 <- CallFunction v894, []
v963 <- BeginPlainFunction -> 
    v964 <- BeginPlainFunction -> v965, v966, v967
        BeginObjectLiteral
            ObjectLiteralAddProperty `length`, v966
            ObjectLiteralAddProperty `__proto__`, v965
        v968 <- EndObjectLiteral
        v969 <- CreateNamedVariable 'result', 'var', v968
        v970 <- CreateNamedVariable 'Array', 'none'
        v971 <- GetProperty v970, 'prototype'
        v972 <- GetProperty v971, 'sort'
        v973 <- CallMethod v972, 'call', [v969]
        v974 <- GetProperty v967, 'length'
        v975 <- GetProperty v969, 'length'
        v976 <- LoadString 'result.length'
        BeginForLoopInitializer
            v977 <- LoadInteger '0'
        BeginForLoopCondition -> v978
            v979 <- GetProperty v967, 'length'
            v980 <- Compare v978, '<', v979
        BeginForLoopAfterthought v980 -> v981
            v982 <- UnaryOperation v981, '++'
        BeginForLoopBody -> v983
            v984 <- GetComputedProperty v967, v983
            v985 <- GetComputedProperty v969, v983
            v986 <- LoadString 'result['
            v987 <- BinaryOperation v986, '+', v983
            v988 <- LoadString ']'
            v989 <- BinaryOperation v987, '+', v988
        EndForLoop
    EndPlainFunction
    v990 <- LoadInteger '2'
    v991 <- LoadInteger '1'
    v992 <- LoadInteger '4'
    v993 <- LoadInteger '3'
    v994 <- BeginPlainFunction -> 
        v995 <- LoadArguments
        v996 <- LoadInteger '0'
        v997 <- CreateArray []
        v998 <- CallFunction v964, [v995, v996, v997]
        v999 <- LoadArguments
        v1000 <- LoadInteger '1'
        v1001 <- LoadInteger '2'
        v1002 <- CreateArray [v1001]
        v1003 <- CallFunction v964, [v999, v1000, v1002]
        v1004 <- LoadArguments
        v1005 <- LoadInteger '2'
        v1006 <- LoadInteger '1'
        v1007 <- LoadInteger '2'
        v1008 <- CreateArray [v1006, v1007]
        v1009 <- CallFunction v964, [v1004, v1005, v1008]
        v1010 <- LoadArguments
        v1011 <- LoadInteger '4'
        v1012 <- LoadInteger '1'
        v1013 <- LoadInteger '2'
        v1014 <- LoadInteger '3'
        v1015 <- LoadInteger '4'
        v1016 <- CreateArray [v1012, v1013, v1014, v1015]
        v1017 <- CallFunction v964, [v1010, v1011, v1016]
        v1018 <- LoadArguments
        v1019 <- LoadInteger '0'
        v1020 <- DeleteElement v1018, '0'
        v1021 <- LoadArguments
        v1022 <- LoadInteger '2'
        v1023 <- LoadInteger '1'
        v1024 <- LoadInteger '1'
        v1025 <- CreateArray [v1023, v1024]
        v1026 <- CallFunction v964, [v1021, v1022, v1025]
        v1027 <- LoadUndefined
        v1028 <- LoadArguments
        SetElement v1028, '0', v1027
        v1029 <- LoadArguments
        v1030 <- LoadInteger '2'
        v1031 <- LoadInteger '1'
        v1032 <- LoadUndefined
        v1033 <- CreateArray [v1031, v1032]
        v1034 <- CallFunction v964, [v1029, v1030, v1033]
    EndPlainFunction
    v1035 <- CallFunction v994, [v990, v991, v992, v993]
    v1036 <- LoadInteger '2'
    v1037 <- LoadInteger '1'
    v1038 <- BeginPlainFunction -> v1039
        v1040 <- LoadArguments
        v1041 <- LoadInteger '0'
        v1042 <- CreateArray []
        v1043 <- CallFunction v964, [v1040, v1041, v1042]
        v1044 <- LoadArguments
        v1045 <- LoadInteger '1'
        v1046 <- LoadInteger '2'
        v1047 <- CreateArray [v1046]
        v1048 <- CallFunction v964, [v1044, v1045, v1047]
        v1049 <- LoadArguments
        v1050 <- LoadInteger '2'
        v1051 <- LoadInteger '1'
        v1052 <- LoadInteger '2'
        v1053 <- CreateArray [v1051, v1052]
        v1054 <- CallFunction v964, [v1049, v1050, v1053]
        v1055 <- LoadArguments
        v1056 <- LoadInteger '0'
        v1057 <- DeleteElement v1055, '0'
        v1058 <- LoadArguments
        v1059 <- LoadInteger '2'
        v1060 <- LoadInteger '1'
        v1061 <- LoadInteger '1'
        v1062 <- CreateArray [v1060, v1061]
        v1063 <- CallFunction v964, [v1058, v1059, v1062]
        v1064 <- LoadUndefined
        v1065 <- LoadArguments
        SetElement v1065, '0', v1064
        v1066 <- LoadArguments
        v1067 <- LoadInteger '2'
        v1068 <- LoadInteger '1'
        v1069 <- LoadUndefined
        v1070 <- CreateArray [v1068, v1069]
        v1071 <- CallFunction v964, [v1066, v1067, v1070]
    EndPlainFunction
    v1072 <- CallFunction v1038, [v1036, v1037]
    v1073 <- BeginPlainFunction -> 
        v1074 <- LoadArguments
        v1075 <- LoadInteger '0'
        v1076 <- CreateArray []
        v1077 <- CallFunction v964, [v1074, v1075, v1076]
        v1078 <- LoadArguments
        v1079 <- LoadInteger '1'
        v1080 <- LoadUndefined
        v1081 <- CreateArray [v1080]
        v1082 <- CallFunction v964, [v1078, v1079, v1081]
        v1083 <- LoadArguments
        v1084 <- LoadInteger '2'
        v1085 <- LoadUndefined
        v1086 <- LoadUndefined
        v1087 <- CreateArray [v1085, v1086]
        v1088 <- CallFunction v964, [v1083, v1084, v1087]
    EndPlainFunction
    v1089 <- CallFunction v1073, []
    v1090 <- BeginPlainFunction -> 
        v1091 <- BeginArrowFunction -> 
            v1092 <- CreateNamedVariable 'String', 'none'
            v1093 <- LoadString 'cba'
            v1094 <- Construct v1092, [v1093]
            v1095 <- LoadInteger '3'
            v1096 <- CreateArray []
            v1097 <- CallFunction v964, [v1094, v1095, v1096]
            Return v1097
        EndArrowFunction
        v1098 <- CallFunction v1091, []
        v1099 <- CreateNamedVariable 'TypeError', 'none'
    EndPlainFunction
    v1100 <- CallFunction v1090, []
    v1101 <- BeginPlainFunction -> 
        v1102 <- CreateNamedVariable 'Int32Array', 'none'
        v1103 <- LoadInteger '0'
        v1104 <- Construct v1102, [v1103]
        v1105 <- LoadInteger '0'
        v1106 <- CreateArray []
        v1107 <- CallFunction v964, [v1104, v1105, v1106]
        v1108 <- LoadInteger '1'
        v1109 <- Construct v1102, [v1108]
        v1110 <- LoadInteger '1'
        v1111 <- LoadInteger '0'
        v1112 <- CreateArray [v1111]
        v1113 <- CallFunction v964, [v1109, v1110, v1112]
        v1114 <- LoadInteger '3'
        v1115 <- Construct v1102, [v1114]
        v1116 <- CreateNamedVariable 'array', 'var', v1115
        v1117 <- LoadInteger '2'
        SetElement v1116, '0', v1117
        v1118 <- LoadInteger '1'
        SetElement v1116, '1', v1118
        v1119 <- LoadInteger '3'
        SetElement v1116, '2', v1119
        v1120 <- LoadInteger '1'
        v1121 <- LoadInteger '2'
        v1122 <- CreateArray [v1121]
        v1123 <- CallFunction v964, [v1116, v1120, v1122]
        v1124 <- LoadInteger '2'
        v1125 <- LoadInteger '1'
        v1126 <- LoadInteger '2'
        v1127 <- CreateArray [v1125, v1126]
        v1128 <- CallFunction v964, [v1116, v1124, v1127]
        v1129 <- LoadInteger '3'
        v1130 <- LoadInteger '1'
        v1131 <- LoadInteger '2'
        v1132 <- LoadInteger '3'
        v1133 <- CreateArray [v1130, v1131, v1132]
        v1134 <- CallFunction v964, [v1116, v1129, v1133]
    EndPlainFunction
    v1135 <- CallFunction v1101, []
EndPlainFunction
v1136 <- CallFunction v963, []
v1137 <- BeginArrowFunction -> 
    v1138 <- LoadUndefined
    v1139 <- CreateNamedVariable 'Array', 'none'
    v1140 <- GetProperty v1139, 'prototype'
    v1141 <- GetProperty v1140, 'sort'
    v1142 <- CallMethod v1141, 'call', [v1138]
EndArrowFunction
v1143 <- CallFunction v1137, []
v1144 <- CreateNamedVariable 'TypeError', 'none'
v1145 <- BeginPlainFunction -> 
    v1146 <- BeginPlainFunction -> v1147
        v1148 <- LoadInteger '27'
        BeginObjectLiteral
            ObjectLiteralAddElement `7`, v1148
        v1149 <- EndObjectLiteral
        v1150 <- CreateNamedVariable 'proto2', 'let', v1149
        v1151 <- LoadInteger '18'
        v1152 <- LoadInteger '19'
        BeginObjectLiteral
            ObjectLiteralAddProperty `__proto__`, v1150
            ObjectLiteralAddElement `8`, v1151
            ObjectLiteralAddElement `9`, v1152
        v1153 <- EndObjectLiteral
        v1154 <- CreateNamedVariable 'proto1', 'let', v1153
        v1155 <- LoadInteger '10'
        v1156 <- LoadInteger '7'
        v1157 <- LoadInteger '8'
        v1158 <- LoadInteger '9'
        BeginObjectLiteral
            ObjectLiteralAddProperty `__proto__`, v1154
            ObjectLiteralAddProperty `length`, v1155
            ObjectLiteralAddElement `7`, v1156
            ObjectLiteralAddElement `8`, v1157
            ObjectLiteralAddElement `9`, v1158
        v1159 <- EndObjectLiteral
        v1160 <- CreateNamedVariable 'xs', 'let', v1159
        BeginIf v1147
            v1161 <- LoadString '6'
            v1162 <- BeginArrowFunction -> 
                v1163 <- LoadThis
                v1164 <- GetProperty v1163, 'foo'
                Return v1164
            EndArrowFunction
            v1165 <- BeginArrowFunction -> v1166
                v1167 <- LoadThis
                SetProperty v1167, 'foo', v1166
                Return v1166
            EndArrowFunction
            BeginObjectLiteral
                ObjectLiteralAddProperty `get`, v1162
                ObjectLiteralAddProperty `set`, v1165
            v1168 <- EndObjectLiteral
            v1169 <- CreateNamedVariable 'Object', 'none'
            v1170 <- CallMethod v1169, 'defineProperty', [v1160, v1161, v1168]
        EndIf
        v1171 <- LoadInteger '6'
        SetElement v1160, '6', v1171
        v1172 <- BeginArrowFunction -> v1173, v1174
            v1175 <- BinaryOperation v1173, '-', v1174
            Return v1175
        EndArrowFunction
        v1176 <- CreateNamedVariable 'Array', 'none'
        v1177 <- GetProperty v1176, 'prototype'
        v1178 <- GetProperty v1177, 'sort'
        v1179 <- CallMethod v1178, 'call', [v1160, v1172]
        v1180 <- LoadInteger '10'
        v1181 <- GetProperty v1160, 'length'
        v1182 <- LoadInteger '6'
        v1183 <- GetElement v1160, '0'
        v1184 <- LoadInteger '7'
        v1185 <- GetElement v1160, '1'
        v1186 <- LoadInteger '8'
        v1187 <- GetElement v1160, '2'
        v1188 <- LoadInteger '9'
        v1189 <- GetElement v1160, '3'
        v1190 <- LoadInteger '7'
        v1191 <- CallMethod v1160, 'hasOwnProperty', [v1190]
        v1192 <- LoadInteger '27'
        v1193 <- GetElement v1160, '7'
        v1194 <- LoadInteger '8'
        v1195 <- CallMethod v1160, 'hasOwnProperty', [v1194]
        v1196 <- LoadInteger '18'
        v1197 <- GetElement v1160, '8'
        v1198 <- LoadInteger '9'
        v1199 <- CallMethod v1160, 'hasOwnProperty', [v1198]
        v1200 <- LoadInteger '19'
        v1201 <- GetElement v1160, '9'
    EndPlainFunction
    v1202 <- LoadBoolean 'true'
    v1203 <- CallFunction v1146, [v1202]
    v1204 <- LoadBoolean 'false'
    v1205 <- CallFunction v1146, [v1204]
EndPlainFunction
v1206 <- CallFunction v1145, []
v1207 <- BeginPlainFunction -> 
    v1208 <- LoadInteger '1'
    v1209 <- LoadInteger '2'
    v1210 <- LoadInteger '3'
    v1211 <- LoadInteger '4'
    v1212 <- LoadInteger '5'
    v1213 <- CreateArray [v1208, v1209, v1210, v1211, v1212]
    v1214 <- CreateNamedVariable 'array', 'let', v1213
    BeginForLoopInitializer
        v1215 <- LoadInteger '0'
    BeginForLoopCondition -> v1216
        v1217 <- GetProperty v1214, 'length'
        v1218 <- Compare v1216, '<', v1217
    BeginForLoopAfterthought v1218 -> v1219
        v1220 <- UnaryOperation v1219, '++'
    BeginForLoopBody -> v1221
        v1222 <- DeleteComputedProperty v1214, v1221
        v1223 <- LoadInteger '42'
        v1224 <- CreateNamedVariable 'Object', 'none'
        v1225 <- GetProperty v1224, 'prototype'
        SetComputedProperty v1225, v1221, v1223
    EndForLoop
    v1226 <- LoadBoolean 'false'
    v1227 <- CreateNamedVariable 'comparator_called', 'let', v1226
    v1228 <- BeginPlainFunction -> v1229, v1230
        v1231 <- LoadInteger '42'
        v1232 <- Compare v1229, '===', v1231
        v1233 <- LoadInteger '42'
        v1234 <- Compare v1230, '===', v1233
        v1235 <- BinaryOperation v1232, '||', v1234
        BeginIf v1235
            v1236 <- LoadBoolean 'true'
            Reassign v1227, v1236
        EndIf
        v1237 <- BinaryOperation v1229, '-', v1230
        Return v1237
    EndPlainFunction
    v1238 <- CallMethod v1214, 'sort', [v1228]
EndPlainFunction
v1239 <- CallFunction v1207, []
v1240 <- BeginPlainFunction -> v1241, v1242
    v1243 <- Compare v1241, '<', v1242
    BeginIf v1243
        v1244 <- LoadInteger '1'
        v1245 <- UnaryOperation '-', v1244
        Return v1245
    EndIf
    v1246 <- Compare v1242, '<', v1241
    BeginIf v1246
        v1247 <- LoadInteger '1'
        Return v1247
    EndIf
    v1248 <- LoadInteger '0'
    Return v1248
EndPlainFunction
v1249 <- BeginPlainFunction -> v1250
    v1251 <- LoadInteger '0'
    v1252 <- CreateNamedVariable 'cmp_count', 'let', v1251
    v1253 <- BeginArrowFunction -> v1254, v1255
        v1256 <- UnaryOperation '++', v1252
        v1257 <- LoadInteger '2'
        v1258 <- Compare v1252, '==', v1257
        BeginIf v1258
            v1259 <- CallFunction v1250, []
        EndIf
        v1260 <- CallFunction v1240, [v1254, v1255]
        Return v1260
    EndArrowFunction
    Return v1253
EndPlainFunction
v1261 <- BeginPlainFunction -> v1262
EndPlainFunction
v1263 <- BeginPlainFunction -> v1264
EndPlainFunction
v1265 <- BeginPlainFunction -> v1266
EndPlainFunction
v1267 <- BeginPlainFunction -> v1268
EndPlainFunction
v1269 <- BeginPlainFunction -> v1270
EndPlainFunction
v1271 <- BeginPlainFunction -> v1272
EndPlainFunction
v1273 <- BeginPlainFunction -> 
    v1274 <- LoadInteger '2'
    v1275 <- LoadInteger '1'
    v1276 <- LoadInteger '4'
    v1277 <- CreateArray [v1274, v1275, v1276]
    v1278 <- CreateNamedVariable 'xs', 'let', v1277
    v1279 <- CallFunction v1261, [v1278]
    v1280 <- BeginArrowFunction -> 
        v1281 <- LoadFloat '0.1'
        UpdateElement v1278, '0', '+', v1281
        Return v1281
    EndArrowFunction
    v1282 <- CallFunction v1249, [v1280]
    v1283 <- CallMethod v1278, 'sort', [v1282]
    v1284 <- CallFunction v1263, [v1278]
EndPlainFunction
v1285 <- CallFunction v1273, []
v1286 <- BeginPlainFunction -> 
    v1287 <- LoadFloat '2.1'
    v1288 <- LoadFloat '1.2'
    v1289 <- LoadFloat '4.4'
    v1290 <- CreateArray [v1287, v1288, v1289]
    v1291 <- CreateNamedVariable 'xs', 'let', v1290
    v1292 <- CallFunction v1263, [v1291]
    v1293 <- BeginArrowFunction -> 
        v1294 <- LoadString 'a'
        SetElement v1291, '0', v1294
        Return v1294
    EndArrowFunction
    v1295 <- CallFunction v1249, [v1293]
    v1296 <- CallMethod v1291, 'sort', [v1295]
    v1297 <- CallFunction v1265, [v1291]
EndPlainFunction
v1298 <- CallFunction v1286, []
v1299 <- BeginPlainFunction -> 
    v1300 <- LoadString 'a'
    v1301 <- LoadString 'b'
    v1302 <- LoadString 'c'
    v1303 <- CreateArray [v1300, v1301, v1302]
    v1304 <- CreateNamedVariable 'xs', 'let', v1303
    v1305 <- CallFunction v1265, [v1304]
    v1306 <- BeginArrowFunction -> 
        v1307 <- LoadString 'd'
        SetElement v1304, '65535', v1307
        Return v1307
    EndArrowFunction
    v1308 <- CallFunction v1249, [v1306]
    v1309 <- CallMethod v1304, 'sort', [v1308]
EndPlainFunction
v1310 <- CallFunction v1299, []
v1311 <- BeginPlainFunction -> 
    v1312 <- LoadInteger '2'
    v1313 <- LoadInteger '1'
    v1314 <- LoadInteger '4'
    v1315 <- CreateArray [v1312, v1313, v1314]
    v1316 <- CreateNamedVariable 'xs', 'let', v1315
    v1317 <- LoadInteger '42'
    SetElement v1316, '5', v1317
    v1318 <- CallFunction v1267, [v1316]
    v1319 <- BeginArrowFunction -> 
        v1320 <- LoadFloat '0.1'
        UpdateElement v1316, '0', '+', v1320
        Return v1320
    EndArrowFunction
    v1321 <- CallFunction v1249, [v1319]
    v1322 <- CallMethod v1316, 'sort', [v1321]
    v1323 <- CallFunction v1269, [v1316]
EndPlainFunction
v1324 <- CallFunction v1311, []
v1325 <- BeginPlainFunction -> 
    v1326 <- LoadFloat '2.1'
    v1327 <- LoadFloat '1.2'
    v1328 <- LoadInteger '4'
    v1329 <- CreateArray [v1326, v1327, v1328]
    v1330 <- CreateNamedVariable 'xs', 'let', v1329
    v1331 <- LoadInteger '42'
    SetElement v1330, '5', v1331
    v1332 <- CallFunction v1269, [v1330]
    v1333 <- BeginArrowFunction -> 
        v1334 <- LoadString 'a'
        SetElement v1330, '0', v1334
        Return v1334
    EndArrowFunction
    v1335 <- CallFunction v1249, [v1333]
    v1336 <- CallMethod v1330, 'sort', [v1335]
    v1337 <- CallFunction v1271, [v1330]
EndPlainFunction
v1338 <- CallFunction v1325, []
v1339 <- BeginPlainFunction -> 
    v1340 <- LoadString 'b'
    v1341 <- LoadString 'a'
    v1342 <- LoadString 'd'
    v1343 <- CreateArray [v1340, v1341, v1342]
    v1344 <- CreateNamedVariable 'xs', 'let', v1343
    v1345 <- LoadString '42'
    SetElement v1344, '5', v1345
    v1346 <- CallFunction v1271, [v1344]
    v1347 <- BeginArrowFunction -> 
        v1348 <- LoadString 'e'
        SetElement v1344, '65535', v1348
        Return v1348
    EndArrowFunction
    v1349 <- CallFunction v1249, [v1347]
    v1350 <- CallMethod v1344, 'sort', [v1349]
EndPlainFunction
v1351 <- CallFunction v1339, []
v1352 <- BeginPlainFunction -> 
    v1353 <- LoadInteger '2'
    v1354 <- LoadInteger '1'
    v1355 <- LoadInteger '4'
    v1356 <- CreateArray [v1353, v1354, v1355]
    v1357 <- CreateNamedVariable 'xs', 'let', v1356
    v1358 <- CallFunction v1261, [v1357]
    v1359 <- BeginArrowFunction -> 
        v1360 <- LoadInteger '42'
        SetElement v1357, '10', v1360
        Return v1360
    EndArrowFunction
    v1361 <- CallFunction v1249, [v1359]
    v1362 <- CallMethod v1357, 'sort', [v1361]
    v1363 <- CallFunction v1267, [v1357]
EndPlainFunction
v1364 <- CallFunction v1352, []
v1365 <- BeginPlainFunction -> 
    v1366 <- LoadFloat '2.1'
    v1367 <- LoadFloat '1.2'
    v1368 <- LoadInteger '4'
    v1369 <- CreateArray [v1366, v1367, v1368]
    v1370 <- CreateNamedVariable 'xs', 'let', v1369
    v1371 <- CallFunction v1263, [v1370]
    v1372 <- BeginArrowFunction -> 
        v1373 <- LoadInteger '42'
        SetElement v1370, '10', v1373
        Return v1373
    EndArrowFunction
    v1374 <- CallFunction v1249, [v1372]
    v1375 <- CallMethod v1370, 'sort', [v1374]
    v1376 <- CallFunction v1269, [v1370]
EndPlainFunction
v1377 <- CallFunction v1365, []
v1378 <- BeginPlainFunction -> 
    v1379 <- LoadString 'b'
    v1380 <- LoadString 'a'
    v1381 <- LoadString 'd'
    v1382 <- CreateArray [v1379, v1380, v1381]
    v1383 <- CreateNamedVariable 'xs', 'let', v1382
    v1384 <- CallFunction v1265, [v1383]
    v1385 <- BeginArrowFunction -> 
        v1386 <- LoadString '42'
        SetElement v1383, '10', v1386
        Return v1386
    EndArrowFunction
    v1387 <- CallFunction v1249, [v1385]
    v1388 <- CallMethod v1383, 'sort', [v1387]
    v1389 <- CallFunction v1271, [v1383]
EndPlainFunction
v1390 <- CallFunction v1378, []
v1391 <- BeginPlainFunction -> 
    v1392 <- LoadInteger '2'
    v1393 <- LoadInteger '1'
    v1394 <- LoadInteger '4'
    v1395 <- CreateArray [v1392, v1393, v1394]
    v1396 <- CreateNamedVariable 'xs', 'let', v1395
    v1397 <- CallFunction v1261, [v1396]
    v1398 <- BeginArrowFunction -> 
        v1399 <- LoadInteger '2'
        UpdateProperty v1396, '*', v1399
        Return v1399
    EndArrowFunction
    v1400 <- CallFunction v1249, [v1398]
    v1401 <- CallMethod v1396, 'sort', [v1400]
    v1402 <- CallFunction v1267, [v1396]
EndPlainFunction
v1403 <- CallFunction v1391, []
v1404 <- BeginPlainFunction -> 
    v1405 <- LoadInteger '2'
    v1406 <- LoadInteger '1'
    v1407 <- LoadInteger '4'
    v1408 <- LoadInteger '3'
    v1409 <- CreateArray [v1405, v1406, v1407, v1408]
    v1410 <- CreateNamedVariable 'xs', 'let', v1409
    v1411 <- CallFunction v1261, [v1410]
    v1412 <- BeginArrowFunction -> 
        v1413 <- LoadInteger '0'
        SetProperty v1410, 'length', v1413
        Return v1413
    EndArrowFunction
    v1414 <- CallFunction v1249, [v1412]
    v1415 <- CallMethod v1410, 'sort', [v1414]
    v1416 <- CallFunction v1261, [v1410]
EndPlainFunction


function TestNumberSort() {
    var a = [200,45,7];
    a.sort();
    [200,45,7];
    function f11(a12, a13) {
        return a12 - a13;
    }
    a.sort(f11);
    [7,45,200];
    a = [-12345,-123,-1234,-123456];
    a.sort();
    [-123,-1234,-12345,-123456];
    a = [123456,0,-12345,-123,123,1234,-1234,0,12345,-123456];
    a.sort();
    [-123,-1234,-12345,-123456,0,0,123,1234,12345,123456];
    a = ([9,1000000000]).sort();
    [1000000000,9];
    a = ([1000000000,1]).sort();
    [1,1000000000];
    a = ([1000000000,0]).sort();
    [0,1000000000];
    a = ([1230,123]).sort();
    [123,1230];
    a = ([1231,123]).sort();
    [123,1231];
    a = [1000000000,10000000000,1000000001,-1000000000,-10000000000,-1000000001];
    a.sort();
    [-1000000000,-10000000000,-1000000001,1000000000,10000000000,1000000001];
}
TestNumberSort();
function TestStringSort() {
    var a = ["cc","c","aa","a","bb","b","ab","ac"];
    a.sort();
    ["a","aa","ab","ac","b","bb","c","cc"];
}
TestStringSort();
function TestObjectSort() {
    function f150() {
        return "a";
    }
    var obj0 = { toString: f150 };
    function f154() {
        return "b";
    }
    var obj1 = { toString: f154 };
    function f158() {
        return "c";
    }
    var obj2 = { toString: f158 };
    var a = [obj2,obj0,obj1];
    a.sort();
    [obj0,obj1,obj2];
}
TestObjectSort();
function TestArraySortingWithHoles() {
    var a = [];
    a[4] = "18";
    a[10] = "12";
    a.sort();
    a.length;
    a[0];
    a[1];
}
TestArraySortingWithHoles();
function TestArraySortingWithUndefined() {
    var a = [3,void 0,2];
    a.sort();
    [2,3,void 0];
}
TestArraySortingWithUndefined();
function TestArraySortingWithUnsoundComparisonFunction() {
    var a = [3,void 0,2];
    function f201(a202, a203) {
        return 1;
    }
    a.sort(f201);
    a.sort();
    [2,3,void 0];
}
TestArraySortingWithUnsoundComparisonFunction();
function TestSparseNonArraySorting(a214) {
    a214 > 101;
    var obj = { length: a214 };
    obj[0] = 42;
    obj[10] = 37;
    obj[100] = undefined;
    obj[a214 - 1] = null;
    Array.prototype.sort.call(obj);
    obj.length;
    obj[0];
    obj[1];
    obj[2];
    obj[3];
    3 in obj;
    4 in obj;
}
TestSparseNonArraySorting(5000);
TestSparseNonArraySorting(500000);
TestSparseNonArraySorting(Math.pow(2, 31) + 1);
function TestArrayLongerLength(a261) {
    const v264 = new Array(4);
    var x = v264;
    x[0] = 42;
    x[2] = 37;
    x.length = a261;
    Array.prototype.sort.call(x);
    x.length;
    x[0];
    x[1];
    2 in x;
}
TestArrayLongerLength(4);
TestArrayLongerLength(10);
TestArrayLongerLength(1000);
TestArrayLongerLength(500000);
TestArrayLongerLength(Math.pow(2, 32) - 1);
function TestNonArrayLongerLength(a297) {
    var x = {};
    x[0] = 42;
    x[2] = 37;
    x.length = a297;
    Array.prototype.sort.call(x);
    x.length;
    x[0];
    x[1];
    2 in x;
}
TestNonArrayLongerLength(4);
TestNonArrayLongerLength(10);
TestNonArrayLongerLength(1000);
TestNonArrayLongerLength(500000);
TestNonArrayLongerLength(Math.pow(2, 32) - 1);
function TestNonArrayWithAccessors() {
    var x = {};
    x[0] = 42;
    function f336() {
        return this.foo;
    }
    x.__defineGetter__("1", f336);
    function f341(a342) {
        this.foo = a342;
    }
    x.__defineSetter__("1", f341);
    x[1] = 49;
    x[3] = 37;
    x.length = 4;
    Array.prototype.sort.call(x);
    x.length;
    x[0];
    x[1];
    x[2];
    3 in x;
}
TestNonArrayWithAccessors();
function TestInheritedElementSort(a369) {
    var length = (a369 * 2) + 3;
    var obj = { length: length };
    obj[(a369 * 2) + 1] = 0;
    for (let i383 = 0; i383 < a369; i383++) {
        var newObj = {};
        newObj.__proto__ = obj;
        obj[i383] = undefined;
        const v391 = a369 - i383;
        obj[(i383 + a369) + 1] = v391;
        obj = newObj;
    }
    function f395(a396, a397) {
        return (a397 < a396) - (a396 < a397);
    }
    Array.prototype.sort.call(obj, f395);
    var name = ("SortInherit(" + a369) + ")-";
    obj.length;
    name + "length";
    for (let i414 = 0; i414 <= a369; i414++) {
        obj.hasOwnProperty(i414);
        (name + "hasvalue") + i414;
        obj[i414];
        (name + "value") + i414;
    }
    for (let i429 = a369 + 1; i429 < ((a369 * 2) + 1); i429++) {
        obj[i429];
        (name + "undefined") + i429;
        obj.hasOwnProperty(i429);
        (name + "hasundefined") + i429;
    }
    obj.hasOwnProperty((a369 * 2) + 1);
    name + "hashole";
    obj.hasOwnProperty((a369 * 2) + 2);
    name + "hashole";
}
TestInheritedElementSort(5);
TestInheritedElementSort(15);
function TestSparseInheritedElementSort(a466) {
    var length = a466 * 10;
    var x = { length: length };
    var y = {};
    y.__proto__ = x;
    for (let i475 = 0; i475 < 5; i475++) {
        const v484 = 2 * (4 - i475);
        x[(i475 * 2) * a466] = v484;
        const v493 = (2 * (4 - i475)) + 1;
        y[((i475 * 2) + 1) * a466] = v493;
    }
    var name = ("SparseSortInherit(" + a466) + ")-";
    Array.prototype.sort.call(y);
    y.length;
    name + "length";
    for (let i512 = 0; i512 < 10; i512++) {
        y.hasOwnProperty(i512);
        (name + "hasvalue") + i512;
        y[i512];
        (name + "value") + i512;
    }
    for (let i527 = 10; i527 < length; i527++) {
        y.hasOwnProperty(i527);
        (name + "noundef") + i527;
        if (x.hasOwnProperty(i527)) {
            0 == (i527 % (2 * a466));
            (name + "new_x") + i527;
        }
    }
}
TestSparseInheritedElementSort(10);
TestSparseInheritedElementSort(100);
TestSparseInheritedElementSort(1000);
function TestSpecialCasesInheritedElementSort() {
    const v571 = {
        0: "e3",
        1: "d3",
        2: "c3",
        3: "b3",
        4: "f3",
        5: "a3",
        6: undefined,
    };
    const v572 = {
        length: 10000,
        1: "e2",
        10: "a2",
        100: "b2",
        1000: "c2",
        2000: undefined,
        8000: "d2",
        12000: "XX",
        __proto__: v571,
    };
    const v573 = {
        1: "d1",
        2: "c1",
        3: "b1",
        4: undefined,
        __proto__: v572,
    };
    var x = v573;
    Array.prototype.sort.call(x);
    var name = "SpecialInherit-";
    x.length;
    name + "length";
    var sorted = ["a2","a3","b1","b2","c1","c2","d1","d2","e3",,,,];
    for (let i600 = 0; i600 < sorted.length; i600++) {
        x.hasOwnProperty(i600);
        (name + "has") + i600;
        sorted[i600];
        x[i600];
        name + i600;
    }
    x.hasOwnProperty(sorted.length);
    name + "haspost";
    sorted.length in x;
    name + "haspost2";
    x.hasOwnProperty(10);
    name + "hasundefined10";
    x[10];
    name + "undefined10";
    x.hasOwnProperty(100);
    name + "hasno100";
    x[100];
    x.hasOwnProperty(1000);
    name + "hasno1000";
    x[1000];
    x.hasOwnProperty(2000);
    name + "hasno2000";
    x[2000];
    x.hasOwnProperty(8000);
    name + "hasno8000";
    x[8000];
    x.hasOwnProperty(12000);
    name + "has12000";
    x[12000];
    name + "XX12000";
}
TestSpecialCasesInheritedElementSort();
function o(a667) {
    const v668 = o.prototype;
    return { __proto__: v668, val: a667 };
}
var arr = [o(1),o(2),o(4),o(8),o(16),o(32),o(64),o(128),o(256),o(-0)];
var global = this;
function cmpTest(a696, a697) {
    a696 instanceof o;
    a697 instanceof o;
    return a696.val - a697.val;
}
arr.sort(cmpTest);
function TestSortDoesNotDependOnObjectPrototypeHasOwnProperty() {
    const v708 = { hasOwnProperty: null, 0: 1 };
    const v710 = { __proto__: v708, length: 5 };
    Array.prototype.sort.call(v710);
    const v716 = new Array(2);
    var arr = v716;
    function f719() {
    }
    function f720() {
    }
    Object.defineProperty(arr, 0, { get: f719, set: f720 });
    arr.hasOwnProperty = null;
    arr.sort();
}
TestSortDoesNotDependOnObjectPrototypeHasOwnProperty();
function TestSortDoesNotDependOnArrayPrototypePush() {
    var arr = [];
    for (let i731 = 0; i731 < 22; i731++) {
        arr[i731] = {};
    }
    function f738() {
        fail("Should not call push");
    }
    const t327 = Array.prototype;
    t327.push = f738;
    arr.sort();
    arr = [];
    for (let i747 = 0; i747 < 2000; ++i747) {
        arr[i747] = {};
    }
    arr.sort();
}
TestSortDoesNotDependOnArrayPrototypePush();
function TestSortDoesNotDependOnArrayPrototypeSort() {
    var arr = [];
    for (let i760 = 0; i760 < 2000; i760++) {
        arr[i760] = {};
    }
    var sortfn = Array.prototype.sort;
    function f771() {
        fail("Should not call sort");
    }
    const t346 = Array.prototype;
    t346.sort = f771;
    sortfn.call(arr);
    const t348 = Array.prototype;
    t348.sort = sortfn;
}
TestSortDoesNotDependOnArrayPrototypeSort();
function TestSortToObject() {
    const t354 = Number.prototype;
    t354[0] = 5;
    const t356 = Number.prototype;
    t356[1] = 4;
    const t358 = Number.prototype;
    t358.length = 2;
    const v788 = new Number(0);
    x = v788;
    Number(Array.prototype.sort.call(x));
    x[0];
    x[1];
    ["0","1"];
    Object.getOwnPropertyNames(x);
    Number(Array.prototype.sort.call(0));
}
TestSortToObject();
function TestSortOnProxy() {
    {
        const v818 = [2,1,3];
        const v820 = new Proxy(v818, {});
        var p = v820;
        [1,2,3];
        p.sort();
    }
    {
        function f() {
            return arguments;
        }
        var a = f(2, 1, 3);
        const v835 = {};
        const v837 = new Proxy(v835, {});
        a.__proto__ = v837;
        [1,2,3];
        [...Array.prototype.sort.apply(a)];
    }
}
TestSortOnProxy();
function TestSortOnNonExtensible() {
    {
        var arr = [1,,2];
        Object.preventExtensions(arr);
        const v856 = () => {
            return arr.sort();
        };
        v856();
        [1,,2];
    }
    {
        var arr = [1,,,];
        Object.preventExtensions(arr);
        const v871 = () => {
            return arr.sort();
        };
        v871();
        arr.hasOwnProperty(1);
        [1,,,];
    }
    {
        var arr = [1,,2];
        Object.preventExtensions(arr);
        arr.sort();
        [1,2,,];
    }
}
TestSortOnNonExtensible();
function TestSortOnTypedArray() {
    const v907 = new Int8Array([10,9,8,7,6,5,4,3,2,1]);
    var array = v907;
    Object.defineProperty(array, "length", { value: 5 });
    Array.prototype.sort.call(array);
    new Int8Array([10,6,7,8,9,5,4,3,2,1]);
    const v941 = new Int8Array([10,9,8,7,6,5,4,3,2,1]);
    var array = v941;
    Object.defineProperty(array, "length", { value: 15 });
    Array.prototype.sort.call(array);
    new Int8Array([1,10,2,3,4,5,6,7,8,9]);
}
TestSortOnTypedArray();
function testSortSpecialPrototypes() {
    function test(a965, a966, a967) {
        var result = { length: a966, __proto__: a965 };
        Array.prototype.sort.call(result);
        a967.length;
        result.length;
        for (let i978 = 0; i978 < a967.length; i978++) {
            a967[i978];
            result[i978];
            ("result[" + i978) + "]";
        }
    }
    function fast() {
        test(arguments, 0, []);
        test(arguments, 1, [2]);
        test(arguments, 2, [1,2]);
        test(arguments, 4, [1,2,3,4]);
        delete arguments[0];
        test(arguments, 2, [1,1]);
        arguments[0] = undefined;
        test(arguments, 2, [1,,]);
    }
    fast(2, 1, 4, 3);
    function fastSloppy(a1039) {
        test(arguments, 0, []);
        test(arguments, 1, [2]);
        test(arguments, 2, [1,2]);
        delete arguments[0];
        test(arguments, 2, [1,1]);
        arguments[0] = undefined;
        test(arguments, 2, [1,,]);
    }
    fastSloppy(2, 1);
    function fastEmpty() {
        test(arguments, 0, []);
        test(arguments, 1, [,]);
        test(arguments, 2, [,,]);
    }
    fastEmpty();
    function stringWrapper() {
        const v1091 = () => {
            const v1094 = new String("cba");
            return test(v1094, 3, []);
        };
        v1091();
    }
    stringWrapper();
    function typedArrys() {
        const v1104 = new Int32Array(0);
        test(v1104, 0, []);
        const v1109 = new Int32Array(1);
        test(v1109, 1, [0]);
        const v1115 = new Int32Array(3);
        var array = v1115;
        array[0] = 2;
        array[1] = 1;
        array[2] = 3;
        test(array, 1, [2]);
        test(array, 2, [1,2]);
        test(array, 3, [1,2,3]);
    }
    typedArrys();
}
testSortSpecialPrototypes();
const v1137 = () => {
    Array.prototype.sort.call(undefined);
};
v1137();
function TestPrototypeHoles() {
    function test(a1147) {
        let proto2 = { 7: 27 };
        let proto1 = { __proto__: proto2, 8: 18, 9: 19 };
        const v1159 = {
            __proto__: proto1,
            length: 10,
            7: 7,
            8: 8,
            9: 9,
        };
        let xs = v1159;
        if (a1147) {
            const v1162 = () => {
                return this.foo;
            };
            const v1165 = (a1166) => {
                this.foo = a1166;
                return a1166;
            };
            Object.defineProperty(xs, "6", { get: v1162, set: v1165 });
        }
        xs[6] = 6;
        const v1172 = (a1173, a1174) => {
            return a1173 - a1174;
        };
        Array.prototype.sort.call(xs, v1172);
        xs.length;
        xs[0];
        xs[1];
        xs[2];
        xs[3];
        xs.hasOwnProperty(7);
        xs[7];
        xs.hasOwnProperty(8);
        xs[8];
        xs.hasOwnProperty(9);
        xs[9];
    }
    test(true);
    test(false);
}
TestPrototypeHoles();
function TestArrayPrototypeHasElements() {
    let array = [1,2,3,4,5];
    for (let i1216 = 0; i1216 < array.length; i1216++) {
        delete array[i1216];
        const t546 = Object.prototype;
        t546[i1216] = 42;
    }
    let comparator_called = false;
    function f1228(a1229, a1230) {
        if ((a1229 === 42) || (a1230 === 42)) {
            comparator_called = true;
        }
        return a1229 - a1230;
    }
    array.sort(f1228);
}
TestArrayPrototypeHasElements();
function cmp_smaller(a1241, a1242) {
    if (a1241 < a1242) {
        return -1;
    }
    if (a1242 < a1241) {
        return 1;
    }
    return 0;
}
function create_cmpfn(a1250) {
    let cmp_count = 0;
    const v1253 = (a1254, a1255) => {
        ++cmp_count;
        if (cmp_count == 2) {
            a1250();
        }
        return cmp_smaller(a1254, a1255);
    };
    return v1253;
}
function HasPackedSmi(a1262) {
}
function HasPackedDouble(a1264) {
}
function HasPackedObject(a1266) {
}
function HasHoleySmi(a1268) {
}
function HasHoleyDouble(a1270) {
}
function HasHoleyObject(a1272) {
}
function TestSortCmpPackedSmiToPackedDouble() {
    let xs = [2,1,4];
    HasPackedSmi(xs);
    const v1280 = () => {
        xs[0] += 0.1;
        return 0.1;
    };
    xs.sort(create_cmpfn(v1280));
    HasPackedDouble(xs);
}
TestSortCmpPackedSmiToPackedDouble();
function TestSortCmpPackedDoubleToPackedElement() {
    let xs = [2.1,1.2,4.4];
    HasPackedDouble(xs);
    const v1293 = () => {
        xs[0] = "a";
        return "a";
    };
    xs.sort(create_cmpfn(v1293));
    HasPackedObject(xs);
}
TestSortCmpPackedDoubleToPackedElement();
function TestSortCmpPackedElementToDictionary() {
    let xs = ["a","b","c"];
    HasPackedObject(xs);
    const v1306 = () => {
        xs[65535] = "d";
        return "d";
    };
    xs.sort(create_cmpfn(v1306));
}
TestSortCmpPackedElementToDictionary();
function TestSortCmpHoleySmiToHoleyDouble() {
    let xs = [2,1,4];
    xs[5] = 42;
    HasHoleySmi(xs);
    const v1319 = () => {
        xs[0] += 0.1;
        return 0.1;
    };
    xs.sort(create_cmpfn(v1319));
    HasHoleyDouble(xs);
}
TestSortCmpHoleySmiToHoleyDouble();
function TestSortCmpHoleyDoubleToHoleyElement() {
    let xs = [2.1,1.2,4];
    xs[5] = 42;
    HasHoleyDouble(xs);
    const v1333 = () => {
        xs[0] = "a";
        return "a";
    };
    xs.sort(create_cmpfn(v1333));
    HasHoleyObject(xs);
}
TestSortCmpHoleyDoubleToHoleyElement();
function TestSortCmpHoleyElementToDictionary() {
    let xs = ["b","a","d"];
    xs[5] = "42";
    HasHoleyObject(xs);
    const v1347 = () => {
        xs[65535] = "e";
        return "e";
    };
    xs.sort(create_cmpfn(v1347));
}
TestSortCmpHoleyElementToDictionary();
function TestSortCmpPackedSmiToHoleySmi() {
    let xs = [2,1,4];
    HasPackedSmi(xs);
    const v1359 = () => {
        xs[10] = 42;
        return 42;
    };
    xs.sort(create_cmpfn(v1359));
    HasHoleySmi(xs);
}
TestSortCmpPackedSmiToHoleySmi();
function TestSortCmpPackedDoubleToHoleyDouble() {
    let xs = [2.1,1.2,4];
    HasPackedDouble(xs);
    const v1372 = () => {
        xs[10] = 42;
        return 42;
    };
    xs.sort(create_cmpfn(v1372));
    HasHoleyDouble(xs);
}
TestSortCmpPackedDoubleToHoleyDouble();
function TestSortCmpPackedObjectToHoleyObject() {
    let xs = ["b","a","d"];
    HasPackedObject(xs);
    const v1385 = () => {
        xs[10] = "42";
        return "42";
    };
    xs.sort(create_cmpfn(v1385));
    HasHoleyObject(xs);
}
TestSortCmpPackedObjectToHoleyObject();
function TestSortCmpPackedChangesLength() {
    let xs = [2,1,4];
    HasPackedSmi(xs);
    const v1398 = () => {
        xs.length *= 2;
        return 2;
    };
    xs.sort(create_cmpfn(v1398));
    HasHoleySmi(xs);
}
TestSortCmpPackedChangesLength();
function TestSortCmpPackedSetLengthToZero() {
    let xs = [2,1,4,3];
    HasPackedSmi(xs);
    const v1412 = () => {
        xs.length = 0;
        return 0;
    };
    xs.sort(create_cmpfn(v1412));
    HasPackedSmi(xs);
}

FuzzIL program written to corpus/array-sort.fzil
