v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    v3 <- CreateNamedVariable '__v_10', 'var', v2
    v4 <- LoadInteger '100000'
    v5 <- CreateNamedVariable 'count', 'var', v4
    BeginWhileLoopHeader
        v6 <- UnaryOperation v5, '--'
        v7 <- LoadInteger '0'
        v8 <- Compare v6, '!=', v7
    BeginWhileLoopBody v8
        v9 <- LoadInteger '0'
        v10 <- CallMethod v1, 'push', [v9]
        v11 <- CreateNamedVariable 'l', 'var', v10
        v12 <- UnaryOperation '++', v3
        v13 <- LoadInteger '2'
        v14 <- Compare v12, '>=', v13
        BeginIf v14
            Return v1
        EndIf
        BeginObjectLiteral
        v15 <- EndObjectLiteral
        Reassign v3, v15
    EndWhileLoop
    Return v1
EndPlainFunction
v16 <- CreateArray []
v17 <- CallFunction v0, [v16]
v18 <- CreateNamedVariable 'a', 'let', v17
v19 <- GetElement v18, '0'
v20 <- LoadInteger '0'
v21 <- GetElement v18, '10000'
v22 <- LoadInteger '0'


function __f_17(a1) {
    var __v_10 = 0;
    var count = 100000;
    while (count-- != 0) {
        var l = a1.push(0);
        if (++__v_10 >= 2) {
            return a1;
        }
        __v_10 = {};
    }
    return a1;
}
let a = __f_17([]);
a[0];
a[10000];

FuzzIL program written to corpus/array-push11.fzil
