v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> 
    EndPlainFunction
    v2 <- CreateNamedVariable 'a', 'var', v1
    v3 <- BeginPlainFunction -> 
    EndPlainFunction
    v4 <- CreateNamedVariable 'b', 'var', v3
    v5 <- LoadUndefined
    v6 <- CreateNamedVariable 'c', 'var', v5
    v7 <- BeginPlainFunction -> 
        v8 <- CreateArray []
        v9 <- CreateNamedVariable 'd', 'var', v8
    EndPlainFunction
    v10 <- CreateNamedVariable 'd', 'var', v7
    v11 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v12 <- EndObjectLiteral
        v13 <- CreateNamedVariable 'e', 'var', v12
    EndPlainFunction
    v14 <- CreateNamedVariable 'e', 'var', v11
    v15 <- BeginPlainFunction -> 
        v16 <- CallFunction v10, []
        v17 <- CallFunction v4, []
    EndPlainFunction
    Reassign v6, v15
    v18 <- BeginPlainFunction -> v19, v20
        v21 <- CallFunction v6, []
        v22 <- CallFunction v2, []
        BeginObjectLiteral
        v23 <- EndObjectLiteral
        v24 <- BeginPlainFunction -> 
        EndPlainFunction
        v25 <- CallFunction v24, [v23]
        Return v25
    EndPlainFunction
    Return v18
EndPlainFunction
v26 <- CallFunction v0, []
v27 <- CreateNamedVariable 'gc', 'none'
v28 <- CallFunction v27, []


function kaboom() {
    function f1() {
    }
    var a = f1;
    function f3() {
    }
    var b = f3;
    var c;
    function f7() {
        var d = [];
    }
    var d = f7;
    function f11() {
        var e = {};
    }
    var e = f11;
    function f15() {
        d();
        b();
    }
    c = f15;
    function f18(a19, a20) {
        c();
        a();
        const v23 = {};
        function f() {
        }
        return f(v23);
    }
    return f18;
}
kaboom();
gc();

FuzzIL program written to corpus/regress-lazy-deopt-reloc.fzil
