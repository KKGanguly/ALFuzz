const v0 = [536870888,16,268435440,16,-882388460,1827994078];
[-1670931598,-14852,268435439,-25894,9223372036854775807];
const v2 = [9007199254740992,-1478305300,14717,-1270776340,2147483649,4];
const v5 = ("n")?.split;
try { new v5(v0, "n"); } catch (e) {}
("floor")[3];
[209047.69931535237,2.2250738585072014e-308,0.8390526864527903,-389207.9139692201,0.45532929547346535,282.51655578822806,-1000000000.0,-5.403083673635159e+307,-1000.0];
[-604.6496569702202,-4.6235161611696824,2.730781149408923,NaN,-1000000000.0,1000.0,362.9872028928405,0.6654588521660012,0.9524634284718219];
const v11 = [0.6066086696355518,666.823752179982,5.907661322652856e+307,121.7605245579332,-974.1835355835447,0.10217083654653536,0.29618258712654233];
false && false;
4 >>> 4;
const v17 = new Uint8ClampedArray(4);
v17[0] = 64;
const v19 = v17[0];
v19 & v19;
function f21(a22, a23) {
    a22[0] = 127;
    return 4;
}
try { f21("35781", "35781"); } catch (e) {}
try { f21(); } catch (e) {}
try { f21(); } catch (e) {}
new Float32Array(257);
new Float64Array(65);
new Uint32Array(87);
function f37(a38, a39) {
    a38++;
    a39 | a39;
    a38[0] = a39;
    return a39;
}
let v43;
try { v43 = v2.sort(f37); } catch (e) {}
try { v43.keys(); } catch (e) {}
try { gc(); } catch (e) {}
const v50 = gc({ execution: "async" });
try { v50.hasOwnProperty(v11); } catch (e) {}
const v52 = new Uint8ClampedArray(4);
f37(v52, 0.5);
