v0 <- BeginPlainFunction -> v1
    BeginTry
        BeginForInLoop v1 -> v2
        EndForInLoop
        v3 <- LoadBoolean 'false'
        Return v3
    BeginCatch -> v4
        v5 <- LoadBoolean 'true'
        Return v5
    EndTryCatch
EndPlainFunction
v6 <- CreateNamedVariable 'Proxy', 'none'
v7 <- LoadInteger '1'
BeginObjectLiteral
    ObjectLiteralAddProperty `a`, v7
v8 <- EndObjectLiteral
BeginObjectLiteral
    BeginObjectLiteralMethod `getOwnPropertyDescriptor` -> v9, v10, v11
        ThrowException v10
    EndObjectLiteralMethod
v12 <- EndObjectLiteral
v13 <- Construct v6, [v8, v12]
v14 <- CreateNamedVariable 'o', 'var', v13
v15 <- CallFunction v0, [v14]
v16 <- CallFunction v0, [v14]
v17 <- CallFunction v0, [v14]


function foo(a1) {
    try {
        for (const v2 in a1) {
        }
        return false;
    } catch(e4) {
        return true;
    }
}
const v8 = { a: 1 };
const v12 = {
    getOwnPropertyDescriptor(a10, a11) {
        throw a10;
    },
};
const v13 = new Proxy(v8, v12);
var o = v13;
foo(o);
foo(o);
foo(o);

FuzzIL program written to corpus/regress-6121.fzil
