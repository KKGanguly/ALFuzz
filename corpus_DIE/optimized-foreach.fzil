v0 <- LoadInteger '0'
v1 <- LoadInteger '1'
v2 <- LoadInteger '2'
v3 <- LoadInteger '3'
v4 <- LoadInteger '4'
v5 <- LoadInteger '5'
v6 <- LoadInteger '6'
v7 <- LoadInteger '7'
v8 <- LoadInteger '8'
v9 <- LoadInteger '9'
v10 <- LoadInteger '10'
v11 <- LoadInteger '11'
v12 <- LoadInteger '12'
v13 <- LoadInteger '13'
v14 <- LoadInteger '14'
v15 <- LoadInteger '15'
v16 <- LoadInteger '16'
v17 <- LoadInteger '17'
v18 <- LoadInteger '18'
v19 <- LoadInteger '19'
v20 <- LoadInteger '20'
v21 <- LoadInteger '21'
v22 <- LoadInteger '22'
v23 <- LoadInteger '23'
v24 <- LoadInteger '24'
v25 <- LoadInteger '0'
v26 <- LoadInteger '0'
v27 <- CreateArray [v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26]
v28 <- CreateNamedVariable 'a', 'var', v27
v29 <- LoadInteger '1'
v30 <- LoadInteger '2'
v31 <- LoadInteger '3'
v32 <- LoadInteger '4'
v33 <- LoadInteger '5'
v34 <- LoadInteger '6'
v35 <- LoadInteger '7'
v36 <- LoadInteger '8'
v37 <- LoadInteger '9'
v38 <- LoadInteger '10'
v39 <- LoadInteger '11'
v40 <- LoadInteger '12'
v41 <- LoadInteger '13'
v42 <- LoadInteger '14'
v43 <- LoadInteger '15'
v44 <- LoadInteger '16'
v45 <- LoadInteger '17'
v46 <- LoadInteger '18'
v47 <- LoadInteger '19'
v48 <- LoadInteger '20'
v49 <- LoadInteger '21'
v50 <- LoadInteger '22'
v51 <- LoadInteger '23'
v52 <- LoadInteger '24'
v53 <- LoadInteger '25'
v54 <- CreateArray [v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53]
v55 <- CreateNamedVariable 'b', 'var', v54
v56 <- LoadInteger '1'
v57 <- LoadInteger '2'
v58 <- LoadInteger '3'
v59 <- LoadInteger '4'
v60 <- LoadInteger '5'
v61 <- LoadInteger '6'
v62 <- LoadInteger '7'
v63 <- LoadInteger '8'
v64 <- LoadInteger '9'
v65 <- LoadInteger '10'
v66 <- LoadInteger '11'
v67 <- LoadInteger '12'
v68 <- LoadInteger '13'
v69 <- LoadInteger '14'
v70 <- LoadInteger '15'
v71 <- LoadInteger '16'
v72 <- LoadInteger '17'
v73 <- LoadInteger '18'
v74 <- LoadInteger '19'
v75 <- LoadInteger '20'
v76 <- LoadInteger '21'
v77 <- LoadInteger '22'
v78 <- LoadInteger '23'
v79 <- LoadInteger '24'
v80 <- LoadInteger '25'
v81 <- CreateArray [v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80]
v82 <- CreateNamedVariable 'c', 'var', v81
v83 <- BeginPlainFunction -> 
    v84 <- LoadInteger '0'
    v85 <- CreateNamedVariable 'result', 'var', v84
    v86 <- BeginPlainFunction -> v87
        v88 <- BeginPlainFunction -> v89, v90, v91
            Update v85, '+', v89
            v92 <- LoadInteger '13'
            v93 <- Compare v90, '==', v92
            v94 <- BinaryOperation v93, '&&', v87
            BeginIf v94
                v95 <- LoadInteger '25'
                SetProperty v28, 'abc', v95
            EndIf
        EndPlainFunction
        v96 <- CreateNamedVariable 'sum', 'var', v88
        v97 <- CallMethod v28, 'forEach', [v96]
    EndPlainFunction
    v98 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v86
    v99 <- CallFunction v98, []
    v100 <- CallFunction v98, []
    v101 <- CallFunction v98, []
    v102 <- LoadBoolean 'true'
    v103 <- CallFunction v98, [v102]
    v104 <- CallFunction v98, []
    v105 <- LoadInteger '1500'
EndPlainFunction
v106 <- CallFunction v83, []
v107 <- BeginPlainFunction -> 
    v108 <- LoadInteger '0'
    v109 <- CreateNamedVariable 'result', 'var', v108
    v110 <- BeginPlainFunction -> v111
        v112 <- BeginPlainFunction -> v113, v114, v115
            Update v109, '+', v113
            v116 <- LoadInteger '13'
            v117 <- Compare v114, '==', v116
            v118 <- BinaryOperation v117, '&&', v111
            v119 <- LoadInteger '25'
            v120 <- LoadInteger '27'
            v121 <- TernaryOperation v118, v119, v120
            SetProperty v28, 'length', v121
        EndPlainFunction
        v122 <- CreateNamedVariable 'sum', 'var', v112
        v123 <- CallMethod v28, 'forEach', [v122]
    EndPlainFunction
    v124 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v110
    v125 <- CallFunction v124, []
    v126 <- CallFunction v124, []
    v127 <- CallFunction v124, []
    v128 <- LoadBoolean 'true'
    v129 <- CallFunction v124, [v128]
    v130 <- CallFunction v124, []
    v131 <- LoadInteger '1500'
EndPlainFunction
v132 <- CallFunction v107, []
v133 <- BeginPlainFunction -> 
    v134 <- LoadInteger '0'
    v135 <- CreateNamedVariable 'result', 'var', v134
    v136 <- BeginPlainFunction -> v137
        v138 <- LoadInteger '0'
        v139 <- LoadInteger '1'
        v140 <- LoadInteger '2'
        v141 <- LoadInteger '3'
        v142 <- LoadInteger '4'
        v143 <- LoadInteger '5'
        v144 <- CreateArray [v138, v139, v140, v141, v142, v143]
        v145 <- CreateNamedVariable 'a_noescape', 'var', v144
        v146 <- BeginPlainFunction -> v147, v148, v149
            Update v135, '+', v147
            v150 <- LoadInteger '13'
            v151 <- Compare v148, '==', v150
            v152 <- BinaryOperation v151, '&&', v137
            BeginIf v152
                v153 <- LoadInteger '25'
                SetProperty v145, 'length', v153
            EndIf
        EndPlainFunction
        v154 <- CreateNamedVariable 'sum', 'var', v146
        v155 <- CallMethod v145, 'forEach', [v154]
    EndPlainFunction
    v156 <- CreateNamedVariable 'eagerDeoptInCalled', 'var', v136
    v157 <- CallFunction v156, []
    v158 <- CallFunction v156, []
    v159 <- CallFunction v156, []
    v160 <- LoadBoolean 'true'
    v161 <- CallFunction v156, [v160]
    v162 <- CallFunction v156, []
    v163 <- LoadInteger '75'
EndPlainFunction
v164 <- CallFunction v133, []
v165 <- BeginPlainFunction -> 
    v166 <- LoadInteger '0'
    v167 <- CreateNamedVariable 'result', 'var', v166
    v168 <- BeginPlainFunction -> v169
        v170 <- LoadInteger '1'
        v171 <- LoadInteger '2'
        v172 <- LoadInteger '3'
        v173 <- CreateArray [v170, v171, v172]
        v174 <- CreateNamedVariable 'b', 'var', v173
        v175 <- BeginPlainFunction -> v176, v177, v178
            Update v167, '+', v177
            v179 <- LoadInteger '1'
            v180 <- Compare v177, '==', v179
            v181 <- BinaryOperation v180, '&&', v169
            BeginIf v181
            EndIf
            v182 <- CreateNamedVariable 'gc', 'none'
            v183 <- CallFunction v182, []
            v184 <- CallFunction v182, []
        EndPlainFunction
        v185 <- CreateNamedVariable 'sum', 'var', v175
        v186 <- CallMethod v174, 'forEach', [v185]
    EndPlainFunction
    v187 <- CreateNamedVariable 'lazyDeopt', 'var', v168
    v188 <- CallFunction v187, []
    v189 <- CallFunction v187, []
    v190 <- CallFunction v187, []
    v191 <- LoadBoolean 'true'
    v192 <- CallFunction v187, [v191]
    v193 <- CallFunction v187, []
EndPlainFunction
v194 <- CallFunction v165, []
v195 <- BeginPlainFunction -> 
    v196 <- LoadInteger '0'
    v197 <- CreateNamedVariable 'result', 'var', v196
    v198 <- BeginPlainFunction -> v199
        v200 <- BeginPlainFunction -> v201, v202, v203
            Update v197, '+', v202
            v204 <- LoadInteger '13'
            v205 <- Compare v202, '==', v204
            v206 <- BinaryOperation v205, '&&', v199
            BeginIf v206
            EndIf
        EndPlainFunction
        v207 <- CreateNamedVariable 'sum', 'var', v200
        v208 <- CallMethod v55, 'forEach', [v207]
    EndPlainFunction
    v209 <- CreateNamedVariable 'lazyDeopt', 'var', v198
    v210 <- CallFunction v209, []
    v211 <- CallFunction v209, []
    v212 <- CallFunction v209, []
    v213 <- LoadBoolean 'true'
    v214 <- CallFunction v209, [v213]
    v215 <- CallFunction v209, []
    v216 <- LoadInteger '1500'
EndPlainFunction
v217 <- CallFunction v195, []
v218 <- BeginPlainFunction -> 
    v219 <- LoadInteger '0'
    v220 <- CreateNamedVariable 'result', 'var', v219
    v221 <- BeginPlainFunction -> v222
        v223 <- BeginPlainFunction -> v224, v225, v226
            Update v220, '+', v225
            v227 <- LoadInteger '13'
            v228 <- Compare v225, '==', v227
            v229 <- BinaryOperation v228, '&&', v222
            BeginIf v229
            EndIf
        EndPlainFunction
        v230 <- CreateNamedVariable 'sum', 'var', v223
        v231 <- CallMethod v55, 'forEach', [v230]
    EndPlainFunction
    v232 <- CreateNamedVariable 'lazyDeopt', 'var', v221
    v233 <- CallFunction v232, []
    v234 <- CallFunction v232, []
    v235 <- CallFunction v232, []
    v236 <- LoadBoolean 'true'
    v237 <- CallFunction v232, [v236]
    v238 <- CallFunction v232, []
    v239 <- LoadInteger '1500'
EndPlainFunction
v240 <- CallFunction v218, []
v241 <- BeginPlainFunction -> 
    v242 <- LoadInteger '0'
    v243 <- CreateNamedVariable 'result', 'var', v242
    v244 <- BeginPlainFunction -> v245
        v246 <- BeginPlainFunction -> v247, v248, v249
            Update v243, '+', v248
            v250 <- LoadInteger '13'
            v251 <- Compare v248, '==', v250
            v252 <- BinaryOperation v251, '&&', v245
            BeginIf v252
                v253 <- CreateNamedVariable 'gc', 'none'
                v254 <- CallFunction v253, []
                v255 <- CallFunction v253, []
                v256 <- CallFunction v253, []
            EndIf
        EndPlainFunction
        v257 <- CreateNamedVariable 'sum', 'var', v246
        v258 <- CallMethod v82, 'forEach', [v257]
    EndPlainFunction
    v259 <- CreateNamedVariable 'lazyDeopt', 'var', v244
    v260 <- CallFunction v259, []
    v261 <- CallFunction v259, []
    v262 <- CallFunction v259, []
    v263 <- LoadBoolean 'true'
    v264 <- CallFunction v259, [v263]
    v265 <- CallFunction v259, []
    v266 <- LoadInteger '1500'
EndPlainFunction
v267 <- CallFunction v241, []
v268 <- BeginPlainFunction -> 
    v269 <- LoadBoolean 'false'
    v270 <- CreateNamedVariable 'caught', 'var', v269
    v271 <- LoadInteger '0'
    v272 <- CreateNamedVariable 'result', 'var', v271
    v273 <- BeginPlainFunction -> v274
        v275 <- BeginPlainFunction -> v276, v277, v278
            Update v272, '+', v277
            v279 <- LoadInteger '1'
            v280 <- Compare v277, '==', v279
            v281 <- BinaryOperation v280, '&&', v274
            BeginIf v281
                v282 <- LoadString 'a'
                ThrowException v282
            EndIf
        EndPlainFunction
        v283 <- CreateNamedVariable 'sum', 'var', v275
        BeginTry
            v284 <- CallMethod v82, 'forEach', [v283]
        BeginCatch -> v285
            v286 <- LoadBoolean 'true'
            Reassign v270, v286
        EndTryCatch
    EndPlainFunction
    v287 <- CreateNamedVariable 'lazyDeopt', 'var', v273
    v288 <- CallFunction v287, []
    v289 <- CallFunction v287, []
    v290 <- CallFunction v287, []
    v291 <- LoadThis
    v292 <- LoadBoolean 'true'
    v293 <- CallMethod v287, 'bind', [v291, v292]
    v294 <- CallFunction v287, []
EndPlainFunction
v295 <- CallFunction v268, []
v296 <- BeginPlainFunction -> 
    v297 <- LoadBoolean 'false'
    v298 <- CreateNamedVariable 'caught', 'var', v297
    v299 <- LoadInteger '0'
    v300 <- CreateNamedVariable 'result', 'var', v299
    v301 <- BeginPlainFunction -> v302
        v303 <- BeginPlainFunction -> v304, v305, v306
            Update v300, '+', v305
            v307 <- LoadInteger '1'
            v308 <- Compare v305, '==', v307
            v309 <- BinaryOperation v308, '&&', v302
            BeginIf v309
                v310 <- LoadString 'a'
                ThrowException v310
            EndIf
        EndPlainFunction
        v311 <- CreateNamedVariable 'sum', 'var', v303
        BeginTry
            v312 <- CallMethod v82, 'forEach', [v311]
        BeginCatch -> v313
            v314 <- LoadBoolean 'true'
            Reassign v298, v314
        EndTryCatch
    EndPlainFunction
    v315 <- CreateNamedVariable 'lazyDeopt', 'var', v301
    v316 <- CallFunction v315, []
    v317 <- CallFunction v315, []
    v318 <- CallFunction v315, []
    v319 <- LoadThis
    v320 <- LoadBoolean 'true'
    v321 <- CallMethod v315, 'bind', [v319, v320]
    v322 <- CallFunction v315, []
EndPlainFunction
v323 <- CallFunction v296, []
v324 <- BeginPlainFunction -> 
    v325 <- LoadInteger '1'
    v326 <- LoadInteger '2'
    v327 <- LoadInteger '3'
    v328 <- LoadInteger '4'
    v329 <- CreateArray [v325, v326, v327, v328]
    v330 <- CreateNamedVariable 'a', 'var', v329
    v331 <- BeginPlainFunction -> v332
        v333 <- BeginPlainFunction -> v334, v335, v336
            v337 <- CreateNamedVariable 'result', 'none'
            Update v337, '+', v334
            v338 <- LoadInteger '1'
            v339 <- Compare v335, '==', v338
            v340 <- BinaryOperation v339, '&&', v332
            BeginIf v340
                v341 <- LoadString 'some exception'
                ThrowException v341
            EndIf
        EndPlainFunction
        v342 <- CreateNamedVariable 'sum', 'var', v333
        v343 <- LoadInteger '0'
        v344 <- CreateNamedVariable 'result', 'var', v343
        BeginTry
            v345 <- CallMethod v330, 'forEach', [v342]
        BeginCatch -> v346
            v347 <- LoadString 'some exception'
            v348 <- LoadInteger '100'
            Update v344, '+', v348
        EndTryCatch
        Return v344
    EndPlainFunction
    v349 <- CreateNamedVariable 'lazyDeopt', 'var', v331
    v350 <- LoadInteger '10'
    v351 <- LoadBoolean 'false'
    v352 <- CallFunction v349, [v351]
    v353 <- LoadInteger '10'
    v354 <- LoadBoolean 'false'
    v355 <- CallFunction v349, [v354]
    v356 <- LoadInteger '103'
    v357 <- LoadBoolean 'true'
    v358 <- CallFunction v349, [v357]
    v359 <- LoadInteger '103'
    v360 <- LoadBoolean 'true'
    v361 <- CallFunction v349, [v360]
    v362 <- LoadInteger '10'
    v363 <- LoadBoolean 'false'
    v364 <- CallFunction v349, [v363]
    v365 <- LoadInteger '103'
    v366 <- LoadBoolean 'true'
    v367 <- CallFunction v349, [v366]
EndPlainFunction
v368 <- CallFunction v324, []
v369 <- BeginPlainFunction -> 
    v370 <- LoadRegExp 'Array\.forEach' ''
    v371 <- CreateNamedVariable 're', 'var', v370
    v372 <- BeginPlainFunction -> v373
        v374 <- LoadInteger '1'
        v375 <- LoadInteger '2'
        v376 <- LoadInteger '3'
        v377 <- CreateArray [v374, v375, v376]
        v378 <- CreateNamedVariable 'b', 'var', v377
        v379 <- LoadInteger '0'
        v380 <- CreateNamedVariable 'result', 'var', v379
        v381 <- BeginPlainFunction -> v382, v383, v384
            Update v380, '+', v382
            v385 <- LoadInteger '1'
            v386 <- Compare v383, '==', v385
            BeginIf v386
                v387 <- CreateNamedVariable 'Error', 'none'
                v388 <- Construct v387, []
                v389 <- CreateNamedVariable 'e', 'var', v388
                v390 <- GetProperty v389, 'stack'
                v391 <- CreateNamedVariable 'print', 'none'
                v392 <- CallFunction v391, [v390]
                v393 <- GetProperty v389, 'stack'
                v394 <- CallMethod v371, 'exec', [v393]
                v395 <- LoadNull
                v396 <- Compare v394, '!==', v395
            EndIf
        EndPlainFunction
        v397 <- CreateNamedVariable 'sum', 'var', v381
        v398 <- LoadInteger '1'
        v399 <- LoadInteger '2'
        v400 <- LoadInteger '3'
        v401 <- CreateArray [v398, v399, v400]
        v402 <- CreateNamedVariable 'o', 'var', v401
        v403 <- CallMethod v378, 'forEach', [v397]
    EndPlainFunction
    v404 <- CreateNamedVariable 'lazyDeopt', 'var', v372
    v405 <- CallFunction v404, []
    v406 <- CallFunction v404, []
    v407 <- CallFunction v404, []
EndPlainFunction
v408 <- CallFunction v369, []
v409 <- BeginPlainFunction -> 
    v410 <- LoadRegExp 'Array\.forEach' ''
    v411 <- CreateNamedVariable 're', 'var', v410
    v412 <- BeginPlainFunction -> v413
        v414 <- LoadInteger '1'
        v415 <- LoadInteger '2'
        v416 <- LoadInteger '3'
        v417 <- CreateArray [v414, v415, v416]
        v418 <- CreateNamedVariable 'b', 'var', v417
        v419 <- LoadInteger '0'
        v420 <- CreateNamedVariable 'result', 'var', v419
        v421 <- BeginPlainFunction -> v422, v423, v424
            Update v420, '+', v422
            v425 <- LoadInteger '1'
            v426 <- Compare v423, '==', v425
            BeginIf v426
                v427 <- CreateNamedVariable 'Error', 'none'
                v428 <- Construct v427, []
                v429 <- CreateNamedVariable 'e', 'var', v428
                v430 <- GetProperty v429, 'stack'
                v431 <- CallMethod v411, 'exec', [v430]
                v432 <- LoadNull
                v433 <- Compare v431, '!==', v432
            EndIf
        EndPlainFunction
        v434 <- CreateNamedVariable 'sum', 'var', v421
        v435 <- LoadInteger '1'
        v436 <- LoadInteger '2'
        v437 <- LoadInteger '3'
        v438 <- CreateArray [v435, v436, v437]
        v439 <- CreateNamedVariable 'o', 'var', v438
        v440 <- CallMethod v418, 'forEach', [v434]
    EndPlainFunction
    v441 <- CreateNamedVariable 'lazyDeopt', 'var', v412
    v442 <- CallFunction v441, []
    v443 <- CallFunction v441, []
    v444 <- CallFunction v441, []
EndPlainFunction
v445 <- CallFunction v409, []
v446 <- BeginPlainFunction -> 
    v447 <- LoadRegExp 'Array\.forEach' ''
    v448 <- CreateNamedVariable 're', 'var', v447
    v449 <- BeginPlainFunction -> v450
        v451 <- LoadInteger '1'
        v452 <- LoadInteger '2'
        v453 <- LoadInteger '3'
        v454 <- CreateArray [v451, v452, v453]
        v455 <- CreateNamedVariable 'b', 'var', v454
        v456 <- LoadInteger '0'
        v457 <- CreateNamedVariable 'result', 'var', v456
        v458 <- BeginPlainFunction -> v459, v460, v461
            Update v457, '+', v459
            v462 <- LoadInteger '1'
            v463 <- Compare v460, '==', v462
            BeginIf v463
            BeginElse
                v464 <- LoadInteger '2'
                v465 <- Compare v460, '==', v464
                BeginIf v465
                    v466 <- CreateNamedVariable 'Error', 'none'
                    v467 <- Construct v466, []
                    v468 <- CreateNamedVariable 'e', 'var', v467
                    v469 <- GetProperty v468, 'stack'
                    v470 <- CallMethod v448, 'exec', [v469]
                    v471 <- LoadNull
                    v472 <- Compare v470, '!==', v471
                EndIf
            EndIf
        EndPlainFunction
        v473 <- CreateNamedVariable 'sum', 'var', v458
        v474 <- LoadInteger '1'
        v475 <- LoadInteger '2'
        v476 <- LoadInteger '3'
        v477 <- CreateArray [v474, v475, v476]
        v478 <- CreateNamedVariable 'o', 'var', v477
        v479 <- CallMethod v455, 'forEach', [v473]
    EndPlainFunction
    v480 <- CreateNamedVariable 'lazyDeopt', 'var', v449
    v481 <- CallFunction v480, []
    v482 <- CallFunction v480, []
    v483 <- CallFunction v480, []
EndPlainFunction
v484 <- CallFunction v446, []
v485 <- BeginPlainFunction -> 
    v486 <- LoadRegExp 'Array\.forEach' ''
    v487 <- CreateNamedVariable 're', 'var', v486
    v488 <- LoadInteger '1'
    v489 <- LoadInteger '2'
    v490 <- LoadInteger '3'
    v491 <- CreateArray [v488, v489, v490]
    v492 <- CreateNamedVariable 'a', 'var', v491
    v493 <- LoadInteger '0'
    v494 <- CreateNamedVariable 'result', 'var', v493
    v495 <- BeginPlainFunction -> 
        v496 <- BeginPlainFunction -> v497, v498, v499
            Update v494, '+', v498
            v500 <- LoadInteger '1'
            v501 <- Compare v498, '==', v500
            BeginIf v501
                v502 <- CreateNamedVariable 'Error', 'none'
                v503 <- Construct v502, []
                ThrowException v503
            EndIf
        EndPlainFunction
        v504 <- CreateNamedVariable 'sum', 'var', v496
        v505 <- CallMethod v492, 'forEach', [v504]
    EndPlainFunction
    v506 <- CreateNamedVariable 'lazyDeopt', 'var', v495
    v507 <- BeginArrowFunction -> 
        v508 <- CallFunction v506, []
        Return v508
    EndArrowFunction
    v509 <- CallFunction v507, []
    v510 <- BeginArrowFunction -> 
        v511 <- CallFunction v506, []
        Return v511
    EndArrowFunction
    v512 <- CallFunction v510, []
    BeginTry
        v513 <- CallFunction v506, []
    BeginCatch -> v514
        v515 <- GetProperty v514, 'stack'
        v516 <- CallMethod v487, 'exec', [v515]
        v517 <- LoadNull
        v518 <- Compare v516, '!==', v517
    EndTryCatch
    BeginTry
        v519 <- CallFunction v506, []
    BeginCatch -> v520
        v521 <- GetProperty v520, 'stack'
        v522 <- CallMethod v487, 'exec', [v521]
        v523 <- LoadNull
        v524 <- Compare v522, '!==', v523
    EndTryCatch
EndPlainFunction
v525 <- CallFunction v485, []
v526 <- BeginArrowFunction -> 
    v527 <- LoadInteger '1'
    v528 <- LoadInteger '2'
    v529 <- LoadUndefined
    v530 <- LoadInteger '3'
    v531 <- LoadInteger '4'
    v532 <- CreateArray [v527, v528, v529, v530, v531]
    v533 <- CreateNamedVariable 'a', 'const', v532
    v534 <- BeginPlainFunction -> 
        v535 <- CreateArray []
        v536 <- CreateNamedVariable 'callback_values', 'const', v535
        v537 <- BeginArrowFunction -> v538
            v539 <- CallMethod v536, 'push', [v538]
        EndArrowFunction
        v540 <- CallMethod v533, 'forEach', [v537]
        Return v536
    EndPlainFunction
    v541 <- CallFunction v534, []
    v542 <- CallFunction v534, []
    v543 <- LoadInteger '1'
    v544 <- LoadInteger '2'
    v545 <- LoadInteger '3'
    v546 <- LoadInteger '4'
    v547 <- CreateArray [v543, v544, v545, v546]
    v548 <- CallFunction v534, []
EndArrowFunction
v549 <- CallFunction v526, []
v550 <- BeginArrowFunction -> 
    v551 <- LoadFloat '1.5'
    v552 <- LoadFloat '2.5'
    v553 <- LoadUndefined
    v554 <- LoadFloat '3.5'
    v555 <- LoadFloat '4.5'
    v556 <- CreateArray [v551, v552, v553, v554, v555]
    v557 <- CreateNamedVariable 'a', 'const', v556
    v558 <- BeginPlainFunction -> 
        v559 <- CreateArray []
        v560 <- CreateNamedVariable 'callback_values', 'const', v559
        v561 <- BeginArrowFunction -> v562
            v563 <- CallMethod v560, 'push', [v562]
        EndArrowFunction
        v564 <- CallMethod v557, 'forEach', [v561]
        Return v560
    EndPlainFunction
    v565 <- CallFunction v558, []
    v566 <- CallFunction v558, []
    v567 <- LoadFloat '1.5'
    v568 <- LoadFloat '2.5'
    v569 <- LoadFloat '3.5'
    v570 <- LoadFloat '4.5'
    v571 <- CreateArray [v567, v568, v569, v570]
    v572 <- CallFunction v558, []
EndArrowFunction
v573 <- CallFunction v550, []
v574 <- BeginArrowFunction -> 
    v575 <- BeginPlainFunction -> v576, v577
        BeginIf v577
            v578 <- LoadInteger '3'
            SetProperty v576, 'foo', v578
        EndIf
        Return v576
    EndPlainFunction
    v579 <- BeginPlainFunction -> v580, v581
        v582 <- LoadInteger '0'
        v583 <- CreateNamedVariable 'sum', 'let', v582
        v584 <- BeginArrowFunction -> v585
            Update v583, '+', v585
            Return v585
        EndArrowFunction
        v586 <- CallFunction v575, [v580, v581]
        v587 <- CallMethod v580, 'forEach', [v584, v586]
        Return v587
    EndPlainFunction
    v588 <- LoadInteger '1'
    v589 <- LoadInteger '2'
    v590 <- LoadInteger '3'
    v591 <- CreateArray [v588, v589, v590]
    v592 <- CreateNamedVariable 'a', 'let', v591
    v593 <- LoadBoolean 'false'
    v594 <- CallFunction v579, [v592, v593]
    v595 <- LoadBoolean 'false'
    v596 <- CallFunction v579, [v592, v595]
    v597 <- LoadBoolean 'false'
    v598 <- CallFunction v579, [v592, v597]
    v599 <- LoadBoolean 'true'
    v600 <- CallFunction v579, [v592, v599]
EndArrowFunction
v601 <- CallFunction v574, []


var a = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0,0];
var b = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
var c = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
function f83() {
    var result = 0;
    function f86(a87) {
        function f88(a89, a90, a91) {
            result += a89;
            if ((a90 == 13) && a87) {
                a.abc = 25;
            }
        }
        var sum = f88;
        a.forEach(sum);
    }
    var eagerDeoptInCalled = f86;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f83();
function f107() {
    var result = 0;
    function f110(a111) {
        function f112(a113, a114, a115) {
            result += a113;
            a.length = (a114 == 13) && a111 ? 25 : 27;
        }
        var sum = f112;
        a.forEach(sum);
    }
    var eagerDeoptInCalled = f110;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f107();
function f133() {
    var result = 0;
    function f136(a137) {
        var a_noescape = [0,1,2,3,4,5];
        function f146(a147, a148, a149) {
            result += a147;
            if ((a148 == 13) && a137) {
                a_noescape.length = 25;
            }
        }
        var sum = f146;
        a_noescape.forEach(sum);
    }
    var eagerDeoptInCalled = f136;
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
}
f133();
function f165() {
    var result = 0;
    function f168(a169) {
        var b = [1,2,3];
        function f175(a176, a177, a178) {
            result += a177;
            if ((a177 == 1) && a169) {
            }
            gc();
            gc();
        }
        var sum = f175;
        b.forEach(sum);
    }
    var lazyDeopt = f168;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f165();
function f195() {
    var result = 0;
    function f198(a199) {
        function f200(a201, a202, a203) {
            result += a202;
            if ((a202 == 13) && a199) {
            }
        }
        var sum = f200;
        b.forEach(sum);
    }
    var lazyDeopt = f198;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f195();
function f218() {
    var result = 0;
    function f221(a222) {
        function f223(a224, a225, a226) {
            result += a225;
            if ((a225 == 13) && a222) {
            }
        }
        var sum = f223;
        b.forEach(sum);
    }
    var lazyDeopt = f221;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f218();
function f241() {
    var result = 0;
    function f244(a245) {
        function f246(a247, a248, a249) {
            result += a248;
            if ((a248 == 13) && a245) {
                gc();
                gc();
                gc();
            }
        }
        var sum = f246;
        c.forEach(sum);
    }
    var lazyDeopt = f244;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
}
f241();
function f268() {
    var caught = false;
    var result = 0;
    function f273(a274) {
        function f275(a276, a277, a278) {
            result += a277;
            if ((a277 == 1) && a274) {
                throw "a";
            }
        }
        var sum = f275;
        try {
            c.forEach(sum);
        } catch(e285) {
            caught = true;
        }
    }
    var lazyDeopt = f273;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt.bind(this, true);
    lazyDeopt();
}
f268();
function f296() {
    var caught = false;
    var result = 0;
    function f301(a302) {
        function f303(a304, a305, a306) {
            result += a305;
            if ((a305 == 1) && a302) {
                throw "a";
            }
        }
        var sum = f303;
        try {
            c.forEach(sum);
        } catch(e313) {
            caught = true;
        }
    }
    var lazyDeopt = f301;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt.bind(this, true);
    lazyDeopt();
}
f296();
function TestThrowIntoDeoptimizedOuter() {
    var a = [1,2,3,4];
    function f331(a332) {
        function f333(a334, a335, a336) {
            result += a334;
            if ((a335 == 1) && a332) {
                throw "some exception";
            }
        }
        var sum = f333;
        var result = 0;
        try {
            a.forEach(sum);
        } catch(e346) {
            result += 100;
        }
        return result;
    }
    var lazyDeopt = f331;
    lazyDeopt(false);
    lazyDeopt(false);
    lazyDeopt(true);
    lazyDeopt(true);
    lazyDeopt(false);
    lazyDeopt(true);
}
TestThrowIntoDeoptimizedOuter();
function f369() {
    var re = /Array\.forEach/;
    function foobar(a373) {
        var b = [1,2,3];
        var result = 0;
        function f381(a382, a383, a384) {
            result += a382;
            if (a383 == 1) {
                const v388 = new Error();
                var e = v388;
                print(e.stack);
                re.exec(e.stack) !== null;
            }
        }
        var sum = f381;
        var o = [1,2,3];
        b.forEach(sum);
    }
    var lazyDeopt = foobar;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f369();
function f409() {
    var re = /Array\.forEach/;
    function f412(a413) {
        var b = [1,2,3];
        var result = 0;
        function f421(a422, a423, a424) {
            result += a422;
            if (a423 == 1) {
                const v428 = new Error();
                var e = v428;
                re.exec(e.stack) !== null;
            }
        }
        var sum = f421;
        var o = [1,2,3];
        b.forEach(sum);
    }
    var lazyDeopt = f412;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f409();
function f446() {
    var re = /Array\.forEach/;
    function f449(a450) {
        var b = [1,2,3];
        var result = 0;
        function f458(a459, a460, a461) {
            result += a459;
            if (a460 == 1) {
            } else {
                if (a460 == 2) {
                    const v467 = new Error();
                    var e = v467;
                    re.exec(e.stack) !== null;
                }
            }
        }
        var sum = f458;
        var o = [1,2,3];
        b.forEach(sum);
    }
    var lazyDeopt = f449;
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
}
f446();
function f485() {
    var re = /Array\.forEach/;
    var a = [1,2,3];
    var result = 0;
    function f495() {
        function f496(a497, a498, a499) {
            result += a498;
            if (a498 == 1) {
                const v503 = new Error();
                throw v503;
            }
        }
        var sum = f496;
        a.forEach(sum);
    }
    var lazyDeopt = f495;
    const v507 = () => {
        return lazyDeopt();
    };
    v507();
    const v510 = () => {
        return lazyDeopt();
    };
    v510();
    try {
        lazyDeopt();
    } catch(e514) {
        re.exec(e514.stack) !== null;
    }
    try {
        lazyDeopt();
    } catch(e520) {
        re.exec(e520.stack) !== null;
    }
}
f485();
const v526 = () => {
    const a = [1,2,,3,4];
    function withHoles() {
        const callback_values = [];
        const v537 = (a538) => {
            callback_values.push(a538);
        };
        a.forEach(v537);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1,2,3,4];
    withHoles();
};
v526();
const v550 = () => {
    const a = [1.5,2.5,,3.5,4.5];
    function withHoles() {
        const callback_values = [];
        const v561 = (a562) => {
            callback_values.push(a562);
        };
        a.forEach(v561);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1.5,2.5,3.5,4.5];
    withHoles();
};
v550();
const v574 = () => {
    function side_effect(a576, a577) {
        if (a577) {
            a576.foo = 3;
        }
        return a576;
    }
    function unreliable(a580, a581) {
        let sum = 0;
        const v584 = (a585) => {
            sum += a585;
            return a585;
        };
        return a580.forEach(v584, side_effect(a580, a581));
    }
    let a = [1,2,3];
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, true);
};
v574();

FuzzIL program written to corpus/optimized-foreach.fzil
