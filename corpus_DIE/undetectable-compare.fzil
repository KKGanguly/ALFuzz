v0 <- BeginPlainFunction -> 
EndPlainFunction
v1 <- CreateNamedVariable 'undetectable', 'var', v0
v2 <- LoadBoolean 'true'
v3 <- LoadBoolean 'false'
v4 <- LoadBoolean 'false'
v5 <- LoadBoolean 'false'
v6 <- LoadNull
v7 <- LoadBoolean 'true'
v8 <- LoadInteger '0'
v9 <- Void_ v8
v10 <- LoadBoolean 'true'
v11 <- LoadInteger '0'
v12 <- LoadBoolean 'false'
v13 <- LoadInteger '0'
v14 <- LoadBoolean 'false'
v15 <- LoadInteger '0'
v16 <- UnaryOperation '-', v15
v17 <- LoadBoolean 'false'
v18 <- LoadString ''
v19 <- LoadBoolean 'false'
v20 <- LoadInteger '1'
v21 <- UnaryOperation '-', v20
v22 <- LoadBoolean 'false'
v23 <- LoadFloat '1.25'
v24 <- UnaryOperation '-', v23
v25 <- LoadBoolean 'false'
v26 <- LoadInteger '1'
v27 <- LoadBoolean 'false'
v28 <- LoadFloat '1.25'
v29 <- LoadBoolean 'false'
v30 <- LoadInteger '2147483648'
v31 <- UnaryOperation '-', v30
v32 <- LoadBoolean 'false'
v33 <- LoadInteger '2147483648'
v34 <- LoadBoolean 'false'
v35 <- CreateNamedVariable 'Infinity', 'none'
v36 <- LoadBoolean 'false'
v37 <- UnaryOperation '-', v35
v38 <- LoadBoolean 'false'
v39 <- CreateNamedVariable 'NaN', 'none'
v40 <- LoadBoolean 'false'
v41 <- CreateArray [v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v16, v17, v18, v19, v21, v22, v24, v25, v26, v27, v28, v29, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40]
v42 <- CreateNamedVariable 'tests', 'var', v41
v43 <- BeginPlainFunction -> v44
    v45 <- Compare v44, '==', v1
    Return v45
EndPlainFunction
v46 <- CreateNamedVariable 'func', 'var', v43
v47 <- BeginPlainFunction -> 
    v48 <- LoadBoolean 'true'
    v49 <- Compare v48, '==', v1
    Return v49
EndPlainFunction
v50 <- BeginPlainFunction -> 
    v51 <- LoadBoolean 'false'
    v52 <- Compare v51, '==', v1
    Return v52
EndPlainFunction
v53 <- BeginPlainFunction -> 
    v54 <- LoadNull
    v55 <- Compare v54, '==', v1
    Return v55
EndPlainFunction
v56 <- BeginPlainFunction -> 
    v57 <- LoadInteger '0'
    v58 <- Void_ v57
    v59 <- Compare v58, '==', v1
    Return v59
EndPlainFunction
v60 <- BeginPlainFunction -> 
    v61 <- LoadInteger '0'
    v62 <- Compare v61, '==', v1
    Return v62
EndPlainFunction
v63 <- BeginPlainFunction -> 
    v64 <- LoadInteger '0'
    v65 <- Compare v64, '==', v1
    Return v65
EndPlainFunction
v66 <- BeginPlainFunction -> 
    v67 <- LoadInteger '0'
    v68 <- UnaryOperation '-', v67
    v69 <- Compare v68, '==', v1
    Return v69
EndPlainFunction
v70 <- BeginPlainFunction -> 
    v71 <- LoadString ''
    v72 <- Compare v71, '==', v1
    Return v72
EndPlainFunction
v73 <- BeginPlainFunction -> 
    v74 <- LoadInteger '1'
    v75 <- UnaryOperation '-', v74
    v76 <- Compare v75, '==', v1
    Return v76
EndPlainFunction
v77 <- BeginPlainFunction -> 
    v78 <- LoadFloat '1.25'
    v79 <- UnaryOperation '-', v78
    v80 <- Compare v79, '==', v1
    Return v80
EndPlainFunction
v81 <- BeginPlainFunction -> 
    v82 <- LoadInteger '1'
    v83 <- Compare v82, '==', v1
    Return v83
EndPlainFunction
v84 <- BeginPlainFunction -> 
    v85 <- LoadFloat '1.25'
    v86 <- Compare v85, '==', v1
    Return v86
EndPlainFunction
v87 <- BeginPlainFunction -> 
    v88 <- LoadInteger '2147483648'
    v89 <- UnaryOperation '-', v88
    v90 <- Compare v89, '==', v1
    Return v90
EndPlainFunction
v91 <- BeginPlainFunction -> 
    v92 <- LoadInteger '2147483648'
    v93 <- Compare v92, '==', v1
    Return v93
EndPlainFunction
v94 <- BeginPlainFunction -> 
    v95 <- Compare v35, '==', v1
    Return v95
EndPlainFunction
v96 <- BeginPlainFunction -> 
    v97 <- UnaryOperation '-', v35
    v98 <- Compare v97, '==', v1
    Return v98
EndPlainFunction
v99 <- BeginPlainFunction -> 
    v100 <- Compare v39, '==', v1
    Return v100
EndPlainFunction
v101 <- CreateArray [v47, v50, v53, v56, v60, v63, v66, v70, v73, v77, v81, v84, v87, v91, v94, v96, v99]
v102 <- CreateNamedVariable 'left_funcs', 'var', v101
v103 <- BeginPlainFunction -> 
    v104 <- LoadBoolean 'true'
    v105 <- Compare v1, '==', v104
    Return v105
EndPlainFunction
v106 <- BeginPlainFunction -> 
    v107 <- LoadBoolean 'false'
    v108 <- Compare v1, '==', v107
    Return v108
EndPlainFunction
v109 <- BeginPlainFunction -> 
    v110 <- LoadNull
    v111 <- Compare v1, '==', v110
    Return v111
EndPlainFunction
v112 <- BeginPlainFunction -> 
    v113 <- LoadInteger '0'
    v114 <- Void_ v113
    v115 <- Compare v1, '==', v114
    Return v115
EndPlainFunction
v116 <- BeginPlainFunction -> 
    v117 <- LoadInteger '0'
    v118 <- Compare v1, '==', v117
    Return v118
EndPlainFunction
v119 <- BeginPlainFunction -> 
    v120 <- LoadInteger '0'
    v121 <- Compare v1, '==', v120
    Return v121
EndPlainFunction
v122 <- BeginPlainFunction -> 
    v123 <- LoadInteger '0'
    v124 <- UnaryOperation '-', v123
    v125 <- Compare v1, '==', v124
    Return v125
EndPlainFunction
v126 <- BeginPlainFunction -> 
    v127 <- LoadString ''
    v128 <- Compare v1, '==', v127
    Return v128
EndPlainFunction
v129 <- BeginPlainFunction -> 
    v130 <- LoadInteger '1'
    v131 <- UnaryOperation '-', v130
    v132 <- Compare v1, '==', v131
    Return v132
EndPlainFunction
v133 <- BeginPlainFunction -> 
    v134 <- LoadFloat '1.25'
    v135 <- UnaryOperation '-', v134
    v136 <- Compare v1, '==', v135
    Return v136
EndPlainFunction
v137 <- BeginPlainFunction -> 
    v138 <- LoadInteger '1'
    v139 <- Compare v1, '==', v138
    Return v139
EndPlainFunction
v140 <- BeginPlainFunction -> 
    v141 <- LoadFloat '1.25'
    v142 <- Compare v1, '==', v141
    Return v142
EndPlainFunction
v143 <- BeginPlainFunction -> 
    v144 <- LoadInteger '2147483648'
    v145 <- UnaryOperation '-', v144
    v146 <- Compare v1, '==', v145
    Return v146
EndPlainFunction
v147 <- BeginPlainFunction -> 
    v148 <- LoadInteger '2147483648'
    v149 <- Compare v1, '==', v148
    Return v149
EndPlainFunction
v150 <- BeginPlainFunction -> 
    v151 <- Compare v1, '==', v35
    Return v151
EndPlainFunction
v152 <- BeginPlainFunction -> 
    v153 <- UnaryOperation '-', v35
    v154 <- Compare v1, '==', v153
    Return v154
EndPlainFunction
v155 <- BeginPlainFunction -> 
    v156 <- Compare v1, '==', v39
    Return v156
EndPlainFunction
v157 <- CreateArray [v103, v106, v109, v112, v116, v119, v122, v126, v129, v133, v137, v140, v143, v147, v150, v152, v155]
v158 <- CreateNamedVariable 'right_funcs', 'var', v157
v159 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v160 <- LoadInteger '0'
    BeginForLoopCondition -> v161
        v162 <- GetProperty v42, 'length'
        v163 <- Compare v161, '<', v162
    BeginForLoopAfterthought v163 -> v164
        v165 <- LoadInteger '2'
        Update v164, '+', v165
    BeginForLoopBody -> v166
        v167 <- GetComputedProperty v42, v166
        v168 <- CreateNamedVariable 'val', 'var', v167
        v169 <- LoadInteger '1'
        v170 <- BinaryOperation v166, '+', v169
        v171 <- GetComputedProperty v42, v170
        v172 <- CreateNamedVariable 'eq', 'var', v171
        v173 <- CallFunction v172, []
        v174 <- Compare v168, '==', v1
        v175 <- CallFunction v172, []
        v176 <- Compare v1, '==', v168
        v177 <- Compare v168, '===', v1
        v178 <- Compare v1, '===', v168
        v179 <- CallFunction v172, []
        v180 <- LoadInteger '2'
        v181 <- BinaryOperation v166, '/', v180
        v182 <- CallComputedMethod v102, v181, []
        v183 <- CallFunction v172, []
        v184 <- LoadInteger '2'
        v185 <- BinaryOperation v166, '/', v184
        v186 <- CallComputedMethod v158, v185, []
    EndForLoop
    v187 <- Compare v1, '==', v1
    v188 <- Compare v1, '===', v1
EndPlainFunction
BeginForLoopInitializer
    v189 <- LoadInteger '0'
BeginForLoopCondition -> v190
    v191 <- LoadInteger '5'
    v192 <- Compare v190, '<', v191
BeginForLoopAfterthought v192 -> v193
    v194 <- UnaryOperation v193, '++'
BeginForLoopBody -> v195
    v196 <- CallFunction v159, []
EndForLoop
v197 <- BeginPlainFunction -> 
EndPlainFunction
v198 <- Compare v1, '==', v197
v199 <- BeginPlainFunction -> 
EndPlainFunction
v200 <- Compare v1, '===', v199
v201 <- BeginPlainFunction -> v202, v203
    v204 <- Compare v202, '==', v203
    Return v204
EndPlainFunction
v205 <- LoadInteger '0'
v206 <- LoadInteger '1'
v207 <- CallFunction v201, [v205, v206]
BeginObjectLiteral
v208 <- EndObjectLiteral
v209 <- CallFunction v201, [v1, v208]
BeginForLoopInitializer
    v210 <- LoadInteger '0'
BeginForLoopCondition -> v211
    v212 <- LoadInteger '5'
    v213 <- Compare v211, '<', v212
BeginForLoopAfterthought v213 -> v214
    v215 <- UnaryOperation '++', v214
BeginForLoopBody -> v216
    v217 <- BeginPlainFunction -> 
    EndPlainFunction
    v218 <- CallFunction v201, [v1, v217]
EndForLoop


function f0() {
}
var undetectable = f0;
var tests = [true,false,false,false,null,true,void 0,true,0,false,0,false,-0,false,"",false,-1,false,-1.25,false,1,false,1.25,false,-2147483648,false,2147483648,false,Infinity,false,-Infinity,false,NaN,false];
function eq(a44) {
    return a44 == undetectable;
}
var func = eq;
function eq_L0() {
    return true == undetectable;
}
function eq_L1() {
    return false == undetectable;
}
function eq_L2() {
    return null == undetectable;
}
function eq_L3() {
    return void 0 == undetectable;
}
function eq_L4() {
    return 0 == undetectable;
}
function eq_L5() {
    return 0 == undetectable;
}
function eq_L6() {
    return -0 == undetectable;
}
function eq_L7() {
    return "" == undetectable;
}
function eq_L8() {
    return -1 == undetectable;
}
function eq_L9() {
    return -1.25 == undetectable;
}
function eq_L10() {
    return 1 == undetectable;
}
function eq_L11() {
    return 1.25 == undetectable;
}
function eq_L12() {
    return -2147483648 == undetectable;
}
function eq_L13() {
    return 2147483648 == undetectable;
}
function eq_L14() {
    return Infinity == undetectable;
}
function eq_L15() {
    return -Infinity == undetectable;
}
function eq_L16() {
    return NaN == undetectable;
}
var left_funcs = [eq_L0,eq_L1,eq_L2,eq_L3,eq_L4,eq_L5,eq_L6,eq_L7,eq_L8,eq_L9,eq_L10,eq_L11,eq_L12,eq_L13,eq_L14,eq_L15,eq_L16];
function eq_R0() {
    return undetectable == true;
}
function eq_R1() {
    return undetectable == false;
}
function eq_R2() {
    return undetectable == null;
}
function eq_R3() {
    return undetectable == void 0;
}
function eq_R4() {
    return undetectable == 0;
}
function eq_R5() {
    return undetectable == 0;
}
function eq_R6() {
    return undetectable == -0;
}
function eq_R7() {
    return undetectable == "";
}
function eq_R8() {
    return undetectable == -1;
}
function eq_R9() {
    return undetectable == -1.25;
}
function eq_R10() {
    return undetectable == 1;
}
function eq_R11() {
    return undetectable == 1.25;
}
function eq_R12() {
    return undetectable == -2147483648;
}
function eq_R13() {
    return undetectable == 2147483648;
}
function eq_R14() {
    return undetectable == Infinity;
}
function eq_R15() {
    return undetectable == -Infinity;
}
function eq_R16() {
    return undetectable == NaN;
}
var right_funcs = [eq_R0,eq_R1,eq_R2,eq_R3,eq_R4,eq_R5,eq_R6,eq_R7,eq_R8,eq_R9,eq_R10,eq_R11,eq_R12,eq_R13,eq_R14,eq_R15,eq_R16];
function test() {
    for (let i161 = 0; i161 < tests.length; i161 += 2) {
        var val = tests[i161];
        var eq = tests[i161 + 1];
        eq();
        val == undetectable;
        eq();
        undetectable == val;
        val === undetectable;
        undetectable === val;
        eq();
        left_funcs[i161 / 2]();
        eq();
        right_funcs[i161 / 2]();
    }
    undetectable == undetectable;
    undetectable === undetectable;
}
for (let i190 = 0; i190 < 5; i190++) {
    test();
}
function f197() {
}
undetectable == f197;
function f199() {
}
undetectable === f199;
function test2(a202, a203) {
    return a202 == a203;
}
test2(0, 1);
test2(undetectable, {});
for (let i211 = 0; i211 < 5; ++i211) {
    function f217() {
    }
    test2(undetectable, f217);
}

FuzzIL program written to corpus/undetectable-compare.fzil
