v0 <- BeginPlainFunction -> v1, v2
    BeginForLoopInitializer
        v3 <- LoadInteger '0'
    BeginForLoopCondition -> v4
        v5 <- GetProperty v2, 'length'
        v6 <- Compare v4, '<', v5
    BeginForLoopAfterthought v6 -> v7
        v8 <- UnaryOperation v7, '++'
    BeginForLoopBody -> v9
        v10 <- GetComputedProperty v2, v9
        v11 <- GetComputedProperty v2, v9
        v12 <- GetComputedProperty v1, v11
        v13 <- GetProperty v12, 'name'
    EndForLoop
EndPlainFunction
v14 <- LoadString 'toString'
v15 <- LoadString 'toLocaleString'
v16 <- LoadString 'join'
v17 <- LoadString 'pop'
v18 <- LoadString 'push'
v19 <- LoadString 'concat'
v20 <- LoadString 'reverse'
v21 <- LoadString 'shift'
v22 <- LoadString 'unshift'
v23 <- LoadString 'slice'
v24 <- LoadString 'splice'
v25 <- LoadString 'sort'
v26 <- LoadString 'filter'
v27 <- LoadString 'forEach'
v28 <- LoadString 'some'
v29 <- LoadString 'every'
v30 <- LoadString 'map'
v31 <- LoadString 'indexOf'
v32 <- LoadString 'lastIndexOf'
v33 <- CreateArray [v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32]
v34 <- CreateNamedVariable 'arrayPrototypeFunctions', 'var', v33
v35 <- CreateNamedVariable 'Array', 'none'
v36 <- GetProperty v35, 'prototype'
v37 <- CallFunction v0, [v36, v34]
v38 <- LoadString 'toString'
v39 <- LoadString 'valueOf'
v40 <- CreateArray [v38, v39]
v41 <- CreateNamedVariable 'booleanPrototypeFunctions', 'var', v40
v42 <- CreateNamedVariable 'Boolean', 'none'
v43 <- GetProperty v42, 'prototype'
v44 <- CallFunction v0, [v43, v41]
v45 <- LoadString 'UTC'
v46 <- LoadString 'parse'
v47 <- LoadString 'now'
v48 <- CreateArray [v45, v46, v47]
v49 <- CreateNamedVariable 'dateFunctions', 'var', v48
v50 <- CreateNamedVariable 'Date', 'none'
v51 <- CallFunction v0, [v50, v49]
v52 <- LoadString 'toString'
v53 <- LoadString 'toDateString'
v54 <- LoadString 'toTimeString'
v55 <- LoadString 'toLocaleString'
v56 <- LoadString 'toLocaleDateString'
v57 <- LoadString 'toLocaleTimeString'
v58 <- LoadString 'valueOf'
v59 <- LoadString 'getTime'
v60 <- LoadString 'getFullYear'
v61 <- LoadString 'getUTCFullYear'
v62 <- LoadString 'getMonth'
v63 <- LoadString 'getUTCMonth'
v64 <- LoadString 'getDate'
v65 <- LoadString 'getUTCDate'
v66 <- LoadString 'getDay'
v67 <- LoadString 'getUTCDay'
v68 <- LoadString 'getHours'
v69 <- LoadString 'getUTCHours'
v70 <- LoadString 'getMinutes'
v71 <- LoadString 'getUTCMinutes'
v72 <- LoadString 'getSeconds'
v73 <- LoadString 'getUTCSeconds'
v74 <- LoadString 'getMilliseconds'
v75 <- LoadString 'getUTCMilliseconds'
v76 <- LoadString 'getTimezoneOffset'
v77 <- LoadString 'setTime'
v78 <- LoadString 'setMilliseconds'
v79 <- LoadString 'setUTCMilliseconds'
v80 <- LoadString 'setSeconds'
v81 <- LoadString 'setUTCSeconds'
v82 <- LoadString 'setMinutes'
v83 <- LoadString 'setUTCMinutes'
v84 <- LoadString 'setHours'
v85 <- LoadString 'setUTCHours'
v86 <- LoadString 'setDate'
v87 <- LoadString 'setUTCDate'
v88 <- LoadString 'setMonth'
v89 <- LoadString 'setUTCMonth'
v90 <- LoadString 'setFullYear'
v91 <- LoadString 'setUTCFullYear'
v92 <- LoadString 'toUTCString'
v93 <- LoadString 'getYear'
v94 <- LoadString 'setYear'
v95 <- CreateArray [v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94]
v96 <- CreateNamedVariable 'datePrototypeFunctions', 'var', v95
v97 <- GetProperty v50, 'prototype'
v98 <- CallFunction v0, [v97, v96]
v99 <- GetProperty v50, 'prototype'
v100 <- CallMethod v99, 'toGMTString', []
v101 <- GetProperty v50, 'prototype'
v102 <- GetProperty v101, 'toUTCString'
v103 <- LoadString 'toString'
v104 <- LoadString 'apply'
v105 <- LoadString 'call'
v106 <- CreateArray [v103, v104, v105]
v107 <- CreateNamedVariable 'functionPrototypeFunctions', 'var', v106
v108 <- CreateNamedVariable 'Function', 'none'
v109 <- GetProperty v108, 'prototype'
v110 <- CallFunction v0, [v109, v107]
v111 <- LoadString 'random'
v112 <- LoadString 'abs'
v113 <- LoadString 'acos'
v114 <- LoadString 'asin'
v115 <- LoadString 'atan'
v116 <- LoadString 'ceil'
v117 <- LoadString 'cos'
v118 <- LoadString 'exp'
v119 <- LoadString 'floor'
v120 <- LoadString 'log'
v121 <- LoadString 'round'
v122 <- LoadString 'sin'
v123 <- LoadString 'sqrt'
v124 <- LoadString 'tan'
v125 <- LoadString 'atan2'
v126 <- LoadString 'pow'
v127 <- LoadString 'max'
v128 <- LoadString 'min'
v129 <- CreateArray [v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128]
v130 <- CreateNamedVariable 'mathFunctions', 'var', v129
v131 <- CreateNamedVariable 'Math', 'none'
v132 <- CallFunction v0, [v131, v130]
v133 <- LoadString 'toString'
v134 <- LoadString 'toLocaleString'
v135 <- LoadString 'valueOf'
v136 <- LoadString 'toFixed'
v137 <- LoadString 'toExponential'
v138 <- LoadString 'toPrecision'
v139 <- CreateArray [v133, v134, v135, v136, v137, v138]
v140 <- CreateNamedVariable 'numberPrototypeFunctions', 'var', v139
v141 <- CreateNamedVariable 'Number', 'none'
v142 <- GetProperty v141, 'prototype'
v143 <- CallFunction v0, [v142, v140]
v144 <- LoadString 'toString'
v145 <- LoadString 'toLocaleString'
v146 <- LoadString 'valueOf'
v147 <- LoadString 'hasOwnProperty'
v148 <- LoadString 'isPrototypeOf'
v149 <- LoadString 'propertyIsEnumerable'
v150 <- LoadString '__defineGetter__'
v151 <- LoadString '__lookupGetter__'
v152 <- LoadString '__defineSetter__'
v153 <- LoadString '__lookupSetter__'
v154 <- CreateArray [v144, v145, v146, v147, v148, v149, v150, v151, v152, v153]
v155 <- CreateNamedVariable 'objectPrototypeFunctions', 'var', v154
v156 <- CreateNamedVariable 'Object', 'none'
v157 <- GetProperty v156, 'prototype'
v158 <- CallFunction v0, [v157, v155]
v159 <- LoadString 'exec'
v160 <- LoadString 'test'
v161 <- LoadString 'toString'
v162 <- LoadString 'compile'
v163 <- CreateArray [v159, v160, v161, v162]
v164 <- CreateNamedVariable 'regExpPrototypeFunctions', 'var', v163
v165 <- CreateNamedVariable 'RegExp', 'none'
v166 <- GetProperty v165, 'prototype'
v167 <- CallFunction v0, [v166, v164]
v168 <- LoadString 'fromCharCode'
v169 <- CreateArray [v168]
v170 <- CreateNamedVariable 'stringFunctions', 'var', v169
v171 <- CreateNamedVariable 'String', 'none'
v172 <- CallFunction v0, [v171, v170]
v173 <- LoadString 'toString'
v174 <- LoadString 'valueOf'
v175 <- LoadString 'charAt'
v176 <- LoadString 'charCodeAt'
v177 <- LoadString 'concat'
v178 <- LoadString 'indexOf'
v179 <- LoadString 'lastIndexOf'
v180 <- LoadString 'localeCompare'
v181 <- LoadString 'match'
v182 <- LoadString 'replace'
v183 <- LoadString 'search'
v184 <- LoadString 'slice'
v185 <- LoadString 'split'
v186 <- LoadString 'substring'
v187 <- LoadString 'substr'
v188 <- LoadString 'toLowerCase'
v189 <- LoadString 'toLocaleLowerCase'
v190 <- LoadString 'toUpperCase'
v191 <- LoadString 'toLocaleUpperCase'
v192 <- LoadString 'link'
v193 <- LoadString 'anchor'
v194 <- LoadString 'fontcolor'
v195 <- LoadString 'fontsize'
v196 <- LoadString 'big'
v197 <- LoadString 'blink'
v198 <- LoadString 'bold'
v199 <- LoadString 'fixed'
v200 <- LoadString 'italics'
v201 <- LoadString 'small'
v202 <- LoadString 'strike'
v203 <- LoadString 'sub'
v204 <- LoadString 'sup'
v205 <- CreateArray [v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204]
v206 <- CreateNamedVariable 'stringPrototypeFunctions', 'var', v205
v207 <- GetProperty v171, 'prototype'
v208 <- CallFunction v0, [v207, v206]
v209 <- LoadString 'escape'
v210 <- LoadString 'unescape'
v211 <- LoadString 'decodeURI'
v212 <- LoadString 'decodeURIComponent'
v213 <- LoadString 'encodeURI'
v214 <- LoadString 'encodeURIComponent'
v215 <- LoadString 'Error'
v216 <- LoadString 'TypeError'
v217 <- LoadString 'RangeError'
v218 <- LoadString 'SyntaxError'
v219 <- LoadString 'ReferenceError'
v220 <- LoadString 'EvalError'
v221 <- LoadString 'URIError'
v222 <- LoadString 'isNaN'
v223 <- LoadString 'isFinite'
v224 <- LoadString 'parseInt'
v225 <- LoadString 'parseFloat'
v226 <- LoadString 'eval'
v227 <- CreateArray [v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226]
v228 <- CreateNamedVariable 'globalFunctions', 'var', v227
v229 <- LoadThis
v230 <- CallFunction v0, [v229, v228]


function TestFunctionNames(a1, a2) {
    for (let i4 = 0; i4 < a2.length; i4++) {
        a2[i4];
        a1[a2[i4]].name;
    }
}
var arrayPrototypeFunctions = ["toString","toLocaleString","join","pop","push","concat","reverse","shift","unshift","slice","splice","sort","filter","forEach","some","every","map","indexOf","lastIndexOf"];
TestFunctionNames(Array.prototype, arrayPrototypeFunctions);
var booleanPrototypeFunctions = ["toString","valueOf"];
TestFunctionNames(Boolean.prototype, booleanPrototypeFunctions);
var dateFunctions = ["UTC","parse","now"];
TestFunctionNames(Date, dateFunctions);
var datePrototypeFunctions = ["toString","toDateString","toTimeString","toLocaleString","toLocaleDateString","toLocaleTimeString","valueOf","getTime","getFullYear","getUTCFullYear","getMonth","getUTCMonth","getDate","getUTCDate","getDay","getUTCDay","getHours","getUTCHours","getMinutes","getUTCMinutes","getSeconds","getUTCSeconds","getMilliseconds","getUTCMilliseconds","getTimezoneOffset","setTime","setMilliseconds","setUTCMilliseconds","setSeconds","setUTCSeconds","setMinutes","setUTCMinutes","setHours","setUTCHours","setDate","setUTCDate","setMonth","setUTCMonth","setFullYear","setUTCFullYear","toUTCString","getYear","setYear"];
TestFunctionNames(Date.prototype, datePrototypeFunctions);
Date.prototype.toGMTString();
Date.prototype.toUTCString;
var functionPrototypeFunctions = ["toString","apply","call"];
TestFunctionNames(Function.prototype, functionPrototypeFunctions);
var mathFunctions = ["random","abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","atan2","pow","max","min"];
TestFunctionNames(Math, mathFunctions);
var numberPrototypeFunctions = ["toString","toLocaleString","valueOf","toFixed","toExponential","toPrecision"];
TestFunctionNames(Number.prototype, numberPrototypeFunctions);
var objectPrototypeFunctions = ["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","__defineGetter__","__lookupGetter__","__defineSetter__","__lookupSetter__"];
TestFunctionNames(Object.prototype, objectPrototypeFunctions);
var regExpPrototypeFunctions = ["exec","test","toString","compile"];
TestFunctionNames(RegExp.prototype, regExpPrototypeFunctions);
var stringFunctions = ["fromCharCode"];
TestFunctionNames(String, stringFunctions);
var stringPrototypeFunctions = ["toString","valueOf","charAt","charCodeAt","concat","indexOf","lastIndexOf","localeCompare","match","replace","search","slice","split","substring","substr","toLowerCase","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","link","anchor","fontcolor","fontsize","big","blink","bold","fixed","italics","small","strike","sub","sup"];
TestFunctionNames(String.prototype, stringPrototypeFunctions);
var globalFunctions = ["escape","unescape","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","Error","TypeError","RangeError","SyntaxError","ReferenceError","EvalError","URIError","isNaN","isFinite","parseInt","parseFloat","eval"];
TestFunctionNames(this, globalFunctions);

FuzzIL program written to corpus/function-names.fzil
