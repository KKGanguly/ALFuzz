v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> 
    EndPlainFunction
    v2 <- LoadInteger '0'
    v3 <- CreateNamedVariable 'callCount', 'let', v2
    v4 <- LoadInteger '0'
    v5 <- LoadInteger '1'
    v6 <- CreateArray [v4, v5]
    v7 <- CreateNamedVariable 'a', 'const', v6
    v8 <- LoadString '0'
    v9 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `configurable`, v9
        BeginObjectLiteralMethod `get` -> v10
            v11 <- UnaryOperation v3, '++'
            v12 <- Construct v1, []
            ThrowException v12
        EndObjectLiteralMethod
    v13 <- EndObjectLiteral
    v14 <- CreateNamedVariable 'Object', 'none'
    v15 <- CallMethod v14, 'defineProperty', [v7, v8, v13]
    v16 <- BeginArrowFunction -> 
        v17 <- CallMethod v7, 'join', []
        Return v17
    EndArrowFunction
    v18 <- CallFunction v16, []
    v19 <- CallFunction v1, []
    v20 <- LoadInteger '1'
    v21 <- LoadString '0'
    v22 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `configurable`, v22
        BeginObjectLiteralMethod `get` -> v23
            v24 <- UnaryOperation v3, '++'
            v25 <- LoadInteger '777'
            Return v25
        EndObjectLiteralMethod
    v26 <- EndObjectLiteral
    v27 <- CallMethod v14, 'defineProperty', [v7, v21, v26]
    v28 <- LoadString '777,1'
    v29 <- CallMethod v7, 'join', []
    v30 <- LoadInteger '2'
EndPlainFunction
v31 <- CallFunction v0, []
v32 <- BeginPlainFunction -> 
    v33 <- LoadInteger '0'
    v34 <- CreateNamedVariable 'callCount', 'let', v33
    v35 <- LoadInteger '1'
    v36 <- CreateArray [v35]
    v37 <- CreateNamedVariable 'a', 'const', v36
    v38 <- LoadString '0'
    v39 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `configurable`, v39
        BeginObjectLiteralMethod `get` -> v40
            v41 <- UnaryOperation v34, '++'
            v42 <- LoadInteger '2'
            v43 <- CallMethod v37, 'push', [v42]
            v44 <- LoadInteger '9'
            Return v44
        EndObjectLiteralMethod
    v45 <- EndObjectLiteral
    v46 <- CreateNamedVariable 'Object', 'none'
    v47 <- CallMethod v46, 'defineProperty', [v37, v38, v45]
    v48 <- LoadString '9'
    v49 <- CallMethod v37, 'join', []
    v50 <- LoadInteger '1'
    v51 <- LoadString '9,2'
    v52 <- CallMethod v37, 'join', []
    v53 <- LoadInteger '2'
EndPlainFunction
v54 <- CallFunction v32, []
v55 <- BeginPlainFunction -> 
    v56 <- LoadInteger '0'
    v57 <- CreateNamedVariable 'callCount', 'let', v56
    v58 <- LoadInteger '1'
    v59 <- LoadUndefined
    v60 <- LoadInteger '2'
    v61 <- CreateArray [v58, v59, v60]
    v62 <- CreateNamedVariable 'a', 'const', v61
    v63 <- LoadString '1'
    v64 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `configurable`, v64
        BeginObjectLiteralMethod `get` -> v65
            v66 <- UnaryOperation v57, '++'
            v67 <- LoadInteger '3'
            v68 <- CallMethod v62, 'push', [v67]
        EndObjectLiteralMethod
    v69 <- EndObjectLiteral
    v70 <- CreateNamedVariable 'Object', 'none'
    v71 <- CallMethod v70, 'defineProperty', [v62, v63, v69]
    v72 <- LoadString '1,,2'
    v73 <- CallMethod v62, 'join', []
    v74 <- LoadInteger '1'
    v75 <- LoadString '1,,2,3'
    v76 <- CallMethod v62, 'join', []
    v77 <- LoadInteger '2'
EndPlainFunction
v78 <- CallFunction v55, []
v79 <- BeginPlainFunction -> 
    v80 <- LoadInteger '0'
    v81 <- CreateNamedVariable 'callCount', 'let', v80
    v82 <- LoadInteger '0'
    v83 <- LoadInteger '1'
    v84 <- CreateArray [v82, v83]
    v85 <- CreateNamedVariable 'a', 'const', v84
    v86 <- LoadString '0'
    v87 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `configurable`, v87
        BeginObjectLiteralMethod `get` -> v88
            v89 <- UnaryOperation v81, '++'
            v90 <- LoadInteger '1'
            SetProperty v85, 'length', v90
            v91 <- LoadInteger '9'
            Return v91
        EndObjectLiteralMethod
    v92 <- EndObjectLiteral
    v93 <- CreateNamedVariable 'Object', 'none'
    v94 <- CallMethod v93, 'defineProperty', [v85, v86, v92]
    v95 <- LoadString '9,'
    v96 <- CallMethod v85, 'join', []
    v97 <- LoadInteger '1'
    v98 <- LoadString '9'
    v99 <- CallMethod v85, 'join', []
    v100 <- LoadInteger '2'
EndPlainFunction
v101 <- CallFunction v79, []
v102 <- BeginPlainFunction -> 
    v103 <- LoadInteger '0'
    v104 <- CreateNamedVariable 'callCount', 'let', v103
    v105 <- LoadInteger '0'
    v106 <- LoadInteger '1'
    v107 <- CreateArray [v105, v106]
    v108 <- CreateNamedVariable 'a', 'const', v107
    v109 <- LoadString '0'
    v110 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `configurable`, v110
        BeginObjectLiteralMethod `get` -> v111
            v112 <- UnaryOperation v104, '++'
            v113 <- LoadInteger '3'
            SetProperty v108, 'length', v113
            v114 <- LoadInteger '9'
            Return v114
        EndObjectLiteralMethod
    v115 <- EndObjectLiteral
    v116 <- CreateNamedVariable 'Object', 'none'
    v117 <- CallMethod v116, 'defineProperty', [v108, v109, v115]
    v118 <- LoadString '9,1'
    v119 <- CallMethod v108, 'join', []
    v120 <- LoadInteger '1'
    v121 <- LoadString '9,1,'
    v122 <- CallMethod v108, 'join', []
    v123 <- LoadInteger '2'
EndPlainFunction
v124 <- CallFunction v102, []


function Throws() {
    function TestError() {
    }
    let callCount = 0;
    const a = [0,1];
    const v13 = {
        configurable: true,
        get() {
            callCount++;
            const v12 = new TestError();
            throw v12;
        },
    };
    Object.defineProperty(a, "0", v13);
    const v16 = () => {
        return a.join();
    };
    v16();
    TestError();
    const v26 = {
        configurable: true,
        get() {
            callCount++;
            return 777;
        },
    };
    Object.defineProperty(a, "0", v26);
    a.join();
}
Throws();
function ArrayLengthIncreased() {
    let callCount = 0;
    const a = [1];
    const v45 = {
        configurable: true,
        get() {
            callCount++;
            a.push(2);
            return 9;
        },
    };
    Object.defineProperty(a, "0", v45);
    a.join();
    a.join();
}
ArrayLengthIncreased();
function ArrayLengthIncreasedWithHole() {
    let callCount = 0;
    const a = [1,,2];
    const v69 = {
        configurable: true,
        get() {
            callCount++;
            a.push(3);
        },
    };
    Object.defineProperty(a, "1", v69);
    a.join();
    a.join();
}
ArrayLengthIncreasedWithHole();
function ArrayLengthDecreased() {
    let callCount = 0;
    const a = [0,1];
    const v92 = {
        configurable: true,
        get() {
            callCount++;
            a.length = 1;
            return 9;
        },
    };
    Object.defineProperty(a, "0", v92);
    a.join();
    a.join();
}
ArrayLengthDecreased();
function ElementsKindChangedToHoley() {
    let callCount = 0;
    const a = [0,1];
    const v115 = {
        configurable: true,
        get() {
            callCount++;
            a.length = 3;
            return 9;
        },
    };
    Object.defineProperty(a, "0", v115);
    a.join();
    a.join();
}
ElementsKindChangedToHoley();

FuzzIL program written to corpus/array-join-index-getter-side-effects.fzil
