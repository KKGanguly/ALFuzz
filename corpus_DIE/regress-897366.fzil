v0 <- CreateArray []
v1 <- CreateNamedVariable 'xs', 'let', v0
BeginForLoopInitializer
    v2 <- LoadInteger '0'
BeginForLoopCondition -> v3
    v4 <- LoadInteger '205'
    v5 <- Compare v3, '<', v4
BeginForLoopAfterthought v5 -> v6
    v7 <- UnaryOperation '++', v6
BeginForLoopBody -> v8
    v9 <- CallMethod v1, 'push', [v8]
EndForLoop
v10 <- BeginArrowFunction -> v11, v12
    v13 <- CallMethod v1, 'shift', []
    v14 <- LoadInteger '246'
    v15 <- UnaryOperation '-', v14
    v16 <- GetProperty v1, 'length'
    SetComputedProperty v1, v16, v15
    v17 <- BinaryOperation v11, '-', v12
    Return v17
EndArrowFunction
v18 <- CallMethod v1, 'sort', [v10]


let xs = [];
for (let i3 = 0; i3 < 205; ++i3) {
    xs.push(i3);
}
const v10 = (a11, a12) => {
    xs.shift();
    const v15 = -246;
    xs[xs.length] = v15;
    return a11 - a12;
};
xs.sort(v10);

FuzzIL program written to corpus/regress-897366.fzil
