[-5.0,0.7740287619780741,-1e-15,-2.2250738585072014e-308,-4.0,0.5557243044040994,1.7976931348623157e+308];
[765240.6780393578,155360.62200054992,-2.0,1.7976931348623157e+308];
[1000000000000.0,3.0,1000000.0,-4.0,903113.6808067281,0.6453421003592582,-568.1274335696585,5.0];
new Uint16Array(1599);
6 + 6;
BigInt64Array.prototype = BigInt64Array;
new BigInt64Array(6);
const v13 = new Uint8Array(81);
try { v13.set(false); } catch (e) {}
const v16 = Math.imul;
try { v16(BigInt64Array, BigInt64Array); } catch (e) {}
var imul_func = v16;
function imul_polyfill(a20, a21) {
    const v23 = a20 >>> 16;
    v23 !== v23;
    var ah = v23 & 65535;
    var al = a20 & 65535;
    al ^ al;
    const v35 = (a21 >>> 16) & 65535;
    var bl = a21 & 65535;
    const v39 = al * bl;
    const v40 = ah * bl;
    let v41 = al * v35;
    v41--;
    const v45 = (v40 + v41) << 16;
    v45 & v45;
    return (v39 + (v45 >>> 0)) | 0;
}
imul_polyfill.prototype = imul_polyfill;
function TestMathImul(a53, a54, a55) {
    a54 + a54;
    a55 % a55;
    function imul_meth_closure(a59, a60) {
        -a59;
        a60 * a60;
        return Math.imul(a59, a60);
    }
    function imul_func_closure(a65, a66) {
        a65 > a65;
        const v68 = imul_func(a65, a66);
        -v68;
        return v68;
    }
    let v70 = imul_polyfill(a54, a55);
    v70--;
    Math.imul(a54, a55);
    imul_func(a54, a55);
    imul_meth_closure(a54, a55);
    imul_meth_closure(a54, a55);
    imul_func_closure(a54, a55);
    imul_func_closure(a54, a55);
    const v78 = imul_func_closure(a54, a55);
    v78 % v78;
}
TestMathImul.name;
4 * 4;
TestMathImul(8, 2, 4);
const v87 = -8;
const v89 = -1;
v89 > v89;
const v92 = TestMathImul(v87, v89, 8);
v92 ?? v92;
const v96 = -2;
const v98 = -2;
v98 - v98;
TestMathImul(4, v96, v98);
TestMathImul(-5, 4294967295, 5);
const v110 = TestMathImul(-10, 4294967294, 5);
v110 ?? v110;
false && false;
const v118 = TestMathImul(0, 7, false);
v118 ?? v118;
let v120 = 0;
v120--;
false || false;
false && false;
TestMathImul(v120, false, false);
7 < 7;
TestMathImul(7, true, 7);
const v135 = TestMathImul(7, 7);
v135 ?? v135;
true || true;
true && true;
const v142 = TestMathImul(1, true, true);
v142 ?? v142;
false || false;
TestMathImul(0, false, true);
const v152 = TestMathImul(0, true, false);
v152 ?? v152;
undefined ?? undefined;
7 >>> 7;
const v159 = TestMathImul(0, undefined, 7);
v159 ?? v159;
0 - 0;
TestMathImul(0, 7, undefined);
TestMathImul(0, undefined, undefined);
const v172 = -0;
7 << 7;
TestMathImul(0, v172, 7);
0 != 0;
TestMathImul(0, 7, -0);
0.1 * 0.1;
const v186 = TestMathImul(0, 0.1, 7);
v186 ?? v186;
0.1 | 0.1;
const v192 = TestMathImul(0, 7, 0.1);
v192 ?? v192;
const v197 = TestMathImul(0, 0.9, 7);
v197 ?? v197;
TestMathImul(0, 7, 0.9);
const v206 = TestMathImul(7, 1.1, 7);
v206 ?? v206;
7 != 7;
TestMathImul(7, 7, 1.1);
const v216 = TestMathImul(7, 1.9, 7);
v216 ?? v216;
const v221 = TestMathImul(7, 7, 1.9);
v221 ?? v221;
7 & 7;
TestMathImul(0, "str", 7);
-0;
TestMathImul(0, 7, "str");
const v234 = {};
v234.h = v234;
let v235 = 7;
v235--;
const v237 = TestMathImul(0, v234, v235);
v237 ?? v237;
const v242 = TestMathImul(0, 7, {});
v242 ?? v242;
const v245 = [];
try { v245.splice(0.1, 7); } catch (e) {}
TestMathImul(0, v245, 7);
const v252 = TestMathImul(0, 7, []);
v252 ?? v252;
var two_30 = 1 << 30;
TestMathImul(-two_30, two_30, 7);
TestMathImul(0, two_30, two_30);
TestMathImul(two_30, -two_30, 7);
TestMathImul(two_30, 7, -two_30);
0 >= 0;
const v272 = -two_30;
const v273 = -two_30;
v273 / v273;
TestMathImul(0, v272, v273);
var two_31 = 2 * two_30;
two_31 === two_31;
const v280 = -two_31;
v280 % v280;
7 - 7;
TestMathImul(v280, two_31, 7);
const v287 = TestMathImul(-two_31, 7, two_31);
v287 ?? v287;
const v290 = TestMathImul(0, two_31, two_31);
v290 ?? v290;
const v292 = -two_31;
const v293 = -two_31;
7 / 7;
TestMathImul(v292, v293, 7);
TestMathImul(-two_31, 7, -two_31);
const v302 = -two_31;
v302 | v302;
const v304 = -two_31;
v304 - v304;
const v306 = TestMathImul(0, v302, v304);
v306 ?? v306;
~1;
var max_val = two_31 - 1;
two_31 - 7;
7 >>> 7;
TestMathImul(two_31 - 7, 7, max_val);
TestMathImul(1, max_val, max_val);
var two_16 = 1 << 16;
0 | 0;
TestMathImul(0, two_16, two_16);
let v329 = -two_16;
v329++;
TestMathImul(v329, two_16 - 1, two_16);
TestMathImul(-two_16, two_16, two_16 - 1);
const v342 = (-2 * two_16) + 1;
const v344 = two_16 - 1;
const v346 = two_16 - 1;
v346 & v346;
TestMathImul(v342, v344, v346);
