v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> v2
        v3 <- LoadInteger '2'
        v4 <- UnaryOperation '-', v3
        v5 <- BinaryOperation v2, '*', v4
        v6 <- LoadInteger '2'
        v7 <- LoadInteger '32'
        v8 <- BinaryOperation v6, '**', v7
        v9 <- BinaryOperation v5, '%', v8
        v10 <- LoadInteger '0'
        v11 <- Compare v9, '===', v10
        Return v11
    EndPlainFunction
    v12 <- LoadInteger '2'
    v13 <- CallFunction v1, [v12]
    v14 <- LoadInteger '1'
    v15 <- CallFunction v1, [v14]
    v16 <- LoadInteger '2'
    v17 <- CallFunction v1, [v16]
    v18 <- LoadInteger '1'
    v19 <- CallFunction v1, [v18]
    v20 <- LoadInteger '0'
    v21 <- CallFunction v1, [v20]
    v22 <- CallFunction v1, []
EndPlainFunction
v23 <- CallFunction v0, []


function f0() {
    function foo(a2) {
        return ((a2 * -2) % (2 ** 32)) === 0;
    }
    foo(2);
    foo(1);
    foo(2);
    foo(1);
    foo(0);
    foo();
}
f0();

FuzzIL program written to corpus/number-modulus.fzil
