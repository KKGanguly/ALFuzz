v0 <- LoadInteger '100000'
v1 <- CreateNamedVariable 'i', 'var', v0
v2 <- CreateNamedVariable 'Array', 'none'
v3 <- Construct v2, [v1]
v4 <- CreateNamedVariable 'a', 'var', v3
BeginForLoopInitializer
    v5 <- LoadInteger '0'
BeginForLoopCondition -> v6
    v7 <- Compare v6, '<', v1
BeginForLoopAfterthought v7 -> v8
    v9 <- UnaryOperation v8, '++'
BeginForLoopBody -> v10
    v11 <- LoadFloat '0.5'
    SetComputedProperty v4, v10, v11
EndForLoop
BeginForLoopInitializer
    v12 <- LoadInteger '0'
BeginForLoopCondition -> v13
    v14 <- LoadInteger '10'
    v15 <- Compare v13, '<', v14
BeginForLoopAfterthought v15 -> v16
    v17 <- UnaryOperation v16, '++'
BeginForLoopBody -> v18
    SetComputedProperty v4, v18, v18
EndForLoop
BeginForLoopInitializer
    v19 <- LoadInteger '0'
BeginForLoopCondition -> v20
    v21 <- LoadInteger '10'
    v22 <- Compare v20, '<', v21
BeginForLoopAfterthought v22 -> v23
    v24 <- UnaryOperation v23, '++'
BeginForLoopBody -> v25
    v26 <- LoadFloat '0.5'
    v27 <- BinaryOperation v25, '+', v26
    v28 <- CreateNamedVariable 'v', 'var', v27
    SetComputedProperty v4, v25, v28
EndForLoop


var i = 100000;
const v3 = new Array(i);
var a = v3;
for (let i6 = 0; i6 < i; i6++) {
    a[i6] = 0.5;
}
for (let i13 = 0; i13 < 10; i13++) {
    a[i13] = i13;
}
for (let i20 = 0; i20 < 10; i20++) {
    var v = i20 + 0.5;
    a[i20] = v;
}

FuzzIL program written to corpus/regress-91013.fzil
