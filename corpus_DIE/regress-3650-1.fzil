v0 <- BeginPlainFunction -> v1
    v2 <- CreateArray []
    v3 <- CreateNamedVariable 'result', 'var', v2
    BeginForInLoop v1 -> v4
        BeginForInLoop v1 -> v5
            v6 <- BinaryOperation v4, '+', v5
            v7 <- GetComputedProperty v1, v4
            v8 <- BinaryOperation v6, '+', v7
            v9 <- GetComputedProperty v1, v5
            v10 <- BinaryOperation v8, '+', v9
            v11 <- CallMethod v3, 'push', [v10]
            Continue
        EndForInLoop
    EndForInLoop
    v12 <- LoadString ''
    v13 <- CallMethod v3, 'join', [v12]
    Return v13
EndPlainFunction
v14 <- LoadString '1'
v15 <- LoadString '2'
BeginObjectLiteral
    ObjectLiteralAddProperty `a`, v14
    ObjectLiteralAddProperty `b`, v15
v16 <- EndObjectLiteral
v17 <- CreateNamedVariable 't', 'var', v16
v18 <- LoadString 'aa11ab12ba21bb22'
v19 <- CallFunction v0, [v17]
v20 <- LoadString 'aa11ab12ba21bb22'
v21 <- CallFunction v0, [v17]


function f(a1) {
    var result = [];
    for (const v4 in a1) {
        for (const v5 in a1) {
            result.push(((v4 + v5) + a1[v4]) + a1[v5]);
            continue;
        }
    }
    return result.join("");
}
var t = { a: "1", b: "2" };
f(t);
f(t);

FuzzIL program written to corpus/regress-3650-1.fzil
