v0 <- BeginPlainFunction -> v1
    v2 <- LoadFloat '1.5'
    v3 <- CreateNamedVariable 'x', 'var', v2
    v4 <- LoadFloat '2.5'
    v5 <- CreateNamedVariable 'y', 'var', v4
    BeginForLoopInitializer
        v6 <- LoadInteger '1'
    BeginForLoopCondition -> v7
        v8 <- LoadInteger '10000'
        v9 <- Compare v7, '<', v8
    BeginForLoopAfterthought v9 -> v10
        v11 <- LoadInteger '2'
        Update v10, '+', v11
    BeginForLoopBody -> v12
        v13 <- BinaryOperation v3, '+', v5
        v14 <- BinaryOperation v13, '+', v12
        SetProperty v1, 'val', v14
    EndForLoop
    Return v1
EndPlainFunction
v15 <- LoadInteger '0'
BeginObjectLiteral
    ObjectLiteralAddProperty `val`, v15
v16 <- EndObjectLiteral
v17 <- CreateNamedVariable 'o', 'var', v16
BeginForLoopInitializer
    v18 <- LoadInteger '0'
BeginForLoopCondition -> v19
    v20 <- LoadInteger '10'
    v21 <- Compare v19, '<', v20
BeginForLoopAfterthought v21 -> v22
    v23 <- UnaryOperation v22, '++'
BeginForLoopBody -> v24
    v25 <- CallFunction v0, [v17]
EndForLoop


function f(a1) {
    var x = 1.5;
    var y = 2.5;
    for (let i7 = 1; i7 < 10000; i7 += 2) {
        a1.val = (x + y) + i7;
    }
    return a1;
}
var o = { val: 0 };
for (let i19 = 0; i19 < 10; i19++) {
    f(o);
}

FuzzIL program written to corpus/alloc-number.fzil
