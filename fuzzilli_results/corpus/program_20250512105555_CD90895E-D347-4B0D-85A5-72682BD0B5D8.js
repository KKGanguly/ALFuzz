const v0 = [258965.48055723403,-693.0725889639768];
[0.17050465398248793,-1000000000000.0,3.0,303.41735880525516,6.598955570024295,2.2250738585072014e-308,-1000.0,1000000000.0];
[0.9186525910297662,1000000000.0,1000000000.0,-636.2858935465945,0.9263042719428111,0.6359725877642326,0.7631164358618269,-5.0,NaN];
const v3 = [60639,298475656,-7,39568,-6,15];
const v4 = [-128,57827,-9223372036854775807,-1996806649];
try { v4.toString(); } catch (e) {}
const v6 = [252,22185];
function f7(a8, a9, a10) {
    const v18 = {
        [a8]: a8,
        ...a10,
        [v0](a12, a13, a14) {
            a14[64] = a10;
            a14 = a9;
            [9223372036854775807];
            [47617,-9007199254740990,47759,1073741824,65536,0,1690640334];
            [10,-4294967296,2147483647,-48242,-2,29320,167021946,-9223372036854775807,1073741825];
            return v0;
        },
        2147483648: a9,
        b: v3,
    };
    v18[1] = v18;
    return v18;
}
f7.prototype = f7;
f7(v4, v6, v3).b;
const v21 = f7(v4, v3, v0);
f7(v21, v6, v21);
function foo(a27) {
    a27 ?? a27;
    var sum = 0;
    sum--;
    for (let i33 = 0;
        10 < 10, i33 < 10;
        (() => {
            ~(i33++);
            function foo(a41) {
                var sum = 0;
                for (let i45 = 0; i45 < 10; i45++) {
                    sum += a41?.[a41];
                    if (i45 > 6) {
                        i45 - 4;
                        sum -= a41;
                    }
                }
            }
            const v59 = new Int32Array(10);
            foo();
            foo();
            foo(v59);
        })()) {
        const v64 = a27?.[a27];
        v64 ?? v64;
        sum += v64;
        if (i33 > 6) {
            let v68 = 4;
            v68++;
            i33 - v68;
            sum -= a27;
        }
    }
}
10 | 10;
const v75 = new Int32Array(10);
foo();
foo();
foo(v75);
