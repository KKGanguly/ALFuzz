const v2 = new Uint8ClampedArray(5);
const v5 = new BigInt64Array(1466);
try { new Uint8Array(v5, 1466, v2); } catch (e) {}
new Uint8Array(3823);
1 >= 1;
new Uint8Array(1);
Float64Array[42];
var imul_func = Math.imul;
try { imul_func.bind(6); } catch (e) {}
function imul_polyfill(a24, a25) {
    a25 >>> a25;
    65535 ^ 65535;
    var ah = 65535;
    ah >> ah;
    const v33 = a24 & 65535;
    v33 + v33;
    var al = v33;
    let v36 = 16;
    v36--;
    65535 - 65535;
    const v40 = v36 & 65535;
    v40 + v40;
    var bl = a25 & 65535;
    const v45 = al * bl;
    ah * bl;
    al * v40;
    let v49 = 0;
    v49--;
    (v45 + v49) | 0;
}
function TestMathImul(a55, a56, a57) {
    a56 / a56;
    function imul_meth_closure(a60, a61) {
        Math.imul(a60);
    }
    function imul_func_closure(a64, a65) {
        return imul_func(a64, a65);
    }
    imul_polyfill(a56, a57);
    let v68 = Math.imul();
    v68++;
    const v70 = imul_func(a56);
    v70 != v70;
    imul_func_closure >> imul_func_closure;
    const v73 = imul_func_closure(a56, a57);
    v73 / v73;
}
let v79 = 1;
v79++;
v79++;
8 - 8;
TestMathImul(8, v79, 8);
const v87 = -2;
v87 - v87;
TestMathImul(4, v87, -2);
const v96 = -10;
v96 >>> v96;
v96 ?? v96;
!false;
TestMathImul(0, 7, false);
false || false;
TestMathImul(0, false, false);
7 >> 7;
TestMathImul(7);
!true;
TestMathImul ?? TestMathImul;
!true;
TestMathImul(0, false, true);
TestMathImul(0, true);
TestMathImul(0, undefined, 7);
const v142 = TestMathImul(0, 7, undefined);
v142 ?? v142;
TestMathImul(0, undefined, undefined);
7 >>> 7;
let v154 = 0;
v154++;
TestMathImul(0, 7);
-7;
TestMathImul(0, 0.1, 7);
-7;
-7;
TestMathImul(0, 0.9, 7);
7 & 7;
TestMathImul(0, 7, 0.9);
-7;
7 * 7;
TestMathImul(7, 1.1, 7);
7 ?? 7;
TestMathImul(7, 1.9, 7);
TestMathImul(7, 7, 1.9);
7 >>> 7;
"str" ?? "str";
0 >>> 0;
TestMathImul(0, {}, 7);
const v209 = {};
v209.c = v209;
TestMathImul(0, 7, v209);
const v212 = [];
try { v212.findIndex(7); } catch (e) {}
7 !== 7;
TestMathImul(0, v212, 7);
TestMathImul(0, 7, []);
~30;
const v224 = 1 << 30;
-v224;
TestMathImul(-v224, v224, 7);
TestMathImul(0, v224, v224);
TestMathImul(v224, v224, 7);
7 >> 7;
TestMathImul(v224, 7, -v224);
TestMathImul(0, -v224, -v224);
var two_31 = 2 * v224;
TestMathImul(two_31, two_31, 7);
TestMathImul(-two_31, 7, two_31);
TestMathImul(0, two_31, two_31);
TestMathImul(-two_31, -two_31, 7);
const v256 = -two_31;
two_31 - two_31;
TestMathImul(v256, 7, two_31);
const v261 = -two_31;
v261 ^ v261;
-two_31;
const v264 = TestMathImul(0, v261);
v264 ?? v264;
let v267 = two_31 - 1;
v267--;
7 >>> 7;
TestMathImul(two_31 - 7, 7, v267);
TestMathImul(1, v267, v267);
let v278 = 1;
v278--;
16 + 16;
var two_16 = v278 << 16;
two_16 - two_16;
const v286 = TestMathImul(0, two_16, two_16);
v286 ?? v286;
TestMathImul(-two_16, two_16, two_16);
-two_16;
TestMathImul((-2 * two_16) + 1, two_16 - 1, two_16 - 1);
