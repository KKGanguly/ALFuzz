new Int16Array(819);
const v5 = new Float32Array(54);
const v6 = v5?.constructor;
let v7;
try { v7 = new v6(54, v5, Int16Array); } catch (e) {}
v7[0] = v7;
new BigUint64Array(88);
const v11 = [1000000.0];
try { v11.lastIndexOf(Int16Array); } catch (e) {}
[-6.4861526866007635,1000000000.0,3.0,-1e-15,0.12012749634146558,1000000000.0];
[-3.0,4.888180722206952,-2.220446049250313e-16,-1000000000000.0];
try { Math.expm1(BigUint64Array); } catch (e) {}
try { Math.tanh(54); } catch (e) {}
var imul_func = Math.imul;
function imul_polyfill(a21, a22) {
    a21++;
    a22--;
    -a21;
    -16;
    const v28 = a21 >>> 16;
    65535 - 65535;
    var ah = v28 & 65535;
    65535 & 65535;
    var al = a21 & 65535;
    16 >>> 16;
    const v39 = a22 >>> 16;
    v39 >> v39;
    const v42 = v39 & 65535;
    var bl = a22 & 65535;
    const v46 = al * bl;
    let v49 = (ah * bl) + (al * v42);
    v49 * v49;
    v49--;
    const v53 = v49 << 16;
    0 === 0;
    const v56 = v53 >>> 0;
    -v56;
    return (v46 + v56) | 0;
}
function TestMathImul(a62, a63, a64) {
    -a62;
    a64 << a64;
    const v67 = a62 + a62;
    v67 === v67;
    const v69 = a63 >>> a63;
    v69 >> v69;
    a64 == a64;
    function imul_meth_closure(a73, a74) {
        a73++;
        a74 >>> a74;
        ~a73;
        const v78 = Math.imul(a73, a74);
        v78 << v78;
        return v78;
    }
    try { imul_meth_closure(v7, v7); } catch (e) {}
    function imul_func_closure(a82, a83) {
        a82 - a82;
        a83 - a83;
        a82 + a82;
        const v87 = imul_func(a82, a83);
        v87 >> v87;
        return v87;
    }
    imul_polyfill(a63, a64);
    const v90 = Math.imul(a63, a64);
    const v91 = v90 >>> v90;
    v91 - v91;
    imul_func(a63, a64);
    let v94 = imul_meth_closure(a63, a64);
    v94++;
    imul_meth_closure(a63, a64);
    const v97 = imul_func_closure(a63, a64);
    v97 << v97;
    const v99 = imul_func_closure(a63, a64);
    let v100 = v99 - v99;
    v100--;
    let v102 = imul_func_closure(a63, a64);
    v102++;
}
let v106 = 4;
v106++;
const v108 = TestMathImul(8, 2, v106);
v108 ?? v108;
8 > 8;
const v112 = -8;
1 * 1;
TestMathImul(v112, -1, 8);
4 >> 4;
2 * 2;
const v122 = -2;
const v124 = -2;
v124 >>> v124;
const v126 = TestMathImul(4, v122, v124);
v126 ?? v126;
const v129 = -5;
~4294967295;
TestMathImul(v129, 4294967295, 5);
10 == 10;
const v136 = -10;
v136 !== v136;
const v140 = TestMathImul(v136, 4294967294, 5);
v140 ?? v140;
7 % 7;
let v144 = 0;
const v145 = v144--;
v145 | v145;
TestMathImul(v144, 7, false);
!false;
false || false;
TestMathImul(0, false, false);
true && true;
const v160 = TestMathImul(7, true, 7);
v160 ?? v160;
~7;
true || true;
const v167 = TestMathImul(7, 7);
v167 ?? v167;
const v172 = TestMathImul(1, true, true);
v172 ?? v172;
!false;
!true;
true && true;
TestMathImul(0, false, true);
false || false;
TestMathImul(0, true, false);
let v186 = 0;
v186++;
undefined ?? undefined;
TestMathImul(v186, undefined, 7);
0 >> 0;
7 << 7;
TestMathImul(0, 7, undefined);
const v201 = TestMathImul(0, undefined, undefined);
v201 ?? v201;
const v203 = v201 ?? v201;
v203 ?? v203;
0 & 0;
const v208 = -0;
v208 >> v208;
TestMathImul(0, v208, 7);
const v215 = -0;
v215 ^ v215;
TestMathImul(0, 7, v215);
0.1 >>> 0.1;
const v222 = TestMathImul(0, 0.1, 7);
v222 ?? v222;
let v226 = 0.1;
v226++;
const v228 = TestMathImul(0, 7, v226);
v228 ?? v228;
7 + 7;
const v234 = TestMathImul(0, 0.9, 7);
v234 ?? v234;
const v237 = 0 >>> 0;
v237 - v237;
const v241 = TestMathImul(0, 7, 0.9);
v241 ?? v241;
let v243 = 7;
-v243;
v243--;
let v247 = 7;
v247++;
TestMathImul(v243, 1.1, v247);
7 * 7;
TestMathImul(7, 7, 1.1);
1.9 - 1.9;
const v259 = TestMathImul(7, 1.9, 7);
v259 ?? v259;
7 + 7;
1.9 >>> 1.9;
TestMathImul(7, 7, 1.9);
0 >>> 0;
const v271 = TestMathImul(0, "str", 7);
v271 ?? v271;
TestMathImul(0, 7, "str");
const v278 = {};
v278.h = v278;
TestMathImul(0, v278, 7);
0 * 0;
TestMathImul(0, 7, {});
const v289 = TestMathImul(0, [], 7);
v289 ?? v289;
0 + 0;
const v294 = [];
try { v294.findLast(v294); } catch (e) {}
const v296 = TestMathImul(0, 7, v294);
v296 ?? v296;
let v299 = 30;
v299--;
v299 - v299;
const v302 = 1 << v299;
const v303 = ~v302;
v303 / v303;
var two_30 = v302;
two_30 >>> two_30;
const v309 = TestMathImul(-two_30, two_30, 7);
v309 ?? v309;
const v312 = TestMathImul(0, two_30, two_30);
v312 ?? v312;
const v314 = -two_30;
7 != 7;
TestMathImul(two_30, v314, 7);
const v319 = -two_30;
v319 * v319;
const v321 = TestMathImul(two_30, 7, v319);
v321 ?? v321;
0 - 0;
0 >> 0;
const v326 = -two_30;
const v327 = v326 % v326;
v327 / v327;
const v329 = -two_30;
v329 | v329;
TestMathImul(0, v326, v329);
var two_31 = 2 * two_30;
two_31 + two_31;
two_31 === two_31;
const v339 = TestMathImul(-two_31, two_31, 7);
const v340 = v339 ?? v339;
v340 ** v340;
const v344 = TestMathImul(-two_31, 7, two_31);
v344 ?? v344;
const v347 = TestMathImul(0, two_31, two_31);
v347 ?? v347;
let v349 = -two_31;
v349--;
const v351 = -two_31;
v351 - v351;
let v353 = 7;
~v353;
v353--;
const v356 = TestMathImul(v349, v351, v353);
v356 ?? v356;
const v358 = -two_31;
7 - 7;
let v361 = -two_31;
v361 - v361;
const v363 = v361--;
v363 - v363;
const v365 = TestMathImul(v358, 7, v361);
v365 ?? v365;
const v368 = -two_31;
v368 >>> v368;
const v370 = -two_31;
const v371 = -v370;
v371 - v371;
const v373 = TestMathImul(0, v368, v370);
v373 ?? v373;
1 !== 1;
1 << 1;
const v378 = two_31 - 1;
v378 != v378;
var max_val = v378;
two_31 - 7;
7 - 7;
const v387 = TestMathImul(two_31 - 7, 7, max_val);
v387 ?? v387;
const v390 = TestMathImul(1, max_val, max_val);
v390 ?? v390;
1 - 1;
const v395 = 1 << 16;
v395 + v395;
var two_16 = v395;
two_16 != two_16;
two_16 % two_16;
0 >> 0;
const v402 = TestMathImul(0, two_16, two_16);
v402 ?? v402;
const v407 = TestMathImul(-two_16, two_16 - 1, two_16);
v407 ?? v407;
const v409 = -two_16;
v409 / v409;
let v412 = two_16 - 1;
v412++;
const v414 = TestMathImul(v409, two_16, v412);
v414 ?? v414;
2 / 2;
const v418 = -2;
v418 === v418;
const v420 = v418 * two_16;
v420 / v420;
const v423 = v420 + 1;
const v425 = two_16 - 1;
1 + 1;
TestMathImul(v423, v425, two_16 - 1);
