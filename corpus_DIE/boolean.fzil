v0 <- LoadInteger '0'
v1 <- Void_ v0
v2 <- CreateNamedVariable 'Boolean', 'none'
v3 <- CallFunction v2, [v1]
v4 <- LoadBoolean 'false'
v5 <- LoadNull
v6 <- CallFunction v2, [v5]
v7 <- LoadBoolean 'false'
v8 <- LoadBoolean 'false'
v9 <- CallFunction v2, [v8]
v10 <- LoadBoolean 'false'
v11 <- LoadBoolean 'true'
v12 <- CallFunction v2, [v11]
v13 <- LoadBoolean 'true'
v14 <- LoadInteger '0'
v15 <- CallFunction v2, [v14]
v16 <- LoadBoolean 'false'
v17 <- LoadInteger '1'
v18 <- CallFunction v2, [v17]
v19 <- LoadBoolean 'true'
v20 <- CreateNamedVariable 'assertEquals', 'none'
v21 <- CallFunction v2, [v20]
v22 <- LoadBoolean 'true'
v23 <- CreateNamedVariable 'Object', 'none'
v24 <- Construct v23, []
v25 <- CallFunction v2, [v24]
v26 <- LoadBoolean 'true'
v27 <- LoadBoolean 'false'
v28 <- Construct v2, [v27]
v29 <- LoadBoolean 'false'
v30 <- Compare v28, '!==', v29
v31 <- LoadBoolean 'false'
v32 <- Construct v2, [v31]
v33 <- LoadBoolean 'false'
v34 <- Compare v32, '==', v33
v35 <- LoadBoolean 'true'
v36 <- Construct v2, [v35]
v37 <- LoadBoolean 'true'
v38 <- Compare v36, '!==', v37
v39 <- LoadBoolean 'true'
v40 <- Construct v2, [v39]
v41 <- LoadBoolean 'true'
v42 <- Compare v40, '==', v41
v43 <- LoadBoolean 'true'
v44 <- LoadBoolean 'false'
v45 <- UnaryOperation '!', v44
v46 <- LoadBoolean 'false'
v47 <- LoadBoolean 'true'
v48 <- UnaryOperation '!', v47
v49 <- LoadBoolean 'true'
v50 <- LoadBoolean 'true'
v51 <- UnaryOperation '!', v50
v52 <- UnaryOperation '!', v51
v53 <- LoadBoolean 'false'
v54 <- LoadBoolean 'false'
v55 <- UnaryOperation '!', v54
v56 <- UnaryOperation '!', v55
v57 <- LoadBoolean 'true'
v58 <- LoadBoolean 'true'
v59 <- LoadBoolean 'true'
v60 <- LoadBoolean 'false'
v61 <- TernaryOperation v58, v59, v60
v62 <- LoadBoolean 'false'
v63 <- LoadBoolean 'false'
v64 <- LoadBoolean 'true'
v65 <- LoadBoolean 'false'
v66 <- TernaryOperation v63, v64, v65
v67 <- LoadBoolean 'false'
v68 <- LoadBoolean 'true'
v69 <- LoadBoolean 'false'
v70 <- LoadBoolean 'true'
v71 <- TernaryOperation v68, v69, v70
v72 <- LoadBoolean 'true'
v73 <- LoadBoolean 'false'
v74 <- LoadBoolean 'false'
v75 <- LoadBoolean 'true'
v76 <- TernaryOperation v73, v74, v75
v77 <- LoadBoolean 'true'
v78 <- LoadBoolean 'true'
v79 <- LoadBoolean 'true'
v80 <- BinaryOperation v78, '&&', v79
v81 <- LoadBoolean 'false'
v82 <- LoadBoolean 'true'
v83 <- LoadBoolean 'false'
v84 <- BinaryOperation v82, '&&', v83
v85 <- LoadBoolean 'false'
v86 <- LoadBoolean 'false'
v87 <- LoadBoolean 'true'
v88 <- BinaryOperation v86, '&&', v87
v89 <- LoadBoolean 'false'
v90 <- LoadBoolean 'false'
v91 <- LoadBoolean 'false'
v92 <- BinaryOperation v90, '&&', v91
v93 <- LoadInteger '42'
v94 <- CreateNamedVariable 't', 'var', v93
v95 <- LoadInteger '0'
v96 <- Void_ v95
v97 <- GetProperty v94, 'p'
v98 <- LoadInteger '0'
v99 <- Void_ v98
v100 <- GetProperty v94, 'p'
v101 <- LoadBoolean 'true'
v102 <- BinaryOperation v100, '&&', v101
v103 <- LoadInteger '0'
v104 <- Void_ v103
v105 <- GetProperty v94, 'p'
v106 <- LoadBoolean 'false'
v107 <- BinaryOperation v105, '&&', v106
v108 <- LoadInteger '0'
v109 <- Void_ v108
v110 <- GetProperty v94, 'p'
v111 <- GetProperty v94, 'p'
v112 <- LoadInteger '0'
v113 <- Compare v111, '==', v112
v114 <- BinaryOperation v110, '&&', v113
v115 <- LoadInteger '0'
v116 <- Void_ v115
v117 <- GetProperty v94, 'p'
v118 <- GetProperty v94, 'p'
v119 <- LoadNull
v120 <- Compare v118, '==', v119
v121 <- BinaryOperation v117, '&&', v120
v122 <- LoadInteger '0'
v123 <- Void_ v122
v124 <- GetProperty v94, 'p'
v125 <- GetProperty v94, 'p'
v126 <- GetProperty v94, 'p'
v127 <- Compare v125, '==', v126
v128 <- BinaryOperation v124, '&&', v127
v129 <- Construct v23, []
v130 <- CreateNamedVariable 'o', 'var', v129
v131 <- LoadString 'foo'
SetProperty v130, 'p', v131
v132 <- LoadString 'foo'
v133 <- GetProperty v130, 'p'
v134 <- LoadString 'foo'
v135 <- GetProperty v130, 'p'
v136 <- LoadBoolean 'true'
v137 <- BinaryOperation v135, '||', v136
v138 <- LoadString 'foo'
v139 <- GetProperty v130, 'p'
v140 <- LoadBoolean 'false'
v141 <- BinaryOperation v139, '||', v140
v142 <- LoadString 'foo'
v143 <- GetProperty v130, 'p'
v144 <- GetProperty v130, 'p'
v145 <- LoadInteger '0'
v146 <- Compare v144, '==', v145
v147 <- BinaryOperation v143, '||', v146
v148 <- LoadString 'foo'
v149 <- GetProperty v130, 'p'
v150 <- GetProperty v130, 'p'
v151 <- LoadNull
v152 <- Compare v150, '==', v151
v153 <- BinaryOperation v149, '||', v152
v154 <- LoadString 'foo'
v155 <- GetProperty v130, 'p'
v156 <- GetProperty v130, 'p'
v157 <- GetProperty v130, 'p'
v158 <- Compare v156, '==', v157
v159 <- BinaryOperation v155, '||', v158
v160 <- BeginPlainFunction -> v161
    v162 <- LoadString ''
    v163 <- BinaryOperation v162, '+', v161
    v164 <- UnaryOperation '!', v163
    v165 <- UnaryOperation '!', v164
    Return v165
EndPlainFunction
v166 <- LoadBoolean 'false'
v167 <- LoadString ''
v168 <- CallFunction v160, [v167]
v169 <- LoadBoolean 'true'
v170 <- LoadString 'narf'
v171 <- CallFunction v160, [v170]
v172 <- LoadBoolean 'true'
v173 <- LoadInteger '12345678'
v174 <- CallFunction v160, [v173]
v175 <- LoadBoolean 'true'
v176 <- LoadUndefined
v177 <- CallFunction v160, [v176]


Boolean(void 0);
Boolean(null);
Boolean(false);
Boolean(true);
Boolean(0);
Boolean(1);
Boolean(assertEquals);
const v24 = new Object();
Boolean(v24);
const v28 = new Boolean(false);
v28 !== false;
const v32 = new Boolean(false);
v32 == false;
const v36 = new Boolean(true);
v36 !== true;
const v40 = new Boolean(true);
v40 == true;
!false;
!true;
!(!true);
!(!false);
true ? true : false;
false ? true : false;
true ? false : true;
false ? false : true;
true && true;
true && false;
false && true;
false && false;
var t = 42;
void 0;
t.p;
void 0;
t.p && true;
void 0;
t.p && false;
void 0;
t.p && (t.p == 0);
void 0;
t.p && (t.p == null);
void 0;
t.p && (t.p == t.p);
const v129 = new Object();
var o = v129;
o.p = "foo";
o.p;
o.p || true;
o.p || false;
o.p || (o.p == 0);
o.p || (o.p == null);
o.p || (o.p == o.p);
function f(a161) {
    return !(!("" + a161));
}
f("");
f("narf");
f(12345678);
f(undefined);

FuzzIL program written to corpus/boolean.fzil
