v0 <- CreateNamedVariable 'Array', 'none'
v1 <- GetProperty v0, 'prototype'
v2 <- LoadString '1'
v3 <- BeginPlainFunction -> 
    v4 <- LoadString 'element 1'
    Return v4
EndPlainFunction
v5 <- BeginPlainFunction -> v6
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `get`, v3
    ObjectLiteralAddProperty `set`, v5
v7 <- EndObjectLiteral
v8 <- CreateNamedVariable 'Object', 'none'
v9 <- CallMethod v8, 'defineProperty', [v1, v2, v7]
v10 <- BeginPlainFunction -> v11
    v12 <- CallMethod v11, 'shift', []
    Return v11
EndPlainFunction
v13 <- LoadString '0'
v14 <- LoadUndefined
v15 <- LoadInteger '2'
v16 <- CreateArray [v13, v14, v15]
v17 <- CallFunction v10, [v16]
v18 <- CreateNamedVariable 'result', 'var', v17
v19 <- LoadString 'element 1'
v20 <- LoadString 'element 1'
v21 <- CreateArray [v19, v20]
v22 <- LoadString '0'
v23 <- CallMethod v18, 'hasOwnProperty', [v22]
v24 <- LoadString '1'
v25 <- CallMethod v18, 'hasOwnProperty', [v24]
BeginObjectLiteral
v26 <- EndObjectLiteral
v27 <- LoadUndefined
BeginObjectLiteral
v28 <- EndObjectLiteral
v29 <- CreateArray [v26, v27, v28]
v30 <- CallFunction v10, [v29]
Reassign v18, v30
v31 <- LoadString 'element 1'
v32 <- LoadString 'element 1'
v33 <- CreateArray [v31, v32]
v34 <- LoadString '0'
v35 <- CallMethod v18, 'hasOwnProperty', [v34]
v36 <- LoadString '1'
v37 <- CallMethod v18, 'hasOwnProperty', [v36]
BeginObjectLiteral
v38 <- EndObjectLiteral
v39 <- LoadUndefined
v40 <- LoadInteger '0'
v41 <- CreateArray [v38, v39, v40]
v42 <- CallFunction v10, [v41]
Reassign v18, v42
v43 <- LoadString 'element 1'
v44 <- LoadString 'element 1'
v45 <- CreateArray [v43, v44]
v46 <- LoadString '0'
v47 <- CallMethod v18, 'hasOwnProperty', [v46]
v48 <- LoadString '1'
v49 <- CallMethod v18, 'hasOwnProperty', [v48]


const v1 = Array.prototype;
function f3() {
    return "element 1";
}
function f5(a6) {
}
Object.defineProperty(v1, "1", { get: f3, set: f5 });
function test(a11) {
    a11.shift();
    return a11;
}
var result = test(["0",,2]);
["element 1","element 1"];
result.hasOwnProperty("0");
result.hasOwnProperty("1");
const v26 = {};
result = test([v26,,{}]);
["element 1","element 1"];
result.hasOwnProperty("0");
result.hasOwnProperty("1");
result = test([{},,0]);
["element 1","element 1"];
result.hasOwnProperty("0");
result.hasOwnProperty("1");

FuzzIL program written to corpus/array-shift2.fzil
