v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '0'
    v2 <- CreateNamedVariable 'sum', 'var', v1
    BeginForLoopInitializer
        v3 <- LoadInteger '0'
    BeginForLoopCondition -> v4
        v5 <- LoadInteger '1000'
        v6 <- Compare v4, '<', v5
    BeginForLoopAfterthought v6 -> v7
        v8 <- UnaryOperation v7, '++'
    BeginForLoopBody -> v9
        v10 <- LoadInteger '2'
        v11 <- BinaryOperation v9, '+', v10
        v12 <- CreateNamedVariable 'x', 'var', v11
        v13 <- LoadInteger '5'
        v14 <- BinaryOperation v12, '+', v13
        v15 <- CreateNamedVariable 'y', 'var', v14
        v16 <- LoadInteger '3'
        v17 <- BinaryOperation v15, '+', v16
        v18 <- CreateNamedVariable 'z', 'var', v17
        Update v2, '+', v18
    EndForLoop
    Return v2
EndPlainFunction
BeginForLoopInitializer
    v19 <- LoadInteger '0'
BeginForLoopCondition -> v20
    v21 <- LoadInteger '2'
    v22 <- Compare v20, '<', v21
BeginForLoopAfterthought v22 -> v23
    v24 <- UnaryOperation v23, '++'
BeginForLoopBody -> v25
    v26 <- LoadInteger '509500'
    v27 <- CallFunction v0, []
EndForLoop


function f() {
    var sum = 0;
    for (let i4 = 0; i4 < 1000; i4++) {
        var x = i4 + 2;
        var y = x + 5;
        var z = y + 3;
        sum += z;
    }
    return sum;
}
for (let i20 = 0; i20 < 2; i20++) {
    f();
}

FuzzIL program written to corpus/osr-simple.fzil
