[-5.0,0.7740287619780741,-1e-15,-2.2250738585072014e-308,-4.0,0.5557243044040994,1.7976931348623157e+308];
const v2 = [765240.6780393578,155360.62200054992,-2.0,1.7976931348623157e+308];
const v3 = [1000000000000.0,3.0,1000000.0,-4.0,903113.6808067281,0.6453421003592582,-568.1274335696585,5.0];
try { new Uint16Array(v3, false, v3); } catch (e) {}
const v7 = new Uint16Array(1599);
v7[1337];
const v10 = 6 + 6;
try { new BigInt64Array(false, v10, false); } catch (e) {}
BigInt64Array.prototype = BigInt64Array;
new BigInt64Array(6);
-81;
try { new Uint8Array(1599, 1599, v3); } catch (e) {}
const v18 = new Uint8Array(81);
v18.g = v18;
let v19;
try { v19 = v18.set(false); } catch (e) {}
const v21 = Math.imul;
try { v21(v19, v3); } catch (e) {}
let v23;
try { v23 = v21(BigInt64Array, BigInt64Array); } catch (e) {}
v23 >>> v23;
var imul_func = v21;
function imul_polyfill(a27, a28) {
    a28--;
    16 / 16;
    const v32 = a27 >>> 16;
    v32 !== v32;
    65535 + 65535;
    var ah = v32 & 65535;
    65535 >>> 65535;
    var al = a27 & 65535;
    al ^ al;
    const v46 = (a28 >>> 16) & 65535;
    var bl = a28 & 65535;
    const v50 = al * bl;
    const v51 = ah * bl;
    let v52 = al * v46;
    v52--;
    let v54 = v51 + v52;
    v54++;
    const v57 = v54 << 16;
    const v58 = v57 & v57;
    v58 - v58;
    const v62 = v50 + (v57 >>> 0);
    0 - 0;
    return v62 | 0;
}
imul_polyfill.prototype = imul_polyfill;
imul_polyfill.prototype = imul_polyfill;
function TestMathImul(a67, a68, a69) {
    a67 & a67;
    a68 + a68;
    a69 % a69;
    function imul_meth_closure(a74, a75) {
        a74 >>> a74;
        a75 >>> a75;
        -a74;
        a75 * a75;
        return Math.imul(a74, a75);
    }
    function imul_func_closure(a82, a83) {
        a83 >> a83;
        a82 > a82;
        let v86 = imul_func(a82, a83);
        v86--;
        -v86;
        return v86;
    }
    let v89 = imul_polyfill(a68, a69);
    v89--;
    const v91 = Math.imul(a68, a69);
    v91 ^ v91;
    imul_func(a68, a69);
    imul_meth_closure(a68, a69);
    imul_meth_closure(a68, a69);
    const v96 = imul_func_closure(a68, a69);
    v96 % v96;
    imul_func_closure(a68, a69);
    const v99 = imul_func_closure(a68, a69);
    const v100 = v99 % v99;
    v100 != v100;
}
try { new TestMathImul(v18, Uint16Array, v2); } catch (e) {}
TestMathImul.name;
2 / 2;
4 * 4;
TestMathImul(8, 2, 4);
const v111 = -8;
v111 == v111;
const v114 = -1;
v114 | v114;
v114 > v114;
8 + 8;
const v119 = TestMathImul(v111, v114, 8);
v119 ?? v119;
const v123 = -2;
let v125 = -2;
v125--;
v125 - v125;
TestMathImul(4, v123, v125);
5 >> 5;
const v131 = -5;
-4294967295;
TestMathImul(v131, 4294967295, 5);
const v140 = TestMathImul(-10, 4294967294, 5);
const v141 = v140 ?? v140;
v141 ?? v141;
7 - 7;
false && false;
const v150 = TestMathImul(0, 7, false);
const v151 = v150 ?? v150;
v151 ?? v151;
let v153 = 0;
v153--;
!(false || false);
false && false;
TestMathImul(v153, false, false);
!(7 < 7);
true || true;
TestMathImul(7, true, 7);
7 * 7;
const v172 = TestMathImul(7, 7);
const v173 = v172 ?? v172;
v173 ?? v173;
true || true;
true && true;
const v180 = TestMathImul(1, true, true);
v180 ?? v180;
false || false;
TestMathImul(0, false, true);
const v190 = TestMathImul(0, true, false);
v190 ?? v190;
v190 ?? v190;
const v195 = undefined ?? undefined;
v195 ?? v195;
7 >>> 7;
const v199 = TestMathImul(0, undefined, 7);
v199 ?? v199;
let v202 = 0 - 0;
v202--;
7 - 7;
TestMathImul(0, 7, undefined);
TestMathImul(0, undefined, undefined);
0 & 0;
const v215 = -0;
7 - 7;
let v218 = 7 << 7;
v218++;
TestMathImul(0, v215, 7);
const v224 = 0 != 0;
v224 && v224;
const v227 = TestMathImul(0, 7, -0);
v227 ?? v227;
let v229 = 0;
v229++;
0.1 * 0.1;
-7;
const v235 = TestMathImul(v229, 0.1, 7);
v235 ?? v235;
-(0.1 | 0.1);
const v242 = TestMathImul(0, 7, 0.1);
v242 ?? v242;
const v244 = v242 ?? v242;
v244 ?? v244;
const v249 = TestMathImul(0, 0.9, 7);
v249 ?? v249;
v249 ?? v249;
const v255 = TestMathImul(0, 7, 0.9);
v255 ?? v255;
const v260 = TestMathImul(7, 1.1, 7);
v260 ?? v260;
7 <= 7;
7 != 7;
TestMathImul(7, 7, 1.1);
const v271 = TestMathImul(7, 1.9, 7);
v271 ?? v271;
const v276 = TestMathImul(7, 7, 1.9);
const v277 = v276 ?? v276;
v277 ?? v277;
7 & 7;
TestMathImul(0, "str", 7);
0 % 0;
-0;
7 >>> 7;
const v290 = TestMathImul(0, 7, "str");
v290 ?? v290;
0 | 0;
const v294 = {};
v294.c = v294;
v294.h = v294;
let v295 = 7;
const v296 = v295--;
v296 >>> v296;
const v298 = TestMathImul(0, v294, v295);
v298 ?? v298;
const v303 = TestMathImul(0, 7, {});
v303 ?? v303;
const v306 = [];
let v307;
try { v307 = v306.splice(0.1, 7); } catch (e) {}
try { v307.some(0); } catch (e) {}
TestMathImul(0, v306, 7);
const v314 = TestMathImul(0, 7, []);
v314 ?? v314;
v314 ?? v314;
var two_30 = 1 << 30;
~two_30;
const v322 = -two_30;
v322 - v322;
TestMathImul(v322, two_30, 7);
let v327 = 0;
v327--;
TestMathImul(v327, two_30, two_30);
TestMathImul(two_30, -two_30, 7);
const v335 = TestMathImul(two_30, 7, -two_30);
v335 ?? v335;
0 >= 0;
const v339 = -two_30;
v339 >>> v339;
const v341 = -two_30;
-v341;
const v343 = v341 / v341;
v343 % v343;
TestMathImul(0, v339, v341);
var two_31 = 2 * two_30;
two_31 === two_31;
const v350 = -two_31;
v350 % v350;
7 - 7;
TestMathImul(v350, two_31, 7);
const v357 = TestMathImul(-two_31, 7, two_31);
v357 ?? v357;
v357 ?? v357;
-0;
const v362 = TestMathImul(0, two_31, two_31);
v362 ?? v362;
v362 ?? v362;
const v365 = -two_31;
const v366 = -two_31;
v366 >> v366;
7 / 7;
7 / 7;
TestMathImul(v365, v366, 7);
const v372 = -two_31;
let v373 = 7;
v373--;
const v375 = -two_31;
v375 !== v375;
TestMathImul(v372, v373, v375);
const v379 = -two_31;
v379 | v379;
const v381 = -two_31;
v381 - v381;
const v383 = TestMathImul(0, v379, v381);
v383 ?? v383;
1 ^ 1;
~1;
var max_val = two_31 - 1;
two_31 - 7;
-7;
7 * 7;
7 >>> 7;
const v397 = two_31 - 7;
v397 !== v397;
const v400 = TestMathImul(v397, 7, max_val);
v400 ?? v400;
const v403 = TestMathImul(1, max_val, max_val);
v403 ?? v403;
var two_16 = 1 << 16;
0 + 0;
const v411 = 0 | 0;
v411 - v411;
TestMathImul(0, two_16, two_16);
let v414 = -two_16;
let v415 = v414++;
v415--;
let v418 = two_16 - 1;
v418--;
TestMathImul(v414, v418, two_16);
TestMathImul(-two_16, two_16, two_16 - 1);
const v426 = -2;
v426 * v426;
const v430 = (v426 * two_16) + 1;
v430 === v430;
const v433 = two_16 - 1;
const v435 = two_16 - 1;
v435 & v435;
TestMathImul(v430, v433, v435);
