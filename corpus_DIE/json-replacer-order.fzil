v0 <- CreateArray []
v1 <- CreateNamedVariable 'log', 'var', v0
v2 <- CreateArray []
v3 <- LoadInteger '0'
BeginObjectLiteral
    BeginObjectLiteralMethod `get` -> v4
        v5 <- LoadString 'get 0'
        v6 <- CallMethod v1, 'push', [v5]
    EndObjectLiteralMethod
v7 <- EndObjectLiteral
v8 <- CreateNamedVariable 'Object', 'none'
v9 <- CallMethod v8, 'defineProperty', [v2, v3, v7]
v10 <- CreateNamedVariable 'replacer', 'var', v9
v11 <- CreateNamedVariable 'String', 'none'
v12 <- Construct v11, []
v13 <- LoadString 'toString'
BeginObjectLiteral
    BeginObjectLiteralMethod `value` -> v14
        v15 <- LoadString 'toString'
        v16 <- CallMethod v1, 'push', [v15]
        v17 <- LoadString ''
        Return v17
    EndObjectLiteralMethod
v18 <- EndObjectLiteral
v19 <- CallMethod v8, 'defineProperty', [v12, v13, v18]
v20 <- CreateNamedVariable 'space', 'var', v19
v21 <- LoadString ''
v22 <- CreateNamedVariable 'JSON', 'none'
v23 <- CallMethod v22, 'stringify', [v21, v10, v20]
v24 <- LoadInteger '2'
v25 <- GetProperty v1, 'length'
v26 <- LoadString 'get 0'
v27 <- GetElement v1, '0'
v28 <- LoadString 'toString'
v29 <- GetElement v1, '1'


var log = [];
const v2 = [];
const v7 = {
    get() {
        log.push("get 0");
    },
};
var replacer = Object.defineProperty(v2, 0, v7);
const v12 = new String();
const v18 = {
    value() {
        log.push("toString");
        return "";
    },
};
var space = Object.defineProperty(v12, "toString", v18);
JSON.stringify("", replacer, space);
log.length;
log[0];
log[1];

FuzzIL program written to corpus/json-replacer-order.fzil
