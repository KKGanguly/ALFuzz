v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> v2
        v3 <- LoadInteger '2'
        v4 <- UnaryOperation '-', v3
        v5 <- BinaryOperation v2, '*', v4
        v6 <- LoadInteger '1'
        v7 <- UnaryOperation '-', v6
        v8 <- CreateNamedVariable 'Math', 'none'
        v9 <- CallMethod v8, 'min', [v5, v7]
        v10 <- LoadInteger '2'
        v11 <- UnaryOperation '-', v10
        v12 <- Compare v9, '==', v11
        BeginIf v12
            v13 <- LoadInteger '0'
            Return v13
        EndIf
        v14 <- LoadInteger '1'
        Return v14
    EndPlainFunction
    v15 <- LoadInteger '0'
    v16 <- LoadInteger '1'
    v17 <- CallFunction v1, [v16]
    v18 <- LoadInteger '1'
    v19 <- LoadInteger '2'
    v20 <- CallFunction v1, [v19]
    v21 <- LoadInteger '0'
    v22 <- LoadInteger '1'
    v23 <- CallFunction v1, [v22]
    v24 <- LoadInteger '1'
    v25 <- LoadInteger '2'
    v26 <- CallFunction v1, [v25]
    v27 <- CallFunction v1, []
    v28 <- LoadInteger '1'
    v29 <- LoadInteger '0'
    v30 <- CallFunction v1, [v29]
    v31 <- CallFunction v1, []
EndPlainFunction
v32 <- CallFunction v0, []
v33 <- BeginPlainFunction -> 
    v34 <- BeginPlainFunction -> v35
        v36 <- LoadInteger '0'
        v37 <- BinaryOperation v35, '|', v36
        Reassign v35, v37
        v38 <- LoadInteger '1'
        v39 <- BinaryOperation v35, '-', v38
        v40 <- LoadInteger '1'
        v41 <- BinaryOperation v35, '+', v40
        v42 <- CreateNamedVariable 'Math', 'none'
        v43 <- CallMethod v42, 'min', [v39, v41]
        Return v43
    EndPlainFunction
    v44 <- LoadInteger '2'
    v45 <- LoadInteger '31'
    v46 <- CreateNamedVariable 'Math', 'none'
    v47 <- CallMethod v46, 'pow', [v44, v45]
    v48 <- UnaryOperation '-', v47
    v49 <- LoadInteger '1'
    v50 <- BinaryOperation v48, '-', v49
    v51 <- LoadInteger '2'
    v52 <- LoadInteger '31'
    v53 <- CallMethod v46, 'pow', [v51, v52]
    v54 <- UnaryOperation '-', v53
    v55 <- CallFunction v34, [v54]
    v56 <- LoadInteger '2'
    v57 <- LoadInteger '31'
    v58 <- CallMethod v46, 'pow', [v56, v57]
    v59 <- LoadInteger '2'
    v60 <- BinaryOperation v58, '-', v59
    v61 <- LoadInteger '2'
    v62 <- LoadInteger '31'
    v63 <- CallMethod v46, 'pow', [v61, v62]
    v64 <- LoadInteger '1'
    v65 <- BinaryOperation v63, '-', v64
    v66 <- CallFunction v34, [v65]
    v67 <- LoadInteger '2'
    v68 <- LoadInteger '31'
    v69 <- CallMethod v46, 'pow', [v67, v68]
    v70 <- UnaryOperation '-', v69
    v71 <- LoadInteger '1'
    v72 <- BinaryOperation v70, '-', v71
    v73 <- LoadInteger '2'
    v74 <- LoadInteger '31'
    v75 <- CallMethod v46, 'pow', [v73, v74]
    v76 <- UnaryOperation '-', v75
    v77 <- CallFunction v34, [v76]
    v78 <- LoadInteger '2'
    v79 <- LoadInteger '31'
    v80 <- CallMethod v46, 'pow', [v78, v79]
    v81 <- LoadInteger '2'
    v82 <- BinaryOperation v80, '-', v81
    v83 <- LoadInteger '2'
    v84 <- LoadInteger '31'
    v85 <- CallMethod v46, 'pow', [v83, v84]
    v86 <- LoadInteger '1'
    v87 <- BinaryOperation v85, '-', v86
    v88 <- CallFunction v34, [v87]
EndPlainFunction
v89 <- CallFunction v33, []


function f0() {
    function foo(a2) {
        if (Math.min(a2 * -2, -1) == -2) {
            return 0;
        }
        return 1;
    }
    foo(1);
    foo(2);
    foo(1);
    foo(2);
    foo();
    foo(0);
    foo();
}
f0();
function f33() {
    function foo(a35) {
        return Math.min((a35 = a35 | 0) - 1, a35 + 1);
    }
    -Math.pow(2, 31) - 1;
    foo(-Math.pow(2, 31));
    Math.pow(2, 31) - 2;
    foo(Math.pow(2, 31) - 1);
    -Math.pow(2, 31) - 1;
    foo(-Math.pow(2, 31));
    Math.pow(2, 31) - 2;
    foo(Math.pow(2, 31) - 1);
}
f33();

FuzzIL program written to corpus/number-min.fzil
