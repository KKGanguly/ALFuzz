v0 <- LoadInteger '0'
v1 <- CreateNamedVariable 'Number', 'none'
v2 <- CallMethod v1, 'isFinite', [v0]
v3 <- GetProperty v1, 'MIN_VALUE'
v4 <- CallMethod v1, 'isFinite', [v3]
v5 <- GetProperty v1, 'MAX_VALUE'
v6 <- CallMethod v1, 'isFinite', [v5]
v7 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v8 <- CallMethod v1, 'isFinite', [v7]
v9 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v10 <- LoadInteger '13'
v11 <- BinaryOperation v9, '-', v10
v12 <- CallMethod v1, 'isFinite', [v11]
v13 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v14 <- CallMethod v1, 'isFinite', [v13]
v15 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v16 <- LoadInteger '23'
v17 <- BinaryOperation v15, '+', v16
v18 <- CallMethod v1, 'isFinite', [v17]
v19 <- GetProperty v1, 'NaN'
v20 <- CallMethod v1, 'isFinite', [v19]
v21 <- GetProperty v1, 'POSITIVE_INFINITY'
v22 <- CallMethod v1, 'isFinite', [v21]
v23 <- GetProperty v1, 'NEGATIVE_INFINITY'
v24 <- CallMethod v1, 'isFinite', [v23]
v25 <- LoadInteger '0'
v26 <- Construct v1, [v25]
v27 <- CallMethod v1, 'isFinite', [v26]
v28 <- LoadInteger '1'
v29 <- LoadInteger '0'
v30 <- BinaryOperation v28, '/', v29
v31 <- CallMethod v1, 'isFinite', [v30]
v32 <- LoadInteger '1'
v33 <- UnaryOperation '-', v32
v34 <- LoadInteger '0'
v35 <- BinaryOperation v33, '/', v34
v36 <- CallMethod v1, 'isFinite', [v35]
BeginObjectLiteral
v37 <- EndObjectLiteral
v38 <- CallMethod v1, 'isFinite', [v37]
v39 <- CreateArray []
v40 <- CallMethod v1, 'isFinite', [v39]
v41 <- LoadString 's'
v42 <- CallMethod v1, 'isFinite', [v41]
v43 <- LoadNull
v44 <- CallMethod v1, 'isFinite', [v43]
v45 <- LoadUndefined
v46 <- CallMethod v1, 'isFinite', [v45]
v47 <- LoadInteger '0'
v48 <- CallMethod v1, 'isNaN', [v47]
v49 <- GetProperty v1, 'MIN_VALUE'
v50 <- CallMethod v1, 'isNaN', [v49]
v51 <- GetProperty v1, 'MAX_VALUE'
v52 <- CallMethod v1, 'isNaN', [v51]
v53 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v54 <- LoadInteger '13'
v55 <- BinaryOperation v53, '-', v54
v56 <- CallMethod v1, 'isNaN', [v55]
v57 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v58 <- LoadInteger '23'
v59 <- BinaryOperation v57, '+', v58
v60 <- CallMethod v1, 'isNaN', [v59]
v61 <- GetProperty v1, 'NaN'
v62 <- CallMethod v1, 'isNaN', [v61]
v63 <- GetProperty v1, 'POSITIVE_INFINITY'
v64 <- CallMethod v1, 'isNaN', [v63]
v65 <- GetProperty v1, 'NEGATIVE_INFINITY'
v66 <- CallMethod v1, 'isNaN', [v65]
v67 <- GetProperty v1, 'EPSILON'
v68 <- CallMethod v1, 'isNaN', [v67]
v69 <- LoadInteger '0'
v70 <- Construct v1, [v69]
v71 <- CallMethod v1, 'isNaN', [v70]
v72 <- LoadInteger '1'
v73 <- LoadInteger '0'
v74 <- BinaryOperation v72, '/', v73
v75 <- CallMethod v1, 'isNaN', [v74]
v76 <- LoadInteger '1'
v77 <- UnaryOperation '-', v76
v78 <- LoadInteger '0'
v79 <- BinaryOperation v77, '/', v78
v80 <- CallMethod v1, 'isNaN', [v79]
BeginObjectLiteral
v81 <- EndObjectLiteral
v82 <- CallMethod v1, 'isNaN', [v81]
v83 <- CreateArray []
v84 <- CallMethod v1, 'isNaN', [v83]
v85 <- LoadString 's'
v86 <- CallMethod v1, 'isNaN', [v85]
v87 <- LoadNull
v88 <- CallMethod v1, 'isNaN', [v87]
v89 <- LoadUndefined
v90 <- CallMethod v1, 'isNaN', [v89]
BeginObjectLiteral
v91 <- EndObjectLiteral
v92 <- CallMethod v1, 'isInteger', [v91]
v93 <- CreateArray []
v94 <- CallMethod v1, 'isInteger', [v93]
v95 <- LoadString 's'
v96 <- CallMethod v1, 'isInteger', [v95]
v97 <- LoadNull
v98 <- CallMethod v1, 'isInteger', [v97]
v99 <- LoadUndefined
v100 <- CallMethod v1, 'isInteger', [v99]
v101 <- LoadInteger '2'
v102 <- Construct v1, [v101]
v103 <- CallMethod v1, 'isInteger', [v102]
v104 <- LoadInteger '0'
v105 <- CallMethod v1, 'isInteger', [v104]
v106 <- GetProperty v1, 'MIN_VALUE'
v107 <- CallMethod v1, 'isInteger', [v106]
v108 <- GetProperty v1, 'MAX_VALUE'
v109 <- CallMethod v1, 'isInteger', [v108]
v110 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v111 <- CallMethod v1, 'isInteger', [v110]
v112 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v113 <- LoadInteger '13'
v114 <- BinaryOperation v112, '-', v113
v115 <- CallMethod v1, 'isInteger', [v114]
v116 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v117 <- CallMethod v1, 'isInteger', [v116]
v118 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v119 <- LoadInteger '23'
v120 <- BinaryOperation v118, '+', v119
v121 <- CallMethod v1, 'isInteger', [v120]
v122 <- GetProperty v1, 'NaN'
v123 <- CallMethod v1, 'isInteger', [v122]
v124 <- GetProperty v1, 'POSITIVE_INFINITY'
v125 <- CallMethod v1, 'isInteger', [v124]
v126 <- GetProperty v1, 'NEGATIVE_INFINITY'
v127 <- CallMethod v1, 'isInteger', [v126]
v128 <- LoadInteger '1'
v129 <- LoadInteger '0'
v130 <- BinaryOperation v128, '/', v129
v131 <- CallMethod v1, 'isInteger', [v130]
v132 <- LoadInteger '1'
v133 <- UnaryOperation '-', v132
v134 <- LoadInteger '0'
v135 <- BinaryOperation v133, '/', v134
v136 <- CallMethod v1, 'isInteger', [v135]
v137 <- GetProperty v1, 'EPSILON'
v138 <- CallMethod v1, 'isInteger', [v137]
BeginObjectLiteral
v139 <- EndObjectLiteral
v140 <- CallMethod v1, 'isSafeInteger', [v139]
v141 <- CreateArray []
v142 <- CallMethod v1, 'isSafeInteger', [v141]
v143 <- LoadString 's'
v144 <- CallMethod v1, 'isSafeInteger', [v143]
v145 <- LoadNull
v146 <- CallMethod v1, 'isSafeInteger', [v145]
v147 <- LoadUndefined
v148 <- CallMethod v1, 'isSafeInteger', [v147]
v149 <- LoadInteger '2'
v150 <- Construct v1, [v149]
v151 <- CallMethod v1, 'isSafeInteger', [v150]
v152 <- LoadInteger '0'
v153 <- CallMethod v1, 'isSafeInteger', [v152]
v154 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v155 <- CallMethod v1, 'isSafeInteger', [v154]
v156 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v157 <- LoadInteger '13'
v158 <- BinaryOperation v156, '-', v157
v159 <- CallMethod v1, 'isSafeInteger', [v158]
v160 <- GetProperty v1, 'MIN_SAFE_INTEGER'
v161 <- LoadInteger '13'
v162 <- BinaryOperation v160, '+', v161
v163 <- CallMethod v1, 'isSafeInteger', [v162]
v164 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v165 <- CallMethod v1, 'isSafeInteger', [v164]
v166 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v167 <- LoadInteger '23'
v168 <- BinaryOperation v166, '+', v167
v169 <- CallMethod v1, 'isSafeInteger', [v168]
v170 <- GetProperty v1, 'MAX_SAFE_INTEGER'
v171 <- LoadInteger '23'
v172 <- BinaryOperation v170, '-', v171
v173 <- CallMethod v1, 'isSafeInteger', [v172]
v174 <- GetProperty v1, 'MIN_VALUE'
v175 <- CallMethod v1, 'isSafeInteger', [v174]
v176 <- GetProperty v1, 'MAX_VALUE'
v177 <- CallMethod v1, 'isSafeInteger', [v176]
v178 <- GetProperty v1, 'NaN'
v179 <- CallMethod v1, 'isSafeInteger', [v178]
v180 <- GetProperty v1, 'POSITIVE_INFINITY'
v181 <- CallMethod v1, 'isSafeInteger', [v180]
v182 <- GetProperty v1, 'NEGATIVE_INFINITY'
v183 <- CallMethod v1, 'isSafeInteger', [v182]
v184 <- LoadInteger '1'
v185 <- LoadInteger '0'
v186 <- BinaryOperation v184, '/', v185
v187 <- CallMethod v1, 'isSafeInteger', [v186]
v188 <- LoadInteger '1'
v189 <- UnaryOperation '-', v188
v190 <- LoadInteger '0'
v191 <- BinaryOperation v189, '/', v190
v192 <- CallMethod v1, 'isSafeInteger', [v191]
v193 <- GetProperty v1, 'EPSILON'
v194 <- CallMethod v1, 'isSafeInteger', [v193]
v195 <- LoadInteger '2'
v196 <- LoadInteger '52'
v197 <- CreateNamedVariable 'Math', 'none'
v198 <- CallMethod v197, 'pow', [v195, v196]
v199 <- CreateNamedVariable 'near_upper', 'var', v198
v200 <- CallMethod v1, 'isSafeInteger', [v199]
v201 <- LoadInteger '2'
v202 <- BinaryOperation v201, '*', v199
v203 <- CallMethod v1, 'isSafeInteger', [v202]
v204 <- LoadInteger '2'
v205 <- BinaryOperation v204, '*', v199
v206 <- LoadInteger '1'
v207 <- BinaryOperation v205, '-', v206
v208 <- CallMethod v1, 'isSafeInteger', [v207]
v209 <- LoadInteger '2'
v210 <- BinaryOperation v209, '*', v199
v211 <- LoadInteger '2'
v212 <- BinaryOperation v210, '-', v211
v213 <- CallMethod v1, 'isSafeInteger', [v212]
v214 <- LoadInteger '2'
v215 <- BinaryOperation v214, '*', v199
v216 <- LoadInteger '1'
v217 <- BinaryOperation v215, '+', v216
v218 <- CallMethod v1, 'isSafeInteger', [v217]
v219 <- LoadInteger '2'
v220 <- BinaryOperation v219, '*', v199
v221 <- LoadInteger '2'
v222 <- BinaryOperation v220, '+', v221
v223 <- CallMethod v1, 'isSafeInteger', [v222]
v224 <- LoadInteger '2'
v225 <- BinaryOperation v224, '*', v199
v226 <- LoadInteger '7'
v227 <- BinaryOperation v225, '+', v226
v228 <- CallMethod v1, 'isSafeInteger', [v227]
v229 <- UnaryOperation '-', v199
v230 <- CreateNamedVariable 'near_lower', 'var', v229
v231 <- CallMethod v1, 'isSafeInteger', [v230]
v232 <- LoadInteger '2'
v233 <- BinaryOperation v232, '*', v230
v234 <- CallMethod v1, 'isSafeInteger', [v233]
v235 <- LoadInteger '2'
v236 <- BinaryOperation v235, '*', v230
v237 <- LoadInteger '1'
v238 <- BinaryOperation v236, '+', v237
v239 <- CallMethod v1, 'isSafeInteger', [v238]
v240 <- LoadInteger '2'
v241 <- BinaryOperation v240, '*', v230
v242 <- LoadInteger '2'
v243 <- BinaryOperation v241, '+', v242
v244 <- CallMethod v1, 'isSafeInteger', [v243]
v245 <- LoadInteger '2'
v246 <- BinaryOperation v245, '*', v230
v247 <- LoadInteger '1'
v248 <- BinaryOperation v246, '-', v247
v249 <- CallMethod v1, 'isSafeInteger', [v248]
v250 <- LoadInteger '2'
v251 <- BinaryOperation v250, '*', v230
v252 <- LoadInteger '2'
v253 <- BinaryOperation v251, '-', v252
v254 <- CallMethod v1, 'isSafeInteger', [v253]
v255 <- LoadInteger '2'
v256 <- BinaryOperation v255, '*', v230
v257 <- LoadInteger '7'
v258 <- BinaryOperation v256, '-', v257
v259 <- CallMethod v1, 'isSafeInteger', [v258]


Number.isFinite(0);
Number.isFinite(Number.MIN_VALUE);
Number.isFinite(Number.MAX_VALUE);
Number.isFinite(Number.MIN_SAFE_INTEGER);
Number.isFinite(Number.MIN_SAFE_INTEGER - 13);
Number.isFinite(Number.MAX_SAFE_INTEGER);
Number.isFinite(Number.MAX_SAFE_INTEGER + 23);
Number.isFinite(Number.NaN);
Number.isFinite(Number.POSITIVE_INFINITY);
Number.isFinite(Number.NEGATIVE_INFINITY);
const v26 = new Number(0);
Number.isFinite(v26);
Number.isFinite(1 / 0);
Number.isFinite(-1 / 0);
Number.isFinite({});
Number.isFinite([]);
Number.isFinite("s");
Number.isFinite(null);
Number.isFinite(undefined);
Number.isNaN(0);
Number.isNaN(Number.MIN_VALUE);
Number.isNaN(Number.MAX_VALUE);
Number.isNaN(Number.MIN_SAFE_INTEGER - 13);
Number.isNaN(Number.MAX_SAFE_INTEGER + 23);
Number.isNaN(Number.NaN);
Number.isNaN(Number.POSITIVE_INFINITY);
Number.isNaN(Number.NEGATIVE_INFINITY);
Number.isNaN(Number.EPSILON);
const v70 = new Number(0);
Number.isNaN(v70);
Number.isNaN(1 / 0);
Number.isNaN(-1 / 0);
Number.isNaN({});
Number.isNaN([]);
Number.isNaN("s");
Number.isNaN(null);
Number.isNaN(undefined);
Number.isInteger({});
Number.isInteger([]);
Number.isInteger("s");
Number.isInteger(null);
Number.isInteger(undefined);
const v102 = new Number(2);
Number.isInteger(v102);
Number.isInteger(0);
Number.isInteger(Number.MIN_VALUE);
Number.isInteger(Number.MAX_VALUE);
Number.isInteger(Number.MIN_SAFE_INTEGER);
Number.isInteger(Number.MIN_SAFE_INTEGER - 13);
Number.isInteger(Number.MAX_SAFE_INTEGER);
Number.isInteger(Number.MAX_SAFE_INTEGER + 23);
Number.isInteger(Number.NaN);
Number.isInteger(Number.POSITIVE_INFINITY);
Number.isInteger(Number.NEGATIVE_INFINITY);
Number.isInteger(1 / 0);
Number.isInteger(-1 / 0);
Number.isInteger(Number.EPSILON);
Number.isSafeInteger({});
Number.isSafeInteger([]);
Number.isSafeInteger("s");
Number.isSafeInteger(null);
Number.isSafeInteger(undefined);
const v150 = new Number(2);
Number.isSafeInteger(v150);
Number.isSafeInteger(0);
Number.isSafeInteger(Number.MIN_SAFE_INTEGER);
Number.isSafeInteger(Number.MIN_SAFE_INTEGER - 13);
Number.isSafeInteger(Number.MIN_SAFE_INTEGER + 13);
Number.isSafeInteger(Number.MAX_SAFE_INTEGER);
Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 23);
Number.isSafeInteger(Number.MAX_SAFE_INTEGER - 23);
Number.isSafeInteger(Number.MIN_VALUE);
Number.isSafeInteger(Number.MAX_VALUE);
Number.isSafeInteger(Number.NaN);
Number.isSafeInteger(Number.POSITIVE_INFINITY);
Number.isSafeInteger(Number.NEGATIVE_INFINITY);
Number.isSafeInteger(1 / 0);
Number.isSafeInteger(-1 / 0);
Number.isSafeInteger(Number.EPSILON);
var near_upper = Math.pow(2, 52);
Number.isSafeInteger(near_upper);
Number.isSafeInteger(2 * near_upper);
Number.isSafeInteger((2 * near_upper) - 1);
Number.isSafeInteger((2 * near_upper) - 2);
Number.isSafeInteger((2 * near_upper) + 1);
Number.isSafeInteger((2 * near_upper) + 2);
Number.isSafeInteger((2 * near_upper) + 7);
var near_lower = -near_upper;
Number.isSafeInteger(near_lower);
Number.isSafeInteger(2 * near_lower);
Number.isSafeInteger((2 * near_lower) + 1);
Number.isSafeInteger((2 * near_lower) + 2);
Number.isSafeInteger((2 * near_lower) - 1);
Number.isSafeInteger((2 * near_lower) - 2);
Number.isSafeInteger((2 * near_lower) - 7);

FuzzIL program written to corpus/number-is.fzil
