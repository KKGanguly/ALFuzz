v0 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v1 <- LoadInteger '5'
    BeginForLoopCondition -> v2
        v3 <- LoadInteger '10'
        v4 <- Compare v2, '<', v3
    BeginForLoopAfterthought v4 -> v5
        v6 <- UnaryOperation v5, '++'
    BeginForLoopBody -> v7
        v8 <- LoadInteger '0'
        v9 <- Compare v7, '<', v8
        BeginIf v9
            v10 <- LoadBoolean 'false'
            Return v10
        EndIf
        v11 <- LoadInteger '20'
        v12 <- Compare v7, '>', v11
        BeginIf v12
            v13 <- LoadBoolean 'false'
            Return v13
        EndIf
        v14 <- LoadInteger '7'
        v15 <- Compare v7, '===', v14
        BeginIf v15
            v16 <- LoadBoolean 'true'
            Return v16
        EndIf
    EndForLoop
    v17 <- LoadBoolean 'false'
    Return v17
EndPlainFunction
v18 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v19 <- LoadInteger '5'
    BeginForLoopCondition -> v20
        v21 <- LoadInteger '10'
        v22 <- Compare v20, '<', v21
    BeginForLoopAfterthought v22 -> v23
        v24 <- UnaryOperation v23, '++'
    BeginForLoopBody -> v25
        v26 <- LoadInteger '0'
        v27 <- Compare v25, '<', v26
        BeginIf v27
            v28 <- LoadBoolean 'false'
            Return v28
        EndIf
        v29 <- LoadInteger '10'
        v30 <- Compare v25, '===', v29
        BeginIf v30
            v31 <- LoadBoolean 'false'
            Return v31
        EndIf
    EndForLoop
    v32 <- LoadBoolean 'true'
    Return v32
EndPlainFunction
v33 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v34 <- LoadInteger '5'
    BeginForLoopCondition -> v35
        v36 <- LoadInteger '10'
        v37 <- Compare v35, '<=', v36
    BeginForLoopAfterthought v37 -> v38
        v39 <- UnaryOperation v38, '++'
    BeginForLoopBody -> v40
        v41 <- LoadInteger '0'
        v42 <- Compare v40, '<', v41
        BeginIf v42
            v43 <- LoadBoolean 'false'
            Return v43
        EndIf
        v44 <- LoadInteger '10'
        v45 <- Compare v40, '===', v44
        BeginIf v45
            v46 <- LoadBoolean 'true'
            Return v46
        EndIf
    EndForLoop
    v47 <- LoadBoolean 'false'
    Return v47
EndPlainFunction
v48 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v49 <- LoadInteger '10'
    BeginForLoopCondition -> v50
        v51 <- LoadInteger '5'
        v52 <- Compare v50, '>', v51
    BeginForLoopAfterthought v52 -> v53
    BeginForLoopBody -> v54
        v55 <- LoadInteger '0'
        v56 <- Compare v54, '<', v55
        BeginIf v56
            v57 <- LoadBoolean 'false'
            Return v57
        EndIf
        v58 <- LoadInteger '20'
        v59 <- Compare v54, '>', v58
        BeginIf v59
            v60 <- LoadBoolean 'false'
            Return v60
        EndIf
        v61 <- LoadInteger '7'
        v62 <- Compare v54, '===', v61
        BeginIf v62
            v63 <- LoadBoolean 'true'
            Return v63
        EndIf
        v64 <- LoadInteger '1'
        Update v54, '-', v64
    EndForLoop
    v65 <- LoadBoolean 'false'
    Return v65
EndPlainFunction
v66 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v67 <- LoadInteger '10'
    BeginForLoopCondition -> v68
        v69 <- LoadInteger '5'
        v70 <- Compare v68, '>', v69
    BeginForLoopAfterthought v70 -> v71
        v72 <- UnaryOperation v71, '--'
    BeginForLoopBody -> v73
        v74 <- LoadInteger '0'
        v75 <- Compare v73, '<', v74
        BeginIf v75
            v76 <- LoadBoolean 'false'
            Return v76
        EndIf
        v77 <- LoadInteger '7'
        v78 <- Compare v73, '===', v77
        BeginIf v78
            v79 <- LoadBoolean 'true'
            Return v79
        EndIf
    EndForLoop
    v80 <- LoadBoolean 'false'
    Return v80
EndPlainFunction
v81 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v82 <- LoadInteger '10'
    BeginForLoopCondition -> v83
        v84 <- LoadInteger '5'
        v85 <- Compare v83, '>', v84
    BeginForLoopAfterthought v85 -> v86
        v87 <- UnaryOperation v86, '--'
    BeginForLoopBody -> v88
        v89 <- LoadInteger '0'
        v90 <- Compare v88, '<', v89
        BeginIf v90
            v91 <- LoadBoolean 'false'
            Return v91
        EndIf
        v92 <- LoadInteger '5'
        v93 <- Compare v88, '===', v92
        BeginIf v93
            v94 <- LoadBoolean 'false'
            Return v94
        EndIf
    EndForLoop
    v95 <- LoadBoolean 'true'
    Return v95
EndPlainFunction
v96 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v97 <- LoadInteger '10'
    BeginForLoopCondition -> v98
        v99 <- LoadInteger '5'
        v100 <- Compare v98, '>=', v99
    BeginForLoopAfterthought v100 -> v101
        v102 <- UnaryOperation v101, '--'
    BeginForLoopBody -> v103
        v104 <- LoadInteger '0'
        v105 <- Compare v103, '<', v104
        BeginIf v105
            v106 <- LoadBoolean 'false'
            Return v106
        EndIf
        v107 <- LoadInteger '5'
        v108 <- Compare v103, '===', v107
        BeginIf v108
            v109 <- LoadBoolean 'true'
            Return v109
        EndIf
    EndForLoop
    v110 <- LoadBoolean 'false'
    Return v110
EndPlainFunction
v111 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v112 <- LoadInteger '5'
    BeginForLoopCondition -> v113
        v114 <- LoadInteger '10'
        v115 <- Compare v113, '<', v114
    BeginForLoopAfterthought v115 -> v116
    BeginForLoopBody -> v117
        v118 <- LoadInteger '0'
        v119 <- Compare v117, '<', v118
        BeginIf v119
            v120 <- LoadBoolean 'false'
            Return v120
        EndIf
        v121 <- LoadInteger '7'
        v122 <- Compare v117, '===', v121
        BeginIf v122
            v123 <- LoadBoolean 'true'
            Return v123
        EndIf
        v124 <- LoadInteger '1'
        v125 <- UnaryOperation '-', v124
        Update v117, '-', v125
    EndForLoop
    v126 <- LoadBoolean 'false'
    Return v126
EndPlainFunction
v127 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v128 <- LoadInteger '5'
    BeginForLoopCondition -> v129
        v130 <- LoadInteger '10'
        v131 <- Compare v129, '<', v130
    BeginForLoopAfterthought v131 -> v132
        v133 <- UnaryOperation v132, '++'
    BeginForLoopBody -> v134
        BeginForLoopInitializer
            v135 <- LoadInteger '5'
        BeginForLoopCondition -> v136
            v137 <- Compare v136, '<', v134
        BeginForLoopAfterthought v137 -> v138
            v139 <- UnaryOperation v138, '++'
        BeginForLoopBody -> v140
            v141 <- LoadInteger '0'
            v142 <- Compare v140, '<', v141
            BeginIf v142
                v143 <- LoadBoolean 'false'
                Return v143
            EndIf
            v144 <- LoadInteger '7'
            v145 <- Compare v140, '===', v144
            BeginIf v145
                v146 <- LoadBoolean 'true'
                Return v146
            EndIf
        EndForLoop
    EndForLoop
    v147 <- LoadBoolean 'false'
    Return v147
EndPlainFunction
v148 <- BeginPlainFunction -> v149
    v150 <- CallFunction v149, []
    v151 <- CallFunction v149, []
    v152 <- CallFunction v149, []
EndPlainFunction
v153 <- CallFunction v148, [v0]
v154 <- CallFunction v148, [v18]
v155 <- CallFunction v148, [v33]
v156 <- CallFunction v148, [v48]
v157 <- CallFunction v148, [v66]
v158 <- CallFunction v148, [v81]
v159 <- CallFunction v148, [v96]
v160 <- CallFunction v148, [v111]
v161 <- CallFunction v148, [v127]


function positive_increment() {
    for (let i2 = 5; i2 < 10; i2++) {
        if (i2 < 0) {
            return false;
        }
        if (i2 > 20) {
            return false;
        }
        if (i2 === 7) {
            return true;
        }
    }
    return false;
}
function positive_increment_strict() {
    for (let i20 = 5; i20 < 10; i20++) {
        if (i20 < 0) {
            return false;
        }
        if (i20 === 10) {
            return false;
        }
    }
    return true;
}
function positive_increment_non_strict() {
    for (let i35 = 5; i35 <= 10; i35++) {
        if (i35 < 0) {
            return false;
        }
        if (i35 === 10) {
            return true;
        }
    }
    return false;
}
function negative_increment() {
    for (let i50 = 10; i50 > 5;) {
        if (i50 < 0) {
            return false;
        }
        if (i50 > 20) {
            return false;
        }
        if (i50 === 7) {
            return true;
        }
        i50 -= 1;
    }
    return false;
}
function positive_decrement() {
    for (let i68 = 10; i68 > 5; i68--) {
        if (i68 < 0) {
            return false;
        }
        if (i68 === 7) {
            return true;
        }
    }
    return false;
}
function positive_decrement_strict() {
    for (let i83 = 10; i83 > 5; i83--) {
        if (i83 < 0) {
            return false;
        }
        if (i83 === 5) {
            return false;
        }
    }
    return true;
}
function positive_decrement_non_strict() {
    for (let i98 = 10; i98 >= 5; i98--) {
        if (i98 < 0) {
            return false;
        }
        if (i98 === 5) {
            return true;
        }
    }
    return false;
}
function negative_decrement() {
    for (let i113 = 5; i113 < 10;) {
        if (i113 < 0) {
            return false;
        }
        if (i113 === 7) {
            return true;
        }
        i113 -= -1;
    }
    return false;
}
function variable_bound() {
    for (let i129 = 5; i129 < 10; i129++) {
        for (let i136 = 5; i136 < i129; i136++) {
            if (i136 < 0) {
                return false;
            }
            if (i136 === 7) {
                return true;
            }
        }
    }
    return false;
}
function test(a149) {
    a149();
    a149();
    a149();
}
test(positive_increment);
test(positive_increment_strict);
test(positive_increment_non_strict);
test(negative_increment);
test(positive_decrement);
test(positive_decrement_strict);
test(positive_decrement_non_strict);
test(negative_decrement);
test(variable_bound);

FuzzIL program written to corpus/induction-variable-turbofan.fzil
