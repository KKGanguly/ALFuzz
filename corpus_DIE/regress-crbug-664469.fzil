v0 <- BeginPlainFunction -> v1, v2
    v3 <- LoadString 'object'
    SetComputedProperty v1, v2, v3
EndPlainFunction
v4 <- LoadString 'make it generic'
v5 <- LoadInteger '0'
v6 <- CallFunction v0, [v4, v5]
v7 <- LoadInteger '500000'
v8 <- LoadInteger '8'
v9 <- BinaryOperation v7, '/', v8
v10 <- CreateNamedVariable 'kLength', 'var', v9
v11 <- LoadFloat '0.1'
v12 <- CreateNamedVariable 'kValue', 'var', v11
v13 <- CreateNamedVariable 'Array', 'none'
v14 <- Construct v13, [v10]
v15 <- CreateNamedVariable 'a', 'var', v14
BeginForLoopInitializer
    v16 <- LoadInteger '0'
BeginForLoopCondition -> v17
    v18 <- Compare v17, '<', v10
BeginForLoopAfterthought v18 -> v19
    v20 <- UnaryOperation v19, '++'
BeginForLoopBody -> v21
    SetComputedProperty v15, v21, v12
EndForLoop
v22 <- LoadInteger '0'
v23 <- CallFunction v0, [v15, v22]
BeginForLoopInitializer
    v24 <- LoadInteger '1'
BeginForLoopCondition -> v25
    v26 <- Compare v25, '<', v10
BeginForLoopAfterthought v26 -> v27
    v28 <- UnaryOperation v27, '++'
BeginForLoopBody -> v29
    v30 <- GetComputedProperty v15, v29
EndForLoop


function f(a1, a2) {
    a1[a2] = "object";
}
f("make it generic", 0);
var kLength = 500000 / 8;
var kValue = 0.1;
const v14 = new Array(kLength);
var a = v14;
for (let i17 = 0; i17 < kLength; i17++) {
    a[i17] = kValue;
}
f(a, 0);
for (let i25 = 1; i25 < kLength; i25++) {
    a[i25];
}

FuzzIL program written to corpus/regress-crbug-664469.fzil
