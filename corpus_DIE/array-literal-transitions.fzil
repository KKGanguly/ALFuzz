v0 <- BeginPlainFunction -> v1
    Return v1
EndPlainFunction
v2 <- BeginPlainFunction -> 
    v3 <- LoadInteger '1'
    v4 <- LoadInteger '2'
    v5 <- LoadInteger '3'
    v6 <- CreateArray [v3, v4, v5]
    v7 <- CreateNamedVariable 'a0', 'var', v6
    v8 <- LoadInteger '1'
    v9 <- CallFunction v0, [v8]
    v10 <- LoadInteger '2'
    v11 <- CallFunction v0, [v10]
    v12 <- LoadInteger '3'
    v13 <- CallFunction v0, [v12]
    v14 <- CreateArray [v9, v11, v13]
    v15 <- CreateNamedVariable 'a1', 'var', v14
    v16 <- LoadInteger '1'
    v17 <- LoadInteger '2'
    v18 <- LoadString 'three'
    v19 <- CallFunction v0, [v18]
    v20 <- CreateArray [v16, v17, v19]
    v21 <- CreateNamedVariable 'b0', 'var', v20
    v22 <- LoadInteger '1'
    v23 <- CallFunction v0, [v22]
    v24 <- LoadInteger '2'
    v25 <- CallFunction v0, [v24]
    v26 <- LoadString 'three'
    v27 <- CallFunction v0, [v26]
    v28 <- CreateArray [v23, v25, v27]
    v29 <- CreateNamedVariable 'b1', 'var', v28
    v30 <- LoadInteger '1'
    v31 <- LoadInteger '2'
    v32 <- LoadFloat '3.5'
    v33 <- CallFunction v0, [v32]
    v34 <- CreateArray [v30, v31, v33]
    v35 <- CreateNamedVariable 'c0', 'var', v34
    v36 <- LoadFloat '3.5'
    v37 <- GetElement v35, '2'
    v38 <- LoadInteger '2'
    v39 <- GetElement v35, '1'
    v40 <- LoadInteger '1'
    v41 <- GetElement v35, '0'
    v42 <- LoadInteger '1'
    v43 <- LoadInteger '2'
    v44 <- LoadFloat '3.5'
    v45 <- CreateArray [v42, v43, v44]
    v46 <- CreateNamedVariable 'c1', 'var', v45
    v47 <- LoadFloat '3.5'
    v48 <- GetElement v46, '2'
    v49 <- LoadInteger '2'
    v50 <- GetElement v46, '1'
    v51 <- LoadInteger '1'
    v52 <- GetElement v46, '0'
    v53 <- LoadInteger '1'
    v54 <- CallFunction v0, [v53]
    v55 <- LoadInteger '2'
    v56 <- CallFunction v0, [v55]
    v57 <- LoadFloat '3.5'
    v58 <- CallFunction v0, [v57]
    v59 <- CreateArray [v54, v56, v58]
    v60 <- CreateNamedVariable 'c2', 'var', v59
    v61 <- LoadFloat '3.5'
    v62 <- GetElement v60, '2'
    v63 <- LoadInteger '2'
    v64 <- GetElement v60, '1'
    v65 <- LoadInteger '1'
    v66 <- GetElement v60, '0'
    v67 <- CreateNamedVariable 'Object', 'none'
    v68 <- Construct v67, []
    v69 <- CreateNamedVariable 'object', 'var', v68
    v70 <- LoadInteger '1'
    v71 <- LoadInteger '2'
    v72 <- CreateArray [v70, v71, v69]
    v73 <- CreateNamedVariable 'd0', 'var', v72
    v74 <- GetElement v73, '2'
    v75 <- LoadInteger '2'
    v76 <- GetElement v73, '1'
    v77 <- LoadInteger '1'
    v78 <- GetElement v73, '0'
    v79 <- LoadInteger '1'
    v80 <- LoadInteger '2'
    v81 <- LoadFloat '3.5'
    v82 <- CreateArray [v79, v80, v81]
    v83 <- CreateNamedVariable 'e0', 'var', v82
    v84 <- LoadFloat '3.5'
    v85 <- GetElement v83, '2'
    v86 <- LoadInteger '2'
    v87 <- GetElement v83, '1'
    v88 <- LoadInteger '1'
    v89 <- GetElement v83, '0'
    v90 <- LoadInteger '1'
    v91 <- LoadInteger '2'
    v92 <- LoadInteger '1'
    v93 <- LoadInteger '2'
    v94 <- CreateArray [v92, v93]
    v95 <- CreateArray [v90, v91, v94]
    v96 <- CreateNamedVariable 'f0', 'var', v95
    v97 <- LoadInteger '1'
    v98 <- LoadInteger '2'
    v99 <- CreateArray [v97, v98]
    v100 <- GetElement v96, '2'
    v101 <- LoadInteger '2'
    v102 <- GetElement v96, '1'
    v103 <- LoadInteger '1'
    v104 <- GetElement v96, '0'
EndPlainFunction
BeginForLoopInitializer
    v105 <- LoadInteger '0'
BeginForLoopCondition -> v106
    v107 <- LoadInteger '3'
    v108 <- Compare v106, '<', v107
BeginForLoopAfterthought v108 -> v109
    v110 <- UnaryOperation v109, '++'
BeginForLoopBody -> v111
    v112 <- CallFunction v2, []
EndForLoop
v113 <- CallFunction v2, []
v114 <- BeginPlainFunction -> 
    v115 <- BeginPlainFunction -> 
        v116 <- CreateNamedVariable 'gc', 'none'
        v117 <- CallFunction v116, []
        v118 <- LoadFloat '2.5'
        Return v118
    EndPlainFunction
    v119 <- BeginPlainFunction -> 
        v120 <- CreateNamedVariable 'gc', 'none'
        v121 <- CallFunction v120, []
        v122 <- CreateNamedVariable 'Object', 'none'
        v123 <- Construct v122, []
        Return v123
    EndPlainFunction
    v124 <- LoadInteger '0'
    v125 <- LoadInteger '1'
    v126 <- LoadInteger '2'
    v127 <- LoadInteger '3'
    v128 <- LoadInteger '4'
    v129 <- LoadInteger '5'
    v130 <- CallFunction v115, []
    v131 <- CallFunction v115, []
    v132 <- CallFunction v115, []
    v133 <- CallFunction v115, []
    v134 <- CallFunction v115, []
    v135 <- CallFunction v115, []
    v136 <- CallFunction v119, []
    v137 <- CallFunction v119, []
    v138 <- CallFunction v119, []
    v139 <- CallFunction v119, []
    v140 <- CreateArray [v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139]
    v141 <- CreateNamedVariable 'large', 'none'
    Reassign v141, v140
    v142 <- CreateNamedVariable 'large', 'none'
    v143 <- LoadInteger '0'
    v144 <- LoadInteger '1'
    v145 <- LoadInteger '2'
    v146 <- LoadInteger '3'
    v147 <- LoadInteger '4'
    v148 <- LoadInteger '5'
    v149 <- LoadFloat '2.5'
    v150 <- LoadFloat '2.5'
    v151 <- LoadFloat '2.5'
    v152 <- LoadFloat '2.5'
    v153 <- LoadFloat '2.5'
    v154 <- LoadFloat '2.5'
    v155 <- CreateNamedVariable 'Object', 'none'
    v156 <- Construct v155, []
    v157 <- Construct v155, []
    v158 <- Construct v155, []
    v159 <- Construct v155, []
    v160 <- CreateArray [v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v156, v157, v158, v159]
EndPlainFunction
BeginForLoopInitializer
    v161 <- LoadInteger '0'
BeginForLoopCondition -> v162
    v163 <- LoadInteger '3'
    v164 <- Compare v162, '<', v163
BeginForLoopAfterthought v164 -> v165
    v166 <- UnaryOperation v165, '++'
BeginForLoopBody -> v167
    v168 <- CallFunction v114, []
EndForLoop
v169 <- CallFunction v114, []
v170 <- BeginPlainFunction -> v171
    BeginIf v171
        v172 <- LoadFloat '0.5'
        v173 <- LoadInteger '3'
        v174 <- LoadInteger '4'
        v175 <- CreateArray [v172, v173, v174]
        Return v175
    BeginElse
        v176 <- CreateNamedVariable 'Array', 'none'
        v177 <- Construct v176, []
        Return v177
    EndIf
EndPlainFunction
v178 <- LoadBoolean 'false'
v179 <- CallFunction v170, [v178]
v180 <- LoadBoolean 'false'
v181 <- CallFunction v170, [v180]
v182 <- LoadBoolean 'false'
v183 <- CallFunction v170, [v182]
v184 <- LoadBoolean 'false'
v185 <- CallFunction v170, [v184]
v186 <- CreateNamedVariable 'array', 'var', v185
v187 <- CallFunction v170, []
v188 <- LoadBoolean 'true'
v189 <- CallFunction v170, [v188]
v190 <- CallFunction v170, []
v191 <- LoadBoolean 'false'
v192 <- CallFunction v170, [v191]
Reassign v186, v192
v193 <- CallFunction v170, []
v194 <- BeginPlainFunction -> v195
    v196 <- LoadInteger '0'
    v197 <- LoadInteger '1'
    v198 <- CreateArray [v196, v197, v195]
    Return v198
EndPlainFunction
v199 <- LoadInteger '2'
v200 <- CallFunction v194, [v199]
v201 <- LoadInteger '3'
v202 <- CallFunction v194, [v201]
v203 <- LoadInteger '4'
v204 <- CallFunction v194, [v203]
v205 <- LoadInteger '4'
v206 <- CallFunction v194, [v205]
Reassign v186, v206
v207 <- LoadInteger '0'
v208 <- GetElement v186, '0'
v209 <- LoadInteger '1'
v210 <- GetElement v186, '1'
v211 <- LoadInteger '4'
v212 <- GetElement v186, '2'
v213 <- LoadInteger '5'
v214 <- CallFunction v194, [v213]
Reassign v186, v214
v215 <- LoadInteger '6'
v216 <- CallFunction v194, [v215]
Reassign v186, v216
v217 <- CallFunction v194, []
v218 <- LoadInteger '0'
v219 <- GetElement v186, '0'
v220 <- LoadInteger '1'
v221 <- GetElement v186, '1'
v222 <- LoadInteger '6'
v223 <- GetElement v186, '2'
v224 <- LoadFloat '0.5'
v225 <- CallFunction v194, [v224]
Reassign v186, v225
v226 <- CallFunction v194, []
v227 <- LoadInteger '0'
v228 <- GetElement v186, '0'
v229 <- LoadInteger '1'
v230 <- GetElement v186, '1'
v231 <- LoadFloat '0.5'
v232 <- GetElement v186, '2'
v233 <- BeginPlainFunction -> v234
    v235 <- LoadFloat '0.5'
    v236 <- LoadInteger '1'
    v237 <- CreateArray [v235, v236, v234]
    Return v237
EndPlainFunction
v238 <- LoadFloat '0.5'
v239 <- CallFunction v233, [v238]
v240 <- LoadFloat '0.5'
v241 <- CallFunction v233, [v240]
v242 <- LoadFloat '0.5'
v243 <- CallFunction v233, [v242]
v244 <- LoadFloat '0.5'
v245 <- CallFunction v233, [v244]
Reassign v186, v245
v246 <- LoadFloat '0.5'
v247 <- GetElement v186, '0'
v248 <- LoadInteger '1'
v249 <- GetElement v186, '1'
v250 <- LoadFloat '0.5'
v251 <- GetElement v186, '2'
v252 <- LoadInteger '5'
v253 <- CallFunction v233, [v252]
Reassign v186, v253
v254 <- LoadInteger '6'
v255 <- CallFunction v233, [v254]
Reassign v186, v255
v256 <- CallFunction v233, []
v257 <- LoadFloat '0.5'
v258 <- GetElement v186, '0'
v259 <- LoadInteger '1'
v260 <- GetElement v186, '1'
v261 <- LoadInteger '6'
v262 <- GetElement v186, '2'
v263 <- CreateNamedVariable 'Object', 'none'
v264 <- Construct v263, []
v265 <- CreateNamedVariable 'foo', 'var', v264
v266 <- CallFunction v233, [v265]
Reassign v186, v266
v267 <- CallFunction v233, []
v268 <- LoadFloat '0.5'
v269 <- GetElement v186, '0'
v270 <- LoadInteger '1'
v271 <- GetElement v186, '1'
v272 <- GetElement v186, '2'
v273 <- BeginPlainFunction -> 
    v274 <- LoadInteger '0'
    v275 <- CreateArray [v274]
    v276 <- CreateNamedVariable 'color', 'var', v275
    BeginWhileLoopHeader
        v277 <- CreateNamedVariable 'literals_after_osr', 'none'
        v278 <- CreateNamedVariable 'f0', 'none'
        v279 <- CallFunction v278, [v277]
        v280 <- CreateNamedVariable 'V8OptimizationStatus', 'none'
        v281 <- GetProperty v280, 'kTopmostFrameIsTurboFanned'
        v282 <- BinaryOperation v279, '&', v281
        v283 <- LoadInteger '0'
        v284 <- Compare v282, '!==', v283
    BeginWhileLoopBody v284
    EndWhileLoop
    v285 <- GetElement v276, '0'
    v286 <- CreateArray [v285]
    Return v286
EndPlainFunction
v287 <- CallFunction v273, []


function get(a1) {
    return a1;
}
function array_literal_test() {
    var a0 = [1,2,3];
    var a1 = [get(1),get(2),get(3)];
    var b0 = [1,2,get("three")];
    var b1 = [get(1),get(2),get("three")];
    var c0 = [1,2,get(3.5)];
    c0[2];
    c0[1];
    c0[0];
    var c1 = [1,2,3.5];
    c1[2];
    c1[1];
    c1[0];
    var c2 = [get(1),get(2),get(3.5)];
    c2[2];
    c2[1];
    c2[0];
    const v68 = new Object();
    var object = v68;
    var d0 = [1,2,object];
    d0[2];
    d0[1];
    d0[0];
    var e0 = [1,2,3.5];
    e0[2];
    e0[1];
    e0[0];
    var f0 = [1,2,[1,2]];
    [1,2];
    f0[2];
    f0[1];
    f0[0];
}
for (let i106 = 0; i106 < 3; i106++) {
    array_literal_test();
}
array_literal_test();
function test_large_literal() {
    function d() {
        gc();
        return 2.5;
    }
    function o() {
        gc();
        const v123 = new Object();
        return v123;
    }
    large = [0,1,2,3,4,5,d(),d(),d(),d(),d(),d(),o(),o(),o(),o()];
    const v156 = new Object();
    const v157 = new Object();
    const v158 = new Object();
    const v159 = new Object();
    [0,1,2,3,4,5,2.5,2.5,2.5,2.5,2.5,2.5,v156,v157,v158,v159];
}
for (let i162 = 0; i162 < 3; i162++) {
    test_large_literal();
}
test_large_literal();
function deopt_array(a171) {
    if (a171) {
        return [0.5,3,4];
    } else {
        const v177 = new Array();
        return v177;
    }
}
deopt_array(false);
deopt_array(false);
deopt_array(false);
var array = deopt_array(false);
deopt_array();
deopt_array(true);
deopt_array();
array = deopt_array(false);
deopt_array();
function deopt_array_literal_all_smis(a195) {
    return [0,1,a195];
}
deopt_array_literal_all_smis(2);
deopt_array_literal_all_smis(3);
deopt_array_literal_all_smis(4);
array = deopt_array_literal_all_smis(4);
array[0];
array[1];
array[2];
array = deopt_array_literal_all_smis(5);
array = deopt_array_literal_all_smis(6);
deopt_array_literal_all_smis();
array[0];
array[1];
array[2];
array = deopt_array_literal_all_smis(0.5);
deopt_array_literal_all_smis();
array[0];
array[1];
array[2];
function deopt_array_literal_all_doubles(a234) {
    return [0.5,1,a234];
}
deopt_array_literal_all_doubles(0.5);
deopt_array_literal_all_doubles(0.5);
deopt_array_literal_all_doubles(0.5);
array = deopt_array_literal_all_doubles(0.5);
array[0];
array[1];
array[2];
array = deopt_array_literal_all_doubles(5);
array = deopt_array_literal_all_doubles(6);
deopt_array_literal_all_doubles();
array[0];
array[1];
array[2];
const v264 = new Object();
var foo = v264;
array = deopt_array_literal_all_doubles(foo);
deopt_array_literal_all_doubles();
array[0];
array[1];
array[2];
function literals_after_osr() {
    var color = [0];
    while ((f0(literals_after_osr) & V8OptimizationStatus.kTopmostFrameIsTurboFanned) !== 0) {
    }
    return [color[0]];
}
literals_after_osr();

FuzzIL program written to corpus/array-literal-transitions.fzil
