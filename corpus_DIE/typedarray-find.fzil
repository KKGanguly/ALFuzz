v0 <- CreateNamedVariable 'Uint8Array', 'none'
v1 <- CreateNamedVariable 'Int8Array', 'none'
v2 <- CreateNamedVariable 'Uint16Array', 'none'
v3 <- CreateNamedVariable 'Int16Array', 'none'
v4 <- CreateNamedVariable 'Uint32Array', 'none'
v5 <- CreateNamedVariable 'Int32Array', 'none'
v6 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
v7 <- CreateNamedVariable 'Float32Array', 'none'
v8 <- CreateNamedVariable 'Float64Array', 'none'
v9 <- CreateArray [v0, v1, v2, v3, v4, v5, v6, v7, v8]
v10 <- CreateNamedVariable 'typedArrayConstructors', 'var', v9
BeginForOfLoop v10 -> v11
    v12 <- LoadInteger '1'
    v13 <- GetProperty v11, 'prototype'
    v14 <- GetProperty v13, 'find'
    v15 <- GetProperty v14, 'length'
    v16 <- LoadInteger '21'
    v17 <- LoadInteger '22'
    v18 <- LoadInteger '23'
    v19 <- LoadInteger '24'
    v20 <- CreateArray [v16, v17, v18, v19]
    v21 <- Construct v11, [v20]
    v22 <- CreateNamedVariable 'a', 'var', v21
    v23 <- LoadUndefined
    v24 <- BeginPlainFunction -> 
        v25 <- LoadBoolean 'false'
        Return v25
    EndPlainFunction
    v26 <- CallMethod v22, 'find', [v24]
    v27 <- LoadInteger '21'
    v28 <- BeginPlainFunction -> 
        v29 <- LoadBoolean 'true'
        Return v29
    EndPlainFunction
    v30 <- CallMethod v22, 'find', [v28]
    v31 <- LoadUndefined
    v32 <- BeginPlainFunction -> v33
        v34 <- LoadInteger '121'
        v35 <- Compare v34, '===', v33
        Return v35
    EndPlainFunction
    v36 <- CallMethod v22, 'find', [v32]
    v37 <- LoadInteger '24'
    v38 <- BeginPlainFunction -> v39
        v40 <- LoadInteger '24'
        v41 <- Compare v40, '===', v39
        Return v41
    EndPlainFunction
    v42 <- CallMethod v22, 'find', [v38]
    v43 <- LoadInteger '23'
    v44 <- BeginPlainFunction -> v45
        v46 <- LoadInteger '23'
        v47 <- Compare v46, '===', v45
        Return v47
    EndPlainFunction
    v48 <- CallMethod v22, 'find', [v44]
    v49 <- LoadNull
    v50 <- LoadInteger '22'
    v51 <- BeginPlainFunction -> v52
        v53 <- LoadInteger '22'
        v54 <- Compare v53, '===', v52
        Return v54
    EndPlainFunction
    v55 <- CallMethod v22, 'find', [v51]
    v56 <- LoadUndefined
    v57 <- BeginPlainFunction -> 
        v58 <- CreateArray []
        v59 <- Construct v11, [v58]
        v60 <- CreateNamedVariable 'a', 'var', v59
        v61 <- LoadInteger '1'
        v62 <- UnaryOperation '-', v61
        v63 <- CreateNamedVariable 'l', 'var', v62
        v64 <- LoadInteger '1'
        v65 <- UnaryOperation '-', v64
        v66 <- CreateNamedVariable 'o', 'var', v65
        v67 <- LoadInteger '1'
        v68 <- UnaryOperation '-', v67
        v69 <- CreateNamedVariable 'v', 'var', v68
        v70 <- LoadInteger '1'
        v71 <- UnaryOperation '-', v70
        v72 <- CreateNamedVariable 'k', 'var', v71
        v73 <- BeginPlainFunction -> v74, v75, v76
            Reassign v66, v76
            v77 <- GetProperty v76, 'length'
            Reassign v63, v77
            Reassign v69, v74
            Reassign v72, v75
            v78 <- LoadBoolean 'false'
            Return v78
        EndPlainFunction
        v79 <- CallMethod v60, 'find', [v73]
        v80 <- LoadInteger '1'
        v81 <- UnaryOperation '-', v80
        v82 <- LoadInteger '1'
        v83 <- UnaryOperation '-', v82
        v84 <- LoadInteger '1'
        v85 <- UnaryOperation '-', v84
        v86 <- LoadInteger '1'
        v87 <- UnaryOperation '-', v86
    EndPlainFunction
    v88 <- CallFunction v57, []
    v89 <- BeginPlainFunction -> 
        v90 <- LoadInteger '5'
        v91 <- CreateArray [v90]
        v92 <- Construct v11, [v91]
        v93 <- CreateNamedVariable 'a', 'var', v92
        v94 <- LoadInteger '1'
        v95 <- UnaryOperation '-', v94
        v96 <- CreateNamedVariable 'l', 'var', v95
        v97 <- LoadInteger '1'
        v98 <- UnaryOperation '-', v97
        v99 <- CreateNamedVariable 'o', 'var', v98
        v100 <- LoadInteger '1'
        v101 <- UnaryOperation '-', v100
        v102 <- CreateNamedVariable 'v', 'var', v101
        v103 <- LoadInteger '1'
        v104 <- UnaryOperation '-', v103
        v105 <- CreateNamedVariable 'k', 'var', v104
        v106 <- BeginPlainFunction -> v107, v108, v109
            Reassign v99, v109
            v110 <- GetProperty v109, 'length'
            Reassign v96, v110
            Reassign v102, v107
            Reassign v105, v108
            v111 <- LoadBoolean 'false'
            Return v111
        EndPlainFunction
        v112 <- CallMethod v93, 'find', [v106]
        v113 <- CreateNamedVariable 'found', 'var', v112
        v114 <- GetProperty v93, 'length'
        v115 <- LoadInteger '5'
        v116 <- LoadInteger '0'
        v117 <- LoadUndefined
    EndPlainFunction
    v118 <- CallFunction v89, []
    v119 <- BeginPlainFunction -> 
        v120 <- LoadInteger '1'
        v121 <- LoadInteger '2'
        v122 <- LoadInteger '3'
        v123 <- LoadInteger '4'
        v124 <- LoadInteger '5'
        v125 <- CreateArray [v120, v121, v122, v123, v124]
        v126 <- Construct v11, [v125]
        v127 <- CreateNamedVariable 'a', 'var', v126
        v128 <- LoadInteger '0'
        v129 <- CreateNamedVariable 'l', 'var', v128
        v130 <- BeginPlainFunction -> 
            v131 <- UnaryOperation v129, '++'
            v132 <- LoadBoolean 'false'
            Return v132
        EndPlainFunction
        v133 <- CallMethod v127, 'find', [v130]
        v134 <- CreateNamedVariable 'found', 'var', v133
        v135 <- GetProperty v127, 'length'
        v136 <- LoadUndefined
    EndPlainFunction
    v137 <- CallFunction v119, []
    v138 <- BeginPlainFunction -> 
        v139 <- LoadInteger '1'
        v140 <- LoadInteger '2'
        v141 <- LoadInteger '3'
        v142 <- CreateArray [v139, v140, v141]
        v143 <- Construct v11, [v142]
        Reassign v22, v143
        v144 <- BeginPlainFunction -> v145, v146
            v147 <- UnaryOperation '++', v145
            SetComputedProperty v22, v146, v147
            v148 <- LoadBoolean 'false'
            Return v148
        EndPlainFunction
        v149 <- CallMethod v22, 'find', [v144]
        v150 <- CreateNamedVariable 'found', 'none'
        Reassign v150, v149
        v151 <- LoadInteger '2'
        v152 <- LoadInteger '3'
        v153 <- LoadInteger '4'
        v154 <- CreateArray [v151, v152, v153]
        v155 <- LoadInteger '3'
        v156 <- GetProperty v22, 'length'
        v157 <- LoadUndefined
        v158 <- CreateNamedVariable 'found', 'none'
    EndPlainFunction
    v159 <- CallFunction v138, []
    v160 <- BeginPlainFunction -> 
        v161 <- BeginPlainFunction -> v162, v163
            v164 <- CreateNamedVariable 'Number', 'none'
            v165 <- CallFunction v164, [v163]
            v166 <- LoadThis
            v167 <- CallMethod v166, 'charAt', [v165]
            v168 <- CreateNamedVariable 'String', 'none'
            v169 <- CallFunction v168, [v162]
            v170 <- Compare v167, '===', v169
            Return v170
        EndPlainFunction
        v171 <- LoadString '321'
        v172 <- LoadInteger '1'
        v173 <- LoadInteger '2'
        v174 <- LoadInteger '3'
        v175 <- CreateArray [v172, v173, v174]
        v176 <- Construct v11, [v175]
        v177 <- CallMethod v176, 'find', [v161, v171]
        v178 <- CreateNamedVariable 'found', 'var', v177
        v179 <- LoadInteger '2'
        v180 <- BeginPlainFunction -> v181
            v182 <- LoadThis
            v183 <- GetComputedProperty v182, v181
            Return v183
        EndPlainFunction
        BeginObjectLiteral
            ObjectLiteralAddProperty `elementAt`, v180
        v184 <- EndObjectLiteral
        v185 <- CreateNamedVariable 'thisArg', 'var', v184
        v186 <- LoadInteger '3'
        v187 <- LoadInteger '2'
        v188 <- LoadInteger '1'
        v189 <- CreateArray [v186, v187, v188]
        v190 <- CreateNamedVariable 'Array', 'none'
        v191 <- GetProperty v190, 'prototype'
        v192 <- GetProperty v191, 'push'
        v193 <- CallMethod v192, 'apply', [v185, v189]
        v194 <- BeginPlainFunction -> v195, v196
            v197 <- LoadThis
            v198 <- CallMethod v197, 'elementAt', [v196]
            v199 <- Compare v198, '===', v195
            Return v199
        EndPlainFunction
        v200 <- LoadInteger '1'
        v201 <- LoadInteger '2'
        v202 <- LoadInteger '3'
        v203 <- CreateArray [v200, v201, v202]
        v204 <- Construct v11, [v203]
        v205 <- CallMethod v204, 'find', [v194, v185]
        Reassign v178, v205
        v206 <- LoadInteger '2'
        v207 <- CreateArray []
        Reassign v22, v207
        v208 <- BeginPlainFunction -> 
            v209 <- LoadThis
            v210 <- CallMethod v22, 'push', [v209]
        EndPlainFunction
        v211 <- LoadString ''
        v212 <- LoadInteger '1'
        v213 <- LoadInteger '2'
        v214 <- CreateArray [v212, v213]
        v215 <- Construct v11, [v214]
        v216 <- CallMethod v215, 'find', [v208, v211]
        v217 <- GetElement v22, '0'
        v218 <- GetElement v22, '1'
        v219 <- Compare v217, '!==', v218
        v220 <- CreateArray []
        Reassign v22, v220
        v221 <- BeginPlainFunction -> 
            v222 <- LoadThis
            v223 <- CallMethod v22, 'push', [v222]
        EndPlainFunction
        BeginObjectLiteral
        v224 <- EndObjectLiteral
        v225 <- LoadInteger '1'
        v226 <- LoadInteger '2'
        v227 <- CreateArray [v225, v226]
        v228 <- Construct v11, [v227]
        v229 <- CallMethod v228, 'find', [v221, v224]
        v230 <- GetElement v22, '0'
        v231 <- GetElement v22, '1'
        v232 <- CreateArray []
        Reassign v22, v232
        v233 <- BeginPlainFunction -> 
            Directive 'use strict'
            v234 <- LoadThis
            v235 <- CallMethod v22, 'push', [v234]
        EndPlainFunction
        v236 <- LoadString ''
        v237 <- LoadInteger '1'
        v238 <- LoadInteger '2'
        v239 <- CreateArray [v237, v238]
        v240 <- Construct v11, [v239]
        v241 <- CallMethod v240, 'find', [v233, v236]
        v242 <- LoadString ''
        v243 <- GetElement v22, '0'
        v244 <- GetElement v22, '0'
        v245 <- GetElement v22, '1'
    EndPlainFunction
    v246 <- CallFunction v160, []
    v247 <- LoadString 'constructor.prototype.find.call(null, function() { })'
    v248 <- CreateNamedVariable 'TypeError', 'none'
    v249 <- LoadString 'constructor.prototype.find.call(undefined, function() { })'
    v250 <- LoadString 'constructor.prototype.find.apply(null, function() { }, [])'
    v251 <- LoadString 'constructor.prototype.find.apply(undefined, function() { }, [])'
    v252 <- LoadString 'constructor.prototype.find.apply([], function() { }, [])'
    v253 <- LoadString 'constructor.prototype.find.apply({}, function() { }, [])'
    v254 <- LoadString 'constructor.prototype.find.apply("", function() { }, [])'
    v255 <- LoadString 'new constructor([]).find(null)'
    v256 <- LoadString 'new constructor([]).find(undefined)'
    v257 <- LoadString 'new constructor([]).find(0)'
    v258 <- LoadString 'new constructor([]).find(true)'
    v259 <- LoadString 'new constructor([]).find(false)'
    v260 <- LoadString 'new constructor([]).find("")'
    v261 <- LoadString 'new constructor([]).find({})'
    v262 <- LoadString 'new constructor([]).find([])'
    v263 <- LoadString 'new constructor([]).find(/d+/)'
    v264 <- LoadInteger '1'
    v265 <- LoadInteger '2'
    v266 <- CreateArray [v264, v265]
    v267 <- Construct v11, [v266]
    Reassign v22, v267
    v268 <- LoadString 'length'
    v269 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v269
    v270 <- EndObjectLiteral
    v271 <- CreateNamedVariable 'Object', 'none'
    v272 <- CallMethod v271, 'defineProperty', [v22, v268, v270]
    v273 <- LoadInteger '0'
    v274 <- CreateNamedVariable 'x', 'var', v273
    v275 <- BeginPlainFunction -> v276
        Update v274, '+', v276
        v277 <- LoadBoolean 'false'
        Return v277
    EndPlainFunction
    v278 <- CallMethod v22, 'find', [v275]
    v279 <- LoadUndefined
    v280 <- LoadInteger '3'
    v281 <- BeginPlainFunction -> v282
        Update v274, '+', v282
        v283 <- LoadBoolean 'false'
        Return v283
    EndPlainFunction
    v284 <- CreateNamedVariable 'Array', 'none'
    v285 <- GetProperty v284, 'prototype'
    v286 <- GetProperty v285, 'find'
    v287 <- CallMethod v286, 'call', [v22, v281]
    v288 <- LoadUndefined
    v289 <- LoadInteger '4'
    v290 <- CreateNamedVariable 'Symbol', 'none'
    v291 <- GetProperty v290, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v291 -> v292
            v293 <- LoadString 'Parameter should not be processed when '
            v294 <- LoadString 'array.[[ViewedArrayBuffer]] is detached.'
            v295 <- BinaryOperation v293, '+', v294
            v296 <- LoadInteger '0'
            Return v296
        EndObjectLiteralComputedMethod
    v297 <- EndObjectLiteral
    v298 <- CreateNamedVariable 'tmp', 'var', v297
    v299 <- LoadInteger '1'
    v300 <- LoadInteger '2'
    v301 <- LoadInteger '3'
    v302 <- LoadInteger '4'
    v303 <- LoadInteger '5'
    v304 <- LoadInteger '6'
    v305 <- LoadInteger '7'
    v306 <- LoadInteger '8'
    v307 <- LoadInteger '9'
    v308 <- LoadInteger '10'
    v309 <- CreateArray [v299, v300, v301, v302, v303, v304, v305, v306, v307, v308]
    v310 <- Construct v11, [v309]
    v311 <- CreateNamedVariable 'array', 'var', v310
    v312 <- BeginArrowFunction -> 
        v313 <- CallMethod v311, 'find', [v298]
        Return v313
    EndArrowFunction
    v314 <- CallFunction v312, []
EndForOfLoop


var typedArrayConstructors = [Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Uint8ClampedArray,Float32Array,Float64Array];
for (const v11 of typedArrayConstructors) {
    v11.prototype.find.length;
    const v21 = new v11([21,22,23,24]);
    var a = v21;
    function f24() {
        return false;
    }
    a.find(f24);
    function f28() {
        return true;
    }
    a.find(f28);
    function f32(a33) {
        return 121 === a33;
    }
    a.find(f32);
    function f38(a39) {
        return 24 === a39;
    }
    a.find(f38);
    function f44(a45) {
        return 23 === a45;
    }
    a.find(f44);
    function f51(a52) {
        return 22 === a52;
    }
    a.find(f51);
    function f57() {
        const v59 = new v11([]);
        var a = v59;
        var l = -1;
        var o = -1;
        var v = -1;
        var k = -1;
        function f73(a74, a75, a76) {
            o = a76;
            l = a76.length;
            v = a74;
            k = a75;
            return false;
        }
        a.find(f73);
        -1;
        -1;
        -1;
        -1;
    }
    f57();
    function f89() {
        const v92 = new v11([5]);
        var a = v92;
        var l = -1;
        var o = -1;
        var v = -1;
        var k = -1;
        function f106(a107, a108, a109) {
            o = a109;
            l = a109.length;
            v = a107;
            k = a108;
            return false;
        }
        var found = a.find(f106);
        a.length;
    }
    f89();
    function f119() {
        const v126 = new v11([1,2,3,4,5]);
        var a = v126;
        var l = 0;
        function f130() {
            l++;
            return false;
        }
        var found = a.find(f130);
        a.length;
    }
    f119();
    function f138() {
        const v143 = new v11([1,2,3]);
        a = v143;
        function f144(a145, a146) {
            a[a146] = ++a145;
            return false;
        }
        found = a.find(f144);
        [2,3,4];
        a.length;
    }
    f138();
    function f160() {
        function f161(a162, a163) {
            return this.charAt(Number(a163)) === String(a162);
        }
        const v176 = new v11([1,2,3]);
        var found = v176.find(f161, "321");
        function f180(a181) {
            return this[a181];
        }
        var thisArg = { elementAt: f180 };
        const v189 = [3,2,1];
        Array.prototype.push.apply(thisArg, v189);
        function f194(a195, a196) {
            return this.elementAt(a196) === a195;
        }
        const v204 = new v11([1,2,3]);
        found = v204.find(f194, thisArg);
        a = [];
        function f208() {
            a.push(this);
        }
        const v215 = new v11([1,2]);
        v215.find(f208, "");
        a[0] !== a[1];
        a = [];
        function f221() {
            a.push(this);
        }
        const v224 = {};
        const v228 = new v11([1,2]);
        v228.find(f221, v224);
        a[0];
        a[1];
        a = [];
        function f233() {
            'use strict';
            a.push(this);
        }
        const v240 = new v11([1,2]);
        v240.find(f233, "");
        a[0];
        a[0];
        a[1];
    }
    f160();
    const v267 = new v11([1,2]);
    a = v267;
    Object.defineProperty(a, "length", { value: 1 });
    var x = 0;
    function f275(a276) {
        x += a276;
        return false;
    }
    a.find(f275);
    function f281(a282) {
        x += a282;
        return false;
    }
    Array.prototype.find.call(a, f281);
    const v291 = Symbol.toPrimitive;
    const v297 = {
        [v291]() {
            "Parameter should not be processed when " + "array.[[ViewedArrayBuffer]] is detached.";
            return 0;
        },
    };
    var tmp = v297;
    const v310 = new v11([1,2,3,4,5,6,7,8,9,10]);
    var array = v310;
    const v312 = () => {
        return array.find(tmp);
    };
    v312();
}

FuzzIL program written to corpus/typedarray-find.fzil
