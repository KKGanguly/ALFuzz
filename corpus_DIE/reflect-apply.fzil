v0 <- BeginPlainFunction -> 
    Directive 'use strict'
    v1 <- BeginPlainFunction -> 
        v2 <- LoadThis
        Return v2
    EndPlainFunction
    v3 <- BeginPlainFunction -> 
        v4 <- CreateNamedVariable 'Reflect', 'none'
        v5 <- CallMethod v4, 'apply', [v1]
        Return v5
    EndPlainFunction
    v6 <- CallFunction v3, []
    v7 <- CallFunction v3, []
    v8 <- CallFunction v3, []
EndPlainFunction
v9 <- CallFunction v0, []
v10 <- BeginPlainFunction -> 
    Directive 'use strict'
    v11 <- BeginPlainFunction -> 
        v12 <- LoadThis
        Return v12
    EndPlainFunction
    v13 <- BeginPlainFunction -> 
        v14 <- LoadThis
        v15 <- CreateNamedVariable 'Reflect', 'none'
        v16 <- CallMethod v15, 'apply', [v11, v14]
        Return v16
    EndPlainFunction
    v17 <- CallFunction v13, []
    v18 <- CallFunction v13, []
    v19 <- CallFunction v13, []
EndPlainFunction
v20 <- CallFunction v10, []
v21 <- BeginPlainFunction -> 
    Directive 'use strict'
    v22 <- BeginPlainFunction -> 
        v23 <- LoadThis
        Return v23
    EndPlainFunction
    v24 <- BeginPlainFunction -> 
        v25 <- LoadThis
        v26 <- LoadArguments
        v27 <- LoadThis
        v28 <- CreateNamedVariable 'Reflect', 'none'
        v29 <- CallMethod v28, 'apply', [v22, v25, v26, v27]
        Return v29
    EndPlainFunction
    v30 <- LoadInteger '42'
    v31 <- LoadInteger '42'
    v32 <- CallMethod v24, 'call', [v31]
    v33 <- LoadInteger '42'
    v34 <- LoadInteger '42'
    v35 <- CallMethod v24, 'call', [v34]
    v36 <- LoadInteger '42'
    v37 <- LoadInteger '42'
    v38 <- CallMethod v24, 'call', [v37]
EndPlainFunction
v39 <- CallFunction v21, []
v40 <- BeginPlainFunction -> 
    Directive 'use strict'
    v41 <- BeginPlainFunction -> v42
        BeginTry
            v43 <- LoadArguments
            v44 <- CreateNamedVariable 'Reflect', 'none'
            v45 <- CallMethod v44, 'apply', [v42, v42, v43]
            Return v45
        BeginCatch -> v46
            v47 <- LoadInteger '1'
            Return v47
        EndTryCatch
    EndPlainFunction
    v48 <- LoadInteger '1'
    v49 <- CallFunction v41, []
    v50 <- LoadInteger '1'
    v51 <- CallFunction v41, []
    v52 <- LoadInteger '1'
    v53 <- CallFunction v41, []
EndPlainFunction
v54 <- CallFunction v40, []
v55 <- BeginPlainFunction -> 
    Directive 'use strict'
    v56 <- BeginPlainFunction -> v57
        BeginTry
            v58 <- CreateNamedVariable 'Reflect', 'none'
            v59 <- CallMethod v58, 'apply', [v57, v57, v57]
            Return v59
        BeginCatch -> v60
            v61 <- LoadInteger '1'
            Return v61
        EndTryCatch
    EndPlainFunction
    v62 <- LoadInteger '1'
    v63 <- CallFunction v56, []
    v64 <- LoadInteger '1'
    v65 <- CallFunction v56, []
    v66 <- LoadInteger '1'
    v67 <- CallFunction v56, []
EndPlainFunction
v68 <- CallFunction v55, []
v69 <- BeginPlainFunction -> 
    v70 <- LoadInteger '0'
    v71 <- CreateNamedVariable 'dummy_length_counter', 'var', v70
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v72
            v73 <- UnaryOperation '++', v71
            v74 <- LoadInteger '0'
            Return v74
        EndObjectLiteralGetter
    v75 <- EndObjectLiteral
    v76 <- CreateNamedVariable 'dummy', 'var', v75
    v77 <- BeginPlainFunction -> 
        v78 <- LoadUndefined
        v79 <- LoadThis
        v80 <- CreateNamedVariable 'Reflect', 'none'
        v81 <- CallMethod v80, 'apply', [v78, v79, v76]
        Return v81
    EndPlainFunction
    v82 <- CallFunction v77, []
    v83 <- CreateNamedVariable 'TypeError', 'none'
    v84 <- CallFunction v77, []
    v85 <- CallFunction v77, []
    v86 <- LoadInteger '0'
EndPlainFunction
v87 <- CallFunction v69, []
v88 <- BeginPlainFunction -> 
    v89 <- LoadInteger '0'
    v90 <- CreateNamedVariable 'dummy_length_counter', 'var', v89
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v91
            v92 <- UnaryOperation '++', v90
            v93 <- LoadInteger '0'
            Return v93
        EndObjectLiteralGetter
    v94 <- EndObjectLiteral
    v95 <- CreateNamedVariable 'dummy', 'var', v94
    v96 <- BeginPlainFunction -> 
        v97 <- LoadNull
        v98 <- LoadThis
        v99 <- CreateNamedVariable 'Reflect', 'none'
        v100 <- CallMethod v99, 'apply', [v97, v98, v95]
        Return v100
    EndPlainFunction
    v101 <- CallFunction v96, []
    v102 <- CreateNamedVariable 'TypeError', 'none'
    v103 <- CallFunction v96, []
    v104 <- CallFunction v96, []
    v105 <- LoadInteger '0'
EndPlainFunction
v106 <- CallFunction v88, []
v107 <- BeginPlainFunction -> 
    v108 <- LoadInteger '0'
    v109 <- CreateNamedVariable 'dummy_length_counter', 'var', v108
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v110
            v111 <- UnaryOperation '++', v109
            v112 <- LoadInteger '0'
            Return v112
        EndObjectLiteralGetter
    v113 <- EndObjectLiteral
    v114 <- CreateNamedVariable 'dummy', 'var', v113
    v115 <- BeginPlainFunction -> 
        v116 <- LoadNull
        v117 <- LoadThis
        v118 <- CreateNamedVariable 'Reflect', 'none'
        v119 <- CallMethod v118, 'apply', [v116, v117, v114]
        Return v119
    EndPlainFunction
    v120 <- CallFunction v115, []
    v121 <- CreateNamedVariable 'TypeError', 'none'
    v122 <- CallFunction v115, []
    v123 <- CallFunction v115, []
    v124 <- LoadInteger '0'
EndPlainFunction
v125 <- CallFunction v107, []


function f0() {
    'use strict';
    function bar() {
        return this;
    }
    function foo() {
        return Reflect.apply(bar);
    }
    foo();
    foo();
    foo();
}
f0();
function f10() {
    'use strict';
    function bar() {
        return this;
    }
    function foo() {
        return Reflect.apply(bar, this);
    }
    foo();
    foo();
    foo();
}
f10();
function f21() {
    'use strict';
    function bar() {
        return this;
    }
    function foo() {
        return Reflect.apply(bar, this, arguments, this);
    }
    foo.call(42);
    foo.call(42);
    foo.call(42);
}
f21();
function f40() {
    'use strict';
    function foo(a42) {
        try {
            return Reflect.apply(a42, a42, arguments);
        } catch(e46) {
            return 1;
        }
    }
    foo();
    foo();
    foo();
}
f40();
function f55() {
    'use strict';
    function foo(a57) {
        try {
            return Reflect.apply(a57, a57, a57);
        } catch(e60) {
            return 1;
        }
    }
    foo();
    foo();
    foo();
}
f55();
function f69() {
    var dummy_length_counter = 0;
    const v75 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v75;
    function foo() {
        return Reflect.apply(undefined, this, dummy);
    }
    foo();
    foo();
    foo();
}
f69();
function f88() {
    var dummy_length_counter = 0;
    const v94 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v94;
    function foo() {
        return Reflect.apply(null, this, dummy);
    }
    foo();
    foo();
    foo();
}
f88();
function f107() {
    var dummy_length_counter = 0;
    const v113 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v113;
    function foo() {
        return Reflect.apply(null, this, dummy);
    }
    foo();
    foo();
    foo();
}
f107();

FuzzIL program written to corpus/reflect-apply.fzil
