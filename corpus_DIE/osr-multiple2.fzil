v0 <- BeginPlainFunction -> v1, v2, v3
    v4 <- LoadInteger '0'
    v5 <- CreateNamedVariable 'x', 'var', v4
    v6 <- LoadInteger '0'
    v7 <- CreateNamedVariable 'y', 'var', v6
    v8 <- LoadInteger '0'
    v9 <- CreateNamedVariable 'z', 'var', v8
    BeginForLoopInitializer
        v10 <- LoadInteger '0'
    BeginForLoopCondition -> v11
        v12 <- LoadInteger '2'
        v13 <- Compare v11, '<', v12
    BeginForLoopAfterthought v13 -> v14
        v15 <- UnaryOperation v14, '++'
    BeginForLoopBody -> v16
        BeginWhileLoopHeader
            v17 <- LoadInteger '0'
            v18 <- Compare v1, '>', v17
        BeginWhileLoopBody v18
            v19 <- LoadInteger '19'
            Update v5, '+', v19
            v20 <- UnaryOperation v1, '--'
        EndWhileLoop
        BeginWhileLoopHeader
            v21 <- LoadInteger '0'
            v22 <- Compare v2, '>', v21
        BeginWhileLoopBody v22
            v23 <- LoadInteger '23'
            Update v7, '+', v23
            v24 <- UnaryOperation v2, '--'
        EndWhileLoop
        BeginWhileLoopHeader
            v25 <- LoadInteger '0'
            v26 <- Compare v3, '>', v25
        BeginWhileLoopBody v26
            v27 <- LoadInteger '29'
            Update v9, '+', v27
            v28 <- UnaryOperation v3, '--'
        EndWhileLoop
    EndForLoop
    v29 <- BinaryOperation v5, '+', v7
    v30 <- BinaryOperation v29, '+', v9
    Return v30
EndPlainFunction
v31 <- BeginPlainFunction -> v32, v33, v34
    v35 <- LoadInteger '0'
    v36 <- CreateNamedVariable 'x', 'var', v35
    v37 <- LoadInteger '0'
    v38 <- CreateNamedVariable 'y', 'var', v37
    v39 <- LoadInteger '0'
    v40 <- CreateNamedVariable 'z', 'var', v39
    BeginForLoopInitializer
        v41 <- LoadInteger '0'
    BeginForLoopCondition -> v42
        v43 <- LoadInteger '2'
        v44 <- Compare v42, '<', v43
    BeginForLoopAfterthought v44 -> v45
        v46 <- UnaryOperation v45, '++'
    BeginForLoopBody -> v47
        BeginWhileLoopHeader
            v48 <- LoadInteger '0'
            v49 <- Compare v32, '>', v48
        BeginWhileLoopBody v49
            v50 <- LoadInteger '19'
            Update v36, '+', v50
            v51 <- UnaryOperation v32, '--'
        EndWhileLoop
        BeginWhileLoopHeader
            v52 <- LoadInteger '0'
            v53 <- Compare v33, '>', v52
        BeginWhileLoopBody v53
            v54 <- LoadInteger '23'
            Update v38, '+', v54
            v55 <- UnaryOperation v33, '--'
        EndWhileLoop
        BeginWhileLoopHeader
            v56 <- LoadInteger '0'
            v57 <- Compare v34, '>', v56
        BeginWhileLoopBody v57
            v58 <- LoadInteger '29'
            Update v40, '+', v58
            v59 <- UnaryOperation v34, '--'
        EndWhileLoop
    EndForLoop
    v60 <- BinaryOperation v36, '+', v38
    v61 <- BinaryOperation v60, '+', v40
    Return v61
EndPlainFunction
v62 <- BeginPlainFunction -> v63, v64, v65
    v66 <- LoadInteger '0'
    v67 <- CreateNamedVariable 'x', 'var', v66
    v68 <- LoadInteger '0'
    v69 <- CreateNamedVariable 'y', 'var', v68
    v70 <- LoadInteger '0'
    v71 <- CreateNamedVariable 'z', 'var', v70
    BeginForLoopInitializer
        v72 <- LoadInteger '0'
    BeginForLoopCondition -> v73
        v74 <- LoadInteger '2'
        v75 <- Compare v73, '<', v74
    BeginForLoopAfterthought v75 -> v76
        v77 <- UnaryOperation v76, '++'
    BeginForLoopBody -> v78
        BeginWhileLoopHeader
            v79 <- LoadInteger '0'
            v80 <- Compare v63, '>', v79
        BeginWhileLoopBody v80
            v81 <- LoadInteger '19'
            Update v67, '+', v81
            v82 <- UnaryOperation v63, '--'
        EndWhileLoop
        BeginWhileLoopHeader
            v83 <- LoadInteger '0'
            v84 <- Compare v64, '>', v83
        BeginWhileLoopBody v84
            v85 <- LoadInteger '23'
            Update v69, '+', v85
            v86 <- UnaryOperation v64, '--'
        EndWhileLoop
        BeginWhileLoopHeader
            v87 <- LoadInteger '0'
            v88 <- Compare v65, '>', v87
        BeginWhileLoopBody v88
            v89 <- LoadInteger '29'
            Update v71, '+', v89
            v90 <- UnaryOperation v65, '--'
        EndWhileLoop
    EndForLoop
    v91 <- BinaryOperation v67, '+', v69
    v92 <- BinaryOperation v91, '+', v71
    Return v92
EndPlainFunction
v93 <- BeginPlainFunction -> v94, v95, v96, v97
    v98 <- LoadInteger '19'
    v99 <- BinaryOperation v95, '*', v98
    v100 <- LoadInteger '23'
    v101 <- BinaryOperation v96, '*', v100
    v102 <- BinaryOperation v99, '+', v101
    v103 <- LoadInteger '29'
    v104 <- BinaryOperation v97, '*', v103
    v105 <- BinaryOperation v102, '+', v104
    v106 <- CallFunction v94, [v95, v96, v97]
EndPlainFunction
v107 <- LoadInteger '50000'
v108 <- LoadInteger '5'
v109 <- LoadInteger '6'
v110 <- CallFunction v93, [v0, v107, v108, v109]
v111 <- LoadInteger '4'
v112 <- LoadInteger '50000'
v113 <- LoadInteger '6'
v114 <- CallFunction v93, [v31, v111, v112, v113]
v115 <- LoadInteger '11'
v116 <- LoadInteger '12'
v117 <- LoadInteger '50000'
v118 <- CallFunction v93, [v62, v115, v116, v117]


function f1(a1, a2, a3) {
    var x = 0;
    var y = 0;
    var z = 0;
    for (let i11 = 0; i11 < 2; i11++) {
        while (a1 > 0) {
            x += 19;
            a1--;
        }
        while (a2 > 0) {
            y += 23;
            a2--;
        }
        while (a3 > 0) {
            z += 29;
            a3--;
        }
    }
    return (x + y) + z;
}
function f2(a32, a33, a34) {
    var x = 0;
    var y = 0;
    var z = 0;
    for (let i42 = 0; i42 < 2; i42++) {
        while (a32 > 0) {
            x += 19;
            a32--;
        }
        while (a33 > 0) {
            y += 23;
            a33--;
        }
        while (a34 > 0) {
            z += 29;
            a34--;
        }
    }
    return (x + y) + z;
}
function f3(a63, a64, a65) {
    var x = 0;
    var y = 0;
    var z = 0;
    for (let i73 = 0; i73 < 2; i73++) {
        while (a63 > 0) {
            x += 19;
            a63--;
        }
        while (a64 > 0) {
            y += 23;
            a64--;
        }
        while (a65 > 0) {
            z += 29;
            a65--;
        }
    }
    return (x + y) + z;
}
function check(a94, a95, a96, a97) {
    ((a95 * 19) + (a96 * 23)) + (a97 * 29);
    a94(a95, a96, a97);
}
check(f1, 50000, 5, 6);
check(f2, 4, 50000, 6);
check(f3, 11, 12, 50000);

FuzzIL program written to corpus/osr-multiple2.fzil
