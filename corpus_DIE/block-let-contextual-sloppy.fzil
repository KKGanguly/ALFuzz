v0 <- BeginPlainFunction -> 
    v1 <- LoadUndefined
    v2 <- CreateNamedVariable 'let', 'none'
    v3 <- CallFunction v2, []
    v4 <- LoadUndefined
    v5 <- CreateNamedVariable 'let', 'var', v4
    v6 <- LoadInteger '5'
    Reassign v5, v6
    v7 <- LoadInteger '5'
    v8 <- CallFunction v5, []
    v9 <- BeginPlainFunction -> 
        v10 <- LoadInteger '1'
        v11 <- CreateNamedVariable 'let', 'var', v10
        v12 <- LoadInteger '1'
        v13 <- CallFunction v11, []
    EndPlainFunction
    v14 <- CallFunction v9, []
    v15 <- LoadInteger '5'
    v16 <- CallFunction v5, []
EndPlainFunction
v17 <- CallFunction v0, []
v18 <- BeginPlainFunction -> 
    v19 <- CreateNamedVariable 'let', 'none'
    Return v19
EndPlainFunction
v20 <- CallFunction v18, []
v21 <- CreateNamedVariable 'ReferenceError', 'none'
v22 <- BeginPlainFunction -> 
    v23 <- LoadUndefined
    v24 <- CreateNamedVariable 'let', 'var', v23
    v25 <- LoadInteger '0'
    v26 <- CreateNamedVariable 'sum', 'var', v25
    v27 <- BeginPlainFunction -> 
        v28 <- LoadInteger '4'
        v29 <- LoadInteger '5'
        v30 <- CreateArray [v28, v29]
        BeginForOfLoop v30 -> v31
            Update v26, '+', v31
        EndForOfLoop
    EndPlainFunction
    v32 <- CallFunction v27, []
    v33 <- LoadInteger '15'
    v34 <- BeginPlainFunction -> 
        v35 <- LoadInteger '6'
        v36 <- CreateArray [v35]
        BeginForInLoop v36 -> v37
            v38 <- LoadInteger '6'
            v39 <- CreateArray [v38]
            v40 <- GetComputedProperty v39, v37
            v41 <- CreateNamedVariable 'Number', 'none'
            v42 <- CallFunction v41, [v40]
            Update v26, '+', v42
        EndForInLoop
    EndPlainFunction
    v43 <- CallFunction v34, []
    v44 <- LoadInteger '21'
    BeginForLoopInitializer
        v45 <- LoadInteger '7'
        Reassign v24, v45
    BeginForLoopCondition
        v46 <- LoadInteger '8'
        v47 <- Compare v24, '<', v46
    BeginForLoopAfterthought v47
        v48 <- UnaryOperation v24, '++'
    BeginForLoopBody
        Update v26, '+', v24
    EndForLoop
    v49 <- LoadInteger '28'
    v50 <- LoadInteger '8'
    v51 <- CallFunction v24, []
    v52 <- BeginPlainFunction -> 
        BeginForLoopInitializer
            v53 <- LoadInteger '8'
        BeginForLoopCondition -> v54
            v55 <- LoadInteger '9'
            v56 <- Compare v54, '<', v55
        BeginForLoopAfterthought v56 -> v57
            v58 <- UnaryOperation v57, '++'
        BeginForLoopBody -> v59
            Update v26, '+', v59
        EndForLoop
    EndPlainFunction
    v60 <- CallFunction v52, []
    v61 <- LoadInteger '36'
    v62 <- LoadInteger '8'
    v63 <- CallFunction v24, []
EndPlainFunction
v64 <- CallFunction v22, []
v65 <- BeginPlainFunction -> 
    v66 <- CreateNamedVariable 'let', 'none'
    Return v66
EndPlainFunction
v67 <- CallFunction v65, []
v68 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v69 <- EndObjectLiteral
    v70 <- CreateNamedVariable 'obj', 'let', v69
    BeginObjectLiteral
        BeginObjectLiteralMethod `let` -> v71
            Return v70
        EndObjectLiteralMethod
    v72 <- EndObjectLiteral
    v73 <- CreateNamedVariable '', 'var', v72
    v74 <- LoadInteger '1'
    v75 <- CreateNamedVariable 'let', 'none'
    v76 <- CallFunction v75, []
    SetProperty v76, 'x', v74
    v77 <- LoadInteger '1'
    v78 <- GetProperty v70, 'x'
EndPlainFunction
v79 <- CallFunction v68, []
v80 <- BeginPlainFunction -> 
    v81 <- BeginPlainFunction -> 
        v82 <- LoadInteger '1'
        Return v82
    EndPlainFunction
    v83 <- LoadInteger '1'
    v84 <- CallFunction v81, []
EndPlainFunction
v85 <- CallFunction v80, []
v86 <- LoadString 'for (let of []) {}'
v87 <- CreateNamedVariable 'SyntaxError', 'none'


function f0() {
    let();
    var let;
    let = 5;
    let();
    function f9() {
        var let = 1;
        let();
    }
    f9();
    let();
}
f0();
function f18() {
    return let;
}
f18();
function f22() {
    var let;
    var sum = 0;
    function f27() {
        for (const v31 of [4,5]) {
            sum += v31;
        }
    }
    f27();
    function f34() {
        for (const v37 in [6]) {
            sum += Number(([6])[v37]);
        }
    }
    f34();
    for ((() => {
            let = 7;
        })();
        let < 8;
        let++) {
        sum += let;
    }
    let();
    function f52() {
        for (let i54 = 8; i54 < 9; i54++) {
            sum += i54;
        }
    }
    f52();
    let();
}
f22();
function f65() {
    return let;
}
f65();
function f68() {
    let obj = {};
    const v72 = {
        let() {
            return obj;
        },
    };
    var  = v72;
    const t61 = let();
    t61.x = 1;
    obj.x;
}
f68();
function f80() {
    function let() {
        return 1;
    }
    let();
}
f80();

FuzzIL program written to corpus/block-let-contextual-sloppy.fzil
