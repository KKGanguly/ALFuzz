v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '1000'
    v3 <- Compare v1, '>', v2
    BeginIf v3
        BeginForLoopInitializer
            v4 <- LoadInteger '0'
        BeginForLoopCondition -> v5
            v6 <- LoadInteger '10000'
            v7 <- Compare v5, '<', v6
        BeginForLoopAfterthought v7 -> v8
            v9 <- UnaryOperation v8, '++'
        BeginForLoopBody -> v10
        EndForLoop
    EndIf
    v11 <- LoadUndefined
    v12 <- CreateNamedVariable 'y', 'var', v11
    Reassign v12, v1
    v13 <- LoadInteger '1'
    v14 <- Compare v12, '>', v13
    BeginIf v14
        v15 <- LoadString 'big'
        Return v15
    EndIf
    v16 <- LoadInteger '1'
    v17 <- BinaryOperation v1, '+', v16
    Reassign v12, v17
    v18 <- LoadInteger '1'
    v19 <- Compare v12, '>', v18
    v20 <- LoadString 'medium'
    v21 <- LoadString 'small'
    v22 <- TernaryOperation v19, v20, v21
    Return v22
EndPlainFunction
BeginForLoopInitializer
    v23 <- LoadInteger '0'
BeginForLoopCondition -> v24
    v25 <- LoadInteger '5'
    v26 <- Compare v24, '<', v25
BeginForLoopAfterthought v26 -> v27
    v28 <- UnaryOperation v27, '++'
BeginForLoopBody -> v29
    v30 <- CallFunction v0, [v29]
EndForLoop
v31 <- CreateNamedVariable 'i', 'none'
v32 <- CallFunction v0, [v31]
v33 <- LoadString '1'
v34 <- CallFunction v0, [v33]


function withCommaExpressionInConditional(a1) {
    if (a1 > 1000) {
        for (let i5 = 0; i5 < 10000; i5++) {
        }
    }
    var y;
    y = a1;
    if (y > 1) {
        return "big";
    }
    y = a1 + 1;
    return y > 1 ? "medium" : "small";
}
for (let i24 = 0; i24 < 5; i24++) {
    withCommaExpressionInConditional(i24);
}
withCommaExpressionInConditional(i);
withCommaExpressionInConditional("1");

FuzzIL program written to corpus/regress-3218915.fzil
