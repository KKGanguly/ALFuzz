v0 <- CreateNamedVariable 'Uint8Array', 'none'
v1 <- CreateNamedVariable 'Int8Array', 'none'
v2 <- CreateNamedVariable 'Uint16Array', 'none'
v3 <- CreateNamedVariable 'Int16Array', 'none'
v4 <- CreateNamedVariable 'Uint32Array', 'none'
v5 <- CreateNamedVariable 'Int32Array', 'none'
v6 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
v7 <- CreateNamedVariable 'Float32Array', 'none'
v8 <- CreateNamedVariable 'Float64Array', 'none'
v9 <- CreateArray [v0, v1, v2, v3, v4, v5, v6, v7, v8]
v10 <- CreateNamedVariable 'typedArrayConstructors', 'var', v9
v11 <- BeginPlainFunction -> v12, v13, v14
    v15 <- GetProperty v13, '__proto__'
    v16 <- GetProperty v14, 'prototype'
    v17 <- GetProperty v12, 'length'
    v18 <- GetProperty v13, 'length'
    BeginForLoopInitializer
        v19 <- LoadInteger '0'
    BeginForLoopCondition -> v20
        v21 <- GetProperty v13, 'length'
        v22 <- Compare v20, '<', v21
    BeginForLoopAfterthought v22 -> v23
        v24 <- UnaryOperation '++', v23
    BeginForLoopBody -> v25
        v26 <- GetComputedProperty v12, v25
        v27 <- GetComputedProperty v13, v25
    EndForLoop
EndPlainFunction
BeginForOfLoop v10 -> v28
    v29 <- BeginPlainFunction -> 
        v30 <- LoadInteger '0'
        v31 <- LoadInteger '1'
        v32 <- CreateArray [v30, v31]
        v33 <- Construct v28, [v32]
        v34 <- CreateNamedVariable 'a', 'var', v33
        v35 <- LoadInteger '0'
        v36 <- CreateArray [v35]
        v37 <- BeginPlainFunction -> v38
            v39 <- LoadInteger '0'
            v40 <- Compare v38, '==', v39
            Return v40
        EndPlainFunction
        v41 <- CallMethod v34, 'filter', [v37]
        v42 <- LoadInteger '0'
        v43 <- LoadInteger '1'
        v44 <- CreateArray [v42, v43]
        v45 <- LoadInteger '42'
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v45
        v46 <- EndObjectLiteral
        v47 <- CreateNamedVariable 'o', 'var', v46
        v48 <- LoadInteger '1'
        v49 <- LoadInteger '42'
        v50 <- LoadInteger '3'
        v51 <- LoadInteger '42'
        v52 <- LoadInteger '4'
        v53 <- CreateArray [v48, v49, v50, v51, v52]
        v54 <- Construct v28, [v53]
        Reassign v34, v54
        v55 <- LoadInteger '42'
        v56 <- LoadInteger '42'
        v57 <- CreateArray [v55, v56]
        v58 <- BeginPlainFunction -> v59
            v60 <- LoadThis
            v61 <- GetProperty v60, 'value'
            v62 <- Compare v61, '==', v59
            Return v62
        EndPlainFunction
        v63 <- CallMethod v34, 'filter', [v58, v47]
        v64 <- LoadInteger '1'
        v65 <- LoadInteger '42'
        v66 <- LoadInteger '3'
        v67 <- LoadInteger '42'
        v68 <- LoadInteger '4'
        v69 <- CreateArray [v64, v65, v66, v67, v68]
        v70 <- Construct v28, [v69]
        Reassign v34, v70
        v71 <- LoadInteger '42'
        v72 <- LoadInteger '42'
        v73 <- CreateArray [v71, v72]
        v74 <- BeginPlainFunction -> v75, v76, v77
            v78 <- LoadInteger '43'
            SetComputedProperty v77, v76, v78
            v79 <- LoadInteger '42'
            v80 <- Compare v79, '==', v75
            Return v80
        EndPlainFunction
        v81 <- CallMethod v34, 'filter', [v74]
        v82 <- LoadInteger '43'
        v83 <- LoadInteger '43'
        v84 <- LoadInteger '43'
        v85 <- LoadInteger '43'
        v86 <- LoadInteger '43'
        v87 <- CreateArray [v82, v83, v84, v85, v86]
        v88 <- CreateArray []
        Reassign v34, v88
        v89 <- BeginPlainFunction -> 
            v90 <- LoadThis
            v91 <- CallMethod v34, 'push', [v90]
        EndPlainFunction
        v92 <- LoadString ''
        v93 <- LoadInteger '1'
        v94 <- LoadInteger '2'
        v95 <- CreateArray [v93, v94]
        v96 <- Construct v28, [v95]
        v97 <- CallMethod v96, 'filter', [v89, v92]
        v98 <- GetElement v34, '0'
        v99 <- GetElement v34, '1'
        v100 <- Compare v98, '!==', v99
        v101 <- CreateArray []
        Reassign v34, v101
        v102 <- BeginPlainFunction -> 
            v103 <- LoadThis
            v104 <- CallMethod v34, 'push', [v103]
        EndPlainFunction
        BeginObjectLiteral
        v105 <- EndObjectLiteral
        v106 <- LoadInteger '1'
        v107 <- LoadInteger '2'
        v108 <- CreateArray [v106, v107]
        v109 <- Construct v28, [v108]
        v110 <- CallMethod v109, 'filter', [v102, v105]
        v111 <- GetElement v34, '0'
        v112 <- GetElement v34, '1'
        v113 <- CreateArray []
        Reassign v34, v113
        v114 <- BeginPlainFunction -> 
            Directive 'use strict'
            v115 <- LoadThis
            v116 <- CallMethod v34, 'push', [v115]
        EndPlainFunction
        v117 <- LoadString ''
        v118 <- LoadInteger '1'
        v119 <- LoadInteger '2'
        v120 <- CreateArray [v118, v119]
        v121 <- Construct v28, [v120]
        v122 <- CallMethod v121, 'filter', [v114, v117]
        v123 <- LoadString ''
        v124 <- GetElement v34, '0'
        v125 <- GetElement v34, '0'
        v126 <- GetElement v34, '1'
        v127 <- BeginPlainFunction -> 
            v128 <- CreateArray []
            v129 <- BeginPlainFunction -> 
            EndPlainFunction
            v130 <- GetProperty v28, 'prototype'
            v131 <- GetProperty v130, 'filter'
            v132 <- CallMethod v131, 'call', [v128, v129]
        EndPlainFunction
        v133 <- CallFunction v127, []
        v134 <- CreateNamedVariable 'TypeError', 'none'
        v135 <- LoadInteger '1'
        v136 <- LoadInteger '2'
        v137 <- CreateArray [v135, v136]
        v138 <- Construct v28, [v137]
        Reassign v34, v138
        v139 <- LoadString 'length'
        v140 <- LoadInteger '1'
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v140
        v141 <- EndObjectLiteral
        v142 <- CreateNamedVariable 'Object', 'none'
        v143 <- CallMethod v142, 'defineProperty', [v34, v139, v141]
        v144 <- LoadInteger '2'
        v145 <- CreateArray [v144]
        v146 <- BeginPlainFunction -> v147
            v148 <- LoadInteger '2'
            v149 <- Compare v147, '==', v148
            Return v149
        EndPlainFunction
        v150 <- CallMethod v34, 'filter', [v146]
        v151 <- LoadInteger '1'
        v152 <- LoadInteger '2'
        v153 <- LoadInteger '3'
        v154 <- LoadInteger '4'
        v155 <- LoadInteger '5'
        v156 <- LoadInteger '6'
        v157 <- LoadInteger '7'
        v158 <- LoadInteger '8'
        v159 <- LoadInteger '9'
        v160 <- LoadInteger '10'
        v161 <- CreateArray [v151, v152, v153, v154, v155, v156, v157, v158, v159, v160]
        v162 <- Construct v28, [v161]
        v163 <- CreateNamedVariable 'array', 'var', v162
        v164 <- BeginArrowFunction -> 
            v165 <- BeginArrowFunction -> 
                v166 <- LoadBoolean 'false'
                Return v166
            EndArrowFunction
            v167 <- CallMethod v163, 'filter', [v165]
            Return v167
        EndArrowFunction
        v168 <- CallFunction v164, []
    EndPlainFunction
    v169 <- CallFunction v29, []
    v170 <- BeginPlainFunction -> 
        v171 <- LoadInteger '0'
        v172 <- LoadInteger '1'
        v173 <- LoadInteger '2'
        v174 <- LoadInteger '3'
        v175 <- LoadInteger '4'
        v176 <- CreateArray [v171, v172, v173, v174, v175]
        v177 <- Construct v28, [v176]
        v178 <- CreateNamedVariable 'a', 'var', v177
        v179 <- LoadInteger '1'
        v180 <- LoadInteger '2'
        v181 <- LoadInteger '3'
        v182 <- LoadInteger '4'
        v183 <- LoadInteger '5'
        v184 <- CreateArray [v179, v180, v181, v182, v183]
        v185 <- CreateNamedVariable 'result', 'var', v184
        v186 <- BeginPlainFunction -> v187
            v188 <- LoadInteger '1'
            v189 <- BinaryOperation v187, '+', v188
            Return v189
        EndPlainFunction
        v190 <- CallMethod v178, 'map', [v186]
        v191 <- LoadInteger '42'
        BeginObjectLiteral
            ObjectLiteralAddProperty `delta`, v191
        v192 <- EndObjectLiteral
        v193 <- CreateNamedVariable 'o', 'var', v192
        v194 <- LoadInteger '42'
        v195 <- LoadInteger '43'
        v196 <- LoadInteger '44'
        v197 <- LoadInteger '45'
        v198 <- LoadInteger '46'
        v199 <- CreateArray [v194, v195, v196, v197, v198]
        Reassign v185, v199
        v200 <- BeginPlainFunction -> v201
            v202 <- LoadThis
            v203 <- GetProperty v202, 'delta'
            v204 <- BinaryOperation v203, '+', v201
            Return v204
        EndPlainFunction
        v205 <- CallMethod v178, 'map', [v200, v193]
        v206 <- LoadInteger '0'
        v207 <- LoadInteger '1'
        v208 <- LoadInteger '2'
        v209 <- LoadInteger '3'
        v210 <- LoadInteger '4'
        v211 <- CreateArray [v206, v207, v208, v209, v210]
        v212 <- Construct v28, [v211]
        Reassign v178, v212
        v213 <- LoadInteger '1'
        v214 <- LoadInteger '2'
        v215 <- LoadInteger '3'
        v216 <- LoadInteger '4'
        v217 <- LoadInteger '5'
        v218 <- CreateArray [v213, v214, v215, v216, v217]
        Reassign v185, v218
        v219 <- BeginPlainFunction -> v220, v221, v222
            v223 <- LoadInteger '1'
            v224 <- BinaryOperation v220, '+', v223
            SetComputedProperty v222, v221, v224
            v225 <- LoadInteger '1'
            v226 <- BinaryOperation v220, '+', v225
            Return v226
        EndPlainFunction
        v227 <- CallMethod v178, 'map', [v219]
        v228 <- CreateArray []
        Reassign v178, v228
        v229 <- BeginPlainFunction -> 
            v230 <- LoadThis
            v231 <- CallMethod v178, 'push', [v230]
        EndPlainFunction
        v232 <- LoadString ''
        v233 <- LoadInteger '1'
        v234 <- LoadInteger '2'
        v235 <- CreateArray [v233, v234]
        v236 <- Construct v28, [v235]
        v237 <- CallMethod v236, 'map', [v229, v232]
        v238 <- GetElement v178, '0'
        v239 <- GetElement v178, '1'
        v240 <- Compare v238, '!==', v239
        v241 <- CreateArray []
        Reassign v178, v241
        v242 <- BeginPlainFunction -> 
            v243 <- LoadThis
            v244 <- CallMethod v178, 'push', [v243]
        EndPlainFunction
        BeginObjectLiteral
        v245 <- EndObjectLiteral
        v246 <- LoadInteger '1'
        v247 <- LoadInteger '2'
        v248 <- CreateArray [v246, v247]
        v249 <- Construct v28, [v248]
        v250 <- CallMethod v249, 'map', [v242, v245]
        v251 <- GetElement v178, '0'
        v252 <- GetElement v178, '1'
        v253 <- CreateArray []
        Reassign v178, v253
        v254 <- BeginPlainFunction -> 
            Directive 'use strict'
            v255 <- LoadThis
            v256 <- CallMethod v178, 'push', [v255]
        EndPlainFunction
        v257 <- LoadString ''
        v258 <- LoadInteger '1'
        v259 <- LoadInteger '2'
        v260 <- CreateArray [v258, v259]
        v261 <- Construct v28, [v260]
        v262 <- CallMethod v261, 'map', [v254, v257]
        v263 <- LoadString ''
        v264 <- GetElement v178, '0'
        v265 <- GetElement v178, '0'
        v266 <- GetElement v178, '1'
        v267 <- LoadInteger '3'
        v268 <- LoadInteger '3'
        v269 <- CreateArray [v267, v268]
        v270 <- BeginPlainFunction -> 
            v271 <- LoadString '3'
            Return v271
        EndPlainFunction
        v272 <- LoadInteger '1'
        v273 <- LoadInteger '2'
        v274 <- CreateArray [v272, v273]
        v275 <- Construct v28, [v274]
        v276 <- CallMethod v275, 'map', [v270]
        v277 <- Compare v28, '!==', v7
        v278 <- Compare v28, '!==', v8
        v279 <- BinaryOperation v277, '&&', v278
        BeginIf v279
            v280 <- LoadInteger '0'
            v281 <- LoadInteger '0'
            v282 <- CreateArray [v280, v281]
            v283 <- BeginPlainFunction -> 
                v284 <- CreateNamedVariable 'NaN', 'none'
                Return v284
            EndPlainFunction
            v285 <- LoadInteger '1'
            v286 <- LoadInteger '2'
            v287 <- CreateArray [v285, v286]
            v288 <- Construct v28, [v287]
            v289 <- CallMethod v288, 'map', [v283]
        EndIf
        v290 <- LoadInteger '1'
        v291 <- LoadInteger '2'
        v292 <- LoadInteger '3'
        v293 <- LoadInteger '4'
        v294 <- LoadInteger '5'
        v295 <- LoadInteger '6'
        v296 <- LoadInteger '7'
        v297 <- LoadInteger '8'
        v298 <- LoadInteger '9'
        v299 <- LoadInteger '10'
        v300 <- CreateArray [v290, v291, v292, v293, v294, v295, v296, v297, v298, v299]
        v301 <- Construct v28, [v300]
        v302 <- CreateNamedVariable 'array', 'var', v301
        v303 <- BeginArrowFunction -> 
            v304 <- BeginArrowFunction -> v305
                Return v305
            EndArrowFunction
            v306 <- CallMethod v302, 'map', [v304]
            Return v306
        EndArrowFunction
        v307 <- CallFunction v303, []
        v308 <- CreateNamedVariable 'TypeError', 'none'
    EndPlainFunction
    v309 <- CallFunction v170, []
    v310 <- BeginPlainFunction -> 
        v311 <- LoadInteger '0'
        v312 <- LoadInteger '1'
        v313 <- LoadInteger '2'
        v314 <- LoadInteger '3'
        v315 <- LoadInteger '4'
        v316 <- CreateArray [v311, v312, v313, v314, v315]
        v317 <- Construct v28, [v316]
        v318 <- CreateNamedVariable 'a', 'var', v317
        v319 <- BeginPlainFunction -> v320
            v321 <- LoadInteger '3'
            v322 <- Compare v320, '==', v321
            Return v322
        EndPlainFunction
        v323 <- CallMethod v318, 'some', [v319]
        v324 <- BeginPlainFunction -> v325
            v326 <- LoadInteger '5'
            v327 <- Compare v325, '==', v326
            Return v327
        EndPlainFunction
        v328 <- CallMethod v318, 'some', [v324]
        v329 <- LoadInteger '42'
        BeginObjectLiteral
            ObjectLiteralAddProperty `element`, v329
        v330 <- EndObjectLiteral
        v331 <- CreateNamedVariable 'o', 'var', v330
        v332 <- LoadInteger '1'
        v333 <- LoadInteger '42'
        v334 <- LoadInteger '3'
        v335 <- CreateArray [v332, v333, v334]
        v336 <- Construct v28, [v335]
        Reassign v318, v336
        v337 <- BeginPlainFunction -> v338
            v339 <- LoadThis
            v340 <- GetProperty v339, 'element'
            v341 <- Compare v340, '==', v338
            Return v341
        EndPlainFunction
        v342 <- CallMethod v318, 'some', [v337, v331]
        v343 <- LoadInteger '1'
        v344 <- CreateArray [v343]
        v345 <- Construct v28, [v344]
        Reassign v318, v345
        v346 <- BeginPlainFunction -> v347
            v348 <- LoadThis
            v349 <- GetProperty v348, 'element'
            v350 <- Compare v349, '==', v347
            Return v350
        EndPlainFunction
        v351 <- CallMethod v318, 'some', [v346, v331]
        v352 <- LoadInteger '0'
        v353 <- LoadInteger '1'
        v354 <- LoadInteger '2'
        v355 <- LoadInteger '3'
        v356 <- CreateArray [v352, v353, v354, v355]
        v357 <- Construct v28, [v356]
        Reassign v318, v357
        v358 <- BeginPlainFunction -> v359, v360, v361
            v362 <- LoadInteger '1'
            v363 <- BinaryOperation v359, '+', v362
            SetComputedProperty v361, v360, v363
            v364 <- LoadInteger '2'
            v365 <- Compare v359, '==', v364
            Return v365
        EndPlainFunction
        v366 <- CallMethod v318, 'some', [v358]
        v367 <- LoadInteger '1'
        v368 <- LoadInteger '2'
        v369 <- LoadInteger '3'
        v370 <- LoadInteger '3'
        v371 <- CreateArray [v367, v368, v369, v370]
        v372 <- CreateArray []
        Reassign v318, v372
        v373 <- BeginPlainFunction -> 
            v374 <- LoadThis
            v375 <- CallMethod v318, 'push', [v374]
        EndPlainFunction
        v376 <- LoadString ''
        v377 <- LoadInteger '1'
        v378 <- LoadInteger '2'
        v379 <- CreateArray [v377, v378]
        v380 <- Construct v28, [v379]
        v381 <- CallMethod v380, 'some', [v373, v376]
        v382 <- GetElement v318, '0'
        v383 <- GetElement v318, '1'
        v384 <- Compare v382, '!==', v383
        v385 <- CreateArray []
        Reassign v318, v385
        v386 <- BeginPlainFunction -> 
            v387 <- LoadThis
            v388 <- CallMethod v318, 'push', [v387]
        EndPlainFunction
        BeginObjectLiteral
        v389 <- EndObjectLiteral
        v390 <- LoadInteger '1'
        v391 <- LoadInteger '2'
        v392 <- CreateArray [v390, v391]
        v393 <- Construct v28, [v392]
        v394 <- CallMethod v393, 'some', [v386, v389]
        v395 <- GetElement v318, '0'
        v396 <- GetElement v318, '1'
        v397 <- CreateArray []
        Reassign v318, v397
        v398 <- BeginPlainFunction -> 
            Directive 'use strict'
            v399 <- LoadThis
            v400 <- CallMethod v318, 'push', [v399]
        EndPlainFunction
        v401 <- LoadString ''
        v402 <- LoadInteger '1'
        v403 <- LoadInteger '2'
        v404 <- CreateArray [v402, v403]
        v405 <- Construct v28, [v404]
        v406 <- CallMethod v405, 'some', [v398, v401]
        v407 <- LoadString ''
        v408 <- GetElement v318, '0'
        v409 <- GetElement v318, '0'
        v410 <- GetElement v318, '1'
        v411 <- BeginPlainFunction -> 
            v412 <- CreateArray []
            v413 <- BeginPlainFunction -> 
            EndPlainFunction
            v414 <- GetProperty v28, 'prototype'
            v415 <- GetProperty v414, 'some'
            v416 <- CallMethod v415, 'call', [v412, v413]
        EndPlainFunction
        v417 <- CallFunction v411, []
        v418 <- CreateNamedVariable 'TypeError', 'none'
        v419 <- LoadInteger '1'
        v420 <- LoadInteger '2'
        v421 <- CreateArray [v419, v420]
        v422 <- Construct v28, [v421]
        Reassign v318, v422
        v423 <- LoadString 'length'
        v424 <- LoadInteger '1'
        BeginObjectLiteral
            ObjectLiteralAddProperty `value`, v424
        v425 <- EndObjectLiteral
        v426 <- CreateNamedVariable 'Object', 'none'
        v427 <- CallMethod v426, 'defineProperty', [v318, v423, v425]
        v428 <- LoadBoolean 'true'
        v429 <- BeginPlainFunction -> v430
            v431 <- LoadInteger '2'
            v432 <- Compare v430, '==', v431
            Return v432
        EndPlainFunction
        v433 <- CallMethod v318, 'some', [v429]
        v434 <- LoadBoolean 'false'
        v435 <- BeginPlainFunction -> v436
            v437 <- LoadInteger '2'
            v438 <- Compare v436, '==', v437
            Return v438
        EndPlainFunction
        v439 <- CreateNamedVariable 'Array', 'none'
        v440 <- GetProperty v439, 'prototype'
        v441 <- GetProperty v440, 'some'
        v442 <- CallMethod v441, 'call', [v318, v435]
        v443 <- LoadInteger '1'
        v444 <- LoadInteger '2'
        v445 <- LoadInteger '3'
        v446 <- LoadInteger '4'
        v447 <- LoadInteger '5'
        v448 <- LoadInteger '6'
        v449 <- LoadInteger '7'
        v450 <- LoadInteger '8'
        v451 <- LoadInteger '9'
        v452 <- LoadInteger '10'
        v453 <- CreateArray [v443, v444, v445, v446, v447, v448, v449, v450, v451, v452]
        v454 <- Construct v28, [v453]
        v455 <- CreateNamedVariable 'array', 'var', v454
        v456 <- BeginArrowFunction -> 
            v457 <- BeginArrowFunction -> v458
                v459 <- LoadBoolean 'false'
                Return v459
            EndArrowFunction
            v460 <- CallMethod v455, 'some', [v457]
            Return v460
        EndArrowFunction
        v461 <- CallFunction v456, []
    EndPlainFunction
    v462 <- CallFunction v310, []
EndForOfLoop


var typedArrayConstructors = [Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Uint8ClampedArray,Float32Array,Float64Array];
function assertArrayLikeEquals(a12, a13, a14) {
    a13.__proto__;
    a14.prototype;
    a12.length;
    a13.length;
    for (let i20 = 0; i20 < a13.length; ++i20) {
        a12[i20];
        a13[i20];
    }
}
for (const v28 of typedArrayConstructors) {
    function TypedArrayFilterTest() {
        const v33 = new v28([0,1]);
        var a = v33;
        [0];
        function f37(a38) {
            return a38 == 0;
        }
        a.filter(f37);
        [0,1];
        var o = { value: 42 };
        const v54 = new v28([1,42,3,42,4]);
        a = v54;
        [42,42];
        function f58(a59) {
            return this.value == a59;
        }
        a.filter(f58, o);
        const v70 = new v28([1,42,3,42,4]);
        a = v70;
        [42,42];
        function f74(a75, a76, a77) {
            a77[a76] = 43;
            return 42 == a75;
        }
        a.filter(f74);
        [43,43,43,43,43];
        a = [];
        function f89() {
            a.push(this);
        }
        const v96 = new v28([1,2]);
        v96.filter(f89, "");
        a[0] !== a[1];
        a = [];
        function f102() {
            a.push(this);
        }
        const v105 = {};
        const v109 = new v28([1,2]);
        v109.filter(f102, v105);
        a[0];
        a[1];
        a = [];
        function f114() {
            'use strict';
            a.push(this);
        }
        const v121 = new v28([1,2]);
        v121.filter(f114, "");
        a[0];
        a[0];
        a[1];
        function f127() {
            const v128 = [];
            function f129() {
            }
            v28.prototype.filter.call(v128, f129);
        }
        f127();
        const v138 = new v28([1,2]);
        a = v138;
        Object.defineProperty(a, "length", { value: 1 });
        [2];
        function f146(a147) {
            return a147 == 2;
        }
        a.filter(f146);
        const v162 = new v28([1,2,3,4,5,6,7,8,9,10]);
        var array = v162;
        const v164 = () => {
            const v165 = () => {
                return false;
            };
            return array.filter(v165);
        };
        v164();
    }
    TypedArrayFilterTest();
    function TypedArrayMapTest() {
        const v177 = new v28([0,1,2,3,4]);
        var a = v177;
        var result = [1,2,3,4,5];
        function f186(a187) {
            return a187 + 1;
        }
        a.map(f186);
        var o = { delta: 42 };
        result = [42,43,44,45,46];
        function f200(a201) {
            return this.delta + a201;
        }
        a.map(f200, o);
        const v212 = new v28([0,1,2,3,4]);
        a = v212;
        result = [1,2,3,4,5];
        function f219(a220, a221, a222) {
            a222[a221] = a220 + 1;
            return a220 + 1;
        }
        a.map(f219);
        a = [];
        function f229() {
            a.push(this);
        }
        const v236 = new v28([1,2]);
        v236.map(f229, "");
        a[0] !== a[1];
        a = [];
        function f242() {
            a.push(this);
        }
        const v245 = {};
        const v249 = new v28([1,2]);
        v249.map(f242, v245);
        a[0];
        a[1];
        a = [];
        function f254() {
            'use strict';
            a.push(this);
        }
        const v261 = new v28([1,2]);
        v261.map(f254, "");
        a[0];
        a[0];
        a[1];
        [3,3];
        function f270() {
            return "3";
        }
        const v275 = new v28([1,2]);
        v275.map(f270);
        if ((v28 !== Float32Array) && (v28 !== Float64Array)) {
            [0,0];
            function f283() {
                return NaN;
            }
            const v288 = new v28([1,2]);
            v288.map(f283);
        }
        const v301 = new v28([1,2,3,4,5,6,7,8,9,10]);
        var array = v301;
        const v303 = () => {
            const v304 = (a305) => {
                return a305;
            };
            return array.map(v304);
        };
        v303();
    }
    TypedArrayMapTest();
    function TypedArraySomeTest() {
        const v317 = new v28([0,1,2,3,4]);
        var a = v317;
        function f319(a320) {
            return a320 == 3;
        }
        a.some(f319);
        function f324(a325) {
            return a325 == 5;
        }
        a.some(f324);
        var o = { element: 42 };
        const v336 = new v28([1,42,3]);
        a = v336;
        function f337(a338) {
            return this.element == a338;
        }
        a.some(f337, o);
        const v345 = new v28([1]);
        a = v345;
        function f346(a347) {
            return this.element == a347;
        }
        a.some(f346, o);
        const v357 = new v28([0,1,2,3]);
        a = v357;
        function f358(a359, a360, a361) {
            a361[a360] = a359 + 1;
            return a359 == 2;
        }
        a.some(f358);
        [1,2,3,3];
        a = [];
        function f373() {
            a.push(this);
        }
        const v380 = new v28([1,2]);
        v380.some(f373, "");
        a[0] !== a[1];
        a = [];
        function f386() {
            a.push(this);
        }
        const v389 = {};
        const v393 = new v28([1,2]);
        v393.some(f386, v389);
        a[0];
        a[1];
        a = [];
        function f398() {
            'use strict';
            a.push(this);
        }
        const v405 = new v28([1,2]);
        v405.some(f398, "");
        a[0];
        a[0];
        a[1];
        function f411() {
            const v412 = [];
            function f413() {
            }
            v28.prototype.some.call(v412, f413);
        }
        f411();
        const v422 = new v28([1,2]);
        a = v422;
        Object.defineProperty(a, "length", { value: 1 });
        function f429(a430) {
            return a430 == 2;
        }
        a.some(f429);
        function f435(a436) {
            return a436 == 2;
        }
        Array.prototype.some.call(a, f435);
        const v454 = new v28([1,2,3,4,5,6,7,8,9,10]);
        var array = v454;
        const v456 = () => {
            const v457 = (a458) => {
                return false;
            };
            return array.some(v457);
        };
        v456();
    }
    TypedArraySomeTest();
}

FuzzIL program written to corpus/typedarray-iteration.fzil
