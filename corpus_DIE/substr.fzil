v0 <- LoadString 'abcdefghijklmn'
v1 <- CreateNamedVariable 's', 'var', v0
v2 <- CallMethod v1, 'substr', []
v3 <- LoadInteger '0'
v4 <- CallMethod v1, 'substr', [v3]
v5 <- LoadString '0'
v6 <- CallMethod v1, 'substr', [v5]
v7 <- LoadInteger '0'
v8 <- Void_ v7
v9 <- CallMethod v1, 'substr', [v8]
v10 <- LoadNull
v11 <- CallMethod v1, 'substr', [v10]
v12 <- LoadBoolean 'false'
v13 <- CallMethod v1, 'substr', [v12]
v14 <- LoadFloat '0.9'
v15 <- CallMethod v1, 'substr', [v14]
v16 <- BeginPlainFunction -> 
    v17 <- LoadInteger '0'
    Return v17
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v16
v18 <- EndObjectLiteral
v19 <- CallMethod v1, 'substr', [v18]
v20 <- BeginPlainFunction -> 
    v21 <- LoadString '0'
    Return v21
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toString`, v20
v22 <- EndObjectLiteral
v23 <- CallMethod v1, 'substr', [v22]
v24 <- LoadInteger '1'
v25 <- CallMethod v1, 'substring', [v24]
v26 <- CreateNamedVariable 's1', 'var', v25
v27 <- LoadInteger '1'
v28 <- CallMethod v1, 'substr', [v27]
v29 <- LoadString '1'
v30 <- CallMethod v1, 'substr', [v29]
v31 <- LoadBoolean 'true'
v32 <- CallMethod v1, 'substr', [v31]
v33 <- LoadFloat '1.1'
v34 <- CallMethod v1, 'substr', [v33]
v35 <- BeginPlainFunction -> 
    v36 <- LoadInteger '1'
    Return v36
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v35
v37 <- EndObjectLiteral
v38 <- CallMethod v1, 'substr', [v37]
v39 <- BeginPlainFunction -> 
    v40 <- LoadString '1'
    Return v40
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toString`, v39
v41 <- EndObjectLiteral
v42 <- CallMethod v1, 'substr', [v41]
v43 <- GetProperty v1, 'length'
v44 <- LoadInteger '1'
v45 <- BinaryOperation v43, '-', v44
v46 <- CallMethod v1, 'substring', [v45]
v47 <- LoadInteger '1'
v48 <- UnaryOperation '-', v47
v49 <- CallMethod v1, 'substr', [v48]
v50 <- GetProperty v1, 'length'
v51 <- LoadInteger '1'
v52 <- BinaryOperation v50, '-', v51
v53 <- CallMethod v1, 'substring', [v52]
v54 <- LoadFloat '1.2'
v55 <- UnaryOperation '-', v54
v56 <- CallMethod v1, 'substr', [v55]
v57 <- GetProperty v1, 'length'
v58 <- LoadInteger '1'
v59 <- BinaryOperation v57, '-', v58
v60 <- CallMethod v1, 'substring', [v59]
v61 <- LoadFloat '1.7'
v62 <- UnaryOperation '-', v61
v63 <- CallMethod v1, 'substr', [v62]
v64 <- GetProperty v1, 'length'
v65 <- LoadInteger '2'
v66 <- BinaryOperation v64, '-', v65
v67 <- CallMethod v1, 'substring', [v66]
v68 <- LoadInteger '2'
v69 <- UnaryOperation '-', v68
v70 <- CallMethod v1, 'substr', [v69]
v71 <- GetProperty v1, 'length'
v72 <- LoadInteger '2'
v73 <- BinaryOperation v71, '-', v72
v74 <- CallMethod v1, 'substring', [v73]
v75 <- LoadFloat '2.3'
v76 <- UnaryOperation '-', v75
v77 <- CallMethod v1, 'substr', [v76]
v78 <- GetProperty v1, 'length'
v79 <- LoadInteger '2'
v80 <- BinaryOperation v78, '-', v79
v81 <- GetProperty v1, 'length'
v82 <- LoadInteger '1'
v83 <- BinaryOperation v81, '-', v82
v84 <- CallMethod v1, 'substring', [v80, v83]
v85 <- LoadInteger '2'
v86 <- UnaryOperation '-', v85
v87 <- LoadInteger '1'
v88 <- CallMethod v1, 'substr', [v86, v87]
v89 <- LoadInteger '100'
v90 <- UnaryOperation '-', v89
v91 <- CallMethod v1, 'substr', [v90]
v92 <- LoadString 'abc'
v93 <- LoadInteger '100'
v94 <- UnaryOperation '-', v93
v95 <- LoadInteger '3'
v96 <- CallMethod v1, 'substr', [v94, v95]
v97 <- GetProperty v1, 'length'
v98 <- UnaryOperation '-', v97
v99 <- LoadInteger '1'
v100 <- BinaryOperation v98, '+', v99
v101 <- CallMethod v1, 'substr', [v100]
v102 <- LoadString 'abcdefghijklmn'
v103 <- LoadInteger '0'
v104 <- LoadInteger '0'
v105 <- Void_ v104
v106 <- CallMethod v1, 'substr', [v103, v105]
v107 <- LoadString ''
v108 <- LoadInteger '0'
v109 <- LoadNull
v110 <- CallMethod v1, 'substr', [v108, v109]
v111 <- LoadInteger '0'
v112 <- GetProperty v1, 'length'
v113 <- CreateNamedVariable 'String', 'none'
v114 <- CallFunction v113, [v112]
v115 <- CallMethod v1, 'substr', [v111, v114]
v116 <- LoadString 'a'
v117 <- LoadInteger '0'
v118 <- LoadBoolean 'true'
v119 <- CallMethod v1, 'substr', [v117, v118]
v120 <- LoadString 'ASCII'
v121 <- CreateNamedVariable 'x', 'var', v120
BeginForLoopInitializer
    v122 <- LoadInteger '0'
BeginForLoopCondition -> v123
    v124 <- LoadInteger '25'
    v125 <- Compare v123, '<', v124
BeginForLoopAfterthought v125 -> v126
    v127 <- UnaryOperation v126, '++'
BeginForLoopBody -> v128
    v129 <- LoadInteger '16'
    v130 <- LoadInteger '4'
    v131 <- BinaryOperation v128, '>>', v130
    v132 <- CallMethod v131, 'toString', [v129]
    v133 <- LoadInteger '16'
    v134 <- LoadInteger '15'
    v135 <- BinaryOperation v128, '&', v134
    v136 <- CallMethod v135, 'toString', [v133]
    v137 <- BinaryOperation v132, '+', v136
    Update v121, '+', v137
EndForLoop
v138 <- LoadRegExp 'x' ''
v139 <- CallMethod v138, 'exec', [v121]
BeginForLoopInitializer
    v140 <- LoadInteger '5'
BeginForLoopCondition -> v141
    v142 <- LoadInteger '25'
    v143 <- Compare v141, '<', v142
BeginForLoopAfterthought v143 -> v144
    v145 <- UnaryOperation v144, '++'
BeginForLoopBody -> v146
    BeginForLoopInitializer
        v147 <- LoadInteger '0'
    BeginForLoopCondition -> v148
        v149 <- LoadInteger '25'
        v150 <- Compare v148, '<', v149
    BeginForLoopAfterthought v150 -> v151
        v152 <- UnaryOperation v151, '++'
    BeginForLoopBody -> v153
        v154 <- BinaryOperation v146, '+', v153
        v155 <- CallMethod v121, 'substring', [v146, v154]
        v156 <- CreateNamedVariable 'z', 'var', v155
        v157 <- CreateNamedVariable 'Math', 'none'
        v158 <- CallMethod v157, 'random', []
        v159 <- LoadInteger '42'
        v160 <- BinaryOperation v158, '*', v159
        v161 <- CreateNamedVariable 'w', 'var', v160
        v162 <- GetProperty v156, 'length'
        BeginForLoopInitializer
            v163 <- LoadInteger '0'
        BeginForLoopCondition -> v164
            v165 <- Compare v164, '<', v153
        BeginForLoopAfterthought v165 -> v166
            v167 <- UnaryOperation v166, '++'
        BeginForLoopBody -> v168
            v169 <- BinaryOperation v146, '+', v168
            v170 <- CallMethod v121, 'charAt', [v169]
            v171 <- CallMethod v156, 'charAt', [v168]
        EndForLoop
    EndForLoop
EndForLoop
v172 <- LoadString 'UC16 '
Reassign v121, v172
BeginForLoopInitializer
    v173 <- LoadInteger '0'
BeginForLoopCondition -> v174
    v175 <- LoadInteger '25'
    v176 <- Compare v174, '<', v175
BeginForLoopAfterthought v176 -> v177
    v178 <- UnaryOperation v177, '++'
BeginForLoopBody -> v179
    v180 <- LoadInteger '16'
    v181 <- LoadInteger '4'
    v182 <- BinaryOperation v179, '>>', v181
    v183 <- CallMethod v182, 'toString', [v180]
    v184 <- LoadInteger '16'
    v185 <- LoadInteger '15'
    v186 <- BinaryOperation v179, '&', v185
    v187 <- CallMethod v186, 'toString', [v184]
    v188 <- BinaryOperation v183, '+', v187
    Update v121, '+', v188
EndForLoop
v189 <- LoadRegExp 'x' ''
v190 <- CallMethod v189, 'exec', [v121]
BeginForLoopInitializer
    v191 <- LoadInteger '5'
BeginForLoopCondition -> v192
    v193 <- LoadInteger '25'
    v194 <- Compare v192, '<', v193
BeginForLoopAfterthought v194 -> v195
    v196 <- UnaryOperation v195, '++'
BeginForLoopBody -> v197
    BeginForLoopInitializer
        v198 <- LoadInteger '0'
    BeginForLoopCondition -> v199
        v200 <- LoadInteger '25'
        v201 <- Compare v199, '<', v200
    BeginForLoopAfterthought v201 -> v202
        v203 <- UnaryOperation v202, '++'
    BeginForLoopBody -> v204
        v205 <- BinaryOperation v197, '+', v204
        v206 <- CallMethod v121, 'substring', [v197, v205]
        v207 <- CreateNamedVariable 'z', 'var', v206
        v208 <- CreateNamedVariable 'Math', 'none'
        v209 <- CallMethod v208, 'random', []
        v210 <- LoadInteger '42'
        v211 <- BinaryOperation v209, '*', v210
        v212 <- CreateNamedVariable 'w', 'var', v211
        v213 <- GetProperty v207, 'length'
        BeginForLoopInitializer
            v214 <- LoadInteger '0'
        BeginForLoopCondition -> v215
            v216 <- Compare v215, '<', v204
        BeginForLoopAfterthought v216 -> v217
            v218 <- UnaryOperation v217, '++'
        BeginForLoopBody -> v219
            v220 <- BinaryOperation v197, '+', v219
            v221 <- CallMethod v121, 'charAt', [v220]
            v222 <- CallMethod v207, 'charAt', [v219]
        EndForLoop
    EndForLoop
EndForLoop
v223 <- LoadString '0123456789ABCDEF'
v224 <- CreateNamedVariable 'x', 'var', v223
Update v224, '+', v224
Update v224, '+', v224
Update v224, '+', v224
Update v224, '+', v224
Update v224, '+', v224
Update v224, '+', v224
Update v224, '+', v224
Update v224, '+', v224
v225 <- GetProperty v224, 'length'
v226 <- CreateNamedVariable 'xl', 'var', v225
v227 <- CreateArray []
v228 <- CreateNamedVariable 'cache', 'var', v227
BeginForLoopInitializer
    v229 <- LoadInteger '0'
BeginForLoopCondition -> v230
    v231 <- LoadInteger '10000'
    v232 <- Compare v230, '<', v231
BeginForLoopAfterthought v232 -> v233
    v234 <- UnaryOperation v233, '++'
BeginForLoopBody -> v235
    v236 <- BinaryOperation v235, '%', v226
    v237 <- CallMethod v224, 'substring', [v236]
    v238 <- CreateNamedVariable 'z', 'var', v237
    v239 <- BinaryOperation v235, '%', v226
    v240 <- BinaryOperation v226, '-', v239
    v241 <- GetProperty v238, 'length'
    v242 <- CallMethod v228, 'push', [v238]
EndForLoop
v243 <- LoadString ' 123456789ABCDEF'
v244 <- CreateNamedVariable 'x', 'var', v243
Update v244, '+', v244
Update v244, '+', v244
Update v244, '+', v244
Update v244, '+', v244
Update v244, '+', v244
Update v244, '+', v244
Update v244, '+', v244
Update v244, '+', v244
v245 <- GetProperty v244, 'length'
v246 <- CreateNamedVariable 'xl', 'var', v245
v247 <- CreateArray []
v248 <- CreateNamedVariable 'cache', 'var', v247
BeginForLoopInitializer
    v249 <- LoadInteger '0'
BeginForLoopCondition -> v250
    v251 <- LoadInteger '10000'
    v252 <- Compare v250, '<', v251
BeginForLoopAfterthought v252 -> v253
    v254 <- UnaryOperation v253, '++'
BeginForLoopBody -> v255
    v256 <- BinaryOperation v255, '%', v246
    v257 <- CallMethod v244, 'substring', [v256]
    v258 <- CreateNamedVariable 'z', 'var', v257
    v259 <- BinaryOperation v255, '%', v246
    v260 <- BinaryOperation v246, '-', v259
    v261 <- GetProperty v258, 'length'
    v262 <- CallMethod v248, 'push', [v258]
EndForLoop
v263 <- CreateArray []
v264 <- CreateNamedVariable 'cache', 'var', v263
v265 <- CreateNamedVariable 'last', 'var', v244
v266 <- LoadInteger '0'
v267 <- CreateNamedVariable 'offset', 'var', v266
BeginForLoopInitializer
    v268 <- LoadInteger '0'
BeginForLoopCondition -> v269
    v270 <- LoadInteger '64'
    v271 <- Compare v269, '<', v270
BeginForLoopAfterthought v271 -> v272
    v273 <- UnaryOperation v272, '++'
BeginForLoopBody -> v274
    v275 <- CallMethod v265, 'substring', [v274]
    v276 <- CreateNamedVariable 'z', 'var', v275
    Reassign v265, v276
    v277 <- CallMethod v264, 'push', [v276]
    Update v267, '+', v274
EndForLoop
BeginForLoopInitializer
    v278 <- LoadInteger '63'
BeginForLoopCondition -> v279
    v280 <- LoadInteger '0'
    v281 <- Compare v279, '>=', v280
BeginForLoopAfterthought v281 -> v282
    v283 <- UnaryOperation v282, '--'
BeginForLoopBody -> v284
    v285 <- CallMethod v264, 'pop', []
    v286 <- CreateNamedVariable 'z', 'var', v285
    v287 <- LoadRegExp '\u2028123456789ABCDEF' ''
    v288 <- CallMethod v287, 'test', [v286]
    v289 <- BinaryOperation v246, '-', v267
    v290 <- GetProperty v286, 'length'
    Update v267, '-', v284
EndForLoop
BeginBlockStatement
    v291 <- CreateArray []
    v292 <- CreateNamedVariable 'log', 'let', v291
    v293 <- CreateNamedVariable 'Symbol', 'none'
    v294 <- GetProperty v293, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v294 -> v295
            v296 <- LoadString 'this'
            v297 <- CallMethod v292, 'push', [v296]
            v298 <- LoadString 'abc'
            Return v298
        EndObjectLiteralComputedMethod
    v299 <- EndObjectLiteral
    v300 <- CreateNamedVariable 'string', 'let', v299
    v301 <- GetProperty v293, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v301 -> v302
            v303 <- LoadString 'start'
            v304 <- CallMethod v292, 'push', [v303]
            v305 <- LoadInteger '0'
            Return v305
        EndObjectLiteralComputedMethod
    v306 <- EndObjectLiteral
    v307 <- CreateNamedVariable 'start', 'let', v306
    v308 <- GetProperty v293, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v308 -> v309
            v310 <- LoadString 'length'
            v311 <- CallMethod v292, 'push', [v310]
            v312 <- LoadInteger '1'
            Return v312
        EndObjectLiteralComputedMethod
    v313 <- EndObjectLiteral
    v314 <- CreateNamedVariable 'length', 'let', v313
    v315 <- LoadString 'a'
    v316 <- GetProperty v113, 'prototype'
    v317 <- GetProperty v316, 'substr'
    v318 <- CallMethod v317, 'call', [v300, v307, v314]
    v319 <- LoadString 'this'
    v320 <- LoadString 'start'
    v321 <- LoadString 'length'
    v322 <- CreateArray [v319, v320, v321]
EndBlockStatement
BeginBlockStatement
    v323 <- CreateArray []
    v324 <- CreateNamedVariable 'log', 'let', v323
    v325 <- CreateNamedVariable 'Symbol', 'none'
    v326 <- GetProperty v325, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v326 -> v327
            v328 <- LoadString 'this'
            v329 <- CallMethod v324, 'push', [v328]
            v330 <- LoadString 'abc'
            Return v330
        EndObjectLiteralComputedMethod
    v331 <- EndObjectLiteral
    v332 <- CreateNamedVariable 'string', 'let', v331
    v333 <- GetProperty v325, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v333 -> v334
            v335 <- LoadString 'start'
            v336 <- CallMethod v324, 'push', [v335]
            v337 <- LoadInteger '0'
            Return v337
        EndObjectLiteralComputedMethod
    v338 <- EndObjectLiteral
    v339 <- CreateNamedVariable 'start', 'let', v338
    v340 <- GetProperty v325, 'toPrimitive'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v340 -> v341
            v342 <- LoadString 'length'
            v343 <- CallMethod v324, 'push', [v342]
            v344 <- LoadInteger '0'
            Return v344
        EndObjectLiteralComputedMethod
    v345 <- EndObjectLiteral
    v346 <- CreateNamedVariable 'length', 'let', v345
    v347 <- LoadString ''
    v348 <- GetProperty v113, 'prototype'
    v349 <- GetProperty v348, 'substr'
    v350 <- CallMethod v349, 'call', [v332, v339, v346]
    v351 <- LoadString 'this'
    v352 <- LoadString 'start'
    v353 <- LoadString 'length'
    v354 <- CreateArray [v351, v352, v353]
EndBlockStatement
BeginBlockStatement
    v355 <- LoadString 'abc'
    v356 <- CreateNamedVariable 'str', 'const', v355
    v357 <- LoadInteger '1'
    v358 <- UnaryOperation '-', v357
    v359 <- LoadInteger '2'
    v360 <- LoadInteger '32'
    v361 <- BinaryOperation v359, '**', v360
    v362 <- BinaryOperation v358, '*', v361
    v363 <- CreateNamedVariable 'negativeHeapNumber', 'const', v362
    v364 <- LoadInteger '2'
    v365 <- LoadInteger '32'
    v366 <- BinaryOperation v364, '**', v365
    v367 <- CreateNamedVariable 'positiveHeapNumber', 'const', v366
    v368 <- LoadString 'abc'
    v369 <- CallMethod v356, 'substr', [v363]
    v370 <- LoadString 'abc'
    v371 <- GetProperty v356, 'length'
    v372 <- CallMethod v356, 'substr', [v363, v371]
    v373 <- LoadString 'abc'
    v374 <- GetProperty v356, 'length'
    v375 <- UnaryOperation '-', v374
    v376 <- GetProperty v356, 'length'
    v377 <- CallMethod v356, 'substr', [v375, v376]
    v378 <- LoadString 'abc'
    v379 <- LoadInteger '0'
    v380 <- GetProperty v356, 'length'
    v381 <- CallMethod v356, 'substr', [v379, v380]
    v382 <- LoadString 'bc'
    v383 <- LoadInteger '2'
    v384 <- UnaryOperation '-', v383
    v385 <- GetProperty v356, 'length'
    v386 <- CallMethod v356, 'substr', [v384, v385]
    v387 <- LoadString 'c'
    v388 <- LoadInteger '1'
    v389 <- UnaryOperation '-', v388
    v390 <- GetProperty v356, 'length'
    v391 <- CallMethod v356, 'substr', [v389, v390]
    v392 <- LoadString ''
    v393 <- GetProperty v356, 'length'
    v394 <- CallMethod v356, 'substr', [v393]
    v395 <- LoadString ''
    v396 <- LoadInteger '4'
    v397 <- CallMethod v356, 'substr', [v396]
    v398 <- LoadString ''
    v399 <- CallMethod v356, 'substr', [v367]
    v400 <- LoadString 'abc'
    v401 <- CallMethod v356, 'substr', [v363, v367]
    v402 <- LoadString 'abc'
    v403 <- CallMethod v356, 'substr', [v363, v367]
    v404 <- LoadString 'abc'
    v405 <- GetProperty v356, 'length'
    v406 <- UnaryOperation '-', v405
    v407 <- CallMethod v356, 'substr', [v406, v367]
    v408 <- LoadString 'abc'
    v409 <- LoadInteger '0'
    v410 <- CallMethod v356, 'substr', [v409, v367]
    v411 <- LoadString 'bc'
    v412 <- LoadInteger '2'
    v413 <- UnaryOperation '-', v412
    v414 <- CallMethod v356, 'substr', [v413, v367]
    v415 <- LoadString 'c'
    v416 <- LoadInteger '1'
    v417 <- UnaryOperation '-', v416
    v418 <- CallMethod v356, 'substr', [v417, v367]
    v419 <- LoadString ''
    v420 <- GetProperty v356, 'length'
    v421 <- CallMethod v356, 'substr', [v420, v367]
    v422 <- LoadString ''
    v423 <- LoadInteger '4'
    v424 <- CallMethod v356, 'substr', [v423, v367]
    v425 <- LoadString ''
    v426 <- CallMethod v356, 'substr', [v367, v367]
    v427 <- LoadString ''
    v428 <- CallMethod v356, 'substr', [v363, v363]
    v429 <- LoadString ''
    v430 <- CallMethod v356, 'substr', [v363, v363]
    v431 <- LoadString ''
    v432 <- GetProperty v356, 'length'
    v433 <- UnaryOperation '-', v432
    v434 <- CallMethod v356, 'substr', [v433, v363]
    v435 <- LoadString ''
    v436 <- LoadInteger '0'
    v437 <- CallMethod v356, 'substr', [v436, v363]
    v438 <- LoadString ''
    v439 <- LoadInteger '2'
    v440 <- UnaryOperation '-', v439
    v441 <- CallMethod v356, 'substr', [v440, v363]
    v442 <- LoadString ''
    v443 <- LoadInteger '1'
    v444 <- UnaryOperation '-', v443
    v445 <- CallMethod v356, 'substr', [v444, v363]
    v446 <- LoadString ''
    v447 <- GetProperty v356, 'length'
    v448 <- CallMethod v356, 'substr', [v447, v363]
    v449 <- LoadString ''
    v450 <- LoadInteger '4'
    v451 <- CallMethod v356, 'substr', [v450, v363]
    v452 <- LoadString ''
    v453 <- CallMethod v356, 'substr', [v367, v363]
    v454 <- LoadString ''
    v455 <- LoadInteger '1'
    v456 <- UnaryOperation '-', v455
    v457 <- CallMethod v356, 'substr', [v363, v456]
    v458 <- LoadString ''
    v459 <- LoadInteger '1'
    v460 <- UnaryOperation '-', v459
    v461 <- CallMethod v356, 'substr', [v363, v460]
    v462 <- LoadString ''
    v463 <- GetProperty v356, 'length'
    v464 <- UnaryOperation '-', v463
    v465 <- LoadInteger '1'
    v466 <- UnaryOperation '-', v465
    v467 <- CallMethod v356, 'substr', [v464, v466]
    v468 <- LoadString ''
    v469 <- LoadInteger '0'
    v470 <- LoadInteger '1'
    v471 <- UnaryOperation '-', v470
    v472 <- CallMethod v356, 'substr', [v469, v471]
    v473 <- LoadString ''
    v474 <- LoadInteger '2'
    v475 <- UnaryOperation '-', v474
    v476 <- LoadInteger '1'
    v477 <- UnaryOperation '-', v476
    v478 <- CallMethod v356, 'substr', [v475, v477]
    v479 <- LoadString ''
    v480 <- LoadInteger '1'
    v481 <- UnaryOperation '-', v480
    v482 <- LoadInteger '1'
    v483 <- UnaryOperation '-', v482
    v484 <- CallMethod v356, 'substr', [v481, v483]
    v485 <- LoadString ''
    v486 <- GetProperty v356, 'length'
    v487 <- LoadInteger '1'
    v488 <- UnaryOperation '-', v487
    v489 <- CallMethod v356, 'substr', [v486, v488]
    v490 <- LoadString ''
    v491 <- LoadInteger '4'
    v492 <- LoadInteger '1'
    v493 <- UnaryOperation '-', v492
    v494 <- CallMethod v356, 'substr', [v491, v493]
    v495 <- LoadString ''
    v496 <- LoadInteger '1'
    v497 <- UnaryOperation '-', v496
    v498 <- CallMethod v356, 'substr', [v367, v497]
    v499 <- LoadString 'abc'
    v500 <- LoadUndefined
    v501 <- CallMethod v356, 'substr', [v500]
    v502 <- LoadString 'abc'
    v503 <- LoadUndefined
    v504 <- LoadUndefined
    v505 <- CallMethod v356, 'substr', [v503, v504]
EndBlockStatement


var s = "abcdefghijklmn";
s.substr();
s.substr(0);
s.substr("0");
s.substr(void 0);
s.substr(null);
s.substr(false);
s.substr(0.9);
function f16() {
    return 0;
}
s.substr({ valueOf: f16 });
function f20() {
    return "0";
}
s.substr({ toString: f20 });
var s1 = s.substring(1);
s.substr(1);
s.substr("1");
s.substr(true);
s.substr(1.1);
function f35() {
    return 1;
}
s.substr({ valueOf: f35 });
function f39() {
    return "1";
}
s.substr({ toString: f39 });
s.substring(s.length - 1);
s.substr(-1);
s.substring(s.length - 1);
s.substr(-1.2);
s.substring(s.length - 1);
s.substr(-1.7);
s.substring(s.length - 2);
s.substr(-2);
s.substring(s.length - 2);
s.substr(-2.3);
s.substring(s.length - 2, s.length - 1);
s.substr(-2, 1);
s.substr(-100);
s.substr(-100, 3);
s.substr(-s.length + 1);
s.substr(0, void 0);
s.substr(0, null);
s.substr(0, String(s.length));
s.substr(0, true);
var x = "ASCII";
for (let i123 = 0; i123 < 25; i123++) {
    x += (i123 >> 4).toString(16) + (i123 & 15).toString(16);
}
/x/.exec(x);
for (let i141 = 5; i141 < 25; i141++) {
    for (let i148 = 0; i148 < 25; i148++) {
        var z = x.substring(i141, i141 + i148);
        var w = Math.random() * 42;
        z.length;
        for (let i164 = 0; i164 < i148; i164++) {
            x.charAt(i141 + i164);
            z.charAt(i164);
        }
    }
}
x = "UC16 ";
for (let i174 = 0; i174 < 25; i174++) {
    x += (i174 >> 4).toString(16) + (i174 & 15).toString(16);
}
/x/.exec(x);
for (let i192 = 5; i192 < 25; i192++) {
    for (let i199 = 0; i199 < 25; i199++) {
        var z = x.substring(i192, i192 + i199);
        var w = Math.random() * 42;
        z.length;
        for (let i215 = 0; i215 < i199; i215++) {
            x.charAt(i192 + i215);
            z.charAt(i215);
        }
    }
}
var x = "0123456789ABCDEF";
x += x;
x += x;
x += x;
x += x;
x += x;
x += x;
x += x;
x += x;
var xl = x.length;
var cache = [];
for (let i230 = 0; i230 < 10000; i230++) {
    var z = x.substring(i230 % xl);
    xl - (i230 % xl);
    z.length;
    cache.push(z);
}
var x = " 123456789ABCDEF";
x += x;
x += x;
x += x;
x += x;
x += x;
x += x;
x += x;
x += x;
var xl = x.length;
var cache = [];
for (let i250 = 0; i250 < 10000; i250++) {
    var z = x.substring(i250 % xl);
    xl - (i250 % xl);
    z.length;
    cache.push(z);
}
var cache = [];
var last = x;
var offset = 0;
for (let i269 = 0; i269 < 64; i269++) {
    var z = last.substring(i269);
    last = z;
    cache.push(z);
    offset += i269;
}
for (let i279 = 63; i279 >= 0; i279--) {
    var z = cache.pop();
    /\u2028123456789ABCDEF/.test(z);
    xl - offset;
    z.length;
    offset -= i279;
}
{
    let log = [];
    const v294 = Symbol.toPrimitive;
    const v299 = {
        [v294]() {
            log.push("this");
            return "abc";
        },
    };
    let string = v299;
    const v301 = Symbol.toPrimitive;
    const v306 = {
        [v301]() {
            log.push("start");
            return 0;
        },
    };
    let start = v306;
    const v308 = Symbol.toPrimitive;
    const v313 = {
        [v308]() {
            log.push("length");
            return 1;
        },
    };
    let length = v313;
    String.prototype.substr.call(string, start, length);
    ["this","start","length"];
}
{
    let log = [];
    const v326 = Symbol.toPrimitive;
    const v331 = {
        [v326]() {
            log.push("this");
            return "abc";
        },
    };
    let string = v331;
    const v333 = Symbol.toPrimitive;
    const v338 = {
        [v333]() {
            log.push("start");
            return 0;
        },
    };
    let start = v338;
    const v340 = Symbol.toPrimitive;
    const v345 = {
        [v340]() {
            log.push("length");
            return 0;
        },
    };
    let length = v345;
    String.prototype.substr.call(string, start, length);
    ["this","start","length"];
}
{
    const str = "abc";
    const negativeHeapNumber = -1 * (2 ** 32);
    const positiveHeapNumber = 2 ** 32;
    str.substr(negativeHeapNumber);
    str.substr(negativeHeapNumber, str.length);
    str.substr(-str.length, str.length);
    str.substr(0, str.length);
    str.substr(-2, str.length);
    str.substr(-1, str.length);
    str.substr(str.length);
    str.substr(4);
    str.substr(positiveHeapNumber);
    str.substr(negativeHeapNumber, positiveHeapNumber);
    str.substr(negativeHeapNumber, positiveHeapNumber);
    str.substr(-str.length, positiveHeapNumber);
    str.substr(0, positiveHeapNumber);
    str.substr(-2, positiveHeapNumber);
    str.substr(-1, positiveHeapNumber);
    str.substr(str.length, positiveHeapNumber);
    str.substr(4, positiveHeapNumber);
    str.substr(positiveHeapNumber, positiveHeapNumber);
    str.substr(negativeHeapNumber, negativeHeapNumber);
    str.substr(negativeHeapNumber, negativeHeapNumber);
    str.substr(-str.length, negativeHeapNumber);
    str.substr(0, negativeHeapNumber);
    str.substr(-2, negativeHeapNumber);
    str.substr(-1, negativeHeapNumber);
    str.substr(str.length, negativeHeapNumber);
    str.substr(4, negativeHeapNumber);
    str.substr(positiveHeapNumber, negativeHeapNumber);
    str.substr(negativeHeapNumber, -1);
    str.substr(negativeHeapNumber, -1);
    str.substr(-str.length, -1);
    str.substr(0, -1);
    str.substr(-2, -1);
    str.substr(-1, -1);
    str.substr(str.length, -1);
    str.substr(4, -1);
    str.substr(positiveHeapNumber, -1);
    str.substr(undefined);
    str.substr(undefined, undefined);
}

FuzzIL program written to corpus/substr.fzil
