v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    BeginObjectLiteral
        ObjectLiteralAddProperty `a`, v2
    v3 <- EndObjectLiteral
    v4 <- CreateNamedVariable 'o', 'var', v3
    v5 <- LoadInteger '1'
    v6 <- LoadInteger '2'
    v7 <- LoadInteger '3'
    v8 <- LoadInteger '4'
    v9 <- CreateArray [v5, v6, v7, v8]
    v10 <- CreateNamedVariable 'l', 'var', v9
    v11 <- LoadUndefined
    v12 <- CreateNamedVariable 'res', 'var', v11
    BeginForLoopInitializer
        v13 <- LoadInteger '0'
    BeginForLoopCondition -> v14
        v15 <- LoadInteger '3'
        v16 <- Compare v14, '<', v15
    BeginForLoopAfterthought v16 -> v17
        v18 <- UnaryOperation '++', v17
    BeginForLoopBody -> v19
        v20 <- LoadInteger '2'
        v21 <- BinaryOperation v1, '%', v20
        v22 <- LoadInteger '0'
        v23 <- Compare v21, '==', v22
        BeginIf v23
            v24 <- LoadInteger '1'
            SetProperty v4, 'a', v24
            v25 <- LoadBoolean 'false'
            v26 <- CreateNamedVariable 'b', 'none'
            Reassign v26, v25
        EndIf
        v27 <- GetProperty v4, 'a'
        v28 <- GetComputedProperty v10, v27
        Reassign v12, v28
        SetProperty v4, 'a', v1
    EndForLoop
    Return v12
EndPlainFunction
v29 <- LoadInteger '0'
v30 <- CallFunction v0, [v29]
v31 <- LoadInteger '1'
v32 <- CallFunction v0, [v31]
v33 <- LoadInteger '0'
v34 <- CallFunction v0, [v33]
v35 <- LoadInteger '1'
v36 <- CallFunction v0, [v35]
v37 <- LoadUndefined
v38 <- LoadInteger '101'
v39 <- CallFunction v0, [v38]


function f(a1) {
    var o = { a: 0 };
    var l = [1,2,3,4];
    var res;
    for (let i14 = 0; i14 < 3; ++i14) {
        if ((a1 % 2) == 0) {
            o.a = 1;
            b = false;
        }
        res = l[o.a];
        o.a = a1;
    }
    return res;
}
f(0);
f(1);
f(0);
f(1);
f(101);

FuzzIL program written to corpus/escape-analysis-phi-type.fzil
