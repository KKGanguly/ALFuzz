v0 <- BeginPlainFunction -> v1, v2
    Return v1
EndPlainFunction
v3 <- BeginPlainFunction -> v4
    v5 <- LoadInteger '1'
    v6 <- GetProperty v0, 'prototype'
    v7 <- GetProperty v6, 'x'
    v8 <- CallFunction v0, [v7]
    v9 <- LoadString 'c'
    v10 <- TernaryOperation v4, v8, v9
    v11 <- LoadInteger '1'
    v12 <- BinaryOperation v4, '+', v11
    v13 <- CallFunction v0, [v5, v12]
    Return v13
EndPlainFunction
BeginForLoopInitializer
    v14 <- LoadInteger '0'
BeginForLoopCondition -> v15
    v16 <- LoadInteger '5'
    v17 <- Compare v15, '<', v16
BeginForLoopAfterthought v17 -> v18
    v19 <- UnaryOperation '++', v18
BeginForLoopBody -> v20
    v21 <- LoadInteger '0'
    v22 <- CallFunction v3, [v21]
EndForLoop
v23 <- LoadInteger '0'
v24 <- CallFunction v3, [v23]
v25 <- LoadString 'a'
v26 <- CallFunction v3, [v25]


function observe(a1, a2) {
    return a1;
}
function test(a4) {
    a4 ? observe(observe.prototype.x) : "c";
    return observe(1, a4 + 1);
}
for (let i15 = 0; i15 < 5; ++i15) {
    test(0);
}
test(0);
test("a");

FuzzIL program written to corpus/regress-1237.fzil
