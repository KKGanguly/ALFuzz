v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '42'
    v2 <- LoadInteger '0'
    v3 <- LoadInteger '1'
    v4 <- Compare v2, '==', v3
    v5 <- LoadInteger '1'
    v6 <- LoadInteger '2'
    v7 <- TernaryOperation v4, v5, v6
    v8 <- BinaryOperation v1, '+', v7
    Return v8
EndPlainFunction
v9 <- BeginPlainFunction -> v10
    v11 <- LoadInteger '0'
    v12 <- LoadInteger '1'
    v13 <- Compare v11, '==', v12
    v14 <- LoadInteger '1'
    v15 <- LoadInteger '2'
    v16 <- TernaryOperation v13, v14, v15
    v17 <- BinaryOperation v10, '+', v16
    Return v17
EndPlainFunction
v18 <- BeginPlainFunction -> v19
    v20 <- LoadInteger '1'
    v21 <- BinaryOperation v19, '+', v20
    v22 <- LoadInteger '0'
    v23 <- LoadInteger '1'
    v24 <- Compare v22, '==', v23
    v25 <- LoadInteger '1'
    v26 <- LoadInteger '2'
    v27 <- TernaryOperation v24, v25, v26
    v28 <- BinaryOperation v21, '+', v27
    Return v28
EndPlainFunction
v29 <- LoadInteger '44'
v30 <- CallFunction v0, []
v31 <- LoadInteger '45'
v32 <- LoadInteger '43'
v33 <- CallFunction v9, [v32]
v34 <- LoadInteger '47'
v35 <- LoadInteger '44'
v36 <- CallFunction v18, [v35]


function f() {
    return 42 + (0 == 1 ? 1 : 2);
}
function g(a10) {
    return a10 + (0 == 1 ? 1 : 2);
}
function h(a19) {
    return (a19 + 1) + (0 == 1 ? 1 : 2);
}
f();
g(43);
h(44);

FuzzIL program written to corpus/control-flow-0.fzil
