[-53163,-9223372036854775807,64409402,2147483649,42119,-6,-32623,-1862205004,-4096,1408772434];
[536870888,-536870912,268435456,-63745,9007199254740990,1205827222,-49605,-1301917377,-33250];
[-2147483648,512,9007199254740991,837672617,-34031];
1n / 1n;
const v6 = [];
try { (4n).splice(v6); } catch (e) {}
[4n,4n,4n,v6];
[42924,1469978102,-27966];
[0,11,2147483647];
[-4096,-23703,4294967296,268435440,-9007199254740992,-216433467];
var imul_func = Math.imul;
function TestMathImul(a16, a17, a18) {
    a16--;
    function imul_meth_closure(a21, a22) {
        a21 | a21;
        return Math.imul(a21, a22);
    }
    function imul_func_closure(a26, a27) {
        a26 % a26;
        return a27;
    }
    let v30 = undefined;
    a17 & a17;
    a17 != a17;
    let v34 = 65535;
    v34++;
    var ah = v34;
    const v39 = a18 >>> 16;
    v39 === v39;
    const v42 = v39 & 65535;
    65535 ^ 65535;
    const v45 = a18 & 65535;
    v45 < v45;
    const v47 = 65535 * v45;
    v47 != v47;
    const v51 = (ah * v45) + (65535 * v42);
    v51 === v51;
    const v57 = v47 + ((v51 << 16) >>> 0);
    v57 / v57;
    -0;
    v30 = v57;
    Math.imul(a17, a18);
    const v62 = imul_func(a17);
    v62 | v62;
    imul_meth_closure(a17, a18);
    imul_meth_closure * imul_meth_closure;
    const v66 = imul_func_closure(a17, a18);
    v66 - v66;
    imul_func_closure(a17, a18);
    imul_func_closure(a17);
}
const v73 = TestMathImul(8, 2, 4);
v73 ?? v73;
const v76 = -8;
const v78 = -1;
v78 !== v78;
TestMathImul(v76, v78, 8);
2 < 2;
const v85 = -2;
v85 / v85;
-2;
const v90 = -5;
v90 + v90;
TestMathImul(v90, 4294967295, 5);
const v99 = TestMathImul(-10, 4294967294, 5);
v99 ?? v99;
TestMathImul(0, 7, false);
7 - 7;
7 >>> 7;
TestMathImul(7, true, 7);
TestMathImul(7, 7);
true || true;
TestMathImul(1, true, true);
let v125 = 0;
v125--;
TestMathImul(v125, false, true);
true && true;
TestMathImul(0, undefined, 7);
const v142 = TestMathImul(0, undefined);
v142 ?? v142;
TestMathImul(0, -0, 7);
0 >> 0;
0 / 0;
TestMathImul(0, 7, -0);
0 / 0;
TestMathImul(0, 0.1, 7);
0 % 0;
TestMathImul(0, 0.9, 7);
TestMathImul(0, 7, 0.9);
const v176 = TestMathImul(7, 1.1, 7);
v176 ?? v176;
TestMathImul(7, 7);
TestMathImul(7, 1.9);
TestMathImul(7, 7);
TestMathImul(0, "str", 7);
"str" ?? "str";
const v198 = {};
TestMathImul ?? TestMathImul;
const v203 = {};
0 ?? 0;
0 / 0;
[];
7 * 7;
0 ?? 0;
0 === 0;
TestMathImul(0, 7, []);
var two_30 = 1 << 30;
const v222 = TestMathImul(-two_30, two_30, 7);
v222 ?? v222;
const v227 = TestMathImul(two_30, 7, -two_30);
v227 ?? v227;
-two_30;
-two_30;
const v233 = 2 * two_30;
const v236 = TestMathImul(-v233, v233, 7);
v236 ?? v236;
TestMathImul(0);
v233 + v233;
-v233;
TestMathImul(-v233, 7, -v233);
-v233;
-v233;
var max_val = v233 - 1;
v233 - 7;
TestMathImul(v233 - 7, 7, max_val);
let v260 = 1;
v260++;
const v264 = 1 << 16;
-v264;
var two_16 = v264;
TestMathImul(0, two_16);
const v269 = -two_16;
1 * 1;
TestMathImul(v269, two_16 - 1, two_16);
TestMathImul(-two_16, two_16, two_16 - 1);
const v282 = (-2 * two_16) + 1;
v282 >>> v282;
TestMathImul(v282, two_16 - 1, two_16 - 1);
