v0 <- LoadString 'lsdfj sldkfj sdklfj læsdfjl sdkfjlsdk fjsdl fjsdljskdj flsj flsdkj flskd regexp: /foobar/\nldkfj sdlkfj sdkl'
v1 <- CreateNamedVariable 'foo', 'var', v0
BeginForLoopInitializer
    v2 <- LoadInteger '0'
BeginForLoopCondition -> v3
    v4 <- LoadInteger '1000'
    v5 <- Compare v3, '<', v4
BeginForLoopAfterthought v5 -> v6
    v7 <- UnaryOperation v6, '++'
BeginForLoopBody -> v8
    v9 <- LoadString 'regexp:'
    v10 <- CallMethod v1, 'indexOf', [v9]
    v11 <- CallMethod v1, 'substring', [v10]
    v12 <- LoadRegExp '^([a-z]+): (.*)' ''
    v13 <- CallMethod v12, 'test', [v11]
    v14 <- LoadString 'regexp'
    v15 <- CreateNamedVariable 'RegExp', 'none'
    v16 <- GetProperty v15, '$1'
    v17 <- LoadString 'RegExp.$1'
EndForLoop
v18 <- LoadRegExp '^(((N({)?)|(R)|(U)|(V)|(B)|(H)|(n((n)|(r)|(v)|(h))?)|(r(r)?)|(v)|(b((n)|(b))?)|(h))|((Y)|(A)|(E)|(o(u)?)|(p(u)?)|(q(u)?)|(s)|(t)|(u)|(w)|(x(u)?)|(y)|(z)|(a((T)|(A)|(L))?)|(c)|(e)|(f(u)?)|(g(u)?)|(i)|(j)|(l)|(m(u)?)))+' ''
v19 <- CreateNamedVariable 're', 'var', v18
v20 <- CreateNamedVariable 'RegExp', 'none'
v21 <- Construct v20, [v19]
v22 <- CreateNamedVariable 'r', 'var', v21
v23 <- LoadInteger '1'
v24 <- LoadInteger '1'
v25 <- UnaryOperation '-', v24
v26 <- LoadString '_Avtnennan gunzvmu pubExnY nEvln vaTxh rmuhguhaTxnY_'
v27 <- CallMethod v26, 'slice', [v23, v25]
v28 <- CreateNamedVariable 'str', 'var', v27
v29 <- BinaryOperation v28, '+', v28
Reassign v28, v29
v30 <- CallMethod v22, 'test', [v28]
v31 <- CallMethod v22, 'test', [v28]
v32 <- LoadRegExp 'x' ''
v33 <- CreateNamedVariable 're', 'var', v32
v34 <- LoadString 'a.yb'
v35 <- LoadString '.'
v36 <- LoadInteger '1'
v37 <- LoadInteger '1'
v38 <- UnaryOperation '-', v37
v39 <- LoadString '_axyb_'
v40 <- CallMethod v39, 'slice', [v36, v38]
v41 <- CallMethod v40, 'replace', [v33, v35]
v42 <- LoadString 'y'
v43 <- CallMethod v33, 'compile', [v42]
v44 <- LoadString 'ax.b'
v45 <- LoadString '.'
v46 <- LoadInteger '1'
v47 <- LoadInteger '1'
v48 <- UnaryOperation '-', v47
v49 <- LoadString '_axyb_'
v50 <- CallMethod v49, 'slice', [v46, v48]
v51 <- CallMethod v50, 'replace', [v33, v45]
v52 <- LoadString '(x)'
v53 <- CallMethod v33, 'compile', [v52]
v54 <- LoadString 'x'
v55 <- LoadString 'x'
v56 <- CreateArray [v54, v55]
v57 <- LoadInteger '1'
v58 <- LoadInteger '1'
v59 <- UnaryOperation '-', v58
v60 <- LoadString '_axyb_'
v61 <- CallMethod v60, 'slice', [v57, v59]
v62 <- CallMethod v33, 'exec', [v61]
v63 <- LoadString '(y)'
v64 <- CallMethod v33, 'compile', [v63]
v65 <- LoadString 'y'
v66 <- LoadString 'y'
v67 <- CreateArray [v65, v66]
v68 <- LoadInteger '1'
v69 <- LoadInteger '1'
v70 <- UnaryOperation '-', v69
v71 <- LoadString '_axyb_'
v72 <- CallMethod v71, 'slice', [v68, v70]
v73 <- CallMethod v33, 'exec', [v72]
BeginForLoopInitializer
    v74 <- LoadInteger '0'
BeginForLoopCondition -> v75
    v76 <- LoadInteger '100'
    v77 <- Compare v75, '<', v76
BeginForLoopAfterthought v77 -> v78
    v79 <- UnaryOperation v78, '++'
BeginForLoopBody -> v80
    v81 <- LoadInteger '24'
    v82 <- LoadInteger '1'
    v83 <- UnaryOperation '-', v82
    v84 <- LoadString 'aaaaaaaaaaaaaaaaaaaaaaaabbaacabbabaaaaabbaaaabbac'
    v85 <- CallMethod v84, 'slice', [v81, v83]
    v86 <- CreateNamedVariable 'a', 'var', v85
    v87 <- LoadString 'bbaacabbabaaaaabbaaaabba'
    v88 <- BinaryOperation v87, '+', v86
    v89 <- CreateNamedVariable 'b', 'var', v88
    v90 <- LoadString 'bbaa'
    v91 <- LoadString 'a'
    v92 <- LoadString ''
    v93 <- LoadString 'a'
    v94 <- CreateArray [v90, v91, v92, v93]
    v95 <- LoadRegExp '((\3|b)\2(a)){2,}' ''
    v96 <- CallMethod v95, 'exec', [v89]
    v97 <- LoadString 'bbaa'
    v98 <- LoadString 'a'
    v99 <- LoadString ''
    v100 <- LoadString 'a'
    v101 <- CreateArray [v97, v98, v99, v100]
    v102 <- LoadRegExp '((\3|b)\2(a)){2,}' ''
    v103 <- CallMethod v102, 'exec', [v89]
    v104 <- LoadString 'bbaa'
    v105 <- LoadString 'a'
    v106 <- LoadString ''
    v107 <- LoadString 'a'
    v108 <- CreateArray [v104, v105, v106, v107]
    v109 <- LoadRegExp '((\3|b)\2(a)){2,}' ''
    v110 <- CallMethod v109, 'exec', [v86]
    v111 <- LoadString 'bbaa'
    v112 <- LoadString 'a'
    v113 <- LoadString ''
    v114 <- LoadString 'a'
    v115 <- CreateArray [v111, v112, v113, v114]
    v116 <- LoadRegExp '((\3|b)\2(a)){2,}' ''
    v117 <- CallMethod v116, 'exec', [v86]
EndForLoop
v118 <- LoadInteger '2'
v119 <- LoadInteger '2'
v120 <- UnaryOperation '-', v119
v121 <- LoadString 'ABCDEFGHIJKLMN'
v122 <- CallMethod v121, 'slice', [v118, v120]
v123 <- CreateNamedVariable 'c', 'var', v122
v124 <- LoadInteger '2'
v125 <- LoadInteger '2'
v126 <- UnaryOperation '-', v125
v127 <- LoadString 'ABCDEFሴGHIJKLMN'
v128 <- CallMethod v127, 'slice', [v124, v126]
v129 <- CreateNamedVariable 'd', 'var', v128
v130 <- LoadInteger '0'
v131 <- LoadInteger '2'
v132 <- UnaryOperation '-', v131
v133 <- LoadString 'ABCDEFGHIJKLMN'
v134 <- CallMethod v133, 'slice', [v130, v132]
v135 <- CreateNamedVariable 'e', 'var', v134
v136 <- LoadRegExp '^C.*L$' ''
v137 <- CallMethod v136, 'test', [v123]
v138 <- LoadRegExp '^C.*L$' ''
v139 <- CallMethod v138, 'test', [v123]
v140 <- LoadRegExp '^C.*L$' ''
v141 <- CallMethod v140, 'test', [v129]
v142 <- LoadRegExp '^C.*L$' ''
v143 <- CallMethod v142, 'test', [v129]
v144 <- LoadRegExp '^A\w{10}L$' ''
v145 <- CallMethod v144, 'test', [v135]
v146 <- LoadRegExp '^A\w{10}L$' ''
v147 <- CallMethod v146, 'test', [v135]
v148 <- LoadInteger '6'
v149 <- LoadInteger '6'
v150 <- UnaryOperation '-', v149
v151 <- LoadString 'qui-opIasd-fghjklzx-cvbn-mqwer-tyuio-pasdf-ghIjkl-zx'
v152 <- CallMethod v151, 'slice', [v148, v150]
v153 <- CreateNamedVariable 'e', 'var', v152
v154 <- LoadString '-'
v155 <- CallMethod v153, 'split', [v154]
v156 <- CreateNamedVariable 'e_split', 'var', v155
v157 <- GetElement v156, '0'
v158 <- LoadString 'Iasd'
v159 <- GetElement v156, '1'
v160 <- LoadString 'fghjklzx'
v161 <- GetElement v156, '6'
v162 <- LoadString 'ghI'


var foo = "lsdfj sldkfj sdklfj læsdfjl sdkfjlsdk fjsdl fjsdljskdj flsj flsdkj flskd regexp: /foobar/\nldkfj sdlkfj sdkl";
for (let i3 = 0; i3 < 1000; i3++) {
    const v11 = foo.substring(foo.indexOf("regexp:"));
    /^([a-z]+): (.*)/.test(v11);
    RegExp.$1;
}
var re = /^(((N({)?)|(R)|(U)|(V)|(B)|(H)|(n((n)|(r)|(v)|(h))?)|(r(r)?)|(v)|(b((n)|(b))?)|(h))|((Y)|(A)|(E)|(o(u)?)|(p(u)?)|(q(u)?)|(s)|(t)|(u)|(w)|(x(u)?)|(y)|(z)|(a((T)|(A)|(L))?)|(c)|(e)|(f(u)?)|(g(u)?)|(i)|(j)|(l)|(m(u)?)))+/;
const v21 = new RegExp(re);
var r = v21;
var str = ("_Avtnennan gunzvmu pubExnY nEvln vaTxh rmuhguhaTxnY_").slice(1, -1);
r.test(str = str + str);
r.test(str);
var re = /x/;
("_axyb_").slice(1, -1).replace(re, ".");
re.compile("y");
("_axyb_").slice(1, -1).replace(re, ".");
re.compile("(x)");
["x","x"];
re.exec(("_axyb_").slice(1, -1));
re.compile("(y)");
["y","y"];
re.exec(("_axyb_").slice(1, -1));
for (let i75 = 0; i75 < 100; i75++) {
    var a = ("aaaaaaaaaaaaaaaaaaaaaaaabbaacabbabaaaaabbaaaabbac").slice(24, -1);
    var b = "bbaacabbabaaaaabbaaaabba" + a;
    ["bbaa","a","","a"];
    /((\3|b)\2(a)){2,}/.exec(b);
    ["bbaa","a","","a"];
    /((\3|b)\2(a)){2,}/.exec(b);
    ["bbaa","a","","a"];
    /((\3|b)\2(a)){2,}/.exec(a);
    ["bbaa","a","","a"];
    /((\3|b)\2(a)){2,}/.exec(a);
}
var c = ("ABCDEFGHIJKLMN").slice(2, -2);
var d = ("ABCDEFሴGHIJKLMN").slice(2, -2);
var e = ("ABCDEFGHIJKLMN").slice(0, -2);
/^C.*L$/.test(c);
/^C.*L$/.test(c);
/^C.*L$/.test(d);
/^C.*L$/.test(d);
/^A\w{10}L$/.test(e);
/^A\w{10}L$/.test(e);
var e = ("qui-opIasd-fghjklzx-cvbn-mqwer-tyuio-pasdf-ghIjkl-zx").slice(6, -6);
var e_split = e.split("-");
e_split[0];
e_split[1];
e_split[6];

FuzzIL program written to corpus/string-slices-regexp.fzil
