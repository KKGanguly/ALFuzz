BeginObjectLiteral
v0 <- EndObjectLiteral
v1 <- CreateNamedVariable 'Math', 'none'
v2 <- CallMethod v1, 'hypot', [v0]
v3 <- CreateNamedVariable 'isNaN', 'none'
v4 <- CallFunction v3, [v2]
v5 <- LoadUndefined
v6 <- LoadInteger '1'
v7 <- CallMethod v1, 'hypot', [v5, v6]
v8 <- CallFunction v3, [v7]
v9 <- LoadInteger '1'
v10 <- LoadUndefined
v11 <- CallMethod v1, 'hypot', [v9, v10]
v12 <- CallFunction v3, [v11]
v13 <- GetProperty v1, 'hypot'
v14 <- LoadInteger '1'
v15 <- CallMethod v1, 'hypot', [v13, v14]
v16 <- CallFunction v3, [v15]
v17 <- LoadInteger '1'
v18 <- LoadInteger '1'
v19 <- CallMethod v1, 'hypot', [v18]
v20 <- GetProperty v1, 'PI'
v21 <- GetProperty v1, 'PI'
v22 <- CallMethod v1, 'hypot', [v21]
v23 <- LoadInteger '5'
v24 <- LoadInteger '3'
v25 <- LoadInteger '4'
v26 <- CallMethod v1, 'hypot', [v24, v25]
v27 <- LoadInteger '13'
v28 <- LoadInteger '3'
v29 <- LoadInteger '4'
v30 <- LoadInteger '12'
v31 <- CallMethod v1, 'hypot', [v28, v29, v30]
v32 <- LoadInteger '15'
v33 <- LoadString ' 2 '
v34 <- LoadString '0x5'
v35 <- BeginPlainFunction -> 
    v36 <- LoadString '0xe'
    Return v36
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v35
v37 <- EndObjectLiteral
v38 <- CallMethod v1, 'hypot', [v33, v34, v37]
v39 <- LoadInteger '17'
v40 <- BeginPlainFunction -> 
    v41 <- LoadInteger '1'
    Return v41
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v40
v42 <- EndObjectLiteral
v43 <- BeginPlainFunction -> 
    v44 <- LoadInteger '12'
    Return v44
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toString`, v43
v45 <- EndObjectLiteral
v46 <- BeginPlainFunction -> 
    v47 <- LoadString '12'
    Return v47
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toString`, v46
v48 <- EndObjectLiteral
v49 <- CallMethod v1, 'hypot', [v42, v45, v48]
v50 <- LoadInteger '2'
v51 <- GetProperty v1, 'hypot'
v52 <- GetProperty v51, 'length'
v53 <- LoadInteger '0'
v54 <- CallMethod v1, 'hypot', []
v55 <- LoadString 'Infinity'
v56 <- CreateNamedVariable 'NaN', 'none'
v57 <- CreateNamedVariable 'Infinity', 'none'
v58 <- CallMethod v1, 'hypot', [v56, v57]
v59 <- CreateNamedVariable 'String', 'none'
v60 <- CallFunction v59, [v58]
v61 <- LoadString 'Infinity'
v62 <- LoadInteger '1'
v63 <- UnaryOperation '-', v57
v64 <- LoadInteger '2'
v65 <- CallMethod v1, 'hypot', [v62, v63, v64]
v66 <- CallFunction v59, [v65]
v67 <- LoadInteger '1'
v68 <- LoadInteger '2'
v69 <- CallMethod v1, 'hypot', [v67, v68, v56]
v70 <- CallFunction v3, [v69]
v71 <- LoadInteger '4'
v72 <- CallMethod v1, 'hypot', [v56, v56, v71]
v73 <- CallFunction v3, [v72]
v74 <- LoadString 'Infinity'
v75 <- LoadInteger '1'
v76 <- LoadInteger '0'
v77 <- UnaryOperation '-', v76
v78 <- CallMethod v1, 'hypot', [v77]
v79 <- BinaryOperation v75, '/', v78
v80 <- CallFunction v59, [v79]
v81 <- LoadString 'Infinity'
v82 <- LoadInteger '1'
v83 <- LoadInteger '0'
v84 <- CallMethod v1, 'hypot', [v83]
v85 <- BinaryOperation v82, '/', v84
v86 <- CallFunction v59, [v85]
v87 <- LoadString 'Infinity'
v88 <- LoadInteger '1'
v89 <- LoadInteger '0'
v90 <- UnaryOperation '-', v89
v91 <- LoadInteger '0'
v92 <- UnaryOperation '-', v91
v93 <- CallMethod v1, 'hypot', [v90, v92]
v94 <- BinaryOperation v88, '/', v93
v95 <- CallFunction v59, [v94]
v96 <- LoadString 'Infinity'
v97 <- LoadInteger '1'
v98 <- LoadInteger '0'
v99 <- UnaryOperation '-', v98
v100 <- LoadInteger '0'
v101 <- CallMethod v1, 'hypot', [v99, v100]
v102 <- BinaryOperation v97, '/', v101
v103 <- CallFunction v59, [v102]
v104 <- LoadFloat '5e+300'
v105 <- LoadFloat '3e+300'
v106 <- LoadFloat '4e+300'
v107 <- CallMethod v1, 'hypot', [v105, v106]
v108 <- LoadFloat '1e+285'
v109 <- LoadFloat '1.7e-299'
v110 <- LoadFloat '8e-300'
v111 <- LoadFloat '1.5e-299'
v112 <- CallMethod v1, 'hypot', [v110, v111]
v113 <- LoadFloat '1e-315'
v114 <- LoadFloat '1.9e+301'
v115 <- LoadFloat '6e+300'
v116 <- LoadFloat '6e+300'
v117 <- LoadFloat '1.7e+301'
v118 <- CallMethod v1, 'hypot', [v115, v116, v117]
v119 <- LoadFloat '1e+285'
v120 <- CreateArray []
v121 <- CreateNamedVariable 'fractals', 'var', v120
v122 <- GetProperty v1, 'E'
v123 <- LoadFloat '1e+20'
v124 <- BinaryOperation v122, '*', v123
v125 <- CreateNamedVariable 'edge_length', 'var', v124
v126 <- CreateNamedVariable 'fractal_length', 'var', v125
BeginWhileLoopHeader
    v127 <- LoadInteger '1'
    v128 <- Compare v126, '>=', v127
BeginWhileLoopBody v128
    v129 <- LoadFloat '0.5'
    Update v126, '*', v129
    v130 <- CallMethod v121, 'push', [v126]
    v131 <- CallMethod v121, 'push', [v126]
    v132 <- CallMethod v121, 'push', [v126]
EndWhileLoop
v133 <- CallMethod v121, 'push', [v126]
v134 <- GetProperty v1, 'hypot'
v135 <- CallMethod v134, 'apply', [v1, v121]
v136 <- LoadFloat '1e-15'
v137 <- CallMethod v121, 'reverse', []
v138 <- GetProperty v1, 'hypot'
v139 <- CallMethod v138, 'apply', [v1, v121]
v140 <- LoadFloat '1e-15'
v141 <- LoadInteger '0'
v142 <- CreateNamedVariable 'c', 'var', v141
v143 <- BeginPlainFunction -> v144, v145
    v146 <- UnaryOperation v142, '++'
    v147 <- LoadInteger '3'
    v148 <- BinaryOperation v142, '&', v147
    v149 <- LoadFloat '1.5'
    v150 <- BinaryOperation v148, '-', v149
    Return v150
EndPlainFunction
v151 <- CallMethod v121, 'sort', [v143]
v152 <- GetProperty v1, 'hypot'
v153 <- CallMethod v152, 'apply', [v1, v121]
v154 <- LoadFloat '1e-15'
v155 <- CallMethod v121, 'sort', [v143]
v156 <- GetProperty v1, 'hypot'
v157 <- CallMethod v156, 'apply', [v1, v121]
v158 <- LoadFloat '1e-15'


isNaN(Math.hypot({}));
isNaN(Math.hypot(undefined, 1));
isNaN(Math.hypot(1, undefined));
isNaN(Math.hypot(Math.hypot, 1));
Math.hypot(1);
Math.PI;
Math.hypot(Math.PI);
Math.hypot(3, 4);
Math.hypot(3, 4, 12);
function f35() {
    return "0xe";
}
Math.hypot(" 2 ", "0x5", { valueOf: f35 });
function f40() {
    return 1;
}
const v42 = { valueOf: f40 };
function f43() {
    return 12;
}
const v45 = { toString: f43 };
function f46() {
    return "12";
}
Math.hypot(v42, v45, { toString: f46 });
Math.hypot.length;
Math.hypot();
String(Math.hypot(NaN, Infinity));
String(Math.hypot(1, -Infinity, 2));
isNaN(Math.hypot(1, 2, NaN));
isNaN(Math.hypot(NaN, NaN, 4));
String(1 / Math.hypot(-0));
String(1 / Math.hypot(0));
String(1 / Math.hypot(-0, -0));
String(1 / Math.hypot(-0, 0));
Math.hypot(3e+300, 4e+300);
Math.hypot(8e-300, 1.5e-299);
Math.hypot(6e+300, 6e+300, 1.7e+301);
var fractals = [];
var edge_length = Math.E * 1e+20;
var fractal_length = edge_length;
while (fractal_length >= 1) {
    fractals.push(fractal_length *= 0.5);
    fractals.push(fractal_length);
    fractals.push(fractal_length);
}
fractals.push(fractal_length);
Math.hypot.apply(Math, fractals);
fractals.reverse();
Math.hypot.apply(Math, fractals);
var c = 0;
function random_sort(a144, a145) {
    c++;
    return (c & 3) - 1.5;
}
fractals.sort(random_sort);
Math.hypot.apply(Math, fractals);
fractals.sort(random_sort);
Math.hypot.apply(Math, fractals);

FuzzIL program written to corpus/math-hypot.fzil
