v0 <- BeginPlainFunction -> 
    v1 <- CreateNamedVariable 'Array', 'none'
    v2 <- Construct v1, []
    v3 <- CreateNamedVariable 'result', 'var', v2
    v4 <- LoadUndefined
    v5 <- CreateNamedVariable 'out', 'var', v4
    BeginBlockStatement
        v6 <- LoadInteger '0'
        v7 <- CreateNamedVariable 'sum', 'let', v6
        BeginForLoopInitializer
            v8 <- LoadInteger '0'
        BeginForLoopCondition -> v9
            v10 <- LoadInteger '10'
            v11 <- Compare v9, '<', v10
        BeginForLoopAfterthought v11 -> v12
            v13 <- UnaryOperation v12, '++'
        BeginForLoopBody -> v14
            BeginBlockStatement
                v15 <- CreateNamedVariable 'x', 'let', v14
                Update v7, '+', v14
                v16 <- BeginPlainFunction -> 
                    Return v15
                EndPlainFunction
                v17 <- CallMethod v3, 'push', [v16]
            EndBlockStatement
        EndForLoop
        Reassign v5, v7
    EndBlockStatement
    v18 <- CallMethod v3, 'push', [v5]
    Return v3
EndPlainFunction
v19 <- BeginPlainFunction -> 
    v20 <- CallFunction v0, []
    v21 <- CreateNamedVariable 'r', 'var', v20
    v22 <- LoadInteger '45'
    v23 <- CallMethod v21, 'pop', []
    BeginForLoopInitializer
        v24 <- LoadInteger '9'
    BeginForLoopCondition -> v25
        v26 <- LoadInteger '0'
        v27 <- Compare v25, '>=', v26
    BeginForLoopAfterthought v27 -> v28
        v29 <- UnaryOperation v28, '--'
    BeginForLoopBody -> v30
        v31 <- CallMethod v21, 'pop', []
        v32 <- CallFunction v31, []
    EndForLoop
    v33 <- LoadInteger '0'
    v34 <- GetProperty v21, 'length'
EndPlainFunction
v35 <- CallFunction v19, []
v36 <- CallFunction v19, []
v37 <- CallFunction v19, []


function foo() {
    const v2 = new Array();
    var result = v2;
    var out;
    {
        let sum = 0;
        for (let i9 = 0; i9 < 10; i9++) {
            {
                let x = i9;
                sum += i9;
                function f16() {
                    return x;
                }
                result.push(f16);
            }
        }
        out = sum;
    }
    result.push(out);
    return result;
}
function check() {
    var r = foo();
    r.pop();
    for (let i25 = 9; i25 >= 0; i25--) {
        const t25 = r.pop();
        t25();
    }
    r.length;
}
check();
check();
check();

FuzzIL program written to corpus/osr-block-scope-id.fzil
