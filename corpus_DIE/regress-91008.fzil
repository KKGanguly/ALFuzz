v0 <- BeginPlainFunction -> v1
    v2 <- CreateNamedVariable 'Array', 'none'
    v3 <- Construct v2, [v1]
    v4 <- CreateNamedVariable 'numbers', 'var', v3
    BeginForLoopInitializer
        v5 <- LoadInteger '0'
    BeginForLoopCondition -> v6
        v7 <- Compare v6, '<', v1
    BeginForLoopAfterthought v7 -> v8
        v9 <- UnaryOperation v8, '++'
    BeginForLoopBody -> v10
        SetComputedProperty v4, v10, v10
    EndForLoop
    v11 <- LoadInteger '50'
    v12 <- DeleteElement v4, '50'
    v13 <- LoadInteger '150'
    v14 <- DeleteElement v4, '150'
    v15 <- LoadInteger '25000'
    v16 <- DeleteElement v4, '25000'
    v17 <- LoadInteger '1'
    v18 <- BinaryOperation v1, '-', v17
    v19 <- DeleteComputedProperty v4, v18
    v20 <- LoadInteger '2'
    v21 <- BinaryOperation v1, '-', v20
    v22 <- DeleteComputedProperty v4, v21
    v23 <- LoadInteger '30'
    v24 <- DeleteElement v4, '30'
    v25 <- LoadInteger '2'
    v26 <- DeleteElement v4, '2'
    v27 <- LoadInteger '1'
    v28 <- DeleteElement v4, '1'
    v29 <- LoadInteger '0'
    v30 <- DeleteElement v4, '0'
    v31 <- CallMethod v4, 'sort', []
EndPlainFunction
v32 <- LoadInteger '100000'
v33 <- CallFunction v0, [v32]


function testsort(a1) {
    const v3 = new Array(a1);
    var numbers = v3;
    for (let i6 = 0; i6 < a1; i6++) {
        numbers[i6] = i6;
    }
    delete numbers[50];
    delete numbers[150];
    delete numbers[25000];
    delete numbers[a1 - 1];
    delete numbers[a1 - 2];
    delete numbers[30];
    delete numbers[2];
    delete numbers[1];
    delete numbers[0];
    numbers.sort();
}
testsort(100000);

FuzzIL program written to corpus/regress-91008.fzil
