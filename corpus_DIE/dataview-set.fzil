v0 <- CreateNamedVariable 'ArrayBuffer', 'none'
v1 <- LoadInteger '64'
v2 <- Construct v0, [v1]
v3 <- CreateNamedVariable 'buffer', 'var', v2
v4 <- CreateNamedVariable 'DataView', 'none'
v5 <- LoadInteger '8'
v6 <- LoadInteger '24'
v7 <- Construct v4, [v3, v5, v6]
v8 <- CreateNamedVariable 'dataview', 'var', v7
v9 <- BeginPlainFunction -> v10, v11
    v12 <- CallMethod v8, 'setUint8', [v10, v11]
EndPlainFunction
v13 <- BeginPlainFunction -> v14, v15
    BeginTry
        v16 <- CallMethod v8, 'setInt8', [v14, v15]
    BeginCatch -> v17
        Return v17
    EndTryCatch
EndPlainFunction
v18 <- BeginPlainFunction -> v19, v20, v21
    v22 <- CallMethod v8, 'setUint16', [v19, v20, v21]
EndPlainFunction
v23 <- BeginPlainFunction -> v24, v25, v26
    v27 <- CallMethod v8, 'setInt16', [v24, v25, v26]
EndPlainFunction
v28 <- BeginPlainFunction -> v29, v30, v31
    v32 <- CallMethod v8, 'setUint32', [v29, v30, v31]
EndPlainFunction
v33 <- BeginPlainFunction -> v34, v35, v36
    v37 <- CallMethod v8, 'setInt32', [v34, v35, v36]
EndPlainFunction
v38 <- BeginPlainFunction -> v39, v40, v41
    v42 <- CallMethod v8, 'setFloat32', [v39, v40, v41]
EndPlainFunction
v43 <- BeginPlainFunction -> v44, v45, v46
    v47 <- CallMethod v8, 'setFloat64', [v44, v45, v46]
EndPlainFunction
v48 <- BeginPlainFunction -> v49
    v50 <- LoadInteger '0'
    v51 <- LoadInteger '0'
    v52 <- CallFunction v49, [v50, v51]
    v53 <- LoadInteger '0'
    v54 <- LoadInteger '1'
    v55 <- CallFunction v49, [v53, v54]
    v56 <- LoadInteger '0'
    v57 <- LoadInteger '2'
    v58 <- CallFunction v49, [v56, v57]
    v59 <- LoadInteger '0'
    v60 <- LoadInteger '3'
    v61 <- CallFunction v49, [v59, v60]
EndPlainFunction
v62 <- CallFunction v48, [v9]
v63 <- CallFunction v9, []
v64 <- LoadInteger '0'
v65 <- LoadInteger '222'
v66 <- CallFunction v9, [v64, v65]
v67 <- LoadInteger '1'
v68 <- LoadInteger '173'
v69 <- CallFunction v9, [v67, v68]
v70 <- LoadInteger '2'
v71 <- LoadInteger '190'
v72 <- CallFunction v9, [v70, v71]
v73 <- LoadInteger '3'
v74 <- LoadInteger '239'
v75 <- CallFunction v9, [v73, v74]
v76 <- LoadInteger '3735928559'
v77 <- LoadInteger '0'
v78 <- CallMethod v8, 'getUint32', [v77]
v79 <- CallFunction v48, [v13]
v80 <- CallFunction v13, []
v81 <- LoadInteger '0'
v82 <- LoadInteger '34'
v83 <- UnaryOperation '-', v82
v84 <- CallFunction v13, [v81, v83]
v85 <- LoadInteger '1'
v86 <- LoadInteger '83'
v87 <- UnaryOperation '-', v86
v88 <- CallFunction v13, [v85, v87]
v89 <- LoadInteger '2'
v90 <- LoadInteger '66'
v91 <- UnaryOperation '-', v90
v92 <- CallFunction v13, [v89, v91]
v93 <- LoadInteger '3'
v94 <- LoadInteger '17'
v95 <- UnaryOperation '-', v94
v96 <- CallFunction v13, [v93, v95]
v97 <- LoadInteger '3735928559'
v98 <- LoadInteger '0'
v99 <- CallMethod v8, 'getUint32', [v98]
v100 <- CallFunction v48, [v18]
v101 <- CallFunction v18, []
v102 <- LoadInteger '0'
v103 <- LoadInteger '57005'
v104 <- CallFunction v18, [v102, v103]
v105 <- LoadInteger '2'
v106 <- LoadInteger '61374'
v107 <- LoadBoolean 'true'
v108 <- CallFunction v18, [v105, v106, v107]
v109 <- LoadInteger '3735928559'
v110 <- LoadInteger '0'
v111 <- CallMethod v8, 'getUint32', [v110]
v112 <- CallFunction v48, [v23]
v113 <- CallFunction v23, []
v114 <- LoadInteger '0'
v115 <- LoadInteger '8531'
v116 <- UnaryOperation '-', v115
v117 <- CallFunction v23, [v114, v116]
v118 <- LoadInteger '2'
v119 <- LoadInteger '4162'
v120 <- UnaryOperation '-', v119
v121 <- LoadBoolean 'true'
v122 <- CallFunction v23, [v118, v120, v121]
v123 <- LoadInteger '3735928559'
v124 <- LoadInteger '0'
v125 <- CallMethod v8, 'getUint32', [v124]
v126 <- CallFunction v48, [v28]
v127 <- CallFunction v28, []
v128 <- LoadInteger '0'
v129 <- LoadInteger '3735928559'
v130 <- CallFunction v28, [v128, v129]
v131 <- LoadInteger '3735928559'
v132 <- LoadInteger '0'
v133 <- CallMethod v8, 'getUint32', [v132]
v134 <- LoadInteger '0'
v135 <- LoadInteger '4022250974'
v136 <- LoadBoolean 'true'
v137 <- CallFunction v28, [v134, v135, v136]
v138 <- LoadInteger '3735928559'
v139 <- LoadInteger '0'
v140 <- CallMethod v8, 'getUint32', [v139]
v141 <- CallFunction v48, [v33]
v142 <- CallFunction v33, []
v143 <- LoadInteger '0'
v144 <- LoadInteger '559038737'
v145 <- UnaryOperation '-', v144
v146 <- CallFunction v33, [v143, v145]
v147 <- LoadInteger '3735928559'
v148 <- LoadInteger '0'
v149 <- CallMethod v8, 'getUint32', [v148]
v150 <- LoadInteger '0'
v151 <- LoadInteger '272716322'
v152 <- UnaryOperation '-', v151
v153 <- LoadBoolean 'true'
v154 <- CallFunction v33, [v150, v152, v153]
v155 <- LoadInteger '3735928559'
v156 <- LoadInteger '0'
v157 <- CallMethod v8, 'getUint32', [v156]
v158 <- CreateNamedVariable 'Math', 'none'
v159 <- GetProperty v158, 'E'
v160 <- CallMethod v158, 'fround', [v159]
v161 <- CreateNamedVariable 'b3', 'let', v160
v162 <- CallFunction v48, [v38]
v163 <- CallFunction v38, []
v164 <- LoadInteger '4'
v165 <- CallFunction v38, [v164, v161]
v166 <- LoadInteger '4'
v167 <- CallMethod v8, 'getFloat32', [v166]
v168 <- LoadInteger '4'
v169 <- LoadBoolean 'true'
v170 <- CallFunction v38, [v168, v161, v169]
v171 <- LoadInteger '4'
v172 <- LoadBoolean 'true'
v173 <- CallMethod v8, 'getFloat32', [v171, v172]
v174 <- GetProperty v158, 'PI'
v175 <- CreateNamedVariable 'b4', 'let', v174
v176 <- CallFunction v48, [v43]
v177 <- CallFunction v43, []
v178 <- LoadInteger '8'
v179 <- CallFunction v43, [v178, v175]
v180 <- LoadInteger '8'
v181 <- CallMethod v8, 'getFloat64', [v180]
v182 <- LoadInteger '8'
v183 <- LoadBoolean 'true'
v184 <- CallFunction v43, [v182, v175, v183]
v185 <- LoadInteger '8'
v186 <- LoadBoolean 'true'
v187 <- CallMethod v8, 'getFloat64', [v185, v186]
v188 <- CallFunction v13, []
v189 <- LoadInteger '24'
v190 <- LoadInteger '0'
v191 <- CallFunction v13, [v189, v190]
v192 <- CreateNamedVariable 'RangeError', 'none'
v193 <- CallFunction v13, []
v194 <- CallFunction v9, []
v195 <- BeginArrowFunction -> 
    v196 <- LoadInteger '24'
    v197 <- LoadInteger '0'
    v198 <- CallFunction v9, [v196, v197]
    Return v198
EndArrowFunction
v199 <- CallFunction v195, []
v200 <- CallFunction v9, []
v201 <- CreateNamedVariable 'Uint8Array', 'none'
v202 <- Construct v201, [v3]
v203 <- CreateNamedVariable 'bytes', 'var', v202
BeginForLoopInitializer
    v204 <- LoadInteger '0'
BeginForLoopCondition -> v205
    v206 <- LoadInteger '8'
    v207 <- Compare v205, '<', v206
BeginForLoopAfterthought v207 -> v208
    v209 <- UnaryOperation v208, '++'
BeginForLoopBody -> v210
    v211 <- LoadInteger '0'
    v212 <- GetComputedProperty v203, v210
EndForLoop
BeginForLoopInitializer
    v213 <- LoadInteger '32'
BeginForLoopCondition -> v214
    v215 <- LoadInteger '64'
    v216 <- Compare v214, '<', v215
BeginForLoopAfterthought v216 -> v217
    v218 <- UnaryOperation v217, '++'
BeginForLoopBody -> v219
    v220 <- LoadInteger '0'
    v221 <- GetComputedProperty v203, v219
EndForLoop


const v2 = new ArrayBuffer(64);
var buffer = v2;
const v7 = new DataView(buffer, 8, 24);
var dataview = v7;
function writeUint8(a10, a11) {
    dataview.setUint8(a10, a11);
}
function writeInt8Handled(a14, a15) {
    try {
        dataview.setInt8(a14, a15);
    } catch(e17) {
        return e17;
    }
}
function writeUint16(a19, a20, a21) {
    dataview.setUint16(a19, a20, a21);
}
function writeInt16(a24, a25, a26) {
    dataview.setInt16(a24, a25, a26);
}
function writeUint32(a29, a30, a31) {
    dataview.setUint32(a29, a30, a31);
}
function writeInt32(a34, a35, a36) {
    dataview.setInt32(a34, a35, a36);
}
function writeFloat32(a39, a40, a41) {
    dataview.setFloat32(a39, a40, a41);
}
function writeFloat64(a44, a45, a46) {
    dataview.setFloat64(a44, a45, a46);
}
function warmup(a49) {
    a49(0, 0);
    a49(0, 1);
    a49(0, 2);
    a49(0, 3);
}
warmup(writeUint8);
writeUint8();
writeUint8(0, 222);
writeUint8(1, 173);
writeUint8(2, 190);
writeUint8(3, 239);
dataview.getUint32(0);
warmup(writeInt8Handled);
writeInt8Handled();
writeInt8Handled(0, -34);
writeInt8Handled(1, -83);
writeInt8Handled(2, -66);
writeInt8Handled(3, -17);
dataview.getUint32(0);
warmup(writeUint16);
writeUint16();
writeUint16(0, 57005);
writeUint16(2, 61374, true);
dataview.getUint32(0);
warmup(writeInt16);
writeInt16();
writeInt16(0, -8531);
writeInt16(2, -4162, true);
dataview.getUint32(0);
warmup(writeUint32);
writeUint32();
writeUint32(0, 3735928559);
dataview.getUint32(0);
writeUint32(0, 4022250974, true);
dataview.getUint32(0);
warmup(writeInt32);
writeInt32();
writeInt32(0, -559038737);
dataview.getUint32(0);
writeInt32(0, -272716322, true);
dataview.getUint32(0);
let b3 = Math.fround(Math.E);
warmup(writeFloat32);
writeFloat32();
writeFloat32(4, b3);
dataview.getFloat32(4);
writeFloat32(4, b3, true);
dataview.getFloat32(4, true);
let b4 = Math.PI;
warmup(writeFloat64);
writeFloat64();
writeFloat64(8, b4);
dataview.getFloat64(8);
writeFloat64(8, b4, true);
dataview.getFloat64(8, true);
writeInt8Handled();
writeInt8Handled(24, 0);
writeInt8Handled();
writeUint8();
const v195 = () => {
    return writeUint8(24, 0);
};
v195();
writeUint8();
const v202 = new Uint8Array(buffer);
var bytes = v202;
for (let i205 = 0; i205 < 8; i205++) {
    bytes[i205];
}
for (let i214 = 32; i214 < 64; i214++) {
    bytes[i214];
}

FuzzIL program written to corpus/dataview-set.fzil
