v0 <- BeginPlainFunction -> 
    v1 <- LoadUndefined
    v2 <- CreateNamedVariable 'resolve', 'let', v1
    v3 <- LoadUndefined
    v4 <- CreateNamedVariable 'onFulfilledValue', 'let', v3
    v5 <- CreateNamedVariable 'Promise', 'none'
    v6 <- BeginArrowFunction -> v7
        Reassign v2, v7
        Return v7
    EndArrowFunction
    v8 <- Construct v5, [v6]
    v9 <- CreateNamedVariable 'p', 'const', v8
    v10 <- LoadInteger '1'
    v11 <- CallMethod v5, 'resolve', [v10]
    v12 <- CallFunction v2, [v11]
    v13 <- BeginArrowFunction -> v14
        Reassign v4, v14
    EndArrowFunction
    v15 <- BeginArrowFunction -> v16
    EndArrowFunction
    v17 <- CallMethod v9, 'then', [v13, v15]
EndPlainFunction
v18 <- CallFunction v0, []
v19 <- BeginPlainFunction -> 
    v20 <- LoadUndefined
    v21 <- CreateNamedVariable 'resolve', 'let', v20
    v22 <- LoadUndefined
    v23 <- CreateNamedVariable 'onRejectedReason', 'let', v22
    v24 <- CreateNamedVariable 'Promise', 'none'
    v25 <- BeginArrowFunction -> v26
        Reassign v21, v26
        Return v26
    EndArrowFunction
    v27 <- Construct v24, [v25]
    v28 <- CreateNamedVariable 'p', 'const', v27
    v29 <- LoadInteger '1'
    v30 <- CallMethod v24, 'reject', [v29]
    v31 <- CallFunction v21, [v30]
    v32 <- BeginArrowFunction -> v33
    EndArrowFunction
    v34 <- BeginArrowFunction -> v35
        Reassign v23, v35
    EndArrowFunction
    v36 <- CallMethod v28, 'then', [v32, v34]
EndPlainFunction
v37 <- CallFunction v19, []
v38 <- BeginPlainFunction -> 
    v39 <- LoadUndefined
    v40 <- CreateNamedVariable 'onFulfilledValue', 'let', v39
    v41 <- BeginArrowFunction -> v42
        Reassign v40, v42
    EndArrowFunction
    v43 <- BeginArrowFunction -> v44
    EndArrowFunction
    v45 <- BeginAsyncArrowFunction -> 
        v46 <- LoadInteger '1'
        v47 <- CreateNamedVariable 'Promise', 'none'
        v48 <- CallMethod v47, 'resolve', [v46]
        Return v48
    EndAsyncArrowFunction
    v49 <- CallFunction v45, []
    v50 <- CallMethod v49, 'then', [v41, v43]
EndPlainFunction
v51 <- CallFunction v38, []
v52 <- BeginPlainFunction -> 
    v53 <- LoadUndefined
    v54 <- CreateNamedVariable 'onRejectedReason', 'let', v53
    v55 <- BeginArrowFunction -> v56
    EndArrowFunction
    v57 <- BeginArrowFunction -> v58
        Reassign v54, v58
    EndArrowFunction
    v59 <- BeginAsyncArrowFunction -> 
        v60 <- LoadInteger '1'
        v61 <- CreateNamedVariable 'Promise', 'none'
        v62 <- CallMethod v61, 'reject', [v60]
        Return v62
    EndAsyncArrowFunction
    v63 <- CallFunction v59, []
    v64 <- CallMethod v63, 'then', [v55, v57]
EndPlainFunction
v65 <- CallFunction v52, []
v66 <- BeginPlainFunction -> 
    v67 <- LoadUndefined
    v68 <- CreateNamedVariable 'resolve', 'let', v67
    v69 <- LoadUndefined
    v70 <- CreateNamedVariable 'onFulfilledValue', 'let', v69
    v71 <- CreateNamedVariable 'Promise', 'none'
    v72 <- BeginArrowFunction -> v73
        Reassign v68, v73
        Return v73
    EndArrowFunction
    v74 <- Construct v71, [v72]
    v75 <- CreateNamedVariable 'p', 'const', v74
    BeginObjectLiteral
        BeginObjectLiteralMethod `then` -> v76, v77, v78
            v79 <- LoadInteger '1'
            v80 <- CallFunction v77, [v79]
        EndObjectLiteralMethod
    v81 <- EndObjectLiteral
    v82 <- CallFunction v68, [v81]
    v83 <- BeginArrowFunction -> v84
        Reassign v70, v84
    EndArrowFunction
    v85 <- BeginArrowFunction -> v86
    EndArrowFunction
    v87 <- CallMethod v75, 'then', [v83, v85]
EndPlainFunction
v88 <- CallFunction v66, []
v89 <- BeginPlainFunction -> 
    v90 <- LoadUndefined
    v91 <- CreateNamedVariable 'resolve', 'let', v90
    v92 <- LoadUndefined
    v93 <- CreateNamedVariable 'onRejectedReason', 'let', v92
    v94 <- CreateNamedVariable 'Promise', 'none'
    v95 <- BeginArrowFunction -> v96
        Reassign v91, v96
        Return v96
    EndArrowFunction
    v97 <- Construct v94, [v95]
    v98 <- CreateNamedVariable 'p', 'const', v97
    BeginObjectLiteral
        BeginObjectLiteralMethod `then` -> v99, v100, v101
            v102 <- LoadInteger '1'
            v103 <- CallFunction v101, [v102]
        EndObjectLiteralMethod
    v104 <- EndObjectLiteral
    v105 <- CallFunction v91, [v104]
    v106 <- BeginArrowFunction -> v107
    EndArrowFunction
    v108 <- BeginArrowFunction -> v109
        Reassign v93, v109
    EndArrowFunction
    v110 <- CallMethod v98, 'then', [v106, v108]
EndPlainFunction
v111 <- CallFunction v89, []
v112 <- BeginPlainFunction -> 
    v113 <- LoadUndefined
    v114 <- CreateNamedVariable 'onFulfilledValue', 'let', v113
    v115 <- BeginArrowFunction -> v116
        Reassign v114, v116
    EndArrowFunction
    v117 <- BeginArrowFunction -> v118
    EndArrowFunction
    v119 <- BeginAsyncArrowFunction -> 
        BeginObjectLiteral
            BeginObjectLiteralMethod `then` -> v120, v121, v122
                v123 <- LoadInteger '1'
                v124 <- CallFunction v121, [v123]
            EndObjectLiteralMethod
        v125 <- EndObjectLiteral
        Return v125
    EndAsyncArrowFunction
    v126 <- CallFunction v119, []
    v127 <- CallMethod v126, 'then', [v115, v117]
EndPlainFunction
v128 <- CallFunction v112, []
v129 <- BeginPlainFunction -> 
    v130 <- LoadUndefined
    v131 <- CreateNamedVariable 'onRejectedReason', 'let', v130
    v132 <- BeginArrowFunction -> v133
    EndArrowFunction
    v134 <- BeginArrowFunction -> v135
        Reassign v131, v135
    EndArrowFunction
    v136 <- BeginAsyncArrowFunction -> 
        BeginObjectLiteral
            BeginObjectLiteralMethod `then` -> v137, v138, v139
                v140 <- LoadInteger '1'
                v141 <- CallFunction v139, [v140]
            EndObjectLiteralMethod
        v142 <- EndObjectLiteral
        Return v142
    EndAsyncArrowFunction
    v143 <- CallFunction v136, []
    v144 <- CallMethod v143, 'then', [v132, v134]
EndPlainFunction
v145 <- CallFunction v129, []


function f0() {
    let resolve;
    let onFulfilledValue;
    const v6 = (a7) => {
        resolve = a7;
        return a7;
    };
    const v8 = new Promise(v6);
    const p = v8;
    resolve(Promise.resolve(1));
    const v13 = (a14) => {
        onFulfilledValue = a14;
    };
    const v15 = (a16) => {
    };
    p.then(v13, v15);
}
f0();
function f19() {
    let resolve;
    let onRejectedReason;
    const v25 = (a26) => {
        resolve = a26;
        return a26;
    };
    const v27 = new Promise(v25);
    const p = v27;
    resolve(Promise.reject(1));
    const v32 = (a33) => {
    };
    const v34 = (a35) => {
        onRejectedReason = a35;
    };
    p.then(v32, v34);
}
f19();
function f38() {
    let onFulfilledValue;
    const v41 = (a42) => {
        onFulfilledValue = a42;
    };
    const v43 = (a44) => {
    };
    const v45 = async () => {
        return Promise.resolve(1);
    };
    v45().then(v41, v43);
}
f38();
function f52() {
    let onRejectedReason;
    const v55 = (a56) => {
    };
    const v57 = (a58) => {
        onRejectedReason = a58;
    };
    const v59 = async () => {
        return Promise.reject(1);
    };
    v59().then(v55, v57);
}
f52();
function f66() {
    let resolve;
    let onFulfilledValue;
    const v72 = (a73) => {
        resolve = a73;
        return a73;
    };
    const v74 = new Promise(v72);
    const p = v74;
    const v81 = {
        then(a77, a78) {
            a77(1);
        },
    };
    resolve(v81);
    const v83 = (a84) => {
        onFulfilledValue = a84;
    };
    const v85 = (a86) => {
    };
    p.then(v83, v85);
}
f66();
function f89() {
    let resolve;
    let onRejectedReason;
    const v95 = (a96) => {
        resolve = a96;
        return a96;
    };
    const v97 = new Promise(v95);
    const p = v97;
    const v104 = {
        then(a100, a101) {
            a101(1);
        },
    };
    resolve(v104);
    const v106 = (a107) => {
    };
    const v108 = (a109) => {
        onRejectedReason = a109;
    };
    p.then(v106, v108);
}
f89();
function f112() {
    let onFulfilledValue;
    const v115 = (a116) => {
        onFulfilledValue = a116;
    };
    const v117 = (a118) => {
    };
    const v119 = async () => {
        const v125 = {
            then(a121, a122) {
                a121(1);
            },
        };
        return v125;
    };
    v119().then(v115, v117);
}
f112();
function f129() {
    let onRejectedReason;
    const v132 = (a133) => {
    };
    const v134 = (a135) => {
        onRejectedReason = a135;
    };
    const v136 = async () => {
        const v142 = {
            then(a138, a139) {
                a139(1);
            },
        };
        return v142;
    };
    v136().then(v132, v134);
}
f129();

FuzzIL program written to corpus/promise-resolve-thenable-job.fzil
