v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> v2, v3, v4
        v5 <- BinaryOperation v2, '+', v3
        v6 <- BinaryOperation v5, '-', v4
        Return v6
    EndPlainFunction
    v7 <- LoadInteger '4'
    v8 <- LoadInteger '3'
    v9 <- LoadInteger '2'
    v10 <- LoadInteger '1'
    v11 <- CallFunction v1, [v8, v9, v10]
    v12 <- LoadInteger '4'
    v13 <- LoadInteger '3'
    v14 <- LoadInteger '2'
    v15 <- LoadInteger '1'
    v16 <- CallFunction v1, [v13, v14, v15]
    v17 <- LoadInteger '4'
    v18 <- LoadInteger '3'
    v19 <- LoadInteger '2'
    v20 <- LoadInteger '1'
    v21 <- CallFunction v1, [v18, v19, v20]
EndPlainFunction
v22 <- CallFunction v0, []
v23 <- BeginPlainFunction -> 
    v24 <- BeginPlainFunction -> v25, v26, v27
        v28 <- BinaryOperation v25, '+', v26
        v29 <- BinaryOperation v28, '-', v27
        Return v29
    EndPlainFunction
    v30 <- LoadFloat '4.5'
    v31 <- LoadFloat '3.5'
    v32 <- LoadFloat '2.5'
    v33 <- LoadFloat '1.5'
    v34 <- CallFunction v24, [v31, v32, v33]
    v35 <- LoadFloat '4.5'
    v36 <- LoadFloat '3.5'
    v37 <- LoadFloat '2.5'
    v38 <- LoadFloat '1.5'
    v39 <- CallFunction v24, [v36, v37, v38]
    v40 <- LoadFloat '4.5'
    v41 <- LoadFloat '3.5'
    v42 <- LoadFloat '2.5'
    v43 <- LoadFloat '1.5'
    v44 <- CallFunction v24, [v41, v42, v43]
    v45 <- LoadInteger '4'
    v46 <- LoadInteger '3'
    v47 <- LoadInteger '2'
    v48 <- LoadInteger '1'
    v49 <- CallFunction v24, [v46, v47, v48]
    v50 <- LoadInteger '3'
    v51 <- LoadInteger '2'
    v52 <- LoadUndefined
    v53 <- CallFunction v24, [v50, v51, v52]
    v54 <- CreateNamedVariable 'isNaN', 'none'
    v55 <- CallFunction v54, [v53]
    v56 <- LoadInteger '3'
    v57 <- LoadUndefined
    v58 <- LoadInteger '1'
    v59 <- CallFunction v24, [v56, v57, v58]
    v60 <- CallFunction v54, [v59]
EndPlainFunction
v61 <- CallFunction v23, []
v62 <- BeginPlainFunction -> 
    v63 <- BeginPlainFunction -> v64
        v65 <- LoadInteger '0'
        v66 <- BinaryOperation v64, '>>>', v65
        v67 <- LoadInteger '1'
        v68 <- BinaryOperation v66, '+', v67
        Return v68
    EndPlainFunction
    v69 <- LoadInteger '1'
    v70 <- LoadInteger '0'
    v71 <- CallFunction v63, [v70]
    v72 <- LoadInteger '1'
    v73 <- LoadInteger '0'
    v74 <- CallFunction v63, [v73]
    v75 <- LoadInteger '1'
    v76 <- LoadInteger '0'
    v77 <- CallFunction v63, [v76]
    v78 <- LoadInteger '4294967295'
    v79 <- LoadInteger '2'
    v80 <- UnaryOperation '-', v79
    v81 <- CallFunction v63, [v80]
EndPlainFunction
v82 <- CallFunction v62, []
v83 <- BeginPlainFunction -> 
    v84 <- BeginPlainFunction -> v85, v86
        v87 <- LoadInteger '0'
        v88 <- CreateNamedVariable 'x', 'var', v87
        BeginIf v85
            v89 <- LoadFloat '0.5'
            Reassign v88, v89
        EndIf
        v90 <- BinaryOperation v88, '+', v86
        Return v90
    EndPlainFunction
    v91 <- LoadInteger '1'
    v92 <- LoadInteger '0'
    v93 <- LoadInteger '1'
    v94 <- CallFunction v84, [v92, v93]
    v95 <- LoadInteger '1'
    v96 <- LoadInteger '0'
    v97 <- LoadInteger '1'
    v98 <- CallFunction v84, [v96, v97]
    v99 <- LoadInteger '1'
    v100 <- LoadInteger '0'
    v101 <- LoadInteger '1'
    v102 <- CallFunction v84, [v100, v101]
    v103 <- LoadFloat '1.5'
    v104 <- LoadInteger '1'
    v105 <- LoadInteger '1'
    v106 <- CallFunction v84, [v104, v105]
EndPlainFunction
v107 <- CallFunction v83, []
v108 <- BeginPlainFunction -> 
    v109 <- BeginPlainFunction -> v110, v111
        v112 <- BinaryOperation v110, '<<', v111
        Return v112
    EndPlainFunction
    v113 <- LoadInteger '24'
    v114 <- LoadInteger '3'
    v115 <- LoadInteger '3'
    v116 <- CallFunction v109, [v114, v115]
    v117 <- LoadInteger '40'
    v118 <- LoadInteger '5'
    v119 <- LoadInteger '3'
    v120 <- CallFunction v109, [v118, v119]
    v121 <- LoadInteger '64'
    v122 <- LoadInteger '4'
    v123 <- LoadInteger '4'
    v124 <- CallFunction v109, [v122, v123]
EndPlainFunction
v125 <- CallFunction v108, []
v126 <- BeginPlainFunction -> 
    v127 <- BeginPlainFunction -> v128, v129
        v130 <- BinaryOperation v128, '<<', v129
        Return v130
    EndPlainFunction
    v131 <- LoadInteger '24'
    v132 <- LoadFloat '3.3'
    v133 <- LoadFloat '3.4'
    v134 <- CallFunction v127, [v132, v133]
    v135 <- LoadInteger '40'
    v136 <- LoadFloat '5.1'
    v137 <- LoadFloat '3.9'
    v138 <- CallFunction v127, [v136, v137]
    v139 <- LoadInteger '64'
    v140 <- LoadFloat '4.9'
    v141 <- LoadFloat '4.1'
    v142 <- CallFunction v127, [v140, v141]
EndPlainFunction
v143 <- CallFunction v126, []
v144 <- BeginPlainFunction -> 
    v145 <- BeginPlainFunction -> v146, v147
        v148 <- BinaryOperation v146, '>>', v147
        Return v148
    EndPlainFunction
    v149 <- LoadInteger '1'
    v150 <- LoadFloat '8.3'
    v151 <- LoadFloat '3.4'
    v152 <- CallFunction v145, [v150, v151]
    v153 <- LoadInteger '2'
    v154 <- UnaryOperation '-', v153
    v155 <- LoadFloat '16.1'
    v156 <- UnaryOperation '-', v155
    v157 <- LoadFloat '3.9'
    v158 <- CallFunction v145, [v156, v157]
    v159 <- LoadInteger '0'
    v160 <- LoadFloat '16.2'
    v161 <- LoadFloat '5.1'
    v162 <- CallFunction v145, [v160, v161]
EndPlainFunction
v163 <- CallFunction v144, []
v164 <- BeginPlainFunction -> 
    v165 <- BeginPlainFunction -> v166, v167
        v168 <- BinaryOperation v166, '>>>', v167
        Return v168
    EndPlainFunction
    v169 <- LoadInteger '1'
    v170 <- LoadFloat '8.3'
    v171 <- LoadFloat '3.4'
    v172 <- CallFunction v165, [v170, v171]
    v173 <- LoadInteger '536870910'
    v174 <- LoadFloat '16.1'
    v175 <- UnaryOperation '-', v174
    v176 <- LoadFloat '3.9'
    v177 <- CallFunction v165, [v175, v176]
    v178 <- LoadInteger '0'
    v179 <- LoadFloat '16.2'
    v180 <- LoadFloat '5.1'
    v181 <- CallFunction v165, [v179, v180]
EndPlainFunction
v182 <- CallFunction v164, []


function AddSubtractSmis() {
    function f0(a2, a3, a4) {
        return (a2 + a3) - a4;
    }
    f0(3, 2, 1);
    f0(3, 2, 1);
    f0(3, 2, 1);
}
AddSubtractSmis();
function AddSubtractDoubles() {
    function f1(a25, a26, a27) {
        return (a25 + a26) - a27;
    }
    f1(3.5, 2.5, 1.5);
    f1(3.5, 2.5, 1.5);
    f1(3.5, 2.5, 1.5);
    f1(3, 2, 1);
    isNaN(f1(3, 2, undefined));
    isNaN(f1(3, undefined, 1));
}
AddSubtractDoubles();
function CheckUint32ToInt32Conv() {
    function f2(a64) {
        return (a64 >>> 0) + 1;
    }
    f2(0);
    f2(0);
    f2(0);
    f2(-2);
}
CheckUint32ToInt32Conv();
function CheckFloat64ToInt32Conv() {
    function f3(a85, a86) {
        var x = 0;
        if (a85) {
            x = 0.5;
        }
        return x + a86;
    }
    f3(0, 1);
    f3(0, 1);
    f3(0, 1);
    f3(1, 1);
}
CheckFloat64ToInt32Conv();
function ShiftLeftSmis() {
    function f4(a110, a111) {
        return a110 << a111;
    }
    f4(3, 3);
    f4(5, 3);
    f4(4, 4);
}
ShiftLeftSmis();
function ShiftLeftNumbers() {
    function f5(a128, a129) {
        return a128 << a129;
    }
    f5(3.3, 3.4);
    f5(5.1, 3.9);
    f5(4.9, 4.1);
}
ShiftLeftNumbers();
function ShiftRightNumbers() {
    function f6(a146, a147) {
        return a146 >> a147;
    }
    f6(8.3, 3.4);
    -2;
    f6(-16.1, 3.9);
    f6(16.2, 5.1);
}
ShiftRightNumbers();
function ShiftRightLogicalNumbers() {
    function f7(a166, a167) {
        return a166 >>> a167;
    }
    f7(8.3, 3.4);
    f7(-16.1, 3.9);
    f7(16.2, 5.1);
}
ShiftRightLogicalNumbers();

FuzzIL program written to corpus/turbo-number-feedback.fzil
