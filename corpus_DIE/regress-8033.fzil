v0 <- CreateNamedVariable 'SyntaxError', 'none'
v1 <- LoadString 'foo: if (true) while (false) { continue foo }'
v2 <- LoadString 'foo: if (true) for (; false; ) { continue foo }'
v3 <- LoadString 'foo: if (true) for (let x of []) { continue foo }'
v4 <- LoadString 'foo: if (true) for (let x in []) { continue foo }'
v5 <- LoadString 'foo: if (true) { do { continue foo } while (false) }'
v6 <- LoadString 'foo: if (true) { while (false) { continue foo } }'
v7 <- LoadString 'foo: if (true) { for (; false; ) { continue foo } }'
v8 <- LoadString 'foo: if (true) { for (let x of []) { continue foo } }'
v9 <- LoadString 'foo: if (true) { for (let x in []) { continue foo } }'
v10 <- LoadString 'foo: goo: if (true) do { continue foo } while (false)'
v11 <- LoadString 'foo: goo: if (true) while (false) { continue foo }'
v12 <- LoadString 'foo: goo: if (true) for (; false; ) { continue foo }'
v13 <- LoadString 'foo: goo: if (true) for (let x of []) { continue foo }'
v14 <- LoadString 'foo: goo: if (true) for (let x in []) { continue foo }'
v15 <- LoadString 'foo: goo: if (true) { do { continue foo } while (false) }'
v16 <- LoadString 'foo: goo: if (true) { while (false) { continue foo } }'
v17 <- LoadString 'foo: goo: if (true) { for (; false; ) { continue foo } }'
v18 <- LoadString 'foo: goo: if (true) { for (let x of []) { continue foo } }'
v19 <- LoadString 'foo: goo: if (true) { for (let x in []) { continue foo } }'
v20 <- LoadString 'if (true) foo: goo: do { continue foo } while (false)'
v21 <- LoadString 'if (true) foo: goo: while (false) { continue foo }'
v22 <- LoadString 'if (true) foo: goo: for (; false; ) { continue foo }'
v23 <- LoadString 'if (true) foo: goo: for (let x of []) { continue foo }'
v24 <- LoadString 'if (true) foo: goo: for (let x in []) { continue foo }'
v25 <- LoadString 'if (true) foo: goo: { do { continue foo } while (false) }'
v26 <- LoadString 'if (true) foo: goo: { while (false) { continue foo } }'
v27 <- LoadString 'if (true) foo: goo: { for (; false; ) { continue foo } }'
v28 <- LoadString 'if (true) foo: goo: { for (let x of []) { continue foo } }'
v29 <- LoadString 'if (true) foo: goo: { for (let x in []) { continue foo } }'
v30 <- LoadString 'if (true) { foo: goo: do { continue foo } while (false) }'
v31 <- LoadString 'if (true) { foo: goo: while (false) { continue foo } }'
v32 <- LoadString 'if (true) { foo: goo: for (; false; ) { continue foo } }'
v33 <- LoadString 'if (true) { foo: goo: for (let x of []) { continue foo } }'
v34 <- LoadString 'if (true) { foo: goo: for (let x in []) { continue foo } }'



FuzzIL program written to corpus/regress-8033.fzil
