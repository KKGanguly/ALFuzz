v0 <- BeginPlainFunction -> v1
    v2 <- LoadString '0'
    v3 <- LoadString '1'
    v4 <- TernaryOperation v1, v2, v3
    v5 <- CreateNamedVariable 's', 'var', v4
    v6 <- LoadInteger '1'
    v7 <- CreateNamedVariable 'Number', 'none'
    v8 <- CallFunction v7, [v5]
    v9 <- BinaryOperation v6, '+', v8
    Return v9
EndPlainFunction
v10 <- LoadInteger '0'
v11 <- CallFunction v0, [v10]
v12 <- LoadInteger '0'
v13 <- CallFunction v0, [v12]
v14 <- LoadInteger '2'
v15 <- LoadInteger '0'
v16 <- CallFunction v0, [v15]


function f(a1) {
    var s = a1 ? "0" : "1";
    return 1 + Number(s);
}
f(0);
f(0);
f(0);

FuzzIL program written to corpus/regress-string-to-number-add.fzil
