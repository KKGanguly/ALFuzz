v0 <- LoadInteger '0'
v1 <- LoadInteger '1'
v2 <- CreateArray [v0, v1]
v3 <- CreateNamedVariable 'a', 'var', v2
v4 <- BeginPlainFunction -> v5
    v6 <- LoadInteger '20'
    v7 <- CreateNamedVariable 'Array', 'none'
    v8 <- CallFunction v7, [v6]
    v9 <- CreateNamedVariable 'arr', 'var', v8
    Return v9
EndPlainFunction
v10 <- CreateNamedVariable 'Symbol', 'none'
v11 <- GetProperty v10, 'species'
BeginObjectLiteral
    ObjectLiteralAddComputedProperty v11, v4
v12 <- EndObjectLiteral
SetProperty v3, 'constructor', v12
v13 <- LoadInteger '0'
v14 <- LoadInteger '1'
v15 <- CreateArray [v13, v14]
v16 <- CreateNamedVariable 'Array', 'none'
v17 <- GetProperty v16, 'prototype'
v18 <- GetProperty v17, 'concat'
v19 <- CallMethod v18, 'call', [v3]


var a = [0,1];
function f4(a5) {
    var arr = Array(20);
    return arr;
}
const v11 = Symbol.species;
a.constructor = { [v11]: f4 };
[0,1];
Array.prototype.concat.call(a);

FuzzIL program written to corpus/regress-6708.fzil
