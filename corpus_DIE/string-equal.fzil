v0 <- BeginPlainFunction -> 
    v1 <- LoadString '蝥abc'
    v2 <- CreateNamedVariable 's', 'const', v1
    v3 <- Compare v2, '===', v2
    v4 <- LoadString 'abc'
    v5 <- Compare v2, '===', v4
    v6 <- LoadString 'abc'
    v7 <- Compare v6, '===', v2
    v8 <- LoadInteger '3'
    v9 <- UnaryOperation '-', v8
    v10 <- CallMethod v2, 'slice', [v9]
    v11 <- LoadString 'abc'
    v12 <- Compare v10, '===', v11
    v13 <- LoadString 'abc'
    v14 <- LoadInteger '3'
    v15 <- UnaryOperation '-', v14
    v16 <- CallMethod v2, 'slice', [v15]
    v17 <- Compare v13, '===', v16
    v18 <- LoadInteger '0'
    v19 <- LoadInteger '1'
    v20 <- CallMethod v2, 'slice', [v18, v19]
    v21 <- LoadString '蝥'
    v22 <- Compare v20, '===', v21
    v23 <- LoadString '蝥'
    v24 <- LoadInteger '0'
    v25 <- LoadInteger '1'
    v26 <- CallMethod v2, 'slice', [v24, v25]
    v27 <- Compare v23, '===', v26
    v28 <- LoadString ''
    v29 <- BinaryOperation v28, '+', v2
    v30 <- Compare v2, '===', v29
    v31 <- LoadString ''
    v32 <- BinaryOperation v31, '+', v2
    v33 <- Compare v32, '===', v2
EndPlainFunction
v34 <- CallFunction v0, []


function f0() {
    const s = "蝥abc";
    s === s;
    s === "abc";
    "abc" === s;
    s.slice(-3) === "abc";
    "abc" === s.slice(-3);
    s.slice(0, 1) === "蝥";
    "蝥" === s.slice(0, 1);
    s === ("" + s);
    ("" + s) === s;
}
f0();

FuzzIL program written to corpus/string-equal.fzil
