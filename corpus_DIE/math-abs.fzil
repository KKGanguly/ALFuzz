v0 <- BeginPlainFunction -> 
    v1 <- LoadFloat '0.5'
    v2 <- CreateNamedVariable 'x', 'var', v1
    v3 <- BeginPlainFunction -> 
        v4 <- LoadFloat '0.5'
        v5 <- BinaryOperation v2, '-', v4
        Return v5
    EndPlainFunction
    v6 <- CallFunction v3, []
    Return v6
EndPlainFunction
v7 <- BeginPlainFunction -> 
    v8 <- LoadInteger '0'
    v9 <- LoadInteger '0'
    v10 <- CreateNamedVariable 'Math', 'none'
    v11 <- CallMethod v10, 'abs', [v9]
    v12 <- LoadInteger '0'
    v13 <- CallFunction v0, []
    v14 <- CallMethod v10, 'abs', [v13]
    v15 <- LoadInteger '0'
    v16 <- LoadInteger '0'
    v17 <- UnaryOperation '-', v16
    v18 <- CallMethod v10, 'abs', [v17]
    v19 <- CreateNamedVariable 'Infinity', 'none'
    v20 <- CallMethod v10, 'abs', [v19]
    v21 <- UnaryOperation '-', v19
    v22 <- CallMethod v10, 'abs', [v21]
    v23 <- CreateNamedVariable 'NaN', 'none'
    v24 <- CallMethod v10, 'abs', [v23]
    v25 <- UnaryOperation '-', v23
    v26 <- CallMethod v10, 'abs', [v25]
    v27 <- LoadString 'Infinity'
    v28 <- LoadString '+Infinity'
    v29 <- CreateNamedVariable 'Number', 'none'
    v30 <- CallFunction v29, [v28]
    v31 <- CallMethod v10, 'abs', [v30]
    v32 <- CallMethod v31, 'toString', []
    v33 <- LoadString 'Infinity'
    v34 <- LoadString '-Infinity'
    v35 <- CallFunction v29, [v34]
    v36 <- CallMethod v10, 'abs', [v35]
    v37 <- CallMethod v36, 'toString', []
    v38 <- LoadString 'NaN'
    v39 <- CallMethod v10, 'abs', [v23]
    v40 <- CallMethod v39, 'toString', []
    v41 <- LoadString 'NaN'
    v42 <- UnaryOperation '-', v23
    v43 <- CallMethod v10, 'abs', [v42]
    v44 <- CallMethod v43, 'toString', []
    v45 <- LoadFloat '0.1'
    v46 <- LoadFloat '0.1'
    v47 <- CallMethod v10, 'abs', [v46]
    v48 <- LoadFloat '0.5'
    v49 <- LoadFloat '0.5'
    v50 <- CallMethod v10, 'abs', [v49]
    v51 <- LoadFloat '0.1'
    v52 <- LoadFloat '0.1'
    v53 <- UnaryOperation '-', v52
    v54 <- CallMethod v10, 'abs', [v53]
    v55 <- LoadFloat '0.5'
    v56 <- LoadFloat '0.5'
    v57 <- UnaryOperation '-', v56
    v58 <- CallMethod v10, 'abs', [v57]
    v59 <- LoadInteger '1'
    v60 <- LoadInteger '1'
    v61 <- CallMethod v10, 'abs', [v60]
    v62 <- LoadFloat '1.1'
    v63 <- LoadFloat '1.1'
    v64 <- CallMethod v10, 'abs', [v63]
    v65 <- LoadFloat '1.5'
    v66 <- LoadFloat '1.5'
    v67 <- CallMethod v10, 'abs', [v66]
    v68 <- LoadInteger '1'
    v69 <- LoadInteger '1'
    v70 <- UnaryOperation '-', v69
    v71 <- CallMethod v10, 'abs', [v70]
    v72 <- LoadFloat '1.1'
    v73 <- LoadFloat '1.1'
    v74 <- UnaryOperation '-', v73
    v75 <- CallMethod v10, 'abs', [v74]
    v76 <- LoadFloat '1.5'
    v77 <- LoadFloat '1.5'
    v78 <- UnaryOperation '-', v77
    v79 <- CallMethod v10, 'abs', [v78]
    v80 <- GetProperty v29, 'MIN_VALUE'
    v81 <- GetProperty v29, 'MIN_VALUE'
    v82 <- CallMethod v10, 'abs', [v81]
    v83 <- GetProperty v29, 'MIN_VALUE'
    v84 <- GetProperty v29, 'MIN_VALUE'
    v85 <- UnaryOperation '-', v84
    v86 <- CallMethod v10, 'abs', [v85]
    v87 <- GetProperty v29, 'MAX_VALUE'
    v88 <- GetProperty v29, 'MAX_VALUE'
    v89 <- CallMethod v10, 'abs', [v88]
    v90 <- GetProperty v29, 'MAX_VALUE'
    v91 <- GetProperty v29, 'MAX_VALUE'
    v92 <- UnaryOperation '-', v91
    v93 <- CallMethod v10, 'abs', [v92]
    v94 <- LoadInteger '1'
    v95 <- LoadInteger '30'
    v96 <- BinaryOperation v94, '<<', v95
    v97 <- CreateNamedVariable 'two_30', 'var', v96
    v98 <- CallMethod v10, 'abs', [v97]
    v99 <- UnaryOperation '-', v97
    v100 <- CallMethod v10, 'abs', [v99]
    v101 <- LoadInteger '1'
    v102 <- BinaryOperation v97, '+', v101
    v103 <- LoadInteger '1'
    v104 <- BinaryOperation v97, '+', v103
    v105 <- CallMethod v10, 'abs', [v104]
    v106 <- LoadInteger '1'
    v107 <- BinaryOperation v97, '+', v106
    v108 <- UnaryOperation '-', v97
    v109 <- LoadInteger '1'
    v110 <- BinaryOperation v108, '-', v109
    v111 <- CallMethod v10, 'abs', [v110]
    v112 <- LoadInteger '1'
    v113 <- BinaryOperation v97, '-', v112
    v114 <- LoadInteger '1'
    v115 <- BinaryOperation v97, '-', v114
    v116 <- CallMethod v10, 'abs', [v115]
    v117 <- LoadInteger '1'
    v118 <- BinaryOperation v97, '-', v117
    v119 <- UnaryOperation '-', v97
    v120 <- LoadInteger '1'
    v121 <- BinaryOperation v119, '+', v120
    v122 <- CallMethod v10, 'abs', [v121]
    v123 <- LoadInteger '2'
    v124 <- BinaryOperation v123, '*', v97
    v125 <- CreateNamedVariable 'two_31', 'var', v124
    v126 <- CallMethod v10, 'abs', [v125]
    v127 <- UnaryOperation '-', v125
    v128 <- CallMethod v10, 'abs', [v127]
    v129 <- LoadInteger '1'
    v130 <- BinaryOperation v125, '+', v129
    v131 <- LoadInteger '1'
    v132 <- BinaryOperation v125, '+', v131
    v133 <- CallMethod v10, 'abs', [v132]
    v134 <- LoadInteger '1'
    v135 <- BinaryOperation v125, '+', v134
    v136 <- UnaryOperation '-', v125
    v137 <- LoadInteger '1'
    v138 <- BinaryOperation v136, '-', v137
    v139 <- CallMethod v10, 'abs', [v138]
    v140 <- LoadInteger '1'
    v141 <- BinaryOperation v125, '-', v140
    v142 <- LoadInteger '1'
    v143 <- BinaryOperation v125, '-', v142
    v144 <- CallMethod v10, 'abs', [v143]
    v145 <- LoadInteger '1'
    v146 <- BinaryOperation v125, '-', v145
    v147 <- UnaryOperation '-', v125
    v148 <- LoadInteger '1'
    v149 <- BinaryOperation v147, '+', v148
    v150 <- CallMethod v10, 'abs', [v149]
    v151 <- LoadString 'not a number'
    v152 <- CallMethod v10, 'abs', [v151]
    v153 <- LoadInteger '1'
    v154 <- LoadInteger '2'
    v155 <- LoadInteger '3'
    v156 <- CreateArray [v153, v154, v155]
    v157 <- CallMethod v10, 'abs', [v156]
    v158 <- LoadInteger '42'
    v159 <- BeginPlainFunction -> 
        v160 <- LoadInteger '42'
        Return v160
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v159
    v161 <- EndObjectLiteral
    v162 <- CallMethod v10, 'abs', [v161]
    v163 <- LoadInteger '42'
    v164 <- BeginPlainFunction -> 
        v165 <- LoadInteger '42'
        v166 <- UnaryOperation '-', v165
        Return v166
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v164
    v167 <- EndObjectLiteral
    v168 <- CallMethod v10, 'abs', [v167]
EndPlainFunction
BeginForLoopInitializer
    v169 <- LoadInteger '0'
BeginForLoopCondition -> v170
    v171 <- LoadInteger '500'
    v172 <- Compare v170, '<', v171
BeginForLoopAfterthought v172 -> v173
    v174 <- UnaryOperation v173, '++'
BeginForLoopBody -> v175
    v176 <- CallFunction v7, []
EndForLoop
v177 <- BeginPlainFunction -> v178
    v179 <- CreateNamedVariable 'Math', 'none'
    v180 <- CallMethod v179, 'abs', [v178]
    Return v180
EndPlainFunction
BeginForLoopInitializer
    v181 <- LoadInteger '0'
BeginForLoopCondition -> v182
    v183 <- LoadInteger '1000'
    v184 <- Compare v182, '<', v183
BeginForLoopAfterthought v184 -> v185
    v186 <- UnaryOperation v185, '++'
BeginForLoopBody -> v187
    v188 <- UnaryOperation '-', v187
    v189 <- CallFunction v177, [v188]
EndForLoop
v190 <- LoadInteger '42'
v191 <- LoadInteger '42'
v192 <- UnaryOperation '-', v191
v193 <- CallFunction v177, [v192]
v194 <- LoadInteger '42'
v195 <- LoadInteger '42'
v196 <- UnaryOperation '-', v195
v197 <- CallFunction v177, [v196]
v198 <- LoadInteger '1'
v199 <- UnaryOperation '-', v198
v200 <- LoadInteger '2'
v201 <- UnaryOperation '-', v200
v202 <- CreateArray [v199, v201]
v203 <- CreateNamedVariable 'a', 'var', v202
v204 <- BeginPlainFunction -> 
    v205 <- GetElement v203, '0'
    v206 <- CreateNamedVariable 'Math', 'none'
    v207 <- CallMethod v206, 'abs', [v205]
    Return v207
EndPlainFunction
v208 <- LoadInteger '1'
v209 <- CallFunction v204, []
v210 <- LoadInteger '1'
v211 <- CallFunction v204, []
v212 <- LoadInteger '1'
v213 <- CallFunction v204, []
v214 <- BeginPlainFunction -> v215
    v216 <- LoadInteger '1'
    v217 <- LoadInteger '1'
    v218 <- BinaryOperation v215, '-', v217
    v219 <- BinaryOperation v216, '<<', v218
    v220 <- CreateNamedVariable 'x', 'var', v219
    v221 <- CreateNamedVariable 'Math', 'none'
    v222 <- CallMethod v221, 'abs', [v220]
    v223 <- CreateNamedVariable 'half', 'var', v222
    Return v223
EndPlainFunction
v224 <- LoadInteger '32'
v225 <- CreateNamedVariable 'bits', 'none'
Reassign v225, v224
v226 <- LoadInteger '2147483648'
v227 <- CreateNamedVariable 'bits', 'none'
v228 <- CallFunction v214, [v227]
v229 <- LoadInteger '2147483648'
v230 <- CallFunction v214, [v227]
v231 <- LoadInteger '2147483648'
v232 <- CallFunction v214, [v227]


function zero() {
    var x = 0.5;
    function f3() {
        return x - 0.5;
    }
    return f3();
}
function test() {
    Math.abs(0);
    Math.abs(zero());
    Math.abs(-0);
    Math.abs(Infinity);
    Math.abs(-Infinity);
    Math.abs(NaN);
    Math.abs(-NaN);
    Math.abs(Number("+Infinity")).toString();
    Math.abs(Number("-Infinity")).toString();
    Math.abs(NaN).toString();
    Math.abs(-NaN).toString();
    Math.abs(0.1);
    Math.abs(0.5);
    Math.abs(-0.1);
    Math.abs(-0.5);
    Math.abs(1);
    Math.abs(1.1);
    Math.abs(1.5);
    Math.abs(-1);
    Math.abs(-1.1);
    Math.abs(-1.5);
    Number.MIN_VALUE;
    Math.abs(Number.MIN_VALUE);
    Number.MIN_VALUE;
    Math.abs(-Number.MIN_VALUE);
    Number.MAX_VALUE;
    Math.abs(Number.MAX_VALUE);
    Number.MAX_VALUE;
    Math.abs(-Number.MAX_VALUE);
    var two_30 = 1 << 30;
    Math.abs(two_30);
    Math.abs(-two_30);
    two_30 + 1;
    Math.abs(two_30 + 1);
    two_30 + 1;
    Math.abs(-two_30 - 1);
    two_30 - 1;
    Math.abs(two_30 - 1);
    two_30 - 1;
    Math.abs(-two_30 + 1);
    var two_31 = 2 * two_30;
    Math.abs(two_31);
    Math.abs(-two_31);
    two_31 + 1;
    Math.abs(two_31 + 1);
    two_31 + 1;
    Math.abs(-two_31 - 1);
    two_31 - 1;
    Math.abs(two_31 - 1);
    two_31 - 1;
    Math.abs(-two_31 + 1);
    Math.abs("not a number");
    Math.abs([1,2,3]);
    function f159() {
        return 42;
    }
    Math.abs({ valueOf: f159 });
    function f164() {
        return -42;
    }
    Math.abs({ valueOf: f164 });
}
for (let i170 = 0; i170 < 500; i170++) {
    test();
}
function foo(a178) {
    return Math.abs(a178);
}
for (let i182 = 0; i182 < 1000; i182++) {
    foo(-i182);
}
foo(-42);
foo(-42);
var a = [-1,-2];
function foo2() {
    return Math.abs(a[0]);
}
foo2();
foo2();
foo2();
function absHalf(a215) {
    var x = 1 << (a215 - 1);
    var half = Math.abs(x);
    return half;
}
bits = 32;
absHalf(bits);
absHalf(bits);
absHalf(bits);

FuzzIL program written to corpus/math-abs.fzil
