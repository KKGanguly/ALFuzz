v0 <- BeginPlainFunction -> v1
    BeginForLoopInitializer
        v2 <- LoadInteger '0'
    BeginForLoopCondition -> v3
        v4 <- LoadInteger '20000'
        v5 <- Compare v3, '<', v4
    BeginForLoopAfterthought v5 -> v6
        v7 <- UnaryOperation '++', v6
    BeginForLoopBody -> v8
        v9 <- LoadInteger '100'
        v10 <- Compare v8, '<', v9
        BeginIf v10
            v11 <- LoadInteger '3'
            v12 <- CallMethod v1, 'push', [v11]
        BeginElse
            v13 <- LoadInteger '2500'
            v14 <- Compare v8, '<', v13
            BeginIf v14
                v15 <- LoadFloat '2.5'
                v16 <- CallMethod v1, 'push', [v15]
            BeginElse
                v17 <- LoadBoolean 'true'
                v18 <- CallMethod v1, 'push', [v17]
            EndIf
        EndIf
    EndForLoop
    Return v1
EndPlainFunction
v19 <- CreateArray []
v20 <- CallFunction v0, [v19]
v21 <- CreateNamedVariable 'a', 'let', v20
v22 <- GetElement v21, '0'
v23 <- LoadInteger '3'
v24 <- GetElement v21, '10'
v25 <- LoadInteger '3'
v26 <- GetElement v21, '2499'
v27 <- LoadFloat '2.5'
v28 <- GetElement v21, '10000'
v29 <- LoadBoolean 'true'


function __f_17(a1) {
    for (let i3 = 0; i3 < 20000; ++i3) {
        if (i3 < 100) {
            a1.push(3);
        } else {
            if (i3 < 2500) {
                a1.push(2.5);
            } else {
                a1.push(true);
            }
        }
    }
    return a1;
}
let a = __f_17([]);
a[0];
a[10];
a[2499];
a[10000];

FuzzIL program written to corpus/array-push13.fzil
