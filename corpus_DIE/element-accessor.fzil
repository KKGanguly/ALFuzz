v0 <- BeginPlainFunction -> 
    v1 <- CreateArray []
    v2 <- CreateNamedVariable 'o', 'var', v1
    BeginObjectLiteral
    v3 <- EndObjectLiteral
    SetProperty v2, '__proto__', v3
    v4 <- BeginPlainFunction -> v5, v6, v7
        SetComputedProperty v5, v6, v7
    EndPlainFunction
    v8 <- LoadInteger '0'
    v9 <- LoadInteger '0'
    v10 <- CallFunction v4, [v2, v8, v9]
    v11 <- LoadInteger '1'
    v12 <- LoadInteger '0'
    v13 <- CallFunction v4, [v2, v11, v12]
    v14 <- LoadInteger '2'
    v15 <- LoadInteger '0'
    v16 <- CallFunction v4, [v2, v14, v15]
    v17 <- LoadInteger '1'
    v18 <- GetProperty v2, '__proto__'
    SetElement v18, '10000000', v17
    v19 <- LoadInteger '0'
    v20 <- CreateNamedVariable 'set', 'var', v19
    v21 <- LoadString '3'
    v22 <- BeginPlainFunction -> 
        v23 <- LoadInteger '100'
        Return v23
    EndPlainFunction
    v24 <- BeginPlainFunction -> v25
        Reassign v20, v25
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v22
        ObjectLiteralAddProperty `set`, v24
    v26 <- EndObjectLiteral
    v27 <- CreateNamedVariable 'Object', 'none'
    v28 <- CallMethod v27, 'defineProperty', [v2, v21, v26]
    v29 <- LoadInteger '3'
    v30 <- LoadInteger '1000'
    v31 <- CallFunction v4, [v2, v29, v30]
    v32 <- LoadInteger '1000'
    v33 <- LoadInteger '100'
    v34 <- GetElement v2, '3'
EndPlainFunction
v35 <- CallFunction v0, []
v36 <- BeginPlainFunction -> 
    v37 <- CreateNamedVariable 'Int32Array', 'none'
    v38 <- LoadInteger '1'
    v39 <- Construct v37, [v38]
    v40 <- CreateNamedVariable 'o', 'var', v39
    v41 <- BeginArrowFunction -> 
        v42 <- LoadString '0'
        v43 <- BeginPlainFunction -> 
        EndPlainFunction
        BeginObjectLiteral
            ObjectLiteralAddProperty `get`, v43
        v44 <- EndObjectLiteral
        v45 <- CreateNamedVariable 'Object', 'none'
        v46 <- CallMethod v45, 'defineProperty', [v40, v42, v44]
        Return v46
    EndArrowFunction
    v47 <- CallFunction v41, []
    v48 <- CreateNamedVariable 'TypeError', 'none'
    v49 <- LoadInteger '0'
    v50 <- LoadBoolean 'true'
    v51 <- LoadBoolean 'true'
    v52 <- LoadBoolean 'false'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v49
        ObjectLiteralAddProperty `writable`, v50
        ObjectLiteralAddProperty `enumerable`, v51
        ObjectLiteralAddProperty `configurable`, v52
    v53 <- EndObjectLiteral
    v54 <- LoadString '0'
    v55 <- CreateNamedVariable 'Object', 'none'
    v56 <- CallMethod v55, 'getOwnPropertyDescriptor', [v40, v54]
EndPlainFunction
v57 <- CallFunction v36, []
v58 <- BeginPlainFunction -> 
    v59 <- BeginPlainFunction -> 
        v60 <- CreateNamedVariable 'Array', 'none'
        v61 <- Construct v60, []
        v62 <- CreateNamedVariable 'a', 'var', v61
        v63 <- LoadFloat '1.5'
        SetElement v62, '1', v63
        Return v62
    EndPlainFunction
    v64 <- CallFunction v59, []
    v65 <- CallFunction v59, []
    v66 <- CallFunction v59, []
    v67 <- CreateNamedVariable 'a', 'var', v66
    v68 <- LoadInteger '2'
    SetElement v67, '2', v68
    v69 <- LoadInteger '3'
    v70 <- GetProperty v67, 'length'
EndPlainFunction
v71 <- CallFunction v58, []


function f0() {
    var o = [];
    o.__proto__ = {};
    function store(a5, a6, a7) {
        a5[a6] = a7;
    }
    store(o, 0, 0);
    store(o, 1, 0);
    store(o, 2, 0);
    const t6 = o.__proto__;
    t6[10000000] = 1;
    var set = 0;
    function f22() {
        return 100;
    }
    function f24(a25) {
        set = a25;
    }
    Object.defineProperty(o, "3", { get: f22, set: f24 });
    store(o, 3, 1000);
    o[3];
}
f0();
function f36() {
    const v39 = new Int32Array(1);
    var o = v39;
    const v41 = () => {
        function f43() {
        }
        return Object.defineProperty(o, "0", { get: f43 });
    };
    v41();
    const v53 = { value: 0, writable: true, enumerable: true, configurable: false };
    Object.getOwnPropertyDescriptor(o, "0");
}
f36();
function f58() {
    function f() {
        const v61 = new Array();
        var a = v61;
        a[1] = 1.5;
        return a;
    }
    f();
    f();
    var a = f();
    a[2] = 2;
    a.length;
}
f58();

FuzzIL program written to corpus/element-accessor.fzil
