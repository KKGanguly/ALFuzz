v0 <- LoadString '12345'
v1 <- CreateNamedVariable 's', 'var', v0
v2 <- BeginPlainFunction -> 
    v3 <- BeginPlainFunction -> 
        v4 <- GetElement v1, '5'
        Return v4
    EndPlainFunction
    v5 <- CallFunction v3, []
    v6 <- CallFunction v3, []
    v7 <- CallFunction v3, []
    v8 <- CallFunction v3, []
    v9 <- CallFunction v3, []
EndPlainFunction
v10 <- CallFunction v2, []
v11 <- BeginPlainFunction -> 
    v12 <- BeginPlainFunction -> v13
        v14 <- GetComputedProperty v1, v13
        Return v14
    EndPlainFunction
    v15 <- LoadInteger '0'
    v16 <- CallFunction v12, [v15]
    v17 <- LoadInteger '1'
    v18 <- CallFunction v12, [v17]
    v19 <- LoadInteger '5'
    v20 <- CallFunction v12, [v19]
    v21 <- LoadInteger '5'
    v22 <- CallFunction v12, [v21]
    v23 <- CallFunction v12, []
EndPlainFunction
v24 <- CallFunction v11, []
v25 <- BeginPlainFunction -> 
    v26 <- BeginPlainFunction -> v27
        v28 <- GetElement v27, '5'
        Return v28
    EndPlainFunction
    v29 <- CallFunction v26, [v1]
    v30 <- CallFunction v26, [v1]
    v31 <- CallFunction v26, [v1]
    v32 <- CallFunction v26, [v1]
    v33 <- CallFunction v26, []
EndPlainFunction
v34 <- CallFunction v25, []
v35 <- BeginPlainFunction -> 
    v36 <- BeginPlainFunction -> v37, v38
        v39 <- GetComputedProperty v37, v38
        Return v39
    EndPlainFunction
    v40 <- LoadInteger '0'
    v41 <- CallFunction v36, [v1, v40]
    v42 <- LoadInteger '1'
    v43 <- CallFunction v36, [v1, v42]
    v44 <- LoadInteger '5'
    v45 <- CallFunction v36, [v1, v44]
    v46 <- LoadInteger '5'
    v47 <- CallFunction v36, [v1, v46]
    v48 <- CallFunction v36, []
EndPlainFunction
v49 <- CallFunction v35, []


var s = "12345";
function f2() {
    function foo() {
        return s[5];
    }
    foo();
    foo();
    foo();
    foo();
    foo();
}
f2();
function f11() {
    function foo(a13) {
        return s[a13];
    }
    foo(0);
    foo(1);
    foo(5);
    foo(5);
    foo();
}
f11();
function f25() {
    function foo(a27) {
        return a27[5];
    }
    foo(s);
    foo(s);
    foo(s);
    foo(s);
    foo();
}
f25();
function f35() {
    function foo(a37, a38) {
        return a37[a38];
    }
    foo(s, 0);
    foo(s, 1);
    foo(s, 5);
    foo(s, 5);
    foo();
}
f35();

FuzzIL program written to corpus/deopt-string-outofbounds.fzil
