v0 <- BeginPlainFunction -> v1, v2
    v3 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v4 <- Construct v3, [v1]
    v5 <- CreateNamedVariable 'ab', 'var', v4
    v6 <- GetProperty v5, 'byteLength'
EndPlainFunction
v7 <- BeginPlainFunction -> 
    v8 <- LoadInteger '1'
    v9 <- LoadInteger '1'
    v10 <- CallFunction v0, [v8, v9]
    v11 <- LoadInteger '256'
    v12 <- LoadInteger '256'
    v13 <- CallFunction v0, [v11, v12]
    v14 <- LoadFloat '2.567'
    v15 <- LoadInteger '2'
    v16 <- CallFunction v0, [v14, v15]
    v17 <- LoadString 'abc'
    v18 <- LoadInteger '0'
    v19 <- CallFunction v0, [v17, v18]
    v20 <- LoadInteger '0'
    v21 <- LoadInteger '0'
    v22 <- CallFunction v0, [v20, v21]
    v23 <- BeginPlainFunction -> 
        v24 <- CreateNamedVariable 'ArrayBuffer', 'none'
        v25 <- LoadInteger '10'
        v26 <- UnaryOperation '-', v25
        v27 <- Construct v24, [v26]
    EndPlainFunction
    v28 <- CallFunction v23, []
    v29 <- CreateNamedVariable 'RangeError', 'none'
    v30 <- BeginPlainFunction -> 
        v31 <- CreateNamedVariable 'ArrayBuffer', 'none'
        v32 <- LoadFloat '2.567'
        v33 <- UnaryOperation '-', v32
        v34 <- Construct v31, [v33]
    EndPlainFunction
    v35 <- CallFunction v30, []
    v36 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v37 <- Construct v36, []
    v38 <- CreateNamedVariable 'ab', 'var', v37
    v39 <- LoadInteger '0'
    v40 <- GetProperty v38, 'byteLength'
    v41 <- LoadString '[object ArrayBuffer]'
    v42 <- CreateNamedVariable 'Object', 'none'
    v43 <- GetProperty v42, 'prototype'
    v44 <- GetProperty v43, 'toString'
    v45 <- CallMethod v44, 'call', [v38]
EndPlainFunction
v46 <- CallFunction v7, []
v47 <- BeginPlainFunction -> 
    v48 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v49 <- LoadInteger '1024'
    v50 <- Construct v48, [v49]
    v51 <- CreateNamedVariable 'ab', 'var', v50
    v52 <- LoadInteger '1024'
    v53 <- GetProperty v51, 'byteLength'
    v54 <- BeginPlainFunction -> 
        Directive 'use strict'
        v55 <- LoadInteger '42'
        SetProperty v51, 'byteLength', v55
    EndPlainFunction
    v56 <- CallFunction v54, []
    v57 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v58 <- CallFunction v47, []
v59 <- BeginPlainFunction -> v60, v61, v62, v63
    v64 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v65 <- Construct v64, [v61]
    v66 <- CreateNamedVariable 'ab', 'var', v65
    v67 <- CreateNamedVariable 'Uint8Array', 'none'
    v68 <- Construct v67, [v66]
    v69 <- CreateNamedVariable 'a1', 'var', v68
    BeginForLoopInitializer
        v70 <- LoadInteger '0'
    BeginForLoopCondition -> v71
        v72 <- GetProperty v69, 'length'
        v73 <- Compare v71, '<', v72
    BeginForLoopAfterthought v73 -> v74
        v75 <- UnaryOperation v74, '++'
    BeginForLoopBody -> v76
        v77 <- LoadInteger '202'
        SetComputedProperty v69, v76, v77
    EndForLoop
    v78 <- CallMethod v66, 'slice', [v62, v63]
    v79 <- CreateNamedVariable 'slice', 'var', v78
    v80 <- GetProperty v79, 'byteLength'
    v81 <- Construct v67, [v79]
    v82 <- CreateNamedVariable 'a2', 'var', v81
    BeginForLoopInitializer
        v83 <- LoadInteger '0'
    BeginForLoopCondition -> v84
        v85 <- GetProperty v82, 'length'
        v86 <- Compare v84, '<', v85
    BeginForLoopAfterthought v86 -> v87
        v88 <- UnaryOperation v87, '++'
    BeginForLoopBody -> v89
        v90 <- LoadInteger '202'
        v91 <- GetComputedProperty v82, v89
    EndForLoop
EndPlainFunction
v92 <- BeginPlainFunction -> 
    v93 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v94 <- LoadInteger '1024'
    v95 <- Construct v93, [v94]
    v96 <- CreateNamedVariable 'ab', 'var', v95
    v97 <- LoadInteger '512'
    v98 <- LoadInteger '1024'
    v99 <- CallMethod v96, 'slice', [v97, v98]
    v100 <- CreateNamedVariable 'ab1', 'var', v99
    v101 <- LoadInteger '512'
    v102 <- GetProperty v100, 'byteLength'
    v103 <- LoadInteger '512'
    v104 <- LoadInteger '1024'
    v105 <- LoadInteger '512'
    v106 <- LoadInteger '1024'
    v107 <- CallFunction v59, [v103, v104, v105, v106]
    v108 <- LoadInteger '512'
    v109 <- LoadInteger '1024'
    v110 <- LoadInteger '512'
    v111 <- CallFunction v59, [v108, v109, v110]
    v112 <- LoadInteger '0'
    v113 <- LoadInteger '0'
    v114 <- LoadInteger '1'
    v115 <- LoadInteger '20'
    v116 <- CallFunction v59, [v112, v113, v114, v115]
    v117 <- LoadInteger '100'
    v118 <- LoadInteger '100'
    v119 <- LoadInteger '0'
    v120 <- LoadInteger '100'
    v121 <- CallFunction v59, [v117, v118, v119, v120]
    v122 <- LoadInteger '100'
    v123 <- LoadInteger '100'
    v124 <- LoadInteger '0'
    v125 <- LoadInteger '1000'
    v126 <- CallFunction v59, [v122, v123, v124, v125]
    v127 <- LoadInteger '0'
    v128 <- LoadInteger '100'
    v129 <- LoadInteger '5'
    v130 <- LoadInteger '1'
    v131 <- CallFunction v59, [v127, v128, v129, v130]
    v132 <- LoadInteger '1'
    v133 <- LoadInteger '100'
    v134 <- LoadInteger '11'
    v135 <- UnaryOperation '-', v134
    v136 <- LoadInteger '10'
    v137 <- UnaryOperation '-', v136
    v138 <- CallFunction v59, [v132, v133, v135, v137]
    v139 <- LoadInteger '9'
    v140 <- LoadInteger '100'
    v141 <- LoadInteger '10'
    v142 <- UnaryOperation '-', v141
    v143 <- LoadInteger '99'
    v144 <- CallFunction v59, [v139, v140, v142, v143]
    v145 <- LoadInteger '0'
    v146 <- LoadInteger '100'
    v147 <- LoadInteger '10'
    v148 <- UnaryOperation '-', v147
    v149 <- LoadInteger '80'
    v150 <- CallFunction v59, [v145, v146, v148, v149]
    v151 <- LoadInteger '10'
    v152 <- LoadInteger '100'
    v153 <- LoadInteger '80'
    v154 <- LoadInteger '10'
    v155 <- UnaryOperation '-', v154
    v156 <- CallFunction v59, [v151, v152, v153, v155]
    v157 <- LoadInteger '10'
    v158 <- LoadInteger '100'
    v159 <- LoadInteger '90'
    v160 <- LoadString '100'
    v161 <- CallFunction v59, [v157, v158, v159, v160]
    v162 <- LoadInteger '10'
    v163 <- LoadInteger '100'
    v164 <- LoadString '90'
    v165 <- LoadString '100'
    v166 <- CallFunction v59, [v162, v163, v164, v165]
    v167 <- LoadInteger '0'
    v168 <- LoadInteger '100'
    v169 <- LoadInteger '90'
    v170 <- LoadString 'abc'
    v171 <- CallFunction v59, [v167, v168, v169, v170]
    v172 <- LoadInteger '10'
    v173 <- LoadInteger '100'
    v174 <- LoadString 'abc'
    v175 <- LoadInteger '10'
    v176 <- CallFunction v59, [v172, v173, v174, v175]
    v177 <- LoadInteger '10'
    v178 <- LoadInteger '100'
    v179 <- LoadFloat '0.96'
    v180 <- LoadFloat '10.96'
    v181 <- CallFunction v59, [v177, v178, v179, v180]
    v182 <- LoadInteger '10'
    v183 <- LoadInteger '100'
    v184 <- LoadFloat '0.96'
    v185 <- LoadFloat '10.01'
    v186 <- CallFunction v59, [v182, v183, v184, v185]
    v187 <- LoadInteger '10'
    v188 <- LoadInteger '100'
    v189 <- LoadFloat '0.01'
    v190 <- LoadFloat '10.01'
    v191 <- CallFunction v59, [v187, v188, v189, v190]
    v192 <- LoadInteger '10'
    v193 <- LoadInteger '100'
    v194 <- LoadFloat '0.01'
    v195 <- LoadFloat '10.96'
    v196 <- CallFunction v59, [v192, v193, v194, v195]
    v197 <- LoadInteger '10'
    v198 <- LoadInteger '100'
    v199 <- LoadInteger '90'
    v200 <- CallFunction v59, [v197, v198, v199]
    v201 <- LoadInteger '10'
    v202 <- LoadInteger '100'
    v203 <- LoadInteger '10'
    v204 <- UnaryOperation '-', v203
    v205 <- CallFunction v59, [v201, v202, v204]
EndPlainFunction
v206 <- CallFunction v92, []
v207 <- BeginPlainFunction -> v208, v209, v210
    v211 <- GetProperty v208, 'BYTES_PER_ELEMENT'
    v212 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v213 <- LoadInteger '256'
    v214 <- BinaryOperation v213, '*', v209
    v215 <- Construct v212, [v214]
    v216 <- CreateNamedVariable 'ab', 'var', v215
    v217 <- LoadInteger '30'
    v218 <- Construct v208, [v217]
    v219 <- CreateNamedVariable 'a0', 'var', v218
    v220 <- LoadString '[object '
    v221 <- GetProperty v208, 'name'
    v222 <- BinaryOperation v220, '+', v221
    v223 <- LoadString ']'
    v224 <- BinaryOperation v222, '+', v223
    v225 <- CreateNamedVariable 'Object', 'none'
    v226 <- GetProperty v225, 'prototype'
    v227 <- GetProperty v226, 'toString'
    v228 <- CallMethod v227, 'call', [v219]
    v229 <- CallMethod v212, 'isView', [v219]
    v230 <- GetProperty v219, 'BYTES_PER_ELEMENT'
    v231 <- LoadInteger '30'
    v232 <- GetProperty v219, 'length'
    v233 <- LoadInteger '30'
    v234 <- BinaryOperation v233, '*', v209
    v235 <- GetProperty v219, 'byteLength'
    v236 <- LoadInteger '0'
    v237 <- GetProperty v219, 'byteOffset'
    v238 <- LoadInteger '30'
    v239 <- BinaryOperation v238, '*', v209
    v240 <- GetProperty v219, 'buffer'
    v241 <- GetProperty v240, 'byteLength'
    v242 <- LoadInteger '0'
    v243 <- Construct v208, [v242]
    v244 <- CreateNamedVariable 'aLen0', 'var', v243
    v245 <- GetProperty v244, 'BYTES_PER_ELEMENT'
    v246 <- LoadInteger '0'
    v247 <- GetProperty v244, 'length'
    v248 <- LoadInteger '0'
    v249 <- GetProperty v244, 'byteLength'
    v250 <- LoadInteger '0'
    v251 <- GetProperty v244, 'byteOffset'
    v252 <- LoadInteger '0'
    v253 <- GetProperty v244, 'buffer'
    v254 <- GetProperty v253, 'byteLength'
    v255 <- LoadInteger '128'
    v256 <- BinaryOperation v255, '*', v209
    v257 <- LoadInteger '0'
    v258 <- Construct v208, [v216, v256, v257]
    v259 <- CreateNamedVariable 'aOverBufferLen0', 'var', v258
    v260 <- GetProperty v259, 'buffer'
    v261 <- GetProperty v259, 'BYTES_PER_ELEMENT'
    v262 <- LoadInteger '0'
    v263 <- GetProperty v259, 'length'
    v264 <- LoadInteger '0'
    v265 <- GetProperty v259, 'byteLength'
    v266 <- LoadInteger '128'
    v267 <- BinaryOperation v266, '*', v209
    v268 <- GetProperty v259, 'byteOffset'
    v269 <- LoadInteger '128'
    v270 <- BinaryOperation v269, '*', v209
    v271 <- LoadInteger '128'
    v272 <- Construct v208, [v216, v270, v271]
    v273 <- CreateNamedVariable 'a1', 'var', v272
    v274 <- GetProperty v273, 'buffer'
    v275 <- GetProperty v273, 'BYTES_PER_ELEMENT'
    v276 <- LoadInteger '128'
    v277 <- GetProperty v273, 'length'
    v278 <- LoadInteger '128'
    v279 <- BinaryOperation v278, '*', v209
    v280 <- GetProperty v273, 'byteLength'
    v281 <- LoadInteger '128'
    v282 <- BinaryOperation v281, '*', v209
    v283 <- GetProperty v273, 'byteOffset'
    v284 <- LoadInteger '64'
    v285 <- BinaryOperation v284, '*', v209
    v286 <- LoadInteger '128'
    v287 <- Construct v208, [v216, v285, v286]
    v288 <- CreateNamedVariable 'a2', 'var', v287
    v289 <- GetProperty v288, 'buffer'
    v290 <- GetProperty v288, 'BYTES_PER_ELEMENT'
    v291 <- LoadInteger '128'
    v292 <- GetProperty v288, 'length'
    v293 <- LoadInteger '128'
    v294 <- BinaryOperation v293, '*', v209
    v295 <- GetProperty v288, 'byteLength'
    v296 <- LoadInteger '64'
    v297 <- BinaryOperation v296, '*', v209
    v298 <- GetProperty v288, 'byteOffset'
    v299 <- LoadInteger '192'
    v300 <- BinaryOperation v299, '*', v209
    v301 <- Construct v208, [v216, v300]
    v302 <- CreateNamedVariable 'a3', 'var', v301
    v303 <- GetProperty v302, 'buffer'
    v304 <- LoadInteger '64'
    v305 <- GetProperty v302, 'length'
    v306 <- LoadInteger '64'
    v307 <- BinaryOperation v306, '*', v209
    v308 <- GetProperty v302, 'byteLength'
    v309 <- LoadInteger '192'
    v310 <- BinaryOperation v309, '*', v209
    v311 <- GetProperty v302, 'byteOffset'
    v312 <- Construct v208, [v216]
    v313 <- CreateNamedVariable 'a4', 'var', v312
    v314 <- GetProperty v313, 'buffer'
    v315 <- LoadInteger '256'
    v316 <- GetProperty v313, 'length'
    v317 <- LoadInteger '256'
    v318 <- BinaryOperation v317, '*', v209
    v319 <- GetProperty v313, 'byteLength'
    v320 <- LoadInteger '0'
    v321 <- GetProperty v313, 'byteOffset'
    v322 <- LoadUndefined
    v323 <- CreateNamedVariable 'i', 'var', v322
    BeginForLoopInitializer
        v324 <- LoadInteger '0'
        Reassign v323, v324
    BeginForLoopCondition
        v325 <- LoadInteger '128'
        v326 <- Compare v323, '<', v325
    BeginForLoopAfterthought v326
        v327 <- UnaryOperation v323, '++'
    BeginForLoopBody
        SetComputedProperty v273, v323, v210
    EndForLoop
    BeginForLoopInitializer
        v328 <- LoadInteger '0'
        Reassign v323, v328
    BeginForLoopCondition
        v329 <- LoadInteger '128'
        v330 <- Compare v323, '<', v329
    BeginForLoopAfterthought v330
        v331 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v332 <- GetComputedProperty v273, v323
    EndForLoop
    BeginForLoopInitializer
        v333 <- LoadInteger '0'
        Reassign v323, v333
    BeginForLoopCondition
        v334 <- LoadInteger '64'
        v335 <- Compare v323, '<', v334
    BeginForLoopAfterthought v335
        v336 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v337 <- LoadInteger '0'
        v338 <- GetComputedProperty v288, v323
    EndForLoop
    BeginForLoopInitializer
        v339 <- LoadInteger '64'
        Reassign v323, v339
    BeginForLoopCondition
        v340 <- LoadInteger '128'
        v341 <- Compare v323, '<', v340
    BeginForLoopAfterthought v341
        v342 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v343 <- GetComputedProperty v288, v323
    EndForLoop
    BeginForLoopInitializer
        v344 <- LoadInteger '0'
        Reassign v323, v344
    BeginForLoopCondition
        v345 <- LoadInteger '64'
        v346 <- Compare v323, '<', v345
    BeginForLoopAfterthought v346
        v347 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v348 <- GetComputedProperty v302, v323
    EndForLoop
    BeginForLoopInitializer
        v349 <- LoadInteger '0'
        Reassign v323, v349
    BeginForLoopCondition
        v350 <- LoadInteger '128'
        v351 <- Compare v323, '<', v350
    BeginForLoopAfterthought v351
        v352 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v353 <- LoadInteger '0'
        v354 <- GetComputedProperty v313, v323
    EndForLoop
    BeginForLoopInitializer
        v355 <- LoadInteger '128'
        Reassign v323, v355
    BeginForLoopCondition
        v356 <- LoadInteger '256'
        v357 <- Compare v323, '<', v356
    BeginForLoopAfterthought v357
        v358 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v359 <- GetComputedProperty v313, v323
    EndForLoop
    v360 <- LoadInteger '256'
    v361 <- BinaryOperation v360, '*', v209
    v362 <- Construct v208, [v216, v361]
    v363 <- CreateNamedVariable 'aAtTheEnd', 'var', v362
    v364 <- GetProperty v363, 'BYTES_PER_ELEMENT'
    v365 <- LoadInteger '0'
    v366 <- GetProperty v363, 'length'
    v367 <- LoadInteger '0'
    v368 <- GetProperty v363, 'byteLength'
    v369 <- LoadInteger '256'
    v370 <- BinaryOperation v369, '*', v209
    v371 <- GetProperty v363, 'byteOffset'
    v372 <- BeginPlainFunction -> 
        v373 <- LoadInteger '257'
        v374 <- BinaryOperation v373, '*', v209
        v375 <- Construct v208, [v216, v374]
    EndPlainFunction
    v376 <- CallFunction v372, []
    v377 <- CreateNamedVariable 'RangeError', 'none'
    v378 <- BeginPlainFunction -> 
        v379 <- LoadInteger '128'
        v380 <- BinaryOperation v379, '*', v209
        v381 <- LoadInteger '192'
        v382 <- Construct v208, [v216, v380, v381]
    EndPlainFunction
    v383 <- CallFunction v378, []
    v384 <- LoadInteger '1'
    v385 <- Compare v209, '!==', v384
    BeginIf v385
        v386 <- BeginPlainFunction -> 
            v387 <- LoadInteger '128'
            v388 <- BinaryOperation v387, '*', v209
            v389 <- LoadInteger '1'
            v390 <- BinaryOperation v388, '-', v389
            v391 <- LoadInteger '10'
            v392 <- Construct v208, [v216, v390, v391]
        EndPlainFunction
        v393 <- CallFunction v386, []
        v394 <- LoadInteger '10'
        v395 <- BinaryOperation v394, '*', v209
        v396 <- LoadInteger '1'
        v397 <- BinaryOperation v395, '+', v396
        v398 <- Construct v212, [v397]
        v399 <- CreateNamedVariable 'unalignedArrayBuffer', 'var', v398
        v400 <- LoadInteger '0'
        v401 <- LoadInteger '10'
        v402 <- Construct v208, [v399, v400, v401]
        v403 <- CreateNamedVariable 'goodArray', 'var', v402
        v404 <- LoadInteger '10'
        v405 <- GetProperty v403, 'length'
        v406 <- LoadInteger '10'
        v407 <- BinaryOperation v406, '*', v209
        v408 <- GetProperty v403, 'byteLength'
        v409 <- BeginPlainFunction -> 
            v410 <- Construct v208, [v399]
        EndPlainFunction
        v411 <- CallFunction v409, []
        v412 <- BeginPlainFunction -> 
            v413 <- LoadInteger '5'
            v414 <- BinaryOperation v413, '*', v209
            v415 <- Construct v208, [v399, v414]
        EndPlainFunction
        v416 <- CallFunction v412, []
    EndIf
    v417 <- Construct v208, []
    v418 <- CreateNamedVariable 'aFromUndef', 'var', v417
    v419 <- GetProperty v418, 'BYTES_PER_ELEMENT'
    v420 <- LoadInteger '0'
    v421 <- GetProperty v418, 'length'
    v422 <- LoadInteger '0'
    v423 <- BinaryOperation v422, '*', v209
    v424 <- GetProperty v418, 'byteLength'
    v425 <- LoadInteger '0'
    v426 <- GetProperty v418, 'byteOffset'
    v427 <- LoadInteger '0'
    v428 <- BinaryOperation v427, '*', v209
    v429 <- GetProperty v418, 'buffer'
    v430 <- GetProperty v429, 'byteLength'
    v431 <- LoadNull
    v432 <- Construct v208, [v431]
    v433 <- CreateNamedVariable 'aFromNull', 'var', v432
    v434 <- GetProperty v433, 'BYTES_PER_ELEMENT'
    v435 <- LoadInteger '0'
    v436 <- GetProperty v433, 'length'
    v437 <- LoadInteger '0'
    v438 <- BinaryOperation v437, '*', v209
    v439 <- GetProperty v433, 'byteLength'
    v440 <- LoadInteger '0'
    v441 <- GetProperty v433, 'byteOffset'
    v442 <- LoadInteger '0'
    v443 <- BinaryOperation v442, '*', v209
    v444 <- GetProperty v433, 'buffer'
    v445 <- GetProperty v444, 'byteLength'
    v446 <- LoadBoolean 'true'
    v447 <- Construct v208, [v446]
    v448 <- CreateNamedVariable 'aFromBool', 'var', v447
    v449 <- GetProperty v448, 'BYTES_PER_ELEMENT'
    v450 <- LoadInteger '1'
    v451 <- GetProperty v448, 'length'
    v452 <- LoadInteger '1'
    v453 <- BinaryOperation v452, '*', v209
    v454 <- GetProperty v448, 'byteLength'
    v455 <- LoadInteger '0'
    v456 <- GetProperty v448, 'byteOffset'
    v457 <- LoadInteger '1'
    v458 <- BinaryOperation v457, '*', v209
    v459 <- GetProperty v448, 'buffer'
    v460 <- GetProperty v459, 'byteLength'
    v461 <- LoadString '30'
    v462 <- Construct v208, [v461]
    v463 <- CreateNamedVariable 'aFromString', 'var', v462
    v464 <- GetProperty v463, 'BYTES_PER_ELEMENT'
    v465 <- LoadInteger '30'
    v466 <- GetProperty v463, 'length'
    v467 <- LoadInteger '30'
    v468 <- BinaryOperation v467, '*', v209
    v469 <- GetProperty v463, 'byteLength'
    v470 <- LoadInteger '0'
    v471 <- GetProperty v463, 'byteOffset'
    v472 <- LoadInteger '30'
    v473 <- BinaryOperation v472, '*', v209
    v474 <- GetProperty v463, 'buffer'
    v475 <- GetProperty v474, 'byteLength'
    v476 <- BeginPlainFunction -> 
        v477 <- CreateNamedVariable 'Symbol', 'none'
        v478 <- CallFunction v477, []
        v479 <- Construct v208, [v478]
    EndPlainFunction
    v480 <- CallFunction v476, []
    v481 <- CreateNamedVariable 'TypeError', 'none'
    v482 <- CreateArray []
    v483 <- CreateNamedVariable 'jsArray', 'var', v482
    BeginForLoopInitializer
        v484 <- LoadInteger '0'
        Reassign v323, v484
    BeginForLoopCondition
        v485 <- LoadInteger '30'
        v486 <- Compare v323, '<', v485
    BeginForLoopAfterthought v486
        v487 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v488 <- CallMethod v483, 'push', [v210]
    EndForLoop
    v489 <- Construct v208, [v483]
    v490 <- CreateNamedVariable 'aFromArray', 'var', v489
    v491 <- GetProperty v490, 'BYTES_PER_ELEMENT'
    v492 <- LoadInteger '30'
    v493 <- GetProperty v490, 'length'
    v494 <- LoadInteger '30'
    v495 <- BinaryOperation v494, '*', v209
    v496 <- GetProperty v490, 'byteLength'
    v497 <- LoadInteger '0'
    v498 <- GetProperty v490, 'byteOffset'
    v499 <- LoadInteger '30'
    v500 <- BinaryOperation v499, '*', v209
    v501 <- GetProperty v490, 'buffer'
    v502 <- GetProperty v501, 'byteLength'
    BeginForLoopInitializer
        v503 <- LoadInteger '0'
        Reassign v323, v503
    BeginForLoopCondition
        v504 <- LoadInteger '30'
        v505 <- Compare v323, '<', v504
    BeginForLoopAfterthought v505
        v506 <- UnaryOperation v323, '++'
    BeginForLoopBody
        v507 <- GetComputedProperty v490, v323
    EndForLoop
    v508 <- LoadInteger '0'
    v509 <- Construct v212, [v508]
    v510 <- CreateNamedVariable 'abLen0', 'var', v509
    v511 <- Construct v208, [v510]
    v512 <- CreateNamedVariable 'aOverAbLen0', 'var', v511
    v513 <- GetProperty v512, 'buffer'
    v514 <- GetProperty v512, 'BYTES_PER_ELEMENT'
    v515 <- LoadInteger '0'
    v516 <- GetProperty v512, 'length'
    v517 <- LoadInteger '0'
    v518 <- GetProperty v512, 'byteLength'
    v519 <- LoadInteger '0'
    v520 <- GetProperty v512, 'byteOffset'
    v521 <- Construct v208, []
    v522 <- CreateNamedVariable 'aNoParam', 'var', v521
    v523 <- GetProperty v522, 'BYTES_PER_ELEMENT'
    v524 <- LoadInteger '0'
    v525 <- GetProperty v522, 'length'
    v526 <- LoadInteger '0'
    v527 <- GetProperty v522, 'byteLength'
    v528 <- LoadInteger '0'
    v529 <- GetProperty v522, 'byteOffset'
    v530 <- LoadInteger '64'
    v531 <- BinaryOperation v530, '*', v209
    v532 <- LoadInteger '128'
    v533 <- Construct v208, [v216, v531, v532]
    v534 <- CreateNamedVariable 'a', 'var', v533
    v535 <- LoadString '[object '
    v536 <- GetProperty v208, 'name'
    v537 <- BinaryOperation v535, '+', v536
    v538 <- LoadString ']'
    v539 <- BinaryOperation v537, '+', v538
    v540 <- GetProperty v225, 'prototype'
    v541 <- GetProperty v540, 'toString'
    v542 <- CallMethod v541, 'call', [v534]
    v543 <- GetProperty v208, 'prototype'
    v544 <- GetProperty v543, '__proto__'
    v545 <- CreateNamedVariable 'Symbol', 'none'
    v546 <- GetProperty v545, 'toStringTag'
    v547 <- CallMethod v225, 'getOwnPropertyDescriptor', [v544, v546]
    v548 <- CreateNamedVariable 'desc', 'var', v547
    v549 <- GetProperty v548, 'configurable'
    v550 <- GetProperty v548, 'enumerable'
    v551 <- GetProperty v548, 'writable'
    v552 <- UnaryOperation '!', v551
    v553 <- UnaryOperation '!', v552
    v554 <- GetProperty v548, 'set'
    v555 <- UnaryOperation '!', v554
    v556 <- UnaryOperation '!', v555
    v557 <- LoadString 'function'
    v558 <- GetProperty v548, 'get'
    v559 <- TypeOf v558
    v560 <- BeginGeneratorFunction -> 
        BeginForLoopInitializer
            v561 <- LoadInteger '0'
        BeginForLoopCondition -> v562
            v563 <- LoadInteger '10'
            v564 <- Compare v562, '<', v563
        BeginForLoopAfterthought v564 -> v565
            v566 <- UnaryOperation v565, '++'
        BeginForLoopBody -> v567
            v568 <- Yield v567
        EndForLoop
    EndGeneratorFunction
    v569 <- CreateNamedVariable 'gen', 'none'
    v570 <- CallFunction v569, []
    v571 <- Construct v208, [v570]
    v572 <- CreateNamedVariable 'genArr', 'var', v571
    v573 <- LoadInteger '10'
    v574 <- GetProperty v572, 'length'
    v575 <- LoadInteger '0'
    v576 <- GetElement v572, '0'
    v577 <- LoadInteger '9'
    v578 <- GetElement v572, '9'
    v579 <- LoadInteger '1'
    v580 <- LoadInteger '2'
    v581 <- LoadInteger '3'
    v582 <- CreateArray [v579, v580, v581]
    v583 <- Construct v208, [v582]
    Reassign v572, v583
    v584 <- LoadInteger '3'
    v585 <- GetProperty v572, 'length'
    v586 <- LoadInteger '1'
    v587 <- GetElement v572, '0'
    v588 <- LoadInteger '3'
    v589 <- GetElement v572, '2'
    v590 <- CreateNamedVariable 'Array', 'none'
    v591 <- GetProperty v590, 'prototype'
    v592 <- GetProperty v545, 'iterator'
    v593 <- GetComputedProperty v591, v592
    v594 <- CreateNamedVariable 'arrayIterator', 'var', v593
    v595 <- GetProperty v590, 'prototype'
    v596 <- GetProperty v545, 'iterator'
    SetComputedProperty v595, v596, v569
    v597 <- LoadInteger '1'
    v598 <- LoadInteger '2'
    v599 <- LoadInteger '3'
    v600 <- CreateArray [v597, v598, v599]
    v601 <- Construct v208, [v600]
    Reassign v572, v601
    v602 <- LoadInteger '10'
    v603 <- GetProperty v572, 'length'
    v604 <- LoadInteger '0'
    v605 <- GetElement v572, '0'
    v606 <- LoadInteger '9'
    v607 <- GetElement v572, '9'
    v608 <- GetProperty v590, 'prototype'
    v609 <- GetProperty v545, 'iterator'
    SetComputedProperty v608, v609, v594
    v610 <- LoadInteger '5'
    v611 <- LoadInteger '6'
    v612 <- LoadInteger '2'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v610
        ObjectLiteralAddElement `1`, v611
        ObjectLiteralAddProperty `length`, v612
    v613 <- EndObjectLiteral
    v614 <- CreateNamedVariable 'myObject', 'var', v613
    v615 <- Construct v208, [v614]
    Reassign v572, v615
    v616 <- LoadInteger '2'
    v617 <- GetProperty v572, 'length'
    v618 <- LoadInteger '5'
    v619 <- GetElement v572, '0'
    v620 <- LoadInteger '6'
    v621 <- GetElement v572, '1'
    v622 <- LoadInteger '0'
    v623 <- CreateNamedVariable 'iteratorReadCount', 'var', v622
    v624 <- GetProperty v545, 'iterator'
    v625 <- BeginPlainFunction -> 
        v626 <- UnaryOperation v623, '++'
        Return v569
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v625
    v627 <- EndObjectLiteral
    v628 <- CallMethod v225, 'defineProperty', [v614, v624, v627]
    v629 <- Construct v208, [v614]
    Reassign v572, v629
    v630 <- LoadInteger '10'
    v631 <- GetProperty v572, 'length'
    v632 <- LoadInteger '0'
    v633 <- GetElement v572, '0'
    v634 <- LoadInteger '9'
    v635 <- GetElement v572, '9'
    v636 <- LoadInteger '1'
EndPlainFunction
v637 <- CreateNamedVariable 'Uint8Array', 'none'
v638 <- LoadInteger '1'
v639 <- LoadInteger '255'
v640 <- CallFunction v207, [v637, v638, v639]
v641 <- CreateNamedVariable 'Int8Array', 'none'
v642 <- LoadInteger '1'
v643 <- LoadInteger '127'
v644 <- UnaryOperation '-', v643
v645 <- CallFunction v207, [v641, v642, v644]
v646 <- CreateNamedVariable 'Uint16Array', 'none'
v647 <- LoadInteger '2'
v648 <- LoadInteger '65535'
v649 <- CallFunction v207, [v646, v647, v648]
v650 <- CreateNamedVariable 'Int16Array', 'none'
v651 <- LoadInteger '2'
v652 <- LoadInteger '32767'
v653 <- UnaryOperation '-', v652
v654 <- CallFunction v207, [v650, v651, v653]
v655 <- CreateNamedVariable 'Uint32Array', 'none'
v656 <- LoadInteger '4'
v657 <- LoadInteger '4294967295'
v658 <- CallFunction v207, [v655, v656, v657]
v659 <- CreateNamedVariable 'Int32Array', 'none'
v660 <- LoadInteger '4'
v661 <- LoadInteger '2147483647'
v662 <- UnaryOperation '-', v661
v663 <- CallFunction v207, [v659, v660, v662]
v664 <- CreateNamedVariable 'Float32Array', 'none'
v665 <- LoadInteger '4'
v666 <- LoadFloat '0.5'
v667 <- CallFunction v207, [v664, v665, v666]
v668 <- CreateNamedVariable 'Float64Array', 'none'
v669 <- LoadInteger '8'
v670 <- LoadFloat '0.5'
v671 <- CallFunction v207, [v668, v669, v670]
v672 <- CreateNamedVariable 'Uint8ClampedArray', 'none'
v673 <- LoadInteger '1'
v674 <- LoadInteger '255'
v675 <- CallFunction v207, [v672, v673, v674]
v676 <- BeginPlainFunction -> v677, v678, v679, v680, v681, v682, v683
    v684 <- Construct v677, [v681]
    v685 <- CreateNamedVariable 'a', 'var', v684
    v686 <- CallMethod v685, 'subarray', [v682, v683]
    v687 <- CreateNamedVariable 's', 'var', v686
    v688 <- GetProperty v687, 'constructor'
    v689 <- GetProperty v687, 'length'
    v690 <- GetProperty v687, 'length'
    v691 <- LoadInteger '0'
    v692 <- Compare v690, '>', v691
    BeginIf v692
        SetElement v687, '0', v678
        v693 <- GetComputedProperty v685, v680
    EndIf
EndPlainFunction
v694 <- BeginPlainFunction -> v695, v696
    v697 <- LoadInteger '512'
    v698 <- LoadInteger '512'
    v699 <- LoadInteger '1024'
    v700 <- LoadInteger '512'
    v701 <- LoadInteger '1024'
    v702 <- CallFunction v676, [v695, v696, v697, v698, v699, v700, v701]
    v703 <- LoadInteger '512'
    v704 <- LoadInteger '512'
    v705 <- LoadInteger '1024'
    v706 <- LoadInteger '512'
    v707 <- CallFunction v676, [v695, v696, v703, v704, v705, v706]
    v708 <- LoadInteger '0'
    v709 <- LoadUndefined
    v710 <- LoadInteger '0'
    v711 <- LoadInteger '1'
    v712 <- LoadInteger '20'
    v713 <- CallFunction v676, [v695, v696, v708, v709, v710, v711, v712]
    v714 <- LoadInteger '100'
    v715 <- LoadInteger '0'
    v716 <- LoadInteger '100'
    v717 <- LoadInteger '0'
    v718 <- LoadInteger '100'
    v719 <- CallFunction v676, [v695, v696, v714, v715, v716, v717, v718]
    v720 <- LoadInteger '100'
    v721 <- LoadInteger '0'
    v722 <- LoadInteger '100'
    v723 <- LoadInteger '0'
    v724 <- LoadInteger '1000'
    v725 <- CallFunction v676, [v695, v696, v720, v721, v722, v723, v724]
    v726 <- LoadInteger '0'
    v727 <- LoadUndefined
    v728 <- LoadInteger '100'
    v729 <- LoadInteger '5'
    v730 <- LoadInteger '1'
    v731 <- CallFunction v676, [v695, v696, v726, v727, v728, v729, v730]
    v732 <- LoadInteger '1'
    v733 <- LoadInteger '89'
    v734 <- LoadInteger '100'
    v735 <- LoadInteger '11'
    v736 <- UnaryOperation '-', v735
    v737 <- LoadInteger '10'
    v738 <- UnaryOperation '-', v737
    v739 <- CallFunction v676, [v695, v696, v732, v733, v734, v736, v738]
    v740 <- LoadInteger '9'
    v741 <- LoadInteger '90'
    v742 <- LoadInteger '100'
    v743 <- LoadInteger '10'
    v744 <- UnaryOperation '-', v743
    v745 <- LoadInteger '99'
    v746 <- CallFunction v676, [v695, v696, v740, v741, v742, v744, v745]
    v747 <- LoadInteger '0'
    v748 <- LoadUndefined
    v749 <- LoadInteger '100'
    v750 <- LoadInteger '10'
    v751 <- UnaryOperation '-', v750
    v752 <- LoadInteger '80'
    v753 <- CallFunction v676, [v695, v696, v747, v748, v749, v751, v752]
    v754 <- LoadInteger '10'
    v755 <- LoadInteger '80'
    v756 <- LoadInteger '100'
    v757 <- LoadInteger '80'
    v758 <- LoadInteger '10'
    v759 <- UnaryOperation '-', v758
    v760 <- CallFunction v676, [v695, v696, v754, v755, v756, v757, v759]
    v761 <- LoadInteger '10'
    v762 <- LoadInteger '90'
    v763 <- LoadInteger '100'
    v764 <- LoadInteger '90'
    v765 <- LoadString '100'
    v766 <- CallFunction v676, [v695, v696, v761, v762, v763, v764, v765]
    v767 <- LoadInteger '10'
    v768 <- LoadInteger '90'
    v769 <- LoadInteger '100'
    v770 <- LoadString '90'
    v771 <- LoadString '100'
    v772 <- CallFunction v676, [v695, v696, v767, v768, v769, v770, v771]
    v773 <- LoadInteger '0'
    v774 <- LoadUndefined
    v775 <- LoadInteger '100'
    v776 <- LoadInteger '90'
    v777 <- LoadString 'abc'
    v778 <- CallFunction v676, [v695, v696, v773, v774, v775, v776, v777]
    v779 <- LoadInteger '10'
    v780 <- LoadInteger '0'
    v781 <- LoadInteger '100'
    v782 <- LoadString 'abc'
    v783 <- LoadInteger '10'
    v784 <- CallFunction v676, [v695, v696, v779, v780, v781, v782, v783]
    v785 <- LoadInteger '10'
    v786 <- LoadInteger '0'
    v787 <- LoadInteger '100'
    v788 <- LoadFloat '0.96'
    v789 <- LoadFloat '10.96'
    v790 <- CallFunction v676, [v695, v696, v785, v786, v787, v788, v789]
    v791 <- LoadInteger '10'
    v792 <- LoadInteger '0'
    v793 <- LoadInteger '100'
    v794 <- LoadFloat '0.96'
    v795 <- LoadFloat '10.01'
    v796 <- CallFunction v676, [v695, v696, v791, v792, v793, v794, v795]
    v797 <- LoadInteger '10'
    v798 <- LoadInteger '0'
    v799 <- LoadInteger '100'
    v800 <- LoadFloat '0.01'
    v801 <- LoadFloat '10.01'
    v802 <- CallFunction v676, [v695, v696, v797, v798, v799, v800, v801]
    v803 <- LoadInteger '10'
    v804 <- LoadInteger '0'
    v805 <- LoadInteger '100'
    v806 <- LoadFloat '0.01'
    v807 <- LoadFloat '10.96'
    v808 <- CallFunction v676, [v695, v696, v803, v804, v805, v806, v807]
    v809 <- LoadInteger '10'
    v810 <- LoadInteger '90'
    v811 <- LoadInteger '100'
    v812 <- LoadInteger '90'
    v813 <- CallFunction v676, [v695, v696, v809, v810, v811, v812]
    v814 <- LoadInteger '10'
    v815 <- LoadInteger '90'
    v816 <- LoadInteger '100'
    v817 <- LoadInteger '10'
    v818 <- UnaryOperation '-', v817
    v819 <- CallFunction v676, [v695, v696, v814, v815, v816, v818]
    v820 <- GetProperty v695, 'prototype'
    v821 <- GetProperty v820, 'subarray'
    v822 <- CreateNamedVariable 'method', 'var', v821
    v823 <- LoadInteger '100'
    v824 <- Construct v695, [v823]
    v825 <- LoadInteger '0'
    v826 <- LoadInteger '100'
    v827 <- CallMethod v822, 'call', [v824, v825, v826]
    BeginObjectLiteral
    v828 <- EndObjectLiteral
    v829 <- CreateNamedVariable 'o', 'var', v828
    v830 <- BeginPlainFunction -> 
        v831 <- LoadInteger '0'
        v832 <- LoadInteger '100'
        v833 <- CallMethod v822, 'call', [v829, v831, v832]
    EndPlainFunction
    v834 <- CallFunction v830, []
    v835 <- CreateNamedVariable 'TypeError', 'none'
EndPlainFunction
v836 <- LoadInteger '255'
v837 <- CallFunction v694, [v637, v836]
v838 <- LoadInteger '127'
v839 <- UnaryOperation '-', v838
v840 <- CallFunction v694, [v641, v839]
v841 <- LoadInteger '65535'
v842 <- CallFunction v694, [v646, v841]
v843 <- LoadInteger '32767'
v844 <- UnaryOperation '-', v843
v845 <- CallFunction v694, [v650, v844]
v846 <- LoadInteger '4294967295'
v847 <- CallFunction v694, [v655, v846]
v848 <- LoadInteger '2147483647'
v849 <- UnaryOperation '-', v848
v850 <- CallFunction v694, [v659, v849]
v851 <- LoadFloat '0.5'
v852 <- CallFunction v694, [v664, v851]
v853 <- LoadFloat '0.5'
v854 <- CallFunction v694, [v668, v853]
v855 <- LoadInteger '255'
v856 <- CallFunction v694, [v672, v855]
v857 <- BeginPlainFunction -> v858, v859, v860
    v861 <- LoadInteger '1'
    v862 <- Construct v858, [v861]
    v863 <- CreateNamedVariable 'a', 'var', v862
    SetElement v863, '0', v859
    v864 <- GetElement v863, '0'
EndPlainFunction
v865 <- LoadInteger '506'
v866 <- LoadInteger '250'
v867 <- CallFunction v857, [v637, v865, v866]
v868 <- LoadInteger '1'
v869 <- UnaryOperation '-', v868
v870 <- LoadInteger '255'
v871 <- CallFunction v857, [v637, v869, v870]
v872 <- LoadInteger '506'
v873 <- LoadInteger '122'
v874 <- LoadInteger '128'
v875 <- BinaryOperation v873, '-', v874
v876 <- CallFunction v857, [v641, v872, v875]
v877 <- LoadInteger '131066'
v878 <- LoadInteger '65530'
v879 <- CallFunction v857, [v646, v877, v878]
v880 <- LoadInteger '1'
v881 <- UnaryOperation '-', v880
v882 <- LoadInteger '65535'
v883 <- CallFunction v857, [v646, v881, v882]
v884 <- LoadInteger '131066'
v885 <- LoadInteger '32762'
v886 <- LoadInteger '32768'
v887 <- BinaryOperation v885, '-', v886
v888 <- CallFunction v857, [v650, v884, v887]
v889 <- LoadInteger '8589934586'
v890 <- LoadInteger '4294967290'
v891 <- CallFunction v857, [v655, v889, v890]
v892 <- LoadInteger '1'
v893 <- UnaryOperation '-', v892
v894 <- LoadInteger '4294967295'
v895 <- CallFunction v857, [v655, v893, v894]
v896 <- LoadInteger '8589934586'
v897 <- LoadInteger '2147483642'
v898 <- LoadInteger '2147483648'
v899 <- BinaryOperation v897, '-', v898
v900 <- CallFunction v857, [v659, v896, v899]
v901 <- LoadInteger '506'
v902 <- LoadInteger '255'
v903 <- CallFunction v857, [v672, v901, v902]
v904 <- LoadInteger '1'
v905 <- UnaryOperation '-', v904
v906 <- LoadInteger '0'
v907 <- CallFunction v857, [v672, v905, v906]
v908 <- CreateArray [v637, v641, v646, v650, v655, v659, v672, v664, v668]
v909 <- CreateNamedVariable 'typedArrayConstructors', 'var', v908
v910 <- BeginPlainFunction -> v911
    v912 <- BeginPlainFunction -> v913
        v914 <- BeginPlainFunction -> 
            Directive 'use strict'
            v915 <- LoadInteger '0'
            v916 <- LoadInteger '10'
            v917 <- Construct v911, [v916]
            SetComputedProperty v917, v913, v915
        EndPlainFunction
        v918 <- CallFunction v914, []
        v919 <- GetProperty v911, 'prototype'
        v920 <- GetProperty v919, '__proto__'
        v921 <- CreateNamedVariable 'Object', 'none'
        v922 <- CallMethod v921, 'getOwnPropertyDescriptor', [v920, v913]
        v923 <- CreateNamedVariable 'd', 'var', v922
        BeginObjectLiteral
        v924 <- EndObjectLiteral
        v925 <- CreateNamedVariable 'o', 'var', v924
        v926 <- BeginPlainFunction -> 
            v927 <- GetProperty v923, 'get'
            v928 <- CallMethod v927, 'call', [v925]
        EndPlainFunction
        v929 <- CallFunction v926, []
        v930 <- CreateNamedVariable 'TypeError', 'none'
        BeginForLoopInitializer
            v931 <- LoadInteger '0'
        BeginForLoopCondition -> v932
            v933 <- GetProperty v909, 'length'
            v934 <- Compare v932, '<', v933
        BeginForLoopAfterthought v934 -> v935
            v936 <- UnaryOperation v935, '++'
        BeginForLoopBody -> v937
            v938 <- GetComputedProperty v909, v937
            v939 <- CreateNamedVariable 'ctor', 'var', v938
            v940 <- LoadInteger '10'
            v941 <- Construct v939, [v940]
            v942 <- CreateNamedVariable 'a', 'var', v941
            v943 <- GetProperty v923, 'get'
            v944 <- CallMethod v943, 'call', [v942]
        EndForLoop
    EndPlainFunction
    v945 <- LoadString 'buffer'
    v946 <- CallFunction v912, [v945]
    v947 <- LoadString 'byteOffset'
    v948 <- CallFunction v912, [v947]
    v949 <- LoadString 'byteLength'
    v950 <- CallFunction v912, [v949]
    v951 <- LoadString 'length'
    v952 <- CallFunction v912, [v951]
EndPlainFunction
BeginForLoopInitializer
    v953 <- LoadInteger '0'
    v954 <- CreateNamedVariable 'i', 'none'
    Reassign v954, v953
BeginForLoopCondition
    v955 <- CreateNamedVariable 'i', 'none'
    v956 <- GetProperty v909, 'length'
    v957 <- Compare v955, '<', v956
BeginForLoopAfterthought v957
    v958 <- CreateNamedVariable 'i', 'none'
    v959 <- UnaryOperation v958, '++'
BeginForLoopBody
    v960 <- CreateNamedVariable 'i', 'none'
    v961 <- GetComputedProperty v909, v960
    v962 <- CallFunction v910, [v961]
EndForLoop
v963 <- BeginPlainFunction -> 
    v964 <- BeginPlainFunction -> v965, v966
        BeginForLoopInitializer
            v967 <- LoadInteger '0'
        BeginForLoopCondition -> v968
            v969 <- GetProperty v965, 'length'
            v970 <- Compare v968, '<', v969
        BeginForLoopAfterthought v970 -> v971
            v972 <- UnaryOperation '++', v971
        BeginForLoopBody -> v973
            v974 <- GetComputedProperty v965, v973
            v975 <- GetComputedProperty v966, v973
        EndForLoop
    EndPlainFunction
    v976 <- LoadInteger '1'
    v977 <- LoadInteger '2'
    v978 <- LoadInteger '3'
    v979 <- LoadInteger '4'
    v980 <- LoadInteger '0'
    v981 <- LoadInteger '1'
    v982 <- UnaryOperation '-', v981
    v983 <- CreateArray [v976, v977, v978, v979, v980, v982]
    v984 <- Construct v650, [v983]
    v985 <- CreateNamedVariable 'a11', 'var', v984
    v986 <- LoadInteger '15'
    v987 <- Construct v646, [v986]
    v988 <- CreateNamedVariable 'a12', 'var', v987
    v989 <- LoadInteger '3'
    v990 <- CallMethod v988, 'set', [v985, v989]
    v991 <- LoadInteger '0'
    v992 <- LoadInteger '0'
    v993 <- LoadInteger '0'
    v994 <- LoadInteger '1'
    v995 <- LoadInteger '2'
    v996 <- LoadInteger '3'
    v997 <- LoadInteger '4'
    v998 <- LoadInteger '0'
    v999 <- LoadInteger '65535'
    v1000 <- LoadInteger '0'
    v1001 <- LoadInteger '0'
    v1002 <- CreateArray [v991, v992, v993, v994, v995, v996, v997, v998, v999, v1000, v1001]
    v1003 <- BeginPlainFunction -> 
        v1004 <- CallMethod v985, 'set', [v988]
    EndPlainFunction
    v1005 <- CallFunction v1003, []
    v1006 <- LoadInteger '1'
    v1007 <- LoadUndefined
    v1008 <- LoadInteger '10'
    v1009 <- CreateNamedVariable 'NaN', 'none'
    v1010 <- LoadInteger '0'
    v1011 <- LoadInteger '1'
    v1012 <- UnaryOperation '-', v1011
    v1013 <- BeginPlainFunction -> 
        v1014 <- LoadInteger '3'
        Return v1014
    EndPlainFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `valueOf`, v1013
    v1015 <- EndObjectLiteral
    v1016 <- CreateArray [v1006, v1007, v1008, v1009, v1010, v1012, v1015]
    v1017 <- CreateNamedVariable 'a21', 'var', v1016
    v1018 <- LoadInteger '12'
    v1019 <- Construct v659, [v1018]
    v1020 <- CreateNamedVariable 'a22', 'var', v1019
    v1021 <- LoadInteger '2'
    v1022 <- CallMethod v1020, 'set', [v1017, v1021]
    v1023 <- LoadInteger '0'
    v1024 <- LoadInteger '0'
    v1025 <- LoadInteger '1'
    v1026 <- LoadInteger '0'
    v1027 <- LoadInteger '10'
    v1028 <- LoadInteger '0'
    v1029 <- LoadInteger '0'
    v1030 <- LoadInteger '1'
    v1031 <- UnaryOperation '-', v1030
    v1032 <- LoadInteger '3'
    v1033 <- LoadInteger '0'
    v1034 <- CreateArray [v1023, v1024, v1025, v1026, v1027, v1028, v1029, v1031, v1032, v1033]
    v1035 <- LoadInteger '2'
    v1036 <- LoadInteger '4'
    v1037 <- LoadInteger '6'
    v1038 <- LoadInteger '8'
    v1039 <- LoadInteger '11'
    v1040 <- LoadInteger '1'
    v1041 <- LoadInteger '0'
    v1042 <- BinaryOperation v1040, '/', v1041
    v1043 <- LoadInteger '3'
    v1044 <- UnaryOperation '-', v1043
    v1045 <- CreateArray [v1035, v1036, v1037, v1038, v1039, v1009, v1042, v1044]
    v1046 <- Construct v664, [v1045]
    v1047 <- CreateNamedVariable 'a31', 'var', v1046
    v1048 <- LoadInteger '2'
    v1049 <- LoadInteger '6'
    v1050 <- CallMethod v1047, 'subarray', [v1048, v1049]
    v1051 <- CreateNamedVariable 'a32', 'var', v1050
    v1052 <- LoadInteger '4'
    v1053 <- CallMethod v1047, 'set', [v1051, v1052]
    v1054 <- LoadInteger '2'
    v1055 <- LoadInteger '4'
    v1056 <- LoadInteger '6'
    v1057 <- LoadInteger '8'
    v1058 <- LoadInteger '6'
    v1059 <- LoadInteger '8'
    v1060 <- LoadInteger '11'
    v1061 <- CreateArray [v1054, v1055, v1056, v1057, v1058, v1059, v1060, v1009]
    v1062 <- LoadInteger '6'
    v1063 <- LoadInteger '8'
    v1064 <- LoadInteger '6'
    v1065 <- LoadInteger '8'
    v1066 <- CreateArray [v1062, v1063, v1064, v1065]
    v1067 <- LoadInteger '3'
    v1068 <- LoadInteger '2'
    v1069 <- LoadInteger '5'
    v1070 <- LoadInteger '6'
    v1071 <- CreateArray [v1067, v1068, v1069, v1070]
    v1072 <- Construct v672, [v1071]
    v1073 <- CreateNamedVariable 'a4', 'var', v1072
    v1074 <- CallMethod v1073, 'set', [v1073]
    v1075 <- LoadInteger '3'
    v1076 <- LoadInteger '2'
    v1077 <- LoadInteger '5'
    v1078 <- LoadInteger '6'
    v1079 <- CreateArray [v1075, v1076, v1077, v1078]
    v1080 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v1081 <- LoadInteger '4'
    v1082 <- Construct v1080, [v1081]
    v1083 <- CreateNamedVariable 'b', 'var', v1082
    v1084 <- Construct v650, [v1083]
    v1085 <- CreateNamedVariable 'a5', 'var', v1084
    v1086 <- Construct v641, [v1083]
    v1087 <- CreateNamedVariable 'a50', 'var', v1086
    v1088 <- LoadInteger '0'
    v1089 <- LoadInteger '2'
    v1090 <- Construct v641, [v1083, v1088, v1089]
    v1091 <- CreateNamedVariable 'a51', 'var', v1090
    v1092 <- LoadInteger '1'
    v1093 <- LoadInteger '2'
    v1094 <- Construct v641, [v1083, v1092, v1093]
    v1095 <- CreateNamedVariable 'a52', 'var', v1094
    v1096 <- LoadInteger '2'
    v1097 <- LoadInteger '2'
    v1098 <- Construct v641, [v1083, v1096, v1097]
    v1099 <- CreateNamedVariable 'a53', 'var', v1098
    v1100 <- LoadInteger '20560'
    v1101 <- LoadInteger '2570'
    v1102 <- CreateArray [v1100, v1101]
    v1103 <- CallMethod v1085, 'set', [v1102]
    v1104 <- LoadInteger '80'
    v1105 <- LoadInteger '80'
    v1106 <- LoadInteger '10'
    v1107 <- LoadInteger '10'
    v1108 <- CreateArray [v1104, v1105, v1106, v1107]
    v1109 <- LoadInteger '80'
    v1110 <- LoadInteger '80'
    v1111 <- CreateArray [v1109, v1110]
    v1112 <- LoadInteger '80'
    v1113 <- LoadInteger '10'
    v1114 <- CreateArray [v1112, v1113]
    v1115 <- LoadInteger '10'
    v1116 <- LoadInteger '10'
    v1117 <- CreateArray [v1115, v1116]
    v1118 <- LoadInteger '80'
    v1119 <- LoadInteger '80'
    v1120 <- LoadInteger '10'
    v1121 <- LoadInteger '10'
    v1122 <- CreateArray [v1118, v1119, v1120, v1121]
    v1123 <- CallMethod v1087, 'set', [v1122]
    v1124 <- CallMethod v1091, 'set', [v1085]
    v1125 <- LoadInteger '80'
    v1126 <- LoadInteger '10'
    v1127 <- LoadInteger '10'
    v1128 <- LoadInteger '10'
    v1129 <- CreateArray [v1125, v1126, v1127, v1128]
    v1130 <- LoadInteger '80'
    v1131 <- LoadInteger '80'
    v1132 <- LoadInteger '10'
    v1133 <- LoadInteger '10'
    v1134 <- CreateArray [v1130, v1131, v1132, v1133]
    v1135 <- CallMethod v1087, 'set', [v1134]
    v1136 <- CallMethod v1095, 'set', [v1085]
    v1137 <- LoadInteger '80'
    v1138 <- LoadInteger '80'
    v1139 <- LoadInteger '10'
    v1140 <- LoadInteger '10'
    v1141 <- CreateArray [v1137, v1138, v1139, v1140]
    v1142 <- LoadInteger '80'
    v1143 <- LoadInteger '80'
    v1144 <- LoadInteger '10'
    v1145 <- LoadInteger '10'
    v1146 <- CreateArray [v1142, v1143, v1144, v1145]
    v1147 <- CallMethod v1087, 'set', [v1146]
    v1148 <- CallMethod v1099, 'set', [v1085]
    v1149 <- LoadInteger '80'
    v1150 <- LoadInteger '80'
    v1151 <- LoadInteger '80'
    v1152 <- LoadInteger '10'
    v1153 <- CreateArray [v1149, v1150, v1151, v1152]
    v1154 <- LoadInteger '80'
    v1155 <- LoadInteger '81'
    v1156 <- LoadInteger '10'
    v1157 <- LoadInteger '11'
    v1158 <- CreateArray [v1154, v1155, v1156, v1157]
    v1159 <- CallMethod v1087, 'set', [v1158]
    v1160 <- CallMethod v1085, 'set', [v1091]
    v1161 <- LoadInteger '80'
    v1162 <- LoadInteger '81'
    v1163 <- CreateArray [v1161, v1162]
    v1164 <- LoadInteger '80'
    v1165 <- LoadInteger '81'
    v1166 <- LoadInteger '10'
    v1167 <- LoadInteger '11'
    v1168 <- CreateArray [v1164, v1165, v1166, v1167]
    v1169 <- CallMethod v1087, 'set', [v1168]
    v1170 <- CallMethod v1085, 'set', [v1095]
    v1171 <- LoadInteger '81'
    v1172 <- LoadInteger '10'
    v1173 <- CreateArray [v1171, v1172]
    v1174 <- LoadInteger '80'
    v1175 <- LoadInteger '81'
    v1176 <- LoadInteger '10'
    v1177 <- LoadInteger '11'
    v1178 <- CreateArray [v1174, v1175, v1176, v1177]
    v1179 <- CallMethod v1087, 'set', [v1178]
    v1180 <- CallMethod v1085, 'set', [v1099]
    v1181 <- LoadInteger '10'
    v1182 <- LoadInteger '11'
    v1183 <- CreateArray [v1181, v1182]
    v1184 <- LoadFloat '1.2'
    v1185 <- LoadFloat '12.3'
    v1186 <- CreateArray [v1184, v1185]
    v1187 <- Construct v664, [v1186]
    v1188 <- CreateNamedVariable 'a61', 'var', v1187
    v1189 <- LoadInteger '2'
    v1190 <- Construct v659, [v1189]
    v1191 <- CreateNamedVariable 'a62', 'var', v1190
    v1192 <- CallMethod v1191, 'set', [v1188]
    v1193 <- LoadInteger '1'
    v1194 <- LoadInteger '12'
    v1195 <- CreateArray [v1193, v1194]
    v1196 <- CallMethod v1188, 'set', [v1191]
    v1197 <- LoadInteger '1'
    v1198 <- LoadInteger '12'
    v1199 <- CreateArray [v1197, v1198]
    v1200 <- LoadInteger '50'
    v1201 <- Construct v646, [v1200]
    v1202 <- CreateNamedVariable 'a', 'var', v1201
    v1203 <- CreateArray []
    v1204 <- CreateNamedVariable 'expected', 'var', v1203
    BeginForLoopInitializer
        v1205 <- LoadInteger '0'
        v1206 <- CreateNamedVariable 'i', 'none'
        Reassign v1206, v1205
    BeginForLoopCondition
        v1207 <- CreateNamedVariable 'i', 'none'
        v1208 <- LoadInteger '50'
        v1209 <- Compare v1207, '<', v1208
    BeginForLoopAfterthought v1209
        v1210 <- CreateNamedVariable 'i', 'none'
        v1211 <- UnaryOperation v1210, '++'
    BeginForLoopBody
        v1212 <- CreateNamedVariable 'i', 'none'
        SetComputedProperty v1202, v1212, v1212
        v1213 <- CallMethod v1204, 'push', [v1212]
    EndForLoop
    BeginObjectLiteral
    v1214 <- EndObjectLiteral
    v1215 <- CallMethod v1202, 'set', [v1214]
    v1216 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v1217 <- EndObjectLiteral
        v1218 <- GetProperty v1202, 'set'
        v1219 <- CallMethod v1218, 'call', [v1217]
    EndPlainFunction
    v1220 <- CallFunction v1216, []
    v1221 <- CreateNamedVariable 'TypeError', 'none'
    v1222 <- BeginPlainFunction -> 
        v1223 <- CreateArray []
        v1224 <- GetProperty v1202, 'set'
        v1225 <- CallMethod v1224, 'call', [v1223]
    EndPlainFunction
    v1226 <- CallFunction v1222, []
    v1227 <- BeginPlainFunction -> 
        v1228 <- LoadInteger '0'
        v1229 <- CallMethod v1202, 'set', [v1228]
    EndPlainFunction
    v1230 <- CallFunction v1227, []
    v1231 <- BeginPlainFunction -> 
        v1232 <- LoadInteger '0'
        v1233 <- LoadInteger '1'
        v1234 <- CallMethod v1202, 'set', [v1232, v1233]
    EndPlainFunction
    v1235 <- CallFunction v1231, []
    v1236 <- LoadInteger '1'
    v1237 <- GetProperty v1202, 'set'
    v1238 <- GetProperty v1237, 'length'
EndPlainFunction
v1239 <- CallFunction v963, []
v1240 <- BeginPlainFunction -> 
    v1241 <- LoadInteger '100'
    v1242 <- Construct v659, [v1241]
    v1243 <- CreateNamedVariable 'a', 'var', v1242
    v1244 <- LoadInteger '10'
    v1245 <- LoadInteger '10'
    v1246 <- UnaryOperation '-', v1245
    SetComputedProperty v1243, v1246, v1244
    v1247 <- LoadUndefined
    v1248 <- LoadInteger '10'
    v1249 <- UnaryOperation '-', v1248
    v1250 <- GetComputedProperty v1243, v1249
    v1251 <- LoadInteger '10'
    v1252 <- LoadString '-10'
    SetComputedProperty v1243, v1252, v1251
    v1253 <- LoadUndefined
    v1254 <- LoadString '-10'
    v1255 <- GetComputedProperty v1243, v1254
    v1256 <- LoadString '    -10'
    v1257 <- CreateNamedVariable 's', 'var', v1256
    v1258 <- LoadInteger '10'
    SetComputedProperty v1243, v1257, v1258
    v1259 <- LoadInteger '10'
    v1260 <- GetComputedProperty v1243, v1257
    v1261 <- LoadString '    -10   '
    v1262 <- CreateNamedVariable 's1', 'var', v1261
    v1263 <- LoadInteger '10'
    SetComputedProperty v1243, v1257, v1263
    v1264 <- LoadInteger '10'
    v1265 <- GetComputedProperty v1243, v1257
    v1266 <- LoadInteger '10'
    v1267 <- LoadString '-1e2'
    SetComputedProperty v1243, v1267, v1266
    v1268 <- LoadInteger '10'
    v1269 <- LoadString '-1e2'
    v1270 <- GetComputedProperty v1243, v1269
    v1271 <- LoadUndefined
    v1272 <- LoadInteger '100'
    v1273 <- UnaryOperation '-', v1272
    v1274 <- GetComputedProperty v1243, v1273
    v1275 <- LoadInteger '256'
    v1276 <- LoadString '-0'
    SetComputedProperty v1243, v1276, v1275
    v1277 <- LoadString '     -0'
    v1278 <- CreateNamedVariable 's2', 'var', v1277
    v1279 <- LoadInteger '255'
    SetComputedProperty v1243, v1278, v1279
    v1280 <- LoadUndefined
    v1281 <- LoadString '-0'
    v1282 <- GetComputedProperty v1243, v1281
    v1283 <- LoadInteger '255'
    v1284 <- GetComputedProperty v1243, v1278
    v1285 <- LoadInteger '0'
    v1286 <- LoadInteger '0'
    v1287 <- UnaryOperation '-', v1286
    v1288 <- GetComputedProperty v1243, v1287
    v1289 <- LoadInteger '50'
    v1290 <- CreateNamedVariable 'Infinity', 'none'
    v1291 <- UnaryOperation '-', v1290
    SetComputedProperty v1243, v1291, v1289
    v1292 <- LoadUndefined
    v1293 <- UnaryOperation '-', v1290
    v1294 <- GetComputedProperty v1243, v1293
    v1295 <- LoadInteger '10'
    v1296 <- LoadFloat '1.5'
    SetComputedProperty v1243, v1296, v1295
    v1297 <- LoadUndefined
    v1298 <- LoadFloat '1.5'
    v1299 <- GetComputedProperty v1243, v1298
    v1300 <- LoadInteger '1'
    v1301 <- UnaryOperation '-', v1300
    v1302 <- CreateNamedVariable 'Math', 'none'
    v1303 <- CallMethod v1302, 'sqrt', [v1301]
    v1304 <- CreateNamedVariable 'nan', 'var', v1303
    v1305 <- LoadInteger '5'
    SetComputedProperty v1243, v1304, v1305
    v1306 <- LoadUndefined
    v1307 <- GetComputedProperty v1243, v1304
    v1308 <- LoadInteger '0'
    v1309 <- CreateNamedVariable 'x', 'var', v1308
    v1310 <- LoadInteger '0'
    v1311 <- UnaryOperation '-', v1310
    v1312 <- CreateNamedVariable 'y', 'var', v1311
    v1313 <- LoadInteger '1'
    v1314 <- BinaryOperation v1313, '/', v1309
    v1315 <- UnaryOperation '-', v1290
    v1316 <- LoadInteger '1'
    v1317 <- BinaryOperation v1316, '/', v1312
    v1318 <- LoadInteger '5'
    SetComputedProperty v1243, v1309, v1318
    v1319 <- LoadInteger '27'
    SetComputedProperty v1243, v1312, v1319
    v1320 <- LoadInteger '27'
    v1321 <- GetComputedProperty v1243, v1309
    v1322 <- LoadInteger '27'
    v1323 <- GetComputedProperty v1243, v1312
EndPlainFunction
v1324 <- CallFunction v1240, []
v1325 <- BeginPlainFunction -> 
    Directive 'use strict'
    v1326 <- LoadInteger '100'
    v1327 <- Construct v659, [v1326]
    v1328 <- CreateNamedVariable 'a', 'var', v1327
    v1329 <- LoadInteger '10'
    v1330 <- LoadInteger '10'
    v1331 <- UnaryOperation '-', v1330
    SetComputedProperty v1328, v1331, v1329
    v1332 <- LoadUndefined
    v1333 <- LoadInteger '10'
    v1334 <- UnaryOperation '-', v1333
    v1335 <- GetComputedProperty v1328, v1334
    v1336 <- LoadInteger '10'
    v1337 <- LoadString '-10'
    SetComputedProperty v1328, v1337, v1336
    v1338 <- LoadUndefined
    v1339 <- LoadString '-10'
    v1340 <- GetComputedProperty v1328, v1339
    v1341 <- LoadString '    -10'
    v1342 <- CreateNamedVariable 's', 'var', v1341
    v1343 <- LoadInteger '10'
    SetComputedProperty v1328, v1342, v1343
    v1344 <- LoadInteger '10'
    v1345 <- GetComputedProperty v1328, v1342
    v1346 <- LoadString '    -10   '
    v1347 <- CreateNamedVariable 's1', 'var', v1346
    v1348 <- LoadInteger '10'
    SetComputedProperty v1328, v1342, v1348
    v1349 <- LoadInteger '10'
    v1350 <- GetComputedProperty v1328, v1342
    v1351 <- LoadInteger '10'
    v1352 <- LoadString '-1e2'
    SetComputedProperty v1328, v1352, v1351
    v1353 <- LoadInteger '10'
    v1354 <- LoadString '-1e2'
    v1355 <- GetComputedProperty v1328, v1354
    v1356 <- LoadUndefined
    v1357 <- LoadInteger '100'
    v1358 <- UnaryOperation '-', v1357
    v1359 <- GetComputedProperty v1328, v1358
    v1360 <- LoadInteger '256'
    v1361 <- LoadString '-0'
    SetComputedProperty v1328, v1361, v1360
    v1362 <- LoadString '     -0'
    v1363 <- CreateNamedVariable 's2', 'var', v1362
    v1364 <- LoadInteger '255'
    SetComputedProperty v1328, v1363, v1364
    v1365 <- LoadUndefined
    v1366 <- LoadString '-0'
    v1367 <- GetComputedProperty v1328, v1366
    v1368 <- LoadInteger '255'
    v1369 <- GetComputedProperty v1328, v1363
    v1370 <- LoadInteger '0'
    v1371 <- LoadInteger '0'
    v1372 <- UnaryOperation '-', v1371
    v1373 <- GetComputedProperty v1328, v1372
    v1374 <- LoadInteger '10'
    v1375 <- LoadFloat '1.5'
    SetComputedProperty v1328, v1375, v1374
    v1376 <- LoadUndefined
    v1377 <- LoadFloat '1.5'
    v1378 <- GetComputedProperty v1328, v1377
    v1379 <- LoadInteger '1'
    v1380 <- UnaryOperation '-', v1379
    v1381 <- CreateNamedVariable 'Math', 'none'
    v1382 <- CallMethod v1381, 'sqrt', [v1380]
    v1383 <- CreateNamedVariable 'nan', 'var', v1382
    v1384 <- LoadInteger '5'
    SetComputedProperty v1328, v1383, v1384
    v1385 <- LoadUndefined
    v1386 <- GetComputedProperty v1328, v1383
    v1387 <- LoadInteger '0'
    v1388 <- CreateNamedVariable 'x', 'var', v1387
    v1389 <- LoadInteger '0'
    v1390 <- UnaryOperation '-', v1389
    v1391 <- CreateNamedVariable 'y', 'var', v1390
    v1392 <- CreateNamedVariable 'Infinity', 'none'
    v1393 <- LoadInteger '1'
    v1394 <- BinaryOperation v1393, '/', v1388
    v1395 <- UnaryOperation '-', v1392
    v1396 <- LoadInteger '1'
    v1397 <- BinaryOperation v1396, '/', v1391
    v1398 <- LoadInteger '5'
    SetComputedProperty v1328, v1388, v1398
    v1399 <- LoadInteger '27'
    SetComputedProperty v1328, v1391, v1399
    v1400 <- LoadInteger '27'
    v1401 <- GetComputedProperty v1328, v1388
    v1402 <- LoadInteger '27'
    v1403 <- GetComputedProperty v1328, v1391
EndPlainFunction
v1404 <- CallFunction v1325, []
v1405 <- BeginPlainFunction -> 
    v1406 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v1407 <- LoadInteger '256'
    v1408 <- Construct v1406, [v1407]
    v1409 <- CreateNamedVariable 'ab', 'var', v1408
    v1410 <- CreateNamedVariable 'DataView', 'none'
    v1411 <- LoadInteger '1'
    v1412 <- LoadInteger '255'
    v1413 <- Construct v1410, [v1409, v1411, v1412]
    v1414 <- CreateNamedVariable 'd1', 'var', v1413
    v1415 <- CallMethod v1406, 'isView', [v1414]
    v1416 <- GetProperty v1414, 'buffer'
    v1417 <- LoadInteger '1'
    v1418 <- GetProperty v1414, 'byteOffset'
    v1419 <- LoadInteger '255'
    v1420 <- GetProperty v1414, 'byteLength'
    v1421 <- LoadInteger '2'
    v1422 <- Construct v1410, [v1409, v1421]
    v1423 <- CreateNamedVariable 'd2', 'var', v1422
    v1424 <- GetProperty v1423, 'buffer'
    v1425 <- LoadInteger '2'
    v1426 <- GetProperty v1423, 'byteOffset'
    v1427 <- LoadInteger '254'
    v1428 <- GetProperty v1423, 'byteLength'
    v1429 <- Construct v1410, [v1409]
    v1430 <- CreateNamedVariable 'd3', 'var', v1429
    v1431 <- GetProperty v1430, 'buffer'
    v1432 <- LoadInteger '0'
    v1433 <- GetProperty v1430, 'byteOffset'
    v1434 <- LoadInteger '256'
    v1435 <- GetProperty v1430, 'byteLength'
    v1436 <- LoadInteger '1'
    v1437 <- LoadInteger '0'
    v1438 <- Construct v1410, [v1409, v1436, v1437]
    v1439 <- CreateNamedVariable 'd3a', 'var', v1438
    v1440 <- GetProperty v1439, 'buffer'
    v1441 <- LoadInteger '1'
    v1442 <- GetProperty v1439, 'byteOffset'
    v1443 <- LoadInteger '0'
    v1444 <- GetProperty v1439, 'byteLength'
    v1445 <- LoadInteger '256'
    v1446 <- LoadInteger '0'
    v1447 <- Construct v1410, [v1409, v1445, v1446]
    v1448 <- CreateNamedVariable 'd3b', 'var', v1447
    v1449 <- GetProperty v1448, 'buffer'
    v1450 <- LoadInteger '256'
    v1451 <- GetProperty v1448, 'byteOffset'
    v1452 <- LoadInteger '0'
    v1453 <- GetProperty v1448, 'byteLength'
    v1454 <- LoadInteger '256'
    v1455 <- Construct v1410, [v1409, v1454]
    v1456 <- CreateNamedVariable 'd3c', 'var', v1455
    v1457 <- GetProperty v1456, 'buffer'
    v1458 <- LoadInteger '256'
    v1459 <- GetProperty v1456, 'byteOffset'
    v1460 <- LoadInteger '0'
    v1461 <- GetProperty v1456, 'byteLength'
    v1462 <- LoadInteger '1'
    v1463 <- LoadFloat '3.1415926'
    v1464 <- Construct v1410, [v1409, v1462, v1463]
    v1465 <- CreateNamedVariable 'd4', 'var', v1464
    v1466 <- GetProperty v1465, 'buffer'
    v1467 <- LoadInteger '1'
    v1468 <- GetProperty v1465, 'byteOffset'
    v1469 <- LoadInteger '3'
    v1470 <- GetProperty v1465, 'byteLength'
    v1471 <- BeginPlainFunction -> 
        v1472 <- LoadInteger '1'
        v1473 <- UnaryOperation '-', v1472
        v1474 <- Construct v1410, [v1409, v1473]
    EndPlainFunction
    v1475 <- CallFunction v1471, []
    v1476 <- CreateNamedVariable 'RangeError', 'none'
    v1477 <- BeginPlainFunction -> 
        v1478 <- Construct v1410, []
    EndPlainFunction
    v1479 <- CallFunction v1477, []
    v1480 <- CreateNamedVariable 'TypeError', 'none'
    v1481 <- BeginPlainFunction -> 
        v1482 <- CreateArray []
        v1483 <- Construct v1410, [v1482]
    EndPlainFunction
    v1484 <- CallFunction v1481, []
    v1485 <- BeginPlainFunction -> 
        v1486 <- LoadInteger '257'
        v1487 <- Construct v1410, [v1409, v1486]
    EndPlainFunction
    v1488 <- CallFunction v1485, []
    v1489 <- BeginPlainFunction -> 
        v1490 <- LoadInteger '1'
        v1491 <- LoadInteger '1024'
        v1492 <- Construct v1410, [v1409, v1490, v1491]
    EndPlainFunction
    v1493 <- CallFunction v1489, []
EndPlainFunction
v1494 <- CallFunction v1405, []
v1495 <- BeginPlainFunction -> 
    v1496 <- CreateNamedVariable 'DataView', 'none'
    v1497 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v1498 <- LoadInteger '10'
    v1499 <- Construct v1497, [v1498]
    v1500 <- Construct v1496, [v1499]
    v1501 <- CreateNamedVariable 'a', 'var', v1500
    v1502 <- BeginPlainFunction -> v1503
        v1504 <- GetProperty v1496, 'prototype'
        v1505 <- CreateNamedVariable 'Object', 'none'
        v1506 <- CallMethod v1505, 'getOwnPropertyDescriptor', [v1504, v1503]
        v1507 <- CreateNamedVariable 'd', 'var', v1506
        BeginObjectLiteral
        v1508 <- EndObjectLiteral
        v1509 <- CreateNamedVariable 'o', 'var', v1508
        v1510 <- BeginPlainFunction -> 
            v1511 <- GetProperty v1507, 'get'
            v1512 <- CallMethod v1511, 'call', [v1509]
        EndPlainFunction
        v1513 <- CallFunction v1510, []
        v1514 <- CreateNamedVariable 'TypeError', 'none'
        v1515 <- GetProperty v1507, 'get'
        v1516 <- CallMethod v1515, 'call', [v1501]
    EndPlainFunction
    v1517 <- LoadString 'buffer'
    v1518 <- CallFunction v1502, [v1517]
    v1519 <- LoadString 'byteOffset'
    v1520 <- CallFunction v1502, [v1519]
    v1521 <- LoadString 'byteLength'
    v1522 <- CallFunction v1502, [v1521]
    v1523 <- BeginPlainFunction -> v1524
        v1525 <- LoadInteger '1'
        v1526 <- GetProperty v1496, 'prototype'
        v1527 <- LoadString 'get'
        v1528 <- BinaryOperation v1527, '+', v1524
        v1529 <- GetComputedProperty v1526, v1528
        v1530 <- GetProperty v1529, 'length'
        v1531 <- LoadInteger '2'
        v1532 <- GetProperty v1496, 'prototype'
        v1533 <- LoadString 'set'
        v1534 <- BinaryOperation v1533, '+', v1524
        v1535 <- GetComputedProperty v1532, v1534
        v1536 <- GetProperty v1535, 'length'
    EndPlainFunction
    v1537 <- LoadString 'Int8'
    v1538 <- CallFunction v1523, [v1537]
    v1539 <- LoadString 'Uint8'
    v1540 <- CallFunction v1523, [v1539]
    v1541 <- LoadString 'Int16'
    v1542 <- CallFunction v1523, [v1541]
    v1543 <- LoadString 'Uint16'
    v1544 <- CallFunction v1523, [v1543]
    v1545 <- LoadString 'Int32'
    v1546 <- CallFunction v1523, [v1545]
    v1547 <- LoadString 'Uint32'
    v1548 <- CallFunction v1523, [v1547]
    v1549 <- LoadString 'Float32'
    v1550 <- CallFunction v1523, [v1549]
    v1551 <- LoadString 'Float64'
    v1552 <- CallFunction v1523, [v1551]
EndPlainFunction
v1553 <- CallFunction v1495, []
v1554 <- BeginPlainFunction -> 
    v1555 <- CreateNamedVariable 'DataView', 'none'
    v1556 <- CreateNamedVariable 'ArrayBuffer', 'none'
    v1557 <- LoadInteger '10'
    v1558 <- Construct v1556, [v1557]
    v1559 <- Construct v1555, [v1558]
    v1560 <- CreateNamedVariable 'a', 'var', v1559
    v1561 <- LoadString '[object DataView]'
    v1562 <- CreateNamedVariable 'Object', 'none'
    v1563 <- GetProperty v1562, 'prototype'
    v1564 <- GetProperty v1563, 'toString'
    v1565 <- CallMethod v1564, 'call', [v1560]
    v1566 <- GetProperty v1555, 'prototype'
    v1567 <- CreateNamedVariable 'Symbol', 'none'
    v1568 <- GetProperty v1567, 'toStringTag'
    v1569 <- CallMethod v1562, 'getOwnPropertyDescriptor', [v1566, v1568]
    v1570 <- CreateNamedVariable 'desc', 'var', v1569
    v1571 <- GetProperty v1570, 'configurable'
    v1572 <- GetProperty v1570, 'enumerable'
    v1573 <- GetProperty v1570, 'writable'
    v1574 <- LoadString 'DataView'
    v1575 <- GetProperty v1570, 'value'
EndPlainFunction
v1576 <- BeginPlainFunction -> v1577, v1578
    v1579 <- BeginPlainFunction -> v1580
        v1581 <- CreateArray []
        v1582 <- CreateNamedVariable 'array', 'var', v1581
        BeginForInLoop v1580 -> v1583
            v1584 <- CallMethod v1582, 'push', [v1583]
        EndForInLoop
        v1585 <- CallMethod v1582, 'sort', []
        Return v1585
    EndPlainFunction
    v1586 <- CreateArray []
    v1587 <- CallFunction v1579, [v1577]
    v1588 <- CreateArray []
    v1589 <- GetProperty v1577, 'prototype'
    v1590 <- CallFunction v1579, [v1589]
    BeginIf v1578
        v1591 <- CreateArray []
        v1592 <- CallFunction v1579, [v1578]
    EndIf
EndPlainFunction
v1593 <- CreateNamedVariable 'ArrayBuffer', 'none'
v1594 <- Construct v1593, []
v1595 <- CallFunction v1576, [v1593, v1594]
BeginForLoopInitializer
    v1596 <- LoadInteger '0'
    v1597 <- CreateNamedVariable 'i', 'none'
    Reassign v1597, v1596
BeginForLoopCondition
    v1598 <- CreateNamedVariable 'i', 'none'
    v1599 <- GetProperty v909, 'length'
    v1600 <- Compare v1598, '<', v1599
BeginForLoopAfterthought v1600
    v1601 <- CreateNamedVariable 'i', 'none'
    v1602 <- UnaryOperation v1601, '++'
BeginForLoopBody
    v1603 <- CreateNamedVariable 'i', 'none'
    v1604 <- GetComputedProperty v909, v1603
    v1605 <- CallFunction v1576, [v1604]
EndForLoop
v1606 <- CreateNamedVariable 'DataView', 'none'
v1607 <- Construct v1593, []
v1608 <- Construct v1606, [v1607]
v1609 <- CallFunction v1576, [v1606, v1608]
v1610 <- BeginPlainFunction -> v1611
    v1612 <- BeginPlainFunction -> v1613, v1614, v1615
        SetComputedProperty v1613, v1614, v1615
        v1616 <- GetComputedProperty v1613, v1614
    EndPlainFunction
    BeginForLoopInitializer
        v1617 <- LoadInteger '0'
    BeginForLoopCondition -> v1618
        v1619 <- LoadInteger '20'
        v1620 <- Compare v1618, '<', v1619
    BeginForLoopAfterthought v1620 -> v1621
        v1622 <- UnaryOperation v1621, '++'
    BeginForLoopBody -> v1623
        v1624 <- LoadString 'key'
        v1625 <- BinaryOperation v1624, '+', v1623
        v1626 <- LoadString 'val'
        v1627 <- BinaryOperation v1626, '+', v1623
        v1628 <- CallFunction v1612, [v1611, v1625, v1627]
        v1629 <- LoadString 'foo'
        v1630 <- BinaryOperation v1629, '+', v1623
        v1631 <- LoadString 'bar'
        v1632 <- BinaryOperation v1631, '+', v1623
        v1633 <- CallFunction v1612, [v1611, v1630, v1632]
    EndForLoop
EndPlainFunction
v1634 <- LoadInteger '256'
v1635 <- Construct v1593, [v1634]
v1636 <- CallFunction v1610, [v1635]
BeginForLoopInitializer
    v1637 <- LoadInteger '0'
    v1638 <- CreateNamedVariable 'i', 'none'
    Reassign v1638, v1637
BeginForLoopCondition
    v1639 <- CreateNamedVariable 'i', 'none'
    v1640 <- GetProperty v909, 'length'
    v1641 <- Compare v1639, '<', v1640
BeginForLoopAfterthought v1641
    v1642 <- CreateNamedVariable 'i', 'none'
    v1643 <- UnaryOperation v1642, '++'
BeginForLoopBody
    v1644 <- CreateNamedVariable 'i', 'none'
    v1645 <- GetComputedProperty v909, v1644
    v1646 <- LoadInteger '10'
    v1647 <- Construct v1645, [v1646]
    v1648 <- CallFunction v1610, [v1647]
EndForLoop
v1649 <- LoadInteger '256'
v1650 <- Construct v1593, [v1649]
v1651 <- Construct v1606, [v1650]
v1652 <- CallFunction v1610, [v1651]
v1653 <- BeginPlainFunction -> 
    v1654 <- CallFunction v1593, []
EndPlainFunction
v1655 <- CallFunction v1653, []
v1656 <- CreateNamedVariable 'TypeError', 'none'
v1657 <- BeginPlainFunction -> 
    v1658 <- Construct v1593, []
    v1659 <- CallFunction v1606, [v1658]
EndPlainFunction
v1660 <- CallFunction v1657, []
v1661 <- BeginPlainFunction -> v1662
    v1663 <- LoadInteger '100'
    v1664 <- CreateArray [v1663]
    v1665 <- Construct v1662, [v1664]
    v1666 <- CreateNamedVariable 'arr', 'var', v1665
    v1667 <- LoadString '0'
    v1668 <- CreateNamedVariable 'Object', 'none'
    v1669 <- CallMethod v1668, 'getOwnPropertyDescriptor', [v1666, v1667]
    v1670 <- GetProperty v1669, 'configurable'
    v1671 <- LoadInteger '0'
    v1672 <- DeleteElement v1666, '0'
EndPlainFunction
BeginForLoopInitializer
    v1673 <- LoadInteger '0'
    v1674 <- CreateNamedVariable 'i', 'none'
    Reassign v1674, v1673
BeginForLoopCondition
    v1675 <- CreateNamedVariable 'i', 'none'
    v1676 <- GetProperty v909, 'length'
    v1677 <- Compare v1675, '<', v1676
BeginForLoopAfterthought v1677
    v1678 <- CreateNamedVariable 'i', 'none'
    v1679 <- UnaryOperation v1678, '++'
BeginForLoopBody
    v1680 <- CreateNamedVariable 'i', 'none'
    v1681 <- GetComputedProperty v909, v1680
    v1682 <- CallFunction v1661, [v1681]
EndForLoop


function TestByteLength(a1, a2) {
    const v4 = new ArrayBuffer(a1);
    var ab = v4;
    ab.byteLength;
}
function TestArrayBufferCreation() {
    TestByteLength(1, 1);
    TestByteLength(256, 256);
    TestByteLength(2.567, 2);
    TestByteLength("abc", 0);
    TestByteLength(0, 0);
    function f23() {
        new ArrayBuffer(-10);
    }
    f23();
    function f30() {
        new ArrayBuffer(-2.567);
    }
    f30();
    const v37 = new ArrayBuffer();
    var ab = v37;
    ab.byteLength;
    Object.prototype.toString.call(ab);
}
TestArrayBufferCreation();
function TestByteLengthNotWritable() {
    const v50 = new ArrayBuffer(1024);
    var ab = v50;
    ab.byteLength;
    function f54() {
        'use strict';
        ab.byteLength = 42;
    }
    f54();
}
TestByteLengthNotWritable();
function TestSlice(a60, a61, a62, a63) {
    const v65 = new ArrayBuffer(a61);
    var ab = v65;
    const v68 = new Uint8Array(ab);
    var a1 = v68;
    for (let i71 = 0; i71 < a1.length; i71++) {
        a1[i71] = 202;
    }
    var slice = ab.slice(a62, a63);
    slice.byteLength;
    const v81 = new Uint8Array(slice);
    var a2 = v81;
    for (let i84 = 0; i84 < a2.length; i84++) {
        a2[i84];
    }
}
function TestArrayBufferSlice() {
    const v95 = new ArrayBuffer(1024);
    var ab = v95;
    var ab1 = ab.slice(512, 1024);
    ab1.byteLength;
    TestSlice(512, 1024, 512, 1024);
    TestSlice(512, 1024, 512);
    TestSlice(0, 0, 1, 20);
    TestSlice(100, 100, 0, 100);
    TestSlice(100, 100, 0, 1000);
    TestSlice(0, 100, 5, 1);
    TestSlice(1, 100, -11, -10);
    TestSlice(9, 100, -10, 99);
    TestSlice(0, 100, -10, 80);
    TestSlice(10, 100, 80, -10);
    TestSlice(10, 100, 90, "100");
    TestSlice(10, 100, "90", "100");
    TestSlice(0, 100, 90, "abc");
    TestSlice(10, 100, "abc", 10);
    TestSlice(10, 100, 0.96, 10.96);
    TestSlice(10, 100, 0.96, 10.01);
    TestSlice(10, 100, 0.01, 10.01);
    TestSlice(10, 100, 0.01, 10.96);
    TestSlice(10, 100, 90);
    TestSlice(10, 100, -10);
}
TestArrayBufferSlice();
function TestTypedArray(a208, a209, a210) {
    a208.BYTES_PER_ELEMENT;
    const v215 = new ArrayBuffer(256 * a209);
    var ab = v215;
    const v218 = new a208(30);
    var a0 = v218;
    ("[object " + a208.name) + "]";
    Object.prototype.toString.call(a0);
    ArrayBuffer.isView(a0);
    a0.BYTES_PER_ELEMENT;
    a0.length;
    30 * a209;
    a0.byteLength;
    a0.byteOffset;
    30 * a209;
    a0.buffer.byteLength;
    const v243 = new a208(0);
    var aLen0 = v243;
    aLen0.BYTES_PER_ELEMENT;
    aLen0.length;
    aLen0.byteLength;
    aLen0.byteOffset;
    aLen0.buffer.byteLength;
    const v258 = new a208(ab, 128 * a209, 0);
    var aOverBufferLen0 = v258;
    aOverBufferLen0.buffer;
    aOverBufferLen0.BYTES_PER_ELEMENT;
    aOverBufferLen0.length;
    aOverBufferLen0.byteLength;
    128 * a209;
    aOverBufferLen0.byteOffset;
    const v272 = new a208(ab, 128 * a209, 128);
    var a1 = v272;
    a1.buffer;
    a1.BYTES_PER_ELEMENT;
    a1.length;
    128 * a209;
    a1.byteLength;
    128 * a209;
    a1.byteOffset;
    const v287 = new a208(ab, 64 * a209, 128);
    var a2 = v287;
    a2.buffer;
    a2.BYTES_PER_ELEMENT;
    a2.length;
    128 * a209;
    a2.byteLength;
    64 * a209;
    a2.byteOffset;
    const v301 = new a208(ab, 192 * a209);
    var a3 = v301;
    a3.buffer;
    a3.length;
    64 * a209;
    a3.byteLength;
    192 * a209;
    a3.byteOffset;
    const v312 = new a208(ab);
    var a4 = v312;
    a4.buffer;
    a4.length;
    256 * a209;
    a4.byteLength;
    a4.byteOffset;
    var i;
    for ((() => {
            i = 0;
        })();
        i < 128;
        i++) {
        a1[i] = a210;
    }
    for ((() => {
            i = 0;
        })();
        i < 128;
        i++) {
        a1[i];
    }
    for ((() => {
            i = 0;
        })();
        i < 64;
        i++) {
        a2[i];
    }
    for ((() => {
            i = 64;
        })();
        i < 128;
        i++) {
        a2[i];
    }
    for ((() => {
            i = 0;
        })();
        i < 64;
        i++) {
        a3[i];
    }
    for ((() => {
            i = 0;
        })();
        i < 128;
        i++) {
        a4[i];
    }
    for ((() => {
            i = 128;
        })();
        i < 256;
        i++) {
        a4[i];
    }
    const v362 = new a208(ab, 256 * a209);
    var aAtTheEnd = v362;
    aAtTheEnd.BYTES_PER_ELEMENT;
    aAtTheEnd.length;
    aAtTheEnd.byteLength;
    256 * a209;
    aAtTheEnd.byteOffset;
    function f372() {
        new a208(ab, 257 * a209);
    }
    f372();
    function f378() {
        new a208(ab, 128 * a209, 192);
    }
    f378();
    if (a209 !== 1) {
        function f386() {
            new a208(ab, (128 * a209) - 1, 10);
        }
        f386();
        const v398 = new ArrayBuffer((10 * a209) + 1);
        var unalignedArrayBuffer = v398;
        const v402 = new a208(unalignedArrayBuffer, 0, 10);
        var goodArray = v402;
        goodArray.length;
        10 * a209;
        goodArray.byteLength;
        function f409() {
            new a208(unalignedArrayBuffer);
        }
        f409();
        function f412() {
            new a208(unalignedArrayBuffer, 5 * a209);
        }
        f412();
    }
    const v417 = new a208();
    var aFromUndef = v417;
    aFromUndef.BYTES_PER_ELEMENT;
    aFromUndef.length;
    0 * a209;
    aFromUndef.byteLength;
    aFromUndef.byteOffset;
    0 * a209;
    aFromUndef.buffer.byteLength;
    const v432 = new a208(null);
    var aFromNull = v432;
    aFromNull.BYTES_PER_ELEMENT;
    aFromNull.length;
    0 * a209;
    aFromNull.byteLength;
    aFromNull.byteOffset;
    0 * a209;
    aFromNull.buffer.byteLength;
    const v447 = new a208(true);
    var aFromBool = v447;
    aFromBool.BYTES_PER_ELEMENT;
    aFromBool.length;
    1 * a209;
    aFromBool.byteLength;
    aFromBool.byteOffset;
    1 * a209;
    aFromBool.buffer.byteLength;
    const v462 = new a208("30");
    var aFromString = v462;
    aFromString.BYTES_PER_ELEMENT;
    aFromString.length;
    30 * a209;
    aFromString.byteLength;
    aFromString.byteOffset;
    30 * a209;
    aFromString.buffer.byteLength;
    function f476() {
        new a208(Symbol());
    }
    f476();
    var jsArray = [];
    for ((() => {
            i = 0;
        })();
        i < 30;
        i++) {
        jsArray.push(a210);
    }
    const v489 = new a208(jsArray);
    var aFromArray = v489;
    aFromArray.BYTES_PER_ELEMENT;
    aFromArray.length;
    30 * a209;
    aFromArray.byteLength;
    aFromArray.byteOffset;
    30 * a209;
    aFromArray.buffer.byteLength;
    for ((() => {
            i = 0;
        })();
        i < 30;
        i++) {
        aFromArray[i];
    }
    const v509 = new ArrayBuffer(0);
    var abLen0 = v509;
    const v511 = new a208(abLen0);
    var aOverAbLen0 = v511;
    aOverAbLen0.buffer;
    aOverAbLen0.BYTES_PER_ELEMENT;
    aOverAbLen0.length;
    aOverAbLen0.byteLength;
    aOverAbLen0.byteOffset;
    const v521 = new a208();
    var aNoParam = v521;
    aNoParam.BYTES_PER_ELEMENT;
    aNoParam.length;
    aNoParam.byteLength;
    aNoParam.byteOffset;
    const v533 = new a208(ab, 64 * a209, 128);
    var a = v533;
    ("[object " + a208.name) + "]";
    Object.prototype.toString.call(a);
    var desc = Object.getOwnPropertyDescriptor(a208.prototype.__proto__, Symbol.toStringTag);
    desc.configurable;
    desc.enumerable;
    !(!desc.writable);
    !(!desc.set);
    typeof desc.get;
    function* gen1() {
        for (let i562 = 0; i562 < 10; i562++) {
            yield i562;
        }
    }
    const v571 = new a208(gen());
    var genArr = v571;
    genArr.length;
    genArr[0];
    genArr[9];
    const v583 = new a208([1,2,3]);
    genArr = v583;
    genArr.length;
    genArr[0];
    genArr[2];
    var arrayIterator = Array.prototype[Symbol.iterator];
    const t334 = Array.prototype;
    t334[Symbol.iterator] = gen;
    const v601 = new a208([1,2,3]);
    genArr = v601;
    genArr.length;
    genArr[0];
    genArr[9];
    const t338 = Array.prototype;
    t338[Symbol.iterator] = arrayIterator;
    var myObject = { 0: 5, 1: 6, length: 2 };
    const v615 = new a208(myObject);
    genArr = v615;
    genArr.length;
    genArr[0];
    genArr[1];
    var iteratorReadCount = 0;
    const v624 = Symbol.iterator;
    function f625() {
        iteratorReadCount++;
        return gen;
    }
    Object.defineProperty(myObject, v624, { get: f625 });
    const v629 = new a208(myObject);
    genArr = v629;
    genArr.length;
    genArr[0];
    genArr[9];
}
TestTypedArray(Uint8Array, 1, 255);
TestTypedArray(Int8Array, 1, -127);
TestTypedArray(Uint16Array, 2, 65535);
TestTypedArray(Int16Array, 2, -32767);
TestTypedArray(Uint32Array, 4, 4294967295);
TestTypedArray(Int32Array, 4, -2147483647);
TestTypedArray(Float32Array, 4, 0.5);
TestTypedArray(Float64Array, 8, 0.5);
TestTypedArray(Uint8ClampedArray, 1, 255);
function SubarrayTestCase(a677, a678, a679, a680, a681, a682, a683) {
    const v684 = new a677(a681);
    var a = v684;
    var s = a.subarray(a682, a683);
    s.constructor;
    s.length;
    if (s.length > 0) {
        s[0] = a678;
        a[a680];
    }
}
function TestSubArray(a695, a696) {
    SubarrayTestCase(a695, a696, 512, 512, 1024, 512, 1024);
    SubarrayTestCase(a695, a696, 512, 512, 1024, 512);
    SubarrayTestCase(a695, a696, 0, undefined, 0, 1, 20);
    SubarrayTestCase(a695, a696, 100, 0, 100, 0, 100);
    SubarrayTestCase(a695, a696, 100, 0, 100, 0, 1000);
    SubarrayTestCase(a695, a696, 0, undefined, 100, 5, 1);
    SubarrayTestCase(a695, a696, 1, 89, 100, -11, -10);
    SubarrayTestCase(a695, a696, 9, 90, 100, -10, 99);
    SubarrayTestCase(a695, a696, 0, undefined, 100, -10, 80);
    SubarrayTestCase(a695, a696, 10, 80, 100, 80, -10);
    SubarrayTestCase(a695, a696, 10, 90, 100, 90, "100");
    SubarrayTestCase(a695, a696, 10, 90, 100, "90", "100");
    SubarrayTestCase(a695, a696, 0, undefined, 100, 90, "abc");
    SubarrayTestCase(a695, a696, 10, 0, 100, "abc", 10);
    SubarrayTestCase(a695, a696, 10, 0, 100, 0.96, 10.96);
    SubarrayTestCase(a695, a696, 10, 0, 100, 0.96, 10.01);
    SubarrayTestCase(a695, a696, 10, 0, 100, 0.01, 10.01);
    SubarrayTestCase(a695, a696, 10, 0, 100, 0.01, 10.96);
    SubarrayTestCase(a695, a696, 10, 90, 100, 90);
    SubarrayTestCase(a695, a696, 10, 90, 100, -10);
    var method = a695.prototype.subarray;
    const v824 = new a695(100);
    method.call(v824, 0, 100);
    var o = {};
    function f830() {
        method.call(o, 0, 100);
    }
    f830();
}
TestSubArray(Uint8Array, 255);
TestSubArray(Int8Array, -127);
TestSubArray(Uint16Array, 65535);
TestSubArray(Int16Array, -32767);
TestSubArray(Uint32Array, 4294967295);
TestSubArray(Int32Array, -2147483647);
TestSubArray(Float32Array, 0.5);
TestSubArray(Float64Array, 0.5);
TestSubArray(Uint8ClampedArray, 255);
function TestTypedArrayOutOfRange(a858, a859, a860) {
    const v862 = new a858(1);
    var a = v862;
    a[0] = a859;
    a[0];
}
TestTypedArrayOutOfRange(Uint8Array, 506, 250);
TestTypedArrayOutOfRange(Uint8Array, -1, 255);
TestTypedArrayOutOfRange(Int8Array, 506, 122 - 128);
TestTypedArrayOutOfRange(Uint16Array, 131066, 65530);
TestTypedArrayOutOfRange(Uint16Array, -1, 65535);
TestTypedArrayOutOfRange(Int16Array, 131066, 32762 - 32768);
TestTypedArrayOutOfRange(Uint32Array, 8589934586, 4294967290);
TestTypedArrayOutOfRange(Uint32Array, -1, 4294967295);
TestTypedArrayOutOfRange(Int32Array, 8589934586, 2147483642 - 2147483648);
TestTypedArrayOutOfRange(Uint8ClampedArray, 506, 255);
TestTypedArrayOutOfRange(Uint8ClampedArray, -1, 0);
var typedArrayConstructors = [Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Uint8ClampedArray,Float32Array,Float64Array];
function TestPropertyTypeChecks(a911) {
    function CheckProperty(a913) {
        function f914() {
            'use strict';
            const v917 = new a911(10);
            v917[a913] = 0;
        }
        f914();
        var d = Object.getOwnPropertyDescriptor(a911.prototype.__proto__, a913);
        var o = {};
        function f926() {
            d.get.call(o);
        }
        f926();
        for (let i932 = 0; i932 < typedArrayConstructors.length; i932++) {
            var ctor = typedArrayConstructors[i932];
            const v941 = new ctor(10);
            var a = v941;
            d.get.call(a);
        }
    }
    CheckProperty("buffer");
    CheckProperty("byteOffset");
    CheckProperty("byteLength");
    CheckProperty("length");
}
for (i = 0; i < typedArrayConstructors.length; i++) {
    TestPropertyTypeChecks(typedArrayConstructors[i]);
}
function TestTypedArraySet() {
    function assertArrayPrefix(a965, a966) {
        for (let i968 = 0; i968 < a965.length; ++i968) {
            a965[i968];
            a966[i968];
        }
    }
    const v984 = new Int16Array([1,2,3,4,0,-1]);
    var a11 = v984;
    const v987 = new Uint16Array(15);
    var a12 = v987;
    a12.set(a11, 3);
    [0,0,0,1,2,3,4,0,65535,0,0];
    function f1003() {
        a11.set(a12);
    }
    f1003();
    const v1012 = -1;
    function f1013() {
        return 3;
    }
    var a21 = [1,,10,NaN,0,v1012,{ valueOf: f1013 }];
    const v1019 = new Int32Array(12);
    var a22 = v1019;
    a22.set(a21, 2);
    [0,0,1,0,10,0,0,-1,3,0];
    const v1046 = new Float32Array([2,4,6,8,11,NaN,1 / 0,-3]);
    var a31 = v1046;
    var a32 = a31.subarray(2, 6);
    a31.set(a32, 4);
    [2,4,6,8,6,8,11,NaN];
    [6,8,6,8];
    const v1072 = new Uint8ClampedArray([3,2,5,6]);
    var a4 = v1072;
    a4.set(a4);
    [3,2,5,6];
    const v1082 = new ArrayBuffer(4);
    var b = v1082;
    const v1084 = new Int16Array(b);
    var a5 = v1084;
    const v1086 = new Int8Array(b);
    var a50 = v1086;
    const v1090 = new Int8Array(b, 0, 2);
    var a51 = v1090;
    const v1094 = new Int8Array(b, 1, 2);
    var a52 = v1094;
    const v1098 = new Int8Array(b, 2, 2);
    var a53 = v1098;
    a5.set([20560,2570]);
    [80,80,10,10];
    [80,80];
    [80,10];
    [10,10];
    a50.set([80,80,10,10]);
    a51.set(a5);
    [80,10,10,10];
    a50.set([80,80,10,10]);
    a52.set(a5);
    [80,80,10,10];
    a50.set([80,80,10,10]);
    a53.set(a5);
    [80,80,80,10];
    a50.set([80,81,10,11]);
    a5.set(a51);
    [80,81];
    a50.set([80,81,10,11]);
    a5.set(a52);
    [81,10];
    a50.set([80,81,10,11]);
    a5.set(a53);
    [10,11];
    const v1187 = new Float32Array([1.2,12.3]);
    var a61 = v1187;
    const v1190 = new Int32Array(2);
    var a62 = v1190;
    a62.set(a61);
    [1,12];
    a61.set(a62);
    [1,12];
    const v1201 = new Uint16Array(50);
    var a = v1201;
    var expected = [];
    for (i = 0; i < 50; i++) {
        a[i] = i;
        expected.push(i);
    }
    a.set({});
    function f1216() {
        const v1217 = {};
        a.set.call(v1217);
    }
    f1216();
    function f1222() {
        const v1223 = [];
        a.set.call(v1223);
    }
    f1222();
    function f1227() {
        a.set(0);
    }
    f1227();
    function f1231() {
        a.set(0, 1);
    }
    f1231();
    a.set.length;
}
TestTypedArraySet();
function TestTypedArraysWithIllegalIndices() {
    const v1242 = new Int32Array(100);
    var a = v1242;
    a[-10] = 10;
    a[-10];
    a["-10"] = 10;
    a["-10"];
    var s = "    -10";
    a[s] = 10;
    a[s];
    var s1 = "    -10   ";
    a[s] = 10;
    a[s];
    a["-1e2"] = 10;
    a["-1e2"];
    a[-100];
    a["-0"] = 256;
    var s2 = "     -0";
    a[s2] = 255;
    a["-0"];
    a[s2];
    a[-0];
    a[-Infinity] = 50;
    a[-Infinity];
    a[1.5] = 10;
    a[1.5];
    var nan = Math.sqrt(-1);
    a[nan] = 5;
    a[nan];
    var x = 0;
    var y = -0;
    1 / x;
    -Infinity;
    1 / y;
    a[x] = 5;
    a[y] = 27;
    a[x];
    a[y];
}
TestTypedArraysWithIllegalIndices();
function TestTypedArraysWithIllegalIndicesStrict() {
    'use strict';
    const v1327 = new Int32Array(100);
    var a = v1327;
    a[-10] = 10;
    a[-10];
    a["-10"] = 10;
    a["-10"];
    var s = "    -10";
    a[s] = 10;
    a[s];
    var s1 = "    -10   ";
    a[s] = 10;
    a[s];
    a["-1e2"] = 10;
    a["-1e2"];
    a[-100];
    a["-0"] = 256;
    var s2 = "     -0";
    a[s2] = 255;
    a["-0"];
    a[s2];
    a[-0];
    a[1.5] = 10;
    a[1.5];
    var nan = Math.sqrt(-1);
    a[nan] = 5;
    a[nan];
    var x = 0;
    var y = -0;
    1 / x;
    -Infinity;
    1 / y;
    a[x] = 5;
    a[y] = 27;
    a[x];
    a[y];
}
TestTypedArraysWithIllegalIndicesStrict();
function TestDataViewConstructor() {
    const v1408 = new ArrayBuffer(256);
    var ab = v1408;
    const v1413 = new DataView(ab, 1, 255);
    var d1 = v1413;
    ArrayBuffer.isView(d1);
    d1.buffer;
    d1.byteOffset;
    d1.byteLength;
    const v1422 = new DataView(ab, 2);
    var d2 = v1422;
    d2.buffer;
    d2.byteOffset;
    d2.byteLength;
    const v1429 = new DataView(ab);
    var d3 = v1429;
    d3.buffer;
    d3.byteOffset;
    d3.byteLength;
    const v1438 = new DataView(ab, 1, 0);
    var d3a = v1438;
    d3a.buffer;
    d3a.byteOffset;
    d3a.byteLength;
    const v1447 = new DataView(ab, 256, 0);
    var d3b = v1447;
    d3b.buffer;
    d3b.byteOffset;
    d3b.byteLength;
    const v1455 = new DataView(ab, 256);
    var d3c = v1455;
    d3c.buffer;
    d3c.byteOffset;
    d3c.byteLength;
    const v1464 = new DataView(ab, 1, 3.1415926);
    var d4 = v1464;
    d4.buffer;
    d4.byteOffset;
    d4.byteLength;
    function f1471() {
        new DataView(ab, -1);
    }
    f1471();
    function f1477() {
        new DataView();
    }
    f1477();
    function f1481() {
        new DataView([]);
    }
    f1481();
    function f1485() {
        new DataView(ab, 257);
    }
    f1485();
    function f1489() {
        new DataView(ab, 1, 1024);
    }
    f1489();
}
TestDataViewConstructor();
function TestDataViewPropertyTypeChecks() {
    const v1499 = new ArrayBuffer(10);
    const v1500 = new DataView(v1499);
    var a = v1500;
    function CheckProperty(a1503) {
        var d = Object.getOwnPropertyDescriptor(DataView.prototype, a1503);
        var o = {};
        function f1510() {
            d.get.call(o);
        }
        f1510();
        d.get.call(a);
    }
    CheckProperty("buffer");
    CheckProperty("byteOffset");
    CheckProperty("byteLength");
    function CheckGetSetLength(a1524) {
        DataView.prototype["get" + a1524].length;
        DataView.prototype["set" + a1524].length;
    }
    CheckGetSetLength("Int8");
    CheckGetSetLength("Uint8");
    CheckGetSetLength("Int16");
    CheckGetSetLength("Uint16");
    CheckGetSetLength("Int32");
    CheckGetSetLength("Uint32");
    CheckGetSetLength("Float32");
    CheckGetSetLength("Float64");
}
TestDataViewPropertyTypeChecks();
function TestDataViewToStringTag() {
    const v1558 = new ArrayBuffer(10);
    const v1559 = new DataView(v1558);
    var a = v1559;
    Object.prototype.toString.call(a);
    var desc = Object.getOwnPropertyDescriptor(DataView.prototype, Symbol.toStringTag);
    desc.configurable;
    desc.enumerable;
    desc.writable;
    desc.value;
}
function TestEnumerable(a1577, a1578) {
    function props(a1580) {
        var array = [];
        for (const v1583 in a1580) {
            array.push(v1583);
        }
        return array.sort();
    }
    [];
    props(a1577);
    [];
    props(a1577.prototype);
    if (a1578) {
        [];
        props(a1578);
    }
}
const v1594 = new ArrayBuffer();
TestEnumerable(ArrayBuffer, v1594);
for (i = 0; i < typedArrayConstructors.length; i++) {
    TestEnumerable(typedArrayConstructors[i]);
}
const v1607 = new ArrayBuffer();
const v1608 = new DataView(v1607);
TestEnumerable(DataView, v1608);
function TestArbitrary(a1611) {
    function TestProperty(a1613, a1614, a1615) {
        a1613[a1614] = a1615;
        a1613[a1614];
    }
    for (let i1618 = 0; i1618 < 20; i1618++) {
        TestProperty(a1611, "key" + i1618, "val" + i1618);
        TestProperty(a1611, "foo" + i1618, "bar" + i1618);
    }
}
const v1635 = new ArrayBuffer(256);
TestArbitrary(v1635);
for (i = 0; i < typedArrayConstructors.length; i++) {
    const t795 = typedArrayConstructors[i];
    const v1647 = new t795(10);
    TestArbitrary(v1647);
}
const v1650 = new ArrayBuffer(256);
const v1651 = new DataView(v1650);
TestArbitrary(v1651);
function f1653() {
    ArrayBuffer();
}
f1653();
function f1657() {
    const v1658 = new ArrayBuffer();
    DataView(v1658);
}
f1657();
function TestNonConfigurableProperties(a1662) {
    const v1665 = new a1662([100]);
    var arr = v1665;
    Object.getOwnPropertyDescriptor(arr, "0").configurable;
    delete arr[0];
}
for (i = 0; i < typedArrayConstructors.length; i++) {
    TestNonConfigurableProperties(typedArrayConstructors[i]);
}

FuzzIL program written to corpus/typedarray-neutered.fzil
