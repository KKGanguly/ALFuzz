v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    v3 <- BinaryOperation v1, '|', v2
    v4 <- LoadInteger '0'
    v5 <- BinaryOperation v1, '|', v4
    v6 <- BinaryOperation v3, '*', v5
    v7 <- LoadInteger '0'
    v8 <- BinaryOperation v6, '|', v7
    Return v8
EndPlainFunction
v9 <- BeginPlainFunction -> v10
    v11 <- LoadInteger '0'
    v12 <- BinaryOperation v10, '|', v11
    v13 <- LoadInteger '0'
    v14 <- BinaryOperation v10, '|', v13
    v15 <- BinaryOperation v12, '*', v14
    v16 <- LoadInteger '0'
    v17 <- BinaryOperation v15, '|', v16
    Return v17
EndPlainFunction
v18 <- LoadInteger '1'
v19 <- LoadInteger '1'
v20 <- CallFunction v0, [v18, v19]
v21 <- LoadInteger '2'
v22 <- LoadInteger '2'
v23 <- CallFunction v0, [v21, v22]
v24 <- LoadInteger '1593835535'
v25 <- CreateNamedVariable 'big_int', 'var', v24
v26 <- CallFunction v9, [v25]
v27 <- CreateNamedVariable 'expected', 'var', v26
v28 <- CallFunction v0, [v25]
v29 <- CreateNamedVariable 'actual', 'var', v28


function boom(a1) {
    return ((a1 | 0) * (a1 | 0)) | 0;
}
function boom_unoptimized(a10) {
    return ((a10 | 0) * (a10 | 0)) | 0;
}
boom(1, 1);
boom(2, 2);
var big_int = 1593835535;
var expected = boom_unoptimized(big_int);
var actual = boom(big_int);

FuzzIL program written to corpus/regress-mul-canoverflowb.fzil
