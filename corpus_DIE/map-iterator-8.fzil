v0 <- CreateNamedVariable 'Map', 'none'
v1 <- LoadInteger '1'
v2 <- LoadInteger '2'
v3 <- CreateArray [v1, v2]
v4 <- LoadInteger '2'
v5 <- LoadInteger '3'
v6 <- CreateArray [v4, v5]
v7 <- LoadInteger '3'
v8 <- LoadInteger '4'
v9 <- CreateArray [v7, v8]
v10 <- CreateArray [v3, v6, v9]
v11 <- Construct v0, [v10]
v12 <- CreateNamedVariable 'map', 'var', v11
v13 <- CreateNamedVariable 'Set', 'none'
v14 <- LoadInteger '1'
v15 <- LoadInteger '2'
v16 <- LoadInteger '3'
v17 <- CreateArray [v14, v15, v16]
v18 <- Construct v13, [v17]
v19 <- CreateNamedVariable 'set', 'var', v18
v20 <- CallMethod v12, 'keys', []
v21 <- CreateNamedVariable 'iterator', 'var', v20
v22 <- BeginArrowFunction -> 
    v23 <- BeginArrowFunction -> 
        v24 <- LoadBoolean 'true'
        BeginObjectLiteral
            ObjectLiteralAddProperty `done`, v24
        v25 <- EndObjectLiteral
        Return v25
    EndArrowFunction
    BeginObjectLiteral
        ObjectLiteralAddProperty `next`, v23
    v26 <- EndObjectLiteral
    Return v26
EndArrowFunction
v27 <- GetProperty v21, '__proto__'
v28 <- CreateNamedVariable 'Symbol', 'none'
v29 <- GetProperty v28, 'iterator'
SetComputedProperty v27, v29, v22
v30 <- LoadInteger '1'
v31 <- LoadInteger '2'
v32 <- CreateArray [v30, v31]
v33 <- LoadInteger '2'
v34 <- LoadInteger '3'
v35 <- CreateArray [v33, v34]
v36 <- LoadInteger '3'
v37 <- LoadInteger '4'
v38 <- CreateArray [v36, v37]
v39 <- CreateArray [v32, v35, v38]
v40 <- CreateArrayWithSpread [...v12]
v41 <- CreateArray []
v42 <- CallMethod v12, 'entries', []
v43 <- CreateArrayWithSpread [...v42]
v44 <- CreateArray []
v45 <- CallMethod v12, 'keys', []
v46 <- CreateArrayWithSpread [...v45]
v47 <- CreateArray []
v48 <- CallMethod v12, 'values', []
v49 <- CreateArrayWithSpread [...v48]
v50 <- CreateArray []
v51 <- CreateArrayWithSpread [...v21]
v52 <- LoadInteger '1'
v53 <- LoadInteger '2'
v54 <- LoadInteger '3'
v55 <- CreateArray [v52, v53, v54]
v56 <- CreateArrayWithSpread [...v19]
v57 <- LoadInteger '1'
v58 <- LoadInteger '1'
v59 <- CreateArray [v57, v58]
v60 <- LoadInteger '2'
v61 <- LoadInteger '2'
v62 <- CreateArray [v60, v61]
v63 <- LoadInteger '3'
v64 <- LoadInteger '3'
v65 <- CreateArray [v63, v64]
v66 <- CreateArray [v59, v62, v65]
v67 <- CallMethod v19, 'entries', []
v68 <- CreateArrayWithSpread [...v67]
v69 <- LoadInteger '1'
v70 <- LoadInteger '2'
v71 <- LoadInteger '3'
v72 <- CreateArray [v69, v70, v71]
v73 <- CallMethod v19, 'keys', []
v74 <- CreateArrayWithSpread [...v73]
v75 <- LoadInteger '1'
v76 <- LoadInteger '2'
v77 <- LoadInteger '3'
v78 <- CreateArray [v75, v76, v77]
v79 <- CallMethod v19, 'values', []
v80 <- CreateArrayWithSpread [...v79]


const v11 = new Map([[1,2],[2,3],[3,4]]);
var map = v11;
const v18 = new Set([1,2,3]);
var set = v18;
var iterator = map.keys();
const v22 = () => {
    const v23 = () => {
        return { done: true };
    };
    return { next: v23 };
};
const t11 = iterator.__proto__;
t11[Symbol.iterator] = v22;
[[1,2],[2,3],[3,4]];
[...map];
[];
[...map.entries()];
[];
[...map.keys()];
[];
[...map.values()];
[];
[...iterator];
[1,2,3];
[...set];
[[1,1],[2,2],[3,3]];
[...set.entries()];
[1,2,3];
[...set.keys()];
[1,2,3];
[...set.values()];

FuzzIL program written to corpus/map-iterator-8.fzil
