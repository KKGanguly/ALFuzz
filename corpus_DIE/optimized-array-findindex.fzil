v0 <- BeginArrowFunction -> 
    v1 <- LoadInteger '1'
    v2 <- LoadInteger '2'
    v3 <- LoadInteger '3'
    v4 <- LoadInteger '4'
    v5 <- LoadInteger '5'
    v6 <- LoadInteger '6'
    v7 <- LoadInteger '7'
    v8 <- LoadInteger '8'
    v9 <- LoadInteger '9'
    v10 <- LoadInteger '10'
    v11 <- LoadInteger '11'
    v12 <- LoadInteger '12'
    v13 <- LoadInteger '13'
    v14 <- LoadInteger '14'
    v15 <- LoadInteger '15'
    v16 <- LoadInteger '16'
    v17 <- LoadInteger '17'
    v18 <- LoadInteger '18'
    v19 <- LoadInteger '19'
    v20 <- LoadInteger '20'
    v21 <- LoadInteger '21'
    v22 <- LoadInteger '22'
    v23 <- LoadInteger '23'
    v24 <- LoadInteger '24'
    v25 <- LoadInteger '25'
    v26 <- CreateArray [v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25]
    v27 <- CreateNamedVariable 'a', 'const', v26
    v28 <- LoadInteger '0'
    v29 <- CreateNamedVariable 'result', 'let', v28
    v30 <- BeginPlainFunction -> v31
        v32 <- BeginArrowFunction -> v33, v34
            v35 <- LoadInteger '13'
            v36 <- Compare v34, '===', v35
            v37 <- BinaryOperation v36, '&&', v31
            BeginIf v37
                v38 <- LoadInteger '25'
                SetProperty v27, 'abc', v38
            EndIf
            Update v29, '+', v33
            v39 <- LoadInteger '20'
            v40 <- Compare v33, '===', v39
            Return v40
        EndArrowFunction
        v41 <- CallMethod v27, 'findIndex', [v32]
        Return v41
    EndPlainFunction
    v42 <- CallFunction v30, []
    v43 <- CallFunction v30, []
    v44 <- CallFunction v30, []
    v45 <- LoadInteger '19'
    v46 <- LoadBoolean 'true'
    v47 <- CallFunction v30, [v46]
    v48 <- CallFunction v30, []
    v49 <- LoadInteger '1050'
EndArrowFunction
v50 <- CallFunction v0, []
v51 <- BeginArrowFunction -> 
    v52 <- LoadUndefined
    v53 <- CreateNamedVariable 'called_values', 'let', v52
    v54 <- BeginPlainFunction -> v55
        v56 <- LoadInteger '1'
        v57 <- LoadInteger '2'
        v58 <- LoadInteger '3'
        v59 <- LoadInteger '4'
        v60 <- LoadInteger '5'
        v61 <- LoadInteger '6'
        v62 <- LoadInteger '7'
        v63 <- LoadInteger '8'
        v64 <- LoadInteger '9'
        v65 <- LoadInteger '10'
        v66 <- CreateArray [v56, v57, v58, v59, v60, v61, v62, v63, v64, v65]
        v67 <- CreateNamedVariable 'a', 'const', v66
        v68 <- CreateArray []
        Reassign v53, v68
        v69 <- BeginArrowFunction -> v70, v71
            v72 <- CallMethod v53, 'push', [v70]
            v73 <- LoadInteger '5'
            v74 <- Compare v71, '===', v73
            v75 <- BinaryOperation v74, '&&', v55
            v76 <- LoadInteger '8'
            v77 <- LoadInteger '10'
            v78 <- TernaryOperation v75, v76, v77
            SetProperty v67, 'length', v78
            v79 <- LoadInteger '9'
            v80 <- Compare v70, '===', v79
            Return v80
        EndArrowFunction
        v81 <- CallMethod v67, 'findIndex', [v69]
        Return v81
    EndPlainFunction
    v82 <- LoadInteger '8'
    v83 <- CallFunction v54, []
    v84 <- LoadInteger '1'
    v85 <- LoadInteger '2'
    v86 <- LoadInteger '3'
    v87 <- LoadInteger '4'
    v88 <- LoadInteger '5'
    v89 <- LoadInteger '6'
    v90 <- LoadInteger '7'
    v91 <- LoadInteger '8'
    v92 <- LoadInteger '9'
    v93 <- CreateArray [v84, v85, v86, v87, v88, v89, v90, v91, v92]
    v94 <- CallFunction v54, []
    v95 <- LoadInteger '8'
    v96 <- CallFunction v54, []
    v97 <- LoadInteger '1'
    v98 <- UnaryOperation '-', v97
    v99 <- LoadBoolean 'true'
    v100 <- CallFunction v54, [v99]
    v101 <- LoadInteger '1'
    v102 <- LoadInteger '2'
    v103 <- LoadInteger '3'
    v104 <- LoadInteger '4'
    v105 <- LoadInteger '5'
    v106 <- LoadInteger '6'
    v107 <- LoadInteger '7'
    v108 <- LoadInteger '8'
    v109 <- LoadUndefined
    v110 <- LoadUndefined
    v111 <- CreateArray [v101, v102, v103, v104, v105, v106, v107, v108, v109, v110]
    v112 <- CallFunction v54, []
EndArrowFunction
v113 <- CallFunction v51, []
v114 <- BeginArrowFunction -> 
    v115 <- LoadInteger '1'
    v116 <- LoadInteger '2'
    v117 <- LoadInteger '3'
    v118 <- LoadInteger '4'
    v119 <- LoadInteger '5'
    v120 <- CreateArray [v115, v116, v117, v118, v119]
    v121 <- CreateNamedVariable 'a', 'const', v120
    v122 <- BeginPlainFunction -> v123
        v124 <- BeginArrowFunction -> v125, v126
            v127 <- LoadInteger '3'
            v128 <- Compare v126, '===', v127
            v129 <- BinaryOperation v128, '&&', v123
            BeginIf v129
                v130 <- LoadInteger '3'
                SetElement v121, '3', v130
            EndIf
            v131 <- LoadInteger '3'
            v132 <- Compare v125, '>', v131
            Return v132
        EndArrowFunction
        v133 <- CallMethod v121, 'findIndex', [v124]
        Return v133
    EndPlainFunction
    v134 <- LoadInteger '3'
    v135 <- CallFunction v122, []
    v136 <- CallFunction v122, []
    v137 <- LoadInteger '3'
    v138 <- LoadBoolean 'true'
    v139 <- CallFunction v122, [v138]
    v140 <- LoadInteger '4'
    v141 <- CallFunction v122, []
EndArrowFunction
v142 <- CallFunction v114, []
v143 <- BeginArrowFunction -> 
    v144 <- LoadInteger '1'
    v145 <- LoadInteger '2'
    v146 <- LoadInteger '3'
    v147 <- LoadInteger '4'
    v148 <- LoadInteger '5'
    v149 <- CreateArray [v144, v145, v146, v147, v148]
    v150 <- CreateNamedVariable 'a', 'const', v149
    v151 <- BeginPlainFunction -> v152
        v153 <- BeginArrowFunction -> v154, v155
            v156 <- LoadInteger '3'
            v157 <- Compare v155, '===', v156
            v158 <- BinaryOperation v157, '&&', v152
            BeginIf v158
            EndIf
            v159 <- LoadBoolean 'false'
            Return v159
        EndArrowFunction
        v160 <- CallMethod v150, 'findIndex', [v153]
        Return v160
    EndPlainFunction
    v161 <- LoadInteger '1'
    v162 <- UnaryOperation '-', v161
    v163 <- CallFunction v151, []
    v164 <- CallFunction v151, []
    v165 <- LoadInteger '1'
    v166 <- UnaryOperation '-', v165
    v167 <- LoadBoolean 'true'
    v168 <- CallFunction v151, [v167]
    v169 <- LoadInteger '1'
    v170 <- UnaryOperation '-', v169
    v171 <- CallFunction v151, []
EndArrowFunction
v172 <- CallFunction v143, []
v173 <- BeginArrowFunction -> 
    v174 <- LoadInteger '1'
    v175 <- LoadInteger '2'
    v176 <- LoadInteger '3'
    v177 <- LoadInteger '4'
    v178 <- LoadInteger '5'
    v179 <- CreateArray [v174, v175, v176, v177, v178]
    v180 <- CreateNamedVariable 'a', 'const', v179
    v181 <- BeginPlainFunction -> v182
        v183 <- BeginArrowFunction -> v184, v185
            v186 <- LoadInteger '2'
            v187 <- Compare v185, '===', v186
            v188 <- BinaryOperation v187, '&&', v182
            BeginIf v188
                v189 <- LoadInteger '2'
                SetElement v180, '3', v189
            EndIf
            v190 <- LoadInteger '3'
            v191 <- Compare v184, '>', v190
            Return v191
        EndArrowFunction
        v192 <- CallMethod v180, 'findIndex', [v183]
        Return v192
    EndPlainFunction
    v193 <- LoadInteger '3'
    v194 <- CallFunction v181, []
    v195 <- CallFunction v181, []
    v196 <- LoadInteger '4'
    v197 <- LoadBoolean 'true'
    v198 <- CallFunction v181, [v197]
    v199 <- LoadInteger '4'
    v200 <- CallFunction v181, []
EndArrowFunction
v201 <- CallFunction v173, []
v202 <- BeginArrowFunction -> 
    v203 <- LoadInteger '0'
    v204 <- CreateNamedVariable 'result', 'let', v203
    v205 <- BeginPlainFunction -> v206
        v207 <- LoadInteger '0'
        v208 <- LoadInteger '1'
        v209 <- LoadInteger '2'
        v210 <- LoadInteger '3'
        v211 <- LoadInteger '4'
        v212 <- LoadInteger '5'
        v213 <- CreateArray [v207, v208, v209, v210, v211, v212]
        v214 <- CreateNamedVariable 'a_noescape', 'const', v213
        v215 <- BeginArrowFunction -> v216, v217
            v218 <- LoadInteger '0'
            v219 <- BinaryOperation v216, '|', v218
            Update v204, '+', v219
            v220 <- LoadInteger '13'
            v221 <- Compare v217, '===', v220
            v222 <- BinaryOperation v221, '&&', v206
            BeginIf v222
                v223 <- LoadInteger '25'
                SetProperty v214, 'length', v223
            EndIf
            v224 <- LoadBoolean 'false'
            Return v224
        EndArrowFunction
        v225 <- CallMethod v214, 'findIndex', [v215]
    EndPlainFunction
    v226 <- CallFunction v205, []
    v227 <- CallFunction v205, []
    v228 <- CallFunction v205, []
    v229 <- LoadBoolean 'true'
    v230 <- CallFunction v205, [v229]
    v231 <- CallFunction v205, []
    v232 <- LoadInteger '75'
EndArrowFunction
v233 <- CallFunction v202, []
v234 <- BeginArrowFunction -> 
    v235 <- LoadInteger '1'
    v236 <- LoadInteger '2'
    v237 <- LoadInteger '3'
    v238 <- LoadInteger '4'
    v239 <- LoadInteger '5'
    v240 <- LoadInteger '6'
    v241 <- LoadInteger '7'
    v242 <- LoadInteger '8'
    v243 <- LoadInteger '9'
    v244 <- LoadInteger '10'
    v245 <- LoadInteger '11'
    v246 <- LoadInteger '12'
    v247 <- LoadInteger '13'
    v248 <- LoadInteger '14'
    v249 <- LoadInteger '15'
    v250 <- LoadInteger '16'
    v251 <- LoadInteger '17'
    v252 <- LoadInteger '18'
    v253 <- LoadInteger '19'
    v254 <- LoadInteger '20'
    v255 <- LoadInteger '21'
    v256 <- LoadInteger '22'
    v257 <- LoadInteger '23'
    v258 <- LoadInteger '24'
    v259 <- LoadInteger '25'
    v260 <- CreateArray [v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259]
    v261 <- CreateNamedVariable 'a', 'const', v260
    v262 <- LoadInteger '0'
    v263 <- CreateNamedVariable 'result', 'let', v262
    v264 <- BeginPlainFunction -> v265
        v266 <- BeginArrowFunction -> v267, v268
            Update v263, '+', v268
            v269 <- LoadInteger '13'
            v270 <- Compare v268, '===', v269
            v271 <- BinaryOperation v270, '&&', v265
            BeginIf v271
            EndIf
            v272 <- LoadBoolean 'false'
            Return v272
        EndArrowFunction
        v273 <- CallMethod v261, 'findIndex', [v266]
    EndPlainFunction
    v274 <- CallFunction v264, []
    v275 <- CallFunction v264, []
    v276 <- CallFunction v264, []
    v277 <- LoadBoolean 'true'
    v278 <- CallFunction v264, [v277]
    v279 <- CallFunction v264, []
    v280 <- LoadInteger '1500'
EndArrowFunction
v281 <- CallFunction v234, []
v282 <- BeginArrowFunction -> 
    v283 <- LoadInteger '1'
    v284 <- LoadInteger '2'
    v285 <- LoadInteger '3'
    v286 <- LoadInteger '4'
    v287 <- LoadInteger '5'
    v288 <- LoadInteger '6'
    v289 <- LoadInteger '7'
    v290 <- LoadInteger '8'
    v291 <- LoadInteger '9'
    v292 <- LoadInteger '10'
    v293 <- LoadInteger '11'
    v294 <- LoadInteger '12'
    v295 <- LoadInteger '13'
    v296 <- LoadInteger '14'
    v297 <- LoadInteger '15'
    v298 <- LoadInteger '16'
    v299 <- LoadInteger '17'
    v300 <- LoadInteger '18'
    v301 <- LoadInteger '19'
    v302 <- LoadInteger '20'
    v303 <- LoadInteger '21'
    v304 <- LoadInteger '22'
    v305 <- LoadInteger '23'
    v306 <- LoadInteger '24'
    v307 <- LoadInteger '25'
    v308 <- CreateArray [v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307]
    v309 <- CreateNamedVariable 'a', 'const', v308
    v310 <- LoadInteger '0'
    v311 <- CreateNamedVariable 'result', 'let', v310
    v312 <- BeginPlainFunction -> v313
        v314 <- BeginPlainFunction -> v315, v316
            Update v311, '+', v316
            v317 <- LoadInteger '13'
            v318 <- Compare v316, '===', v317
            v319 <- BinaryOperation v318, '&&', v313
            BeginIf v319
            EndIf
            v320 <- LoadBoolean 'false'
            Return v320
        EndPlainFunction
        v321 <- CallMethod v309, 'findIndex', [v314]
    EndPlainFunction
    v322 <- CallFunction v312, []
    v323 <- CallFunction v312, []
    v324 <- CallFunction v312, []
    v325 <- LoadBoolean 'true'
    v326 <- CallFunction v312, [v325]
    v327 <- CallFunction v312, []
    v328 <- LoadInteger '1500'
EndArrowFunction
v329 <- CallFunction v282, []
v330 <- BeginArrowFunction -> 
    v331 <- LoadInteger '1'
    v332 <- LoadInteger '2'
    v333 <- LoadInteger '3'
    v334 <- LoadInteger '4'
    v335 <- LoadInteger '5'
    v336 <- LoadInteger '6'
    v337 <- LoadInteger '7'
    v338 <- LoadInteger '8'
    v339 <- LoadInteger '9'
    v340 <- LoadInteger '10'
    v341 <- LoadInteger '11'
    v342 <- LoadInteger '12'
    v343 <- LoadInteger '13'
    v344 <- LoadInteger '14'
    v345 <- LoadInteger '15'
    v346 <- LoadInteger '16'
    v347 <- LoadInteger '17'
    v348 <- LoadInteger '18'
    v349 <- LoadInteger '19'
    v350 <- LoadInteger '20'
    v351 <- LoadInteger '21'
    v352 <- LoadInteger '22'
    v353 <- LoadInteger '23'
    v354 <- LoadInteger '24'
    v355 <- LoadInteger '25'
    v356 <- CreateArray [v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355]
    v357 <- CreateNamedVariable 'a', 'const', v356
    v358 <- LoadBoolean 'false'
    v359 <- CreateNamedVariable 'caught', 'let', v358
    v360 <- BeginPlainFunction -> v361
        BeginTry
            v362 <- BeginArrowFunction -> v363, v364
                v365 <- LoadInteger '1'
                v366 <- Compare v364, '===', v365
                v367 <- BinaryOperation v366, '&&', v361
                BeginIf v367
                    v368 <- LoadString 'a'
                    ThrowException v368
                EndIf
                v369 <- LoadBoolean 'false'
                Return v369
            EndArrowFunction
            v370 <- CallMethod v357, 'findIndex', [v362]
        BeginCatch -> v371
            v372 <- LoadBoolean 'true'
            Reassign v359, v372
        EndTryCatch
    EndPlainFunction
    v373 <- CallFunction v360, []
    v374 <- CallFunction v360, []
    v375 <- CallFunction v360, []
    v376 <- BeginArrowFunction -> 
        v377 <- LoadBoolean 'true'
        v378 <- CallFunction v360, [v377]
        Return v378
    EndArrowFunction
    v379 <- CallFunction v376, []
    v380 <- CallFunction v360, []
EndArrowFunction
v381 <- CallFunction v330, []
v382 <- BeginArrowFunction -> 
    v383 <- LoadInteger '1'
    v384 <- LoadInteger '2'
    v385 <- LoadInteger '3'
    v386 <- LoadInteger '4'
    v387 <- LoadInteger '5'
    v388 <- LoadInteger '6'
    v389 <- LoadInteger '7'
    v390 <- LoadInteger '8'
    v391 <- LoadInteger '9'
    v392 <- LoadInteger '10'
    v393 <- CreateArray [v383, v384, v385, v386, v387, v388, v389, v390, v391, v392]
    v394 <- CreateNamedVariable 'a', 'let', v393
    v395 <- LoadBoolean 'false'
    v396 <- CreateNamedVariable 'caught', 'let', v395
    v397 <- BeginPlainFunction -> v398
        v399 <- BeginPlainFunction -> v400, v401
            v402 <- LoadInteger '1'
            v403 <- Compare v401, '===', v402
            v404 <- BinaryOperation v403, '&&', v398
            BeginIf v404
                v405 <- LoadString 'a'
                ThrowException v405
            EndIf
            v406 <- LoadBoolean 'false'
            Return v406
        EndPlainFunction
        BeginTry
            v407 <- CallMethod v394, 'findIndex', [v399]
        BeginCatch -> v408
            v409 <- LoadBoolean 'true'
            Reassign v396, v409
        EndTryCatch
    EndPlainFunction
    v410 <- CallFunction v397, []
    v411 <- CallFunction v397, []
    v412 <- CallFunction v397, []
    v413 <- BeginArrowFunction -> 
        v414 <- LoadBoolean 'true'
        v415 <- CallFunction v397, [v414]
        Return v415
    EndArrowFunction
    v416 <- CallFunction v413, []
    v417 <- CallFunction v397, []
EndArrowFunction
v418 <- CallFunction v382, []
v419 <- BeginPlainFunction -> 
    v420 <- LoadInteger '1'
    v421 <- LoadInteger '2'
    v422 <- LoadInteger '3'
    v423 <- LoadInteger '4'
    v424 <- CreateArray [v420, v421, v422, v423]
    v425 <- CreateNamedVariable 'a', 'const', v424
    v426 <- BeginPlainFunction -> v427
        v428 <- BeginPlainFunction -> v429, v430
            v431 <- LoadInteger '1'
            v432 <- Compare v430, '===', v431
            v433 <- BinaryOperation v432, '&&', v427
            BeginIf v433
                v434 <- LoadString 'some exception'
                ThrowException v434
            EndIf
            v435 <- LoadInteger '3'
            v436 <- Compare v429, '===', v435
            Return v436
        EndPlainFunction
        v437 <- LoadInteger '0'
        v438 <- CreateNamedVariable 'result', 'let', v437
        BeginTry
            v439 <- CallMethod v425, 'findIndex', [v428]
            Reassign v438, v439
        BeginCatch -> v440
            v441 <- LoadString 'some exception'
            v442 <- LoadString 'nope'
            Reassign v438, v442
        EndTryCatch
        Return v438
    EndPlainFunction
    v443 <- LoadInteger '2'
    v444 <- LoadBoolean 'false'
    v445 <- CallFunction v426, [v444]
    v446 <- LoadInteger '2'
    v447 <- LoadBoolean 'false'
    v448 <- CallFunction v426, [v447]
    v449 <- LoadString 'nope'
    v450 <- LoadBoolean 'true'
    v451 <- CallFunction v426, [v450]
    v452 <- LoadString 'nope'
    v453 <- LoadBoolean 'true'
    v454 <- CallFunction v426, [v453]
    v455 <- LoadInteger '2'
    v456 <- LoadBoolean 'false'
    v457 <- CallFunction v426, [v456]
    v458 <- LoadString 'nope'
    v459 <- LoadBoolean 'true'
    v460 <- CallFunction v426, [v459]
EndPlainFunction
v461 <- CallFunction v419, []
v462 <- BeginArrowFunction -> 
    v463 <- LoadRegExp 'Array\.findIndex' ''
    v464 <- CreateNamedVariable 're', 'const', v463
    v465 <- BeginPlainFunction -> v466
        v467 <- LoadInteger '1'
        v468 <- LoadInteger '2'
        v469 <- LoadInteger '3'
        v470 <- CreateArray [v467, v468, v469]
        v471 <- CreateNamedVariable 'b', 'const', v470
        v472 <- LoadInteger '0'
        v473 <- CreateNamedVariable 'result', 'let', v472
        v474 <- BeginArrowFunction -> v475, v476
            Update v473, '+', v475
            v477 <- LoadInteger '1'
            v478 <- Compare v476, '===', v477
            BeginIf v478
                v479 <- CreateNamedVariable 'Error', 'none'
                v480 <- Construct v479, []
                v481 <- CreateNamedVariable 'e', 'const', v480
                v482 <- GetProperty v481, 'stack'
                v483 <- CallMethod v464, 'exec', [v482]
                v484 <- LoadNull
                v485 <- Compare v483, '!==', v484
            EndIf
            v486 <- LoadBoolean 'false'
            Return v486
        EndArrowFunction
        v487 <- CallMethod v471, 'findIndex', [v474]
    EndPlainFunction
    v488 <- CallFunction v465, []
    v489 <- CallFunction v465, []
    v490 <- CallFunction v465, []
EndArrowFunction
v491 <- CallFunction v462, []
v492 <- BeginArrowFunction -> 
    v493 <- LoadRegExp 'Array\.findIndex' ''
    v494 <- CreateNamedVariable 're', 'const', v493
    v495 <- BeginPlainFunction -> v496
        v497 <- LoadInteger '1'
        v498 <- LoadInteger '2'
        v499 <- LoadInteger '3'
        v500 <- CreateArray [v497, v498, v499]
        v501 <- CreateNamedVariable 'b', 'const', v500
        v502 <- LoadBoolean 'false'
        v503 <- CreateNamedVariable 'did_assert_error', 'let', v502
        v504 <- LoadInteger '0'
        v505 <- CreateNamedVariable 'result', 'let', v504
        v506 <- BeginPlainFunction -> v507, v508
            Update v505, '+', v507
            v509 <- LoadInteger '1'
            v510 <- Compare v508, '===', v509
            BeginIf v510
                v511 <- CreateNamedVariable 'Error', 'none'
                v512 <- Construct v511, []
                v513 <- CreateNamedVariable 'e', 'const', v512
                v514 <- GetProperty v513, 'stack'
                v515 <- CallMethod v494, 'exec', [v514]
                v516 <- LoadNull
                v517 <- Compare v515, '!==', v516
                v518 <- LoadBoolean 'true'
                Reassign v503, v518
            EndIf
            v519 <- LoadBoolean 'false'
            Return v519
        EndPlainFunction
        v520 <- CallMethod v501, 'findIndex', [v506]
        Return v503
    EndPlainFunction
    v521 <- CallFunction v495, []
    v522 <- CallFunction v495, []
    v523 <- CallFunction v495, []
EndArrowFunction
v524 <- CallFunction v492, []
v525 <- BeginArrowFunction -> 
    v526 <- LoadRegExp 'Array\.findIndex' ''
    v527 <- CreateNamedVariable 're', 'const', v526
    v528 <- BeginPlainFunction -> v529
        v530 <- LoadInteger '1'
        v531 <- LoadInteger '2'
        v532 <- LoadInteger '3'
        v533 <- CreateArray [v530, v531, v532]
        v534 <- CreateNamedVariable 'b', 'const', v533
        v535 <- LoadBoolean 'false'
        v536 <- CreateNamedVariable 'did_assert_error', 'let', v535
        v537 <- LoadInteger '0'
        v538 <- CreateNamedVariable 'result', 'let', v537
        v539 <- BeginArrowFunction -> v540, v541
            Update v538, '+', v540
            v542 <- LoadInteger '1'
            v543 <- Compare v541, '===', v542
            BeginIf v543
            BeginElse
                v544 <- LoadInteger '2'
                v545 <- Compare v541, '===', v544
                BeginIf v545
                    v546 <- CreateNamedVariable 'Error', 'none'
                    v547 <- Construct v546, []
                    v548 <- CreateNamedVariable 'e', 'const', v547
                    v549 <- GetProperty v548, 'stack'
                    v550 <- CallMethod v527, 'exec', [v549]
                    v551 <- LoadNull
                    v552 <- Compare v550, '!==', v551
                    v553 <- LoadBoolean 'true'
                    Reassign v536, v553
                EndIf
            EndIf
            v554 <- LoadBoolean 'false'
            Return v554
        EndArrowFunction
        v555 <- CallMethod v534, 'findIndex', [v539]
        Return v536
    EndPlainFunction
    v556 <- CallFunction v528, []
    v557 <- CallFunction v528, []
    v558 <- CallFunction v528, []
EndArrowFunction
v559 <- CallFunction v525, []
v560 <- BeginArrowFunction -> 
    v561 <- LoadRegExp 'Array\.findIndex' ''
    v562 <- CreateNamedVariable 're', 'const', v561
    v563 <- LoadInteger '1'
    v564 <- LoadInteger '2'
    v565 <- LoadInteger '3'
    v566 <- CreateArray [v563, v564, v565]
    v567 <- CreateNamedVariable 'a', 'const', v566
    v568 <- LoadInteger '0'
    v569 <- CreateNamedVariable 'result', 'let', v568
    v570 <- BeginPlainFunction -> 
        v571 <- BeginArrowFunction -> v572, v573
            Update v569, '+', v573
            v574 <- LoadInteger '1'
            v575 <- Compare v573, '===', v574
            BeginIf v575
                v576 <- CreateNamedVariable 'Error', 'none'
                v577 <- Construct v576, []
                ThrowException v577
            EndIf
            v578 <- LoadBoolean 'false'
            Return v578
        EndArrowFunction
        v579 <- CallMethod v567, 'findIndex', [v571]
    EndPlainFunction
    v580 <- BeginArrowFunction -> 
        v581 <- CallFunction v570, []
        Return v581
    EndArrowFunction
    v582 <- CallFunction v580, []
    v583 <- BeginArrowFunction -> 
        v584 <- CallFunction v570, []
        Return v584
    EndArrowFunction
    v585 <- CallFunction v583, []
    BeginTry
        v586 <- CallFunction v570, []
    BeginCatch -> v587
        v588 <- GetProperty v587, 'stack'
        v589 <- CallMethod v562, 'exec', [v588]
        v590 <- LoadNull
        v591 <- Compare v589, '!==', v590
    EndTryCatch
    BeginTry
        v592 <- CallFunction v570, []
    BeginCatch -> v593
        v594 <- GetProperty v593, 'stack'
        v595 <- CallMethod v562, 'exec', [v594]
        v596 <- LoadNull
        v597 <- Compare v595, '!==', v596
    EndTryCatch
EndArrowFunction
v598 <- CallFunction v560, []
v599 <- BeginArrowFunction -> 
    v600 <- LoadInteger '1'
    v601 <- LoadInteger '2'
    v602 <- LoadInteger '3'
    v603 <- CreateArray [v600, v601, v602]
    v604 <- CreateNamedVariable 'a', 'const', v603
    v605 <- LoadInteger '0'
    v606 <- CreateNamedVariable 'result', 'let', v605
    v607 <- BeginPlainFunction -> 
        v608 <- BeginArrowFunction -> v609, v610
            Update v606, '+', v609
            v611 <- LoadBoolean 'false'
            Return v611
        EndArrowFunction
        v612 <- CallMethod v604, 'findIndex', [v608]
    EndPlainFunction
    v613 <- CallFunction v607, []
    v614 <- CallFunction v607, []
    v615 <- CallFunction v607, []
    BeginObjectLiteral
    v616 <- EndObjectLiteral
    SetProperty v604, 'constructor', v616
    v617 <- CallFunction v607, []
    v618 <- CallFunction v607, []
    v619 <- LoadInteger '24'
EndArrowFunction
v620 <- CallFunction v599, []
v621 <- BeginArrowFunction -> 
    v622 <- LoadInteger '1'
    v623 <- LoadInteger '2'
    v624 <- LoadUndefined
    v625 <- LoadInteger '3'
    v626 <- LoadInteger '4'
    v627 <- CreateArray [v622, v623, v624, v625, v626]
    v628 <- CreateNamedVariable 'a', 'const', v627
    v629 <- BeginPlainFunction -> 
        v630 <- CreateArray []
        v631 <- CreateNamedVariable 'callback_values', 'const', v630
        v632 <- BeginArrowFunction -> v633
            v634 <- CallMethod v631, 'push', [v633]
            v635 <- LoadBoolean 'false'
            Return v635
        EndArrowFunction
        v636 <- CallMethod v628, 'findIndex', [v632]
        Return v631
    EndPlainFunction
    v637 <- CallFunction v629, []
    v638 <- CallFunction v629, []
    v639 <- LoadInteger '1'
    v640 <- LoadInteger '2'
    v641 <- LoadUndefined
    v642 <- LoadInteger '3'
    v643 <- LoadInteger '4'
    v644 <- CreateArray [v639, v640, v641, v642, v643]
    v645 <- CallFunction v629, []
EndArrowFunction
v646 <- CallFunction v621, []
v647 <- BeginArrowFunction -> 
    v648 <- LoadFloat '1.5'
    v649 <- LoadFloat '2.5'
    v650 <- LoadUndefined
    v651 <- LoadFloat '3.5'
    v652 <- LoadFloat '4.5'
    v653 <- CreateArray [v648, v649, v650, v651, v652]
    v654 <- CreateNamedVariable 'a', 'const', v653
    v655 <- BeginPlainFunction -> 
        v656 <- CreateArray []
        v657 <- CreateNamedVariable 'callback_values', 'const', v656
        v658 <- BeginArrowFunction -> v659
            v660 <- CallMethod v657, 'push', [v659]
            v661 <- LoadBoolean 'false'
            Return v661
        EndArrowFunction
        v662 <- CallMethod v654, 'findIndex', [v658]
        Return v657
    EndPlainFunction
    v663 <- CallFunction v655, []
    v664 <- CallFunction v655, []
    v665 <- LoadFloat '1.5'
    v666 <- LoadFloat '2.5'
    v667 <- LoadUndefined
    v668 <- LoadFloat '3.5'
    v669 <- LoadFloat '4.5'
    v670 <- CreateArray [v665, v666, v667, v668, v669]
    v671 <- CallFunction v655, []
EndArrowFunction
v672 <- CallFunction v647, []
v673 <- BeginArrowFunction -> 
    v674 <- BeginPlainFunction -> v675, v676
        BeginIf v676
            v677 <- LoadInteger '3'
            SetProperty v675, 'foo', v677
        EndIf
        Return v675
    EndPlainFunction
    v678 <- BeginPlainFunction -> v679, v680
        v681 <- BeginArrowFunction -> v682
            v683 <- LoadBoolean 'false'
            Return v683
        EndArrowFunction
        v684 <- CallFunction v674, [v679, v680]
        v685 <- CallMethod v679, 'findIndex', [v681, v684]
        Return v685
    EndPlainFunction
    v686 <- LoadInteger '1'
    v687 <- LoadInteger '2'
    v688 <- LoadInteger '3'
    v689 <- CreateArray [v686, v687, v688]
    v690 <- CreateNamedVariable 'a', 'let', v689
    v691 <- LoadBoolean 'false'
    v692 <- CallFunction v678, [v690, v691]
    v693 <- LoadBoolean 'false'
    v694 <- CallFunction v678, [v690, v693]
    v695 <- LoadBoolean 'false'
    v696 <- CallFunction v678, [v690, v695]
    v697 <- LoadBoolean 'true'
    v698 <- CallFunction v678, [v690, v697]
EndArrowFunction
v699 <- CallFunction v673, []
v700 <- BeginArrowFunction -> 
    v701 <- LoadInteger '1'
    v702 <- LoadInteger '2'
    v703 <- LoadInteger '3'
    v704 <- LoadInteger '4'
    v705 <- LoadInteger '5'
    v706 <- CreateArray [v701, v702, v703, v704, v705]
    v707 <- CreateNamedVariable 'a', 'const', v706
    v708 <- BeginPlainFunction -> 
        v709 <- LoadUndefined
        v710 <- CallMethod v707, 'findIndex', [v709]
        Return v710
    EndPlainFunction
    v711 <- CallFunction v708, []
    v712 <- CreateNamedVariable 'TypeError', 'none'
    BeginTry
        v713 <- CallFunction v708, []
    BeginCatch -> v714
    EndTryCatch
    v715 <- CallFunction v708, []
EndArrowFunction
v716 <- CallFunction v700, []


const v0 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function eagerDeoptInCalled(a31) {
        const v32 = (a33, a34) => {
            if ((a34 === 13) && a31) {
                a.abc = 25;
            }
            result += a33;
            return a33 === 20;
        };
        return a.findIndex(v32);
    }
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
};
v0();
const v51 = () => {
    let called_values;
    function eagerDeoptInCalled(a55) {
        const a = [1,2,3,4,5,6,7,8,9,10];
        called_values = [];
        const v69 = (a70, a71) => {
            called_values.push(a70);
            a.length = (a71 === 5) && a55 ? 8 : 10;
            return a70 === 9;
        };
        return a.findIndex(v69);
    }
    eagerDeoptInCalled();
    [1,2,3,4,5,6,7,8,9];
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    -1;
    eagerDeoptInCalled(true);
    [1,2,3,4,5,6,7,8,,,];
    eagerDeoptInCalled();
};
v51();
const v114 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a123) {
        const v124 = (a125, a126) => {
            if ((a126 === 3) && a123) {
                a[3] = 3;
            }
            return a125 > 3;
        };
        return a.findIndex(v124);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v114();
const v143 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a152) {
        const v153 = (a154, a155) => {
            if ((a155 === 3) && a152) {
            }
            return false;
        };
        return a.findIndex(v153);
    }
    -1;
    lazyChanger();
    lazyChanger();
    -1;
    lazyChanger(true);
    -1;
    lazyChanger();
};
v143();
const v173 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a182) {
        const v183 = (a184, a185) => {
            if ((a185 === 2) && a182) {
                a[3] = 2;
            }
            return a184 > 3;
        };
        return a.findIndex(v183);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v173();
const v202 = () => {
    let result = 0;
    function eagerDeoptInCalled(a206) {
        const a_noescape = [0,1,2,3,4,5];
        const v215 = (a216, a217) => {
            result += a216 | 0;
            if ((a217 === 13) && a206) {
                a_noescape.length = 25;
            }
            return false;
        };
        a_noescape.findIndex(v215);
    }
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
};
v202();
const v234 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function lazyDeopt(a265) {
        const v266 = (a267, a268) => {
            result += a268;
            if ((a268 === 13) && a265) {
            }
            return false;
        };
        a.findIndex(v266);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
};
v234();
const v282 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function lazyDeopt(a313) {
        function callback(a315, a316) {
            result += a316;
            if ((a316 === 13) && a313) {
            }
            return false;
        }
        a.findIndex(callback);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
};
v282();
const v330 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let caught = false;
    function lazyDeopt(a361) {
        try {
            const v362 = (a363, a364) => {
                if ((a364 === 1) && a361) {
                    throw "a";
                }
                return false;
            };
            a.findIndex(v362);
        } catch(e371) {
            caught = true;
        }
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v376 = () => {
        return lazyDeopt(true);
    };
    v376();
    lazyDeopt();
};
v330();
const v382 = () => {
    let a = [1,2,3,4,5,6,7,8,9,10];
    let caught = false;
    function lazyDeopt(a398) {
        function callback(a400, a401) {
            if ((a401 === 1) && a398) {
                throw "a";
            }
            return false;
        }
        try {
            a.findIndex(callback);
        } catch(e408) {
            caught = true;
        }
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v413 = () => {
        return lazyDeopt(true);
    };
    v413();
    lazyDeopt();
};
v382();
function TestThrowIntoDeoptimizedOuter() {
    const a = [1,2,3,4];
    function lazyDeopt(a427) {
        function callback(a429, a430) {
            if ((a430 === 1) && a427) {
                throw "some exception";
            }
            return a429 === 3;
        }
        let result = 0;
        try {
            result = a.findIndex(callback);
        } catch(e440) {
            result = "nope";
        }
        return result;
    }
    lazyDeopt(false);
    lazyDeopt(false);
    lazyDeopt(true);
    lazyDeopt(true);
    lazyDeopt(false);
    lazyDeopt(true);
}
TestThrowIntoDeoptimizedOuter();
const v462 = () => {
    const re = /Array\.findIndex/;
    function lazyDeopt(a466) {
        const b = [1,2,3];
        let result = 0;
        const v474 = (a475, a476) => {
            result += a475;
            if (a476 === 1) {
                const v480 = new Error();
                const e = v480;
                re.exec(e.stack) !== null;
            }
            return false;
        };
        b.findIndex(v474);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v462();
const v492 = () => {
    const re = /Array\.findIndex/;
    function lazyDeopt(a496) {
        const b = [1,2,3];
        let did_assert_error = false;
        let result = 0;
        function callback(a507, a508) {
            result += a507;
            if (a508 === 1) {
                const v512 = new Error();
                const e = v512;
                re.exec(e.stack) !== null;
                did_assert_error = true;
            }
            return false;
        }
        b.findIndex(callback);
        return did_assert_error;
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v492();
const v525 = () => {
    const re = /Array\.findIndex/;
    function lazyDeopt(a529) {
        const b = [1,2,3];
        let did_assert_error = false;
        let result = 0;
        const v539 = (a540, a541) => {
            result += a540;
            if (a541 === 1) {
            } else {
                if (a541 === 2) {
                    const v547 = new Error();
                    const e = v547;
                    re.exec(e.stack) !== null;
                    did_assert_error = true;
                }
            }
            return false;
        };
        b.findIndex(v539);
        return did_assert_error;
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v525();
const v560 = () => {
    const re = /Array\.findIndex/;
    const a = [1,2,3];
    let result = 0;
    function lazyDeopt() {
        const v571 = (a572, a573) => {
            result += a573;
            if (a573 === 1) {
                const v577 = new Error();
                throw v577;
            }
            return false;
        };
        a.findIndex(v571);
    }
    const v580 = () => {
        return lazyDeopt();
    };
    v580();
    const v583 = () => {
        return lazyDeopt();
    };
    v583();
    try {
        lazyDeopt();
    } catch(e587) {
        re.exec(e587.stack) !== null;
    }
    try {
        lazyDeopt();
    } catch(e593) {
        re.exec(e593.stack) !== null;
    }
};
v560();
const v599 = () => {
    const a = [1,2,3];
    let result = 0;
    function prototypeChanged() {
        const v608 = (a609, a610) => {
            result += a609;
            return false;
        };
        a.findIndex(v608);
    }
    prototypeChanged();
    prototypeChanged();
    prototypeChanged();
    a.constructor = {};
    prototypeChanged();
    prototypeChanged();
};
v599();
const v621 = () => {
    const a = [1,2,,3,4];
    function withHoles() {
        const callback_values = [];
        const v632 = (a633) => {
            callback_values.push(a633);
            return false;
        };
        a.findIndex(v632);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1,2,,3,4];
    withHoles();
};
v621();
const v647 = () => {
    const a = [1.5,2.5,,3.5,4.5];
    function withHoles() {
        const callback_values = [];
        const v658 = (a659) => {
            callback_values.push(a659);
            return false;
        };
        a.findIndex(v658);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1.5,2.5,,3.5,4.5];
    withHoles();
};
v647();
const v673 = () => {
    function side_effect(a675, a676) {
        if (a676) {
            a675.foo = 3;
        }
        return a675;
    }
    function unreliable(a679, a680) {
        const v681 = (a682) => {
            return false;
        };
        return a679.findIndex(v681, side_effect(a679, a680));
    }
    let a = [1,2,3];
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, true);
};
v673();
const v700 = () => {
    const a = [1,2,3,4,5];
    function notCallable() {
        return a.findIndex(undefined);
    }
    notCallable();
    try {
        notCallable();
    } catch(e714) {
    }
    notCallable();
};
v700();

FuzzIL program written to corpus/optimized-array-findindex.fzil
