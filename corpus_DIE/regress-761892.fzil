v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    v3 <- LoadInteger '1'
    v4 <- LoadInteger '1'
    v5 <- CreateNamedVariable 'Math', 'none'
    v6 <- CallMethod v5, 'min', [v3, v4]
    v7 <- Compare v2, '!=', v6
    v8 <- LoadInteger '1'
    v9 <- BinaryOperation v7, '&&', v8
    v10 <- CreateNamedVariable 'x0', 'var', v9
    v11 <- LoadFloat '1.1'
    v12 <- BinaryOperation v1, '||', v10
    v13 <- Compare v11, '!=', v12
EndPlainFunction
v14 <- LoadFloat '1.1'
v15 <- CallFunction v0, [v14]
v16 <- LoadFloat '1.1'
v17 <- CallFunction v0, [v16]
v18 <- LoadInteger '1'
v19 <- CallFunction v0, [v18]


function f(a1) {
    var x0 = (0 != Math.min(1, 1)) && 1;
    1.1 != (a1 || x0);
}
f(1.1);
f(1.1);
f(1);

FuzzIL program written to corpus/regress-761892.fzil
