v0 <- BeginPlainFunction -> 
    v1 <- BeginArrowFunction -> 
        v2 <- LoadBoolean 'true'
        Return v2
    EndArrowFunction
    v3 <- CreateNamedVariable 'Symbol', 'none'
    v4 <- GetProperty v3, 'hasInstance'
    BeginObjectLiteral
        ObjectLiteralAddComputedProperty v4, v1
    v5 <- EndObjectLiteral
    v6 <- CreateNamedVariable 'C', 'var', v5
    v7 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v8 <- EndObjectLiteral
        v9 <- TestInstanceOf v8, v6
        Return v9
    EndPlainFunction
    v10 <- CallFunction v7, []
    v11 <- CallFunction v7, []
    v12 <- CallFunction v7, []
    v13 <- BeginArrowFunction -> 
        v14 <- LoadBoolean 'false'
        Return v14
    EndArrowFunction
    v15 <- GetProperty v3, 'hasInstance'
    SetComputedProperty v6, v15, v13
    v16 <- CallFunction v7, []
EndPlainFunction
v17 <- CallFunction v0, []
v18 <- BeginPlainFunction -> 
    v19 <- LoadFloat '0.1'
    v20 <- CreateNamedVariable 'Symbol', 'none'
    v21 <- GetProperty v20, 'hasInstance'
    BeginObjectLiteral
        ObjectLiteralAddComputedProperty v21, v19
    v22 <- EndObjectLiteral
    v23 <- CreateNamedVariable 'C', 'var', v22
    v24 <- BeginPlainFunction -> v25, v26
        BeginIf v25
            BeginObjectLiteral
            v27 <- EndObjectLiteral
            v28 <- TestInstanceOf v27, v26
            Return v28
        EndIf
        v29 <- LoadBoolean 'false'
        Return v29
    EndPlainFunction
    v30 <- BeginPlainFunction -> v31
        v32 <- CallFunction v24, [v31, v23]
        Return v32
    EndPlainFunction
    v33 <- LoadBoolean 'true'
    v34 <- CreateNamedVariable 'Number', 'none'
    v35 <- CallFunction v24, [v33, v34]
    v36 <- LoadBoolean 'true'
    v37 <- CallFunction v24, [v36, v34]
    v38 <- LoadBoolean 'false'
    v39 <- CallFunction v30, [v38]
    v40 <- LoadBoolean 'false'
    v41 <- CallFunction v30, [v40]
    v42 <- BeginArrowFunction -> 
        v43 <- LoadBoolean 'true'
        v44 <- CallFunction v30, [v43]
        Return v44
    EndArrowFunction
    v45 <- CallFunction v42, []
EndPlainFunction
v46 <- CallFunction v18, []
v47 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v48 <- EndObjectLiteral
    v49 <- CreateNamedVariable 'Symbol', 'none'
    v50 <- GetProperty v49, 'hasInstance'
    BeginObjectLiteral
        ObjectLiteralAddComputedProperty v50, v48
    v51 <- EndObjectLiteral
    v52 <- CreateNamedVariable 'C', 'var', v51
    v53 <- BeginPlainFunction -> v54, v55
        BeginIf v54
            BeginObjectLiteral
            v56 <- EndObjectLiteral
            v57 <- TestInstanceOf v56, v55
            Return v57
        EndIf
        v58 <- LoadBoolean 'false'
        Return v58
    EndPlainFunction
    v59 <- BeginPlainFunction -> v60
        v61 <- CallFunction v53, [v60, v52]
        Return v61
    EndPlainFunction
    v62 <- LoadBoolean 'true'
    v63 <- CreateNamedVariable 'Number', 'none'
    v64 <- CallFunction v53, [v62, v63]
    v65 <- LoadBoolean 'true'
    v66 <- CallFunction v53, [v65, v63]
    v67 <- LoadBoolean 'false'
    v68 <- CallFunction v59, [v67]
    v69 <- LoadBoolean 'false'
    v70 <- CallFunction v59, [v69]
    v71 <- BeginArrowFunction -> 
        v72 <- LoadBoolean 'true'
        v73 <- CallFunction v59, [v72]
        Return v73
    EndArrowFunction
    v74 <- CallFunction v71, []
EndPlainFunction
v75 <- CallFunction v47, []
v76 <- BeginPlainFunction -> 
    v77 <- CreateNamedVariable 'Symbol', 'none'
    v78 <- GetProperty v77, 'hasInstance'
    BeginObjectLiteral
        BeginObjectLiteralComputedMethod v78 -> v79
            v80 <- LoadBoolean 'true'
            Return v80
        EndObjectLiteralComputedMethod
    v81 <- EndObjectLiteral
    v82 <- CreateNamedVariable 'B', 'var', v81
    BeginObjectLiteral
        ObjectLiteralAddProperty `__proto__`, v82
    v83 <- EndObjectLiteral
    v84 <- CreateNamedVariable 'C', 'var', v83
    v85 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v86 <- EndObjectLiteral
        v87 <- TestInstanceOf v86, v84
        Return v87
    EndPlainFunction
    v88 <- CallFunction v85, []
    v89 <- CallFunction v85, []
    v90 <- CallFunction v85, []
    v91 <- BeginArrowFunction -> 
        v92 <- LoadBoolean 'false'
        Return v92
    EndArrowFunction
    v93 <- GetProperty v77, 'hasInstance'
    SetComputedProperty v82, v93, v91
    v94 <- CallFunction v85, []
EndPlainFunction
v95 <- CallFunction v76, []
v96 <- BeginPlainFunction -> 
    v97 <- BeginArrowFunction -> 
        v98 <- LoadBoolean 'false'
        Return v98
    EndArrowFunction
    v99 <- CreateNamedVariable 'Symbol', 'none'
    v100 <- GetProperty v99, 'hasInstance'
    BeginObjectLiteral
        ObjectLiteralAddComputedProperty v100, v97
    v101 <- EndObjectLiteral
    v102 <- CreateNamedVariable 'A', 'var', v101
    BeginObjectLiteral
        ObjectLiteralAddProperty `__proto__`, v102
    v103 <- EndObjectLiteral
    v104 <- CreateNamedVariable 'B', 'var', v103
    BeginObjectLiteral
        ObjectLiteralAddProperty `__proto__`, v104
    v105 <- EndObjectLiteral
    v106 <- CreateNamedVariable 'C', 'var', v105
    v107 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v108 <- EndObjectLiteral
        v109 <- TestInstanceOf v108, v106
        Return v109
    EndPlainFunction
    v110 <- CallFunction v107, []
    v111 <- CallFunction v107, []
    v112 <- CallFunction v107, []
    v113 <- BeginArrowFunction -> 
        v114 <- LoadBoolean 'true'
        Return v114
    EndArrowFunction
    v115 <- GetProperty v99, 'hasInstance'
    SetComputedProperty v104, v115, v113
    v116 <- CallFunction v107, []
EndPlainFunction
v117 <- CallFunction v96, []


function NonConstHasInstance() {
    const v1 = () => {
        return true;
    };
    const v4 = Symbol.hasInstance;
    var C = { [v4]: v1 };
    function f() {
        return {} instanceof C;
    }
    f();
    f();
    f();
    const v13 = () => {
        return false;
    };
    C[Symbol.hasInstance] = v13;
    f();
}
NonConstHasInstance();
function NumberHasInstance() {
    const v21 = Symbol.hasInstance;
    var C = { [v21]: 0.1 };
    function f(a25, a26) {
        if (a25) {
            return {} instanceof a26;
        }
        return false;
    }
    function g(a31) {
        return f(a31, C);
    }
    f(true, Number);
    f(true, Number);
    g(false);
    g(false);
    const v42 = () => {
        return g(true);
    };
    v42();
}
NumberHasInstance();
function NonFunctionHasInstance() {
    const v48 = {};
    const v50 = Symbol.hasInstance;
    var C = { [v50]: v48 };
    function f(a54, a55) {
        if (a54) {
            return {} instanceof a55;
        }
        return false;
    }
    function g(a60) {
        return f(a60, C);
    }
    f(true, Number);
    f(true, Number);
    g(false);
    g(false);
    const v71 = () => {
        return g(true);
    };
    v71();
}
NonFunctionHasInstance();
function NonConstHasInstanceProto() {
    const v78 = Symbol.hasInstance;
    const v81 = {
        [v78]() {
            return true;
        },
    };
    var B = v81;
    var C = { __proto__: B };
    function f() {
        return {} instanceof C;
    }
    f();
    f();
    f();
    const v91 = () => {
        return false;
    };
    B[Symbol.hasInstance] = v91;
    f();
}
NonConstHasInstanceProto();
function HasInstanceOverwriteOnProto() {
    const v97 = () => {
        return false;
    };
    const v100 = Symbol.hasInstance;
    var A = { [v100]: v97 };
    var B = { __proto__: A };
    var C = { __proto__: B };
    function f() {
        return {} instanceof C;
    }
    f();
    f();
    f();
    const v113 = () => {
        return true;
    };
    B[Symbol.hasInstance] = v113;
    f();
}
HasInstanceOverwriteOnProto();

FuzzIL program written to corpus/instance-of-overridden-has-instance.fzil
