BeginForLoopInitializer
    v0 <- LoadInteger '0'
BeginForLoopCondition -> v1
    v2 <- LoadInteger '10'
    v3 <- LoadInteger '1000'
    v4 <- BinaryOperation v2, '*', v3
    v5 <- Compare v1, '<', v4
BeginForLoopAfterthought v5 -> v6
    v7 <- UnaryOperation v6, '++'
BeginForLoopBody -> v8
    v9 <- LoadBoolean 'true'
    v10 <- CreateNamedVariable 'Object', 'none'
    v11 <- GetProperty v10, 'prototype'
    v12 <- LoadString 'generatedProperty'
    v13 <- BinaryOperation v12, '+', v8
    SetComputedProperty v11, v13, v9
EndForLoop
v14 <- LoadInteger '1'
v15 <- LoadInteger '2'
v16 <- LoadInteger '3'
v17 <- CreateArray [v14, v15, v16]
v18 <- CreateNamedVariable 'array', 'var', v17
v19 <- LoadInteger '1'
v20 <- LoadString 'a'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v19
    ObjectLiteralAddProperty `0`, v20
v21 <- EndObjectLiteral
v22 <- CreateNamedVariable 'object', 'var', v21
v23 <- BeginPlainFunction -> v24, v25, v26
    SetComputedProperty v24, v25, v26
EndPlainFunction
BeginObjectLiteral
v27 <- EndObjectLiteral
v28 <- CreateNamedVariable 'receiver', 'var', v27
BeginForLoopInitializer
    v29 <- LoadInteger '0'
BeginForLoopCondition -> v30
    v31 <- LoadInteger '100'
    v32 <- Compare v30, '<', v31
BeginForLoopAfterthought v32 -> v33
    v34 <- UnaryOperation v33, '++'
BeginForLoopBody -> v35
    v36 <- LoadString 'prop'
    v37 <- BinaryOperation v36, '+', v35
    v38 <- LoadString 'value'
    v39 <- CallFunction v23, [v28, v37, v38]
EndForLoop
v40 <- BeginPlainFunction -> 
    v41 <- CreateArray []
    v42 <- CallMethod v41, 'concat', [v18]
    v43 <- CreateArray []
    v44 <- CallMethod v18, 'concat', [v43]
    v45 <- LoadInteger '1'
    v46 <- LoadInteger '2'
    v47 <- LoadInteger '3'
    v48 <- LoadInteger '1'
    v49 <- LoadInteger '2'
    v50 <- LoadInteger '3'
    v51 <- CreateArray [v45, v46, v47, v48, v49, v50]
    v52 <- CallMethod v18, 'concat', [v18]
    v53 <- CreateArray [v22]
    v54 <- CreateArray []
    v55 <- CallMethod v54, 'concat', [v22]
    v56 <- LoadInteger '1'
    v57 <- LoadInteger '2'
    v58 <- LoadInteger '3'
    v59 <- CreateArray [v56, v57, v58, v22]
    v60 <- CallMethod v18, 'concat', [v22]
    v61 <- CreateArray [v22]
    v62 <- CreateArray []
    v63 <- CreateNamedVariable 'Array', 'none'
    v64 <- GetProperty v63, 'prototype'
    v65 <- GetProperty v64, 'concat'
    v66 <- CallMethod v65, 'call', [v22, v62]
    v67 <- LoadInteger '1'
    v68 <- LoadInteger '2'
    v69 <- LoadInteger '3'
    v70 <- CreateArray [v22, v67, v68, v69]
    v71 <- GetProperty v63, 'prototype'
    v72 <- GetProperty v71, 'concat'
    v73 <- CallMethod v72, 'call', [v22, v18]
    v74 <- CreateArray [v22, v22]
    v75 <- GetProperty v63, 'prototype'
    v76 <- GetProperty v75, 'concat'
    v77 <- CallMethod v76, 'call', [v22, v22]
EndPlainFunction
v78 <- CallFunction v40, []
v79 <- CreateNamedVariable 'Object', 'none'
v80 <- GetProperty v79, 'prototype'
v81 <- CreateNamedVariable 'Symbol', 'none'
v82 <- GetProperty v81, 'isConcatSpreadable'
v83 <- LoadBoolean 'false'
v84 <- CallFunction v23, [v80, v82, v83]
v85 <- CreateArray []
v86 <- CreateArray [v85, v18]
v87 <- CreateArray []
v88 <- CallMethod v87, 'concat', [v18]
v89 <- CreateArray []
v90 <- CreateArray [v18, v89]
v91 <- CreateArray []
v92 <- CallMethod v18, 'concat', [v91]
v93 <- CreateArray [v18, v18]
v94 <- CallMethod v18, 'concat', [v18]
v95 <- CreateArray []
v96 <- CreateArray [v95, v22]
v97 <- CreateArray []
v98 <- CallMethod v97, 'concat', [v22]
v99 <- CreateArray [v18, v22]
v100 <- CallMethod v18, 'concat', [v22]
v101 <- CreateArray []
v102 <- CreateArray [v22, v101]
v103 <- CreateArray []
v104 <- CreateNamedVariable 'Array', 'none'
v105 <- GetProperty v104, 'prototype'
v106 <- GetProperty v105, 'concat'
v107 <- CallMethod v106, 'call', [v22, v103]
v108 <- CreateArray [v22, v18]
v109 <- GetProperty v104, 'prototype'
v110 <- GetProperty v109, 'concat'
v111 <- CallMethod v110, 'call', [v22, v18]
v112 <- CreateArray [v22, v22]
v113 <- GetProperty v104, 'prototype'
v114 <- GetProperty v113, 'concat'
v115 <- CallMethod v114, 'call', [v22, v22]
v116 <- GetProperty v79, 'prototype'
v117 <- GetProperty v81, 'isConcatSpreadable'
v118 <- LoadBoolean 'true'
v119 <- CallFunction v23, [v116, v117, v118]
v120 <- CreateArray []
v121 <- CallMethod v120, 'concat', [v18]
v122 <- CreateArray []
v123 <- CallMethod v18, 'concat', [v122]
v124 <- LoadInteger '1'
v125 <- LoadInteger '2'
v126 <- LoadInteger '3'
v127 <- LoadInteger '1'
v128 <- LoadInteger '2'
v129 <- LoadInteger '3'
v130 <- CreateArray [v124, v125, v126, v127, v128, v129]
v131 <- CallMethod v18, 'concat', [v18]
v132 <- LoadString 'a'
v133 <- CreateArray [v132]
v134 <- CreateArray []
v135 <- CallMethod v134, 'concat', [v22]
v136 <- LoadInteger '1'
v137 <- LoadInteger '2'
v138 <- LoadInteger '3'
v139 <- LoadString 'a'
v140 <- CreateArray [v136, v137, v138, v139]
v141 <- CallMethod v18, 'concat', [v22]
v142 <- LoadString 'a'
v143 <- CreateArray [v142]
v144 <- CreateArray []
v145 <- GetProperty v104, 'prototype'
v146 <- GetProperty v145, 'concat'
v147 <- CallMethod v146, 'call', [v22, v144]
v148 <- LoadString 'a'
v149 <- LoadInteger '1'
v150 <- LoadInteger '2'
v151 <- LoadInteger '3'
v152 <- CreateArray [v148, v149, v150, v151]
v153 <- GetProperty v104, 'prototype'
v154 <- GetProperty v153, 'concat'
v155 <- CallMethod v154, 'call', [v22, v18]
v156 <- LoadString 'a'
v157 <- LoadString 'a'
v158 <- CreateArray [v156, v157]
v159 <- GetProperty v104, 'prototype'
v160 <- GetProperty v159, 'concat'
v161 <- CallMethod v160, 'call', [v22, v22]
v162 <- GetProperty v79, 'prototype'
v163 <- GetProperty v81, 'isConcatSpreadable'
v164 <- DeleteComputedProperty v162, v163
v165 <- CallFunction v40, []


for (let i1 = 0; i1 < (10 * 1000); i1++) {
    const t1 = Object.prototype;
    t1["generatedProperty" + i1] = true;
}
var array = [1,2,3];
var object = { length: 1, 0: "a" };
function SetProperty(a24, a25, a26) {
    a24[a25] = a26;
}
var receiver = {};
for (let i30 = 0; i30 < 100; i30++) {
    SetProperty(receiver, "prop" + i30, "value");
}
function testConcatDefaults() {
    ([]).concat(array);
    array.concat([]);
    [1,2,3,1,2,3];
    array.concat(array);
    [object];
    ([]).concat(object);
    [1,2,3,object];
    array.concat(object);
    [object];
    const v62 = [];
    Array.prototype.concat.call(object, v62);
    [object,1,2,3];
    Array.prototype.concat.call(object, array);
    [object,object];
    Array.prototype.concat.call(object, object);
}
testConcatDefaults();
SetProperty(Object.prototype, Symbol.isConcatSpreadable, false);
[[],array];
([]).concat(array);
[array,[]];
array.concat([]);
[array,array];
array.concat(array);
[[],object];
([]).concat(object);
[array,object];
array.concat(object);
[object,[]];
const v103 = [];
Array.prototype.concat.call(object, v103);
[object,array];
Array.prototype.concat.call(object, array);
[object,object];
Array.prototype.concat.call(object, object);
SetProperty(Object.prototype, Symbol.isConcatSpreadable, true);
([]).concat(array);
array.concat([]);
[1,2,3,1,2,3];
array.concat(array);
["a"];
([]).concat(object);
[1,2,3,"a"];
array.concat(object);
["a"];
const v144 = [];
Array.prototype.concat.call(object, v144);
["a",1,2,3];
Array.prototype.concat.call(object, array);
["a","a"];
Array.prototype.concat.call(object, object);
const t60 = Object.prototype;
delete t60[Symbol.isConcatSpreadable];
testConcatDefaults();

FuzzIL program written to corpus/array-concat-object-proto-generic-dict.fzil
