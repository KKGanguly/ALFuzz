v0 <- CreateNamedVariable 'Array', 'none'
v1 <- GetProperty v0, 'prototype'
v2 <- GetProperty v1, 'flatMap'
v3 <- GetProperty v2, 'length'
v4 <- LoadInteger '1'
v5 <- GetProperty v0, 'prototype'
v6 <- GetProperty v5, 'flatMap'
v7 <- GetProperty v6, 'name'
v8 <- LoadString 'flatMap'
v9 <- BeginArrowFunction -> v10
    v11 <- LoadInteger '2'
    v12 <- BinaryOperation v10, '**', v11
    v13 <- CreateArray [v10, v12]
    Return v13
EndArrowFunction
v14 <- LoadInteger '1'
v15 <- LoadInteger '2'
v16 <- LoadInteger '3'
v17 <- LoadInteger '4'
v18 <- CreateArray [v14, v15, v16, v17]
v19 <- CallMethod v18, 'flatMap', [v9]
v20 <- LoadInteger '1'
v21 <- LoadInteger '1'
v22 <- LoadInteger '2'
v23 <- LoadInteger '4'
v24 <- LoadInteger '3'
v25 <- LoadInteger '9'
v26 <- LoadInteger '4'
v27 <- LoadInteger '16'
v28 <- CreateArray [v20, v21, v22, v23, v24, v25, v26, v27]
v29 <- BeginArrowFunction -> v30
    v31 <- LoadInteger '2'
    v32 <- BinaryOperation v30, '**', v31
    v33 <- CreateArray [v30, v32]
    v34 <- CreateArray [v33]
    Return v34
EndArrowFunction
v35 <- LoadInteger '1'
v36 <- LoadInteger '2'
v37 <- LoadInteger '3'
v38 <- LoadInteger '4'
v39 <- CreateArray [v35, v36, v37, v38]
v40 <- CallMethod v39, 'flatMap', [v29]
v41 <- LoadInteger '1'
v42 <- LoadInteger '1'
v43 <- CreateArray [v41, v42]
v44 <- LoadInteger '2'
v45 <- LoadInteger '4'
v46 <- CreateArray [v44, v45]
v47 <- LoadInteger '3'
v48 <- LoadInteger '9'
v49 <- CreateArray [v47, v48]
v50 <- LoadInteger '4'
v51 <- LoadInteger '16'
v52 <- CreateArray [v50, v51]
v53 <- CreateArray [v43, v46, v49, v52]
BeginBlockStatement
    v54 <- CreateNamedVariable 'Set', 'none'
    v55 <- CreateNamedVariable 'Infinity', 'none'
    v56 <- UnaryOperation '-', v55
    v57 <- LoadInteger '1'
    v58 <- UnaryOperation '-', v57
    v59 <- LoadInteger '0'
    v60 <- UnaryOperation '-', v59
    v61 <- LoadInteger '0'
    v62 <- UnaryOperation '+', v61
    v63 <- LoadInteger '1'
    v64 <- UnaryOperation '+', v63
    v65 <- LoadNull
    v66 <- LoadUndefined
    v67 <- LoadBoolean 'true'
    v68 <- LoadBoolean 'false'
    v69 <- LoadString ''
    v70 <- LoadString 'foo'
    v71 <- LoadRegExp '.' ''
    v72 <- CreateArray []
    BeginObjectLiteral
    v73 <- EndObjectLiteral
    v74 <- LoadNull
    v75 <- CreateNamedVariable 'Object', 'none'
    v76 <- CallMethod v75, 'create', [v74]
    v77 <- CreateNamedVariable 'Proxy', 'none'
    BeginObjectLiteral
    v78 <- EndObjectLiteral
    BeginObjectLiteral
    v79 <- EndObjectLiteral
    v80 <- Construct v77, [v78, v79]
    v81 <- CreateNamedVariable 'Symbol', 'none'
    v82 <- CallFunction v81, []
    v83 <- BeginArrowFunction -> v84
        v85 <- LoadInteger '2'
        v86 <- BinaryOperation v84, '**', v85
        Return v86
    EndArrowFunction
    v87 <- CreateNamedVariable 'String', 'none'
    v88 <- CreateArray [v56, v58, v60, v62, v64, v55, v65, v66, v67, v68, v69, v70, v71, v72, v73, v76, v80, v82, v83, v87]
    v89 <- Construct v54, [v88]
    v90 <- CreateNamedVariable 'elements', 'const', v89
    BeginForOfLoop v90 -> v91
        v92 <- BeginArrowFunction -> v93
            v94 <- CreateArray [v93, v93]
            Return v94
        EndArrowFunction
        v95 <- CreateArray [v91]
        v96 <- CallMethod v95, 'flatMap', [v92]
        v97 <- CreateArray [v91, v91]
    EndForOfLoop
EndBlockStatement
BeginBlockStatement
    v98 <- LoadInteger '42'
    v99 <- CreateArray [v98]
    v100 <- CreateNamedVariable 'array', 'const', v99
    v101 <- BeginArrowFunction -> v102
        v103 <- CreateArray [v102, v102]
        Return v103
    EndArrowFunction
    v104 <- CreateArray [v100]
    v105 <- CallMethod v104, 'flatMap', [v101]
    v106 <- CreateArray [v100, v100]
EndBlockStatement
BeginBlockStatement
    v107 <- CreateNamedVariable 'Set', 'none'
    v108 <- CreateNamedVariable 'Infinity', 'none'
    v109 <- UnaryOperation '-', v108
    v110 <- LoadInteger '1'
    v111 <- UnaryOperation '-', v110
    v112 <- LoadInteger '0'
    v113 <- UnaryOperation '-', v112
    v114 <- LoadInteger '0'
    v115 <- UnaryOperation '+', v114
    v116 <- LoadInteger '1'
    v117 <- UnaryOperation '+', v116
    v118 <- LoadNull
    v119 <- LoadUndefined
    v120 <- LoadBoolean 'true'
    v121 <- LoadBoolean 'false'
    v122 <- LoadString ''
    v123 <- LoadString 'foo'
    v124 <- LoadRegExp '.' ''
    v125 <- CreateArray []
    BeginObjectLiteral
    v126 <- EndObjectLiteral
    v127 <- LoadNull
    v128 <- CreateNamedVariable 'Object', 'none'
    v129 <- CallMethod v128, 'create', [v127]
    v130 <- CreateNamedVariable 'Proxy', 'none'
    BeginObjectLiteral
    v131 <- EndObjectLiteral
    BeginObjectLiteral
    v132 <- EndObjectLiteral
    v133 <- Construct v130, [v131, v132]
    v134 <- CreateNamedVariable 'Symbol', 'none'
    v135 <- CallFunction v134, []
    v136 <- CreateArray [v109, v111, v113, v115, v117, v108, v118, v119, v120, v121, v122, v123, v124, v125, v126, v129, v133, v135]
    v137 <- Construct v107, [v136]
    v138 <- CreateNamedVariable 'nonCallables', 'const', v137
    BeginForOfLoop v138 -> v139
        v140 <- BeginArrowFunction -> 
            v141 <- CreateArray []
            v142 <- CallMethod v141, 'flatMap', [v139]
        EndArrowFunction
        v143 <- CallFunction v140, []
        v144 <- CreateNamedVariable 'TypeError', 'none'
    EndForOfLoop
EndBlockStatement
BeginBlockStatement
    v145 <- LoadInteger '42'
    BeginObjectLiteral
        ObjectLiteralAddProperty `foo`, v145
        BeginObjectLiteralGetter `length` -> v146
            v147 <- LoadInteger '0'
            v148 <- CreateNamedVariable 'object', 'none'
            SetProperty v148, 'foo', v147
        EndObjectLiteralGetter
    v149 <- EndObjectLiteral
    v150 <- CreateNamedVariable 'object', 'const', v149
    v151 <- BeginArrowFunction -> v152
        v153 <- CreateArray [v152, v152]
        Return v153
    EndArrowFunction
    v154 <- CreateArray [v150]
    v155 <- CallMethod v154, 'flatMap', [v151]
    v156 <- CreateNamedVariable 'result', 'const', v155
    v157 <- CreateArray [v150, v150]
    v158 <- GetElement v156, '0'
    v159 <- GetProperty v158, 'foo'
    v160 <- LoadInteger '42'
EndBlockStatement
v161 <- BeginArrowFunction -> 
    v162 <- LoadNull
    v163 <- BeginArrowFunction -> v164
        Return v164
    EndArrowFunction
    v165 <- GetProperty v0, 'prototype'
    v166 <- GetProperty v165, 'flatMap'
    v167 <- CallMethod v166, 'call', [v162, v163]
EndArrowFunction
v168 <- CallFunction v161, []
v169 <- CreateNamedVariable 'TypeError', 'none'
v170 <- BeginArrowFunction -> 
    v171 <- LoadUndefined
    v172 <- BeginArrowFunction -> v173
        Return v173
    EndArrowFunction
    v174 <- GetProperty v0, 'prototype'
    v175 <- GetProperty v174, 'flatMap'
    v176 <- CallMethod v175, 'call', [v171, v172]
EndArrowFunction
v177 <- CallFunction v170, []
v178 <- LoadInteger '1'
v179 <- LoadString 'a'
v180 <- LoadString 'b'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v178
    ObjectLiteralAddElement `0`, v179
    ObjectLiteralAddElement `1`, v180
v181 <- EndObjectLiteral
v182 <- BeginArrowFunction -> v183
    Return v183
EndArrowFunction
v184 <- GetProperty v0, 'prototype'
v185 <- GetProperty v184, 'flatMap'
v186 <- CallMethod v185, 'call', [v181, v182]
v187 <- LoadString 'a'
v188 <- CreateArray [v187]
v189 <- LoadInteger '2'
v190 <- LoadString 'a'
v191 <- LoadString 'b'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v189
    ObjectLiteralAddElement `0`, v190
    ObjectLiteralAddElement `1`, v191
v192 <- EndObjectLiteral
v193 <- BeginArrowFunction -> v194
    Return v194
EndArrowFunction
v195 <- GetProperty v0, 'prototype'
v196 <- GetProperty v195, 'flatMap'
v197 <- CallMethod v196, 'call', [v192, v193]
v198 <- LoadString 'a'
v199 <- LoadString 'b'
v200 <- CreateArray [v198, v199]
BeginBlockStatement
    v201 <- BeginPlainFunction -> 
        v202 <- LoadThis
        v203 <- CreateArray [v202]
        Return v203
    EndPlainFunction
    v204 <- LoadString 'abc'
    v205 <- LoadInteger '1'
    v206 <- LoadInteger '2'
    v207 <- LoadInteger '3'
    v208 <- CreateArray [v205, v206, v207]
    v209 <- CallMethod v208, 'flatMap', [v201, v204]
    v210 <- CreateNamedVariable 'result', 'const', v209
    v211 <- LoadBoolean 'true'
    v212 <- GetElement v210, '0'
    v213 <- LoadString 'abc'
    v214 <- Compare v212, '==', v213
    v215 <- LoadBoolean 'true'
    v216 <- GetElement v210, '1'
    v217 <- LoadString 'abc'
    v218 <- Compare v216, '==', v217
    v219 <- LoadBoolean 'true'
    v220 <- GetElement v210, '2'
    v221 <- LoadString 'abc'
    v222 <- Compare v220, '==', v221
EndBlockStatement
BeginBlockStatement
    v223 <- LoadString 'a'
    v224 <- LoadString 'b'
    v225 <- LoadString 'c'
    v226 <- LoadString 'wat'
    BeginObjectLiteral
        ObjectLiteralAddElement `0`, v223
        ObjectLiteralAddElement `1`, v224
        ObjectLiteralAddElement `2`, v225
        ObjectLiteralAddProperty `length`, v226
    v227 <- EndObjectLiteral
    v228 <- CreateNamedVariable 'input', 'const', v227
    v229 <- BeginArrowFunction -> v230
        v231 <- CreateArray [v230]
        Return v231
    EndArrowFunction
    v232 <- GetProperty v0, 'prototype'
    v233 <- GetProperty v232, 'flatMap'
    v234 <- CallMethod v233, 'call', [v228, v229]
    v235 <- CreateArray []
EndBlockStatement
BeginBlockStatement
    v236 <- LoadInteger '0'
    v237 <- CreateNamedVariable 'count', 'let', v236
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v238
            v239 <- UnaryOperation '++', v237
            v240 <- LoadInteger '0'
            Return v240
        EndObjectLiteralGetter
    v241 <- EndObjectLiteral
    v242 <- CreateNamedVariable 'input', 'const', v241
    v243 <- BeginArrowFunction -> v244
        v245 <- CreateArray [v244]
        Return v245
    EndArrowFunction
    v246 <- GetProperty v0, 'prototype'
    v247 <- GetProperty v246, 'flatMap'
    v248 <- CallMethod v247, 'call', [v242, v243]
    v249 <- CreateNamedVariable 'result', 'const', v248
    v250 <- LoadInteger '1'
EndBlockStatement
BeginBlockStatement
    v251 <- GetProperty v0, 'prototype'
    v252 <- LoadString 'flatMap'
    v253 <- CreateNamedVariable 'Object', 'none'
    v254 <- CallMethod v253, 'getOwnPropertyDescriptor', [v251, v252]
    v255 <- CreateNamedVariable 'descriptor', 'const', v254
    v256 <- GetProperty v255, 'value'
    v257 <- GetProperty v0, 'prototype'
    v258 <- GetProperty v257, 'flatMap'
    v259 <- GetProperty v255, 'writable'
    v260 <- LoadBoolean 'true'
    v261 <- GetProperty v255, 'enumerable'
    v262 <- LoadBoolean 'false'
    v263 <- GetProperty v255, 'configurable'
    v264 <- LoadBoolean 'true'
EndBlockStatement


Array.prototype.flatMap.length;
Array.prototype.flatMap.name;
const v9 = (a10) => {
    return [a10,a10 ** 2];
};
([1,2,3,4]).flatMap(v9);
[1,1,2,4,3,9,4,16];
const v29 = (a30) => {
    return [[a30,a30 ** 2]];
};
([1,2,3,4]).flatMap(v29);
[[1,1],[2,4],[3,9],[4,16]];
{
    const v56 = -Infinity;
    const v58 = -1;
    const v60 = -0;
    const v62 = +0;
    const v64 = +1;
    const v71 = /./;
    const v72 = [];
    const v73 = {};
    const v76 = Object.create(null);
    const v78 = {};
    const v80 = new Proxy(v78, {});
    const v82 = Symbol();
    const v83 = (a84) => {
        return a84 ** 2;
    };
    const v89 = new Set([v56,v58,v60,v62,v64,Infinity,null,,true,false,"","foo",v71,v72,v73,v76,v80,v82,v83,String]);
    const elements = v89;
    for (const v91 of elements) {
        const v92 = (a93) => {
            return [a93,a93];
        };
        ([v91]).flatMap(v92);
        [v91,v91];
    }
}
{
    const array = [42];
    const v101 = (a102) => {
        return [a102,a102];
    };
    ([array]).flatMap(v101);
    [array,array];
}
{
    const v109 = -Infinity;
    const v111 = -1;
    const v113 = -0;
    const v115 = +0;
    const v117 = +1;
    const v124 = /./;
    const v125 = [];
    const v126 = {};
    const v129 = Object.create(null);
    const v131 = {};
    const v133 = new Proxy(v131, {});
    const v137 = new Set([v109,v111,v113,v115,v117,Infinity,null,,true,false,"","foo",v124,v125,v126,v129,v133,Symbol()]);
    const nonCallables = v137;
    for (const v139 of nonCallables) {
        const v140 = () => {
            ([]).flatMap(v139);
        };
        v140();
    }
}
{
    const v149 = {
        foo: 42,
        get length() {
            object.foo = 0;
        },
    };
    const object = v149;
    const v151 = (a152) => {
        return [a152,a152];
    };
    const result = ([object]).flatMap(v151);
    [object,object];
    result[0].foo;
}
const v161 = () => {
    const v163 = (a164) => {
        return a164;
    };
    Array.prototype.flatMap.call(null, v163);
};
v161();
const v170 = () => {
    const v172 = (a173) => {
        return a173;
    };
    Array.prototype.flatMap.call(undefined, v172);
};
v170();
const v181 = { length: 1, 0: "a", 1: "b" };
const v182 = (a183) => {
    return a183;
};
Array.prototype.flatMap.call(v181, v182);
["a"];
const v192 = { length: 2, 0: "a", 1: "b" };
const v193 = (a194) => {
    return a194;
};
Array.prototype.flatMap.call(v192, v193);
["a","b"];
{
    function f201() {
        return [this];
    }
    const result = ([1,2,3]).flatMap(f201, "abc");
    result[0] == "abc";
    result[1] == "abc";
    result[2] == "abc";
}
{
    const input = { 0: "a", 1: "b", 2: "c", length: "wat" };
    const v229 = (a230) => {
        return [a230];
    };
    Array.prototype.flatMap.call(input, v229);
    [];
}
{
    let count = 0;
    const v241 = {
        get length() {
            ++count;
            return 0;
        },
    };
    const input = v241;
    const v243 = (a244) => {
        return [a244];
    };
    const result = Array.prototype.flatMap.call(input, v243);
}
{
    const descriptor = Object.getOwnPropertyDescriptor(Array.prototype, "flatMap");
    descriptor.value;
    Array.prototype.flatMap;
    descriptor.writable;
    descriptor.enumerable;
    descriptor.configurable;
}

FuzzIL program written to corpus/array-flatMap.fzil
