v0 <- BeginPlainFunction -> 
    v1 <- LoadThis
    Return v1
EndPlainFunction
v2 <- BeginPlainFunction -> v3
    Return v3
EndPlainFunction
v4 <- LoadThis
v5 <- CallMethod v0, 'apply', []
v6 <- LoadString '1-0'
v7 <- LoadThis
v8 <- LoadThis
v9 <- CallMethod v0, 'apply', [v8]
v10 <- LoadString '2a'
v11 <- LoadThis
v12 <- LoadThis
v13 <- CreateNamedVariable 'Array', 'none'
v14 <- LoadInteger '1'
v15 <- Construct v13, [v14]
v16 <- CallMethod v0, 'apply', [v12, v15]
v17 <- LoadString '2b'
v18 <- LoadThis
v19 <- LoadThis
v20 <- LoadInteger '2'
v21 <- Construct v13, [v20]
v22 <- CallMethod v0, 'apply', [v19, v21]
v23 <- LoadString '2c'
v24 <- LoadThis
v25 <- LoadThis
v26 <- LoadInteger '4242'
v27 <- Construct v13, [v26]
v28 <- CallMethod v0, 'apply', [v25, v27]
v29 <- LoadString '2d'
v30 <- LoadThis
v31 <- LoadNull
v32 <- CallMethod v0, 'apply', [v31]
v33 <- LoadString '3a'
v34 <- LoadThis
v35 <- LoadNull
v36 <- LoadInteger '1'
v37 <- Construct v13, [v36]
v38 <- CallMethod v0, 'apply', [v35, v37]
v39 <- LoadString '3b'
v40 <- LoadThis
v41 <- LoadNull
v42 <- LoadInteger '2'
v43 <- Construct v13, [v42]
v44 <- CallMethod v0, 'apply', [v41, v43]
v45 <- LoadString '3c'
v46 <- LoadThis
v47 <- LoadThis
v48 <- LoadInteger '4242'
v49 <- Construct v13, [v48]
v50 <- CallMethod v0, 'apply', [v47, v49]
v51 <- LoadString '3d'
v52 <- LoadThis
v53 <- LoadInteger '0'
v54 <- Void_ v53
v55 <- CallMethod v0, 'apply', [v54]
v56 <- LoadString '4a'
v57 <- LoadThis
v58 <- LoadInteger '0'
v59 <- Void_ v58
v60 <- LoadInteger '1'
v61 <- Construct v13, [v60]
v62 <- CallMethod v0, 'apply', [v59, v61]
v63 <- LoadString '4b'
v64 <- LoadThis
v65 <- LoadInteger '0'
v66 <- Void_ v65
v67 <- LoadInteger '2'
v68 <- Construct v13, [v67]
v69 <- CallMethod v0, 'apply', [v66, v68]
v70 <- LoadString '4c'
v71 <- LoadInteger '0'
v72 <- Void_ v71
v73 <- CallMethod v2, 'apply', []
v74 <- LoadString '1-1'
v75 <- LoadInteger '0'
v76 <- Void_ v75
v77 <- LoadThis
v78 <- CallMethod v2, 'apply', [v77]
v79 <- LoadString '5a'
v80 <- LoadInteger '0'
v81 <- Void_ v80
v82 <- LoadThis
v83 <- LoadInteger '1'
v84 <- Construct v13, [v83]
v85 <- CallMethod v2, 'apply', [v82, v84]
v86 <- LoadString '5b'
v87 <- LoadInteger '0'
v88 <- Void_ v87
v89 <- LoadThis
v90 <- LoadInteger '2'
v91 <- Construct v13, [v90]
v92 <- CallMethod v2, 'apply', [v89, v91]
v93 <- LoadString '5c'
v94 <- LoadInteger '0'
v95 <- Void_ v94
v96 <- LoadThis
v97 <- LoadInteger '4242'
v98 <- Construct v13, [v97]
v99 <- CallMethod v2, 'apply', [v96, v98]
v100 <- LoadString '5d'
v101 <- LoadInteger '42'
v102 <- LoadThis
v103 <- LoadInteger '42'
v104 <- LoadInteger '43'
v105 <- Construct v13, [v103, v104]
v106 <- CallMethod v2, 'apply', [v102, v105]
v107 <- LoadString '5e'
v108 <- LoadString 'foo'
v109 <- LoadThis
v110 <- LoadString 'foo'
v111 <- LoadString 'bar'
v112 <- LoadString 'baz'
v113 <- LoadString 'bo'
v114 <- Construct v13, [v110, v111, v112, v113]
v115 <- CallMethod v2, 'apply', [v109, v114]
v116 <- LoadString '5f'
v117 <- LoadInteger '0'
v118 <- Void_ v117
v119 <- LoadNull
v120 <- CallMethod v2, 'apply', [v119]
v121 <- LoadString '6a'
v122 <- LoadInteger '0'
v123 <- Void_ v122
v124 <- LoadNull
v125 <- LoadInteger '1'
v126 <- Construct v13, [v125]
v127 <- CallMethod v2, 'apply', [v124, v126]
v128 <- LoadString '6b'
v129 <- LoadInteger '0'
v130 <- Void_ v129
v131 <- LoadNull
v132 <- LoadInteger '2'
v133 <- Construct v13, [v132]
v134 <- CallMethod v2, 'apply', [v131, v133]
v135 <- LoadString '6c'
v136 <- LoadInteger '0'
v137 <- Void_ v136
v138 <- LoadNull
v139 <- LoadInteger '4242'
v140 <- Construct v13, [v139]
v141 <- CallMethod v2, 'apply', [v138, v140]
v142 <- LoadString '6d'
v143 <- LoadInteger '42'
v144 <- LoadNull
v145 <- LoadInteger '42'
v146 <- LoadInteger '43'
v147 <- Construct v13, [v145, v146]
v148 <- CallMethod v2, 'apply', [v144, v147]
v149 <- LoadString '6e'
v150 <- LoadString 'foo'
v151 <- LoadNull
v152 <- LoadString 'foo'
v153 <- LoadString 'bar'
v154 <- LoadString 'baz'
v155 <- LoadString 'bo'
v156 <- Construct v13, [v152, v153, v154, v155]
v157 <- CallMethod v2, 'apply', [v151, v156]
v158 <- LoadString '6f'
v159 <- LoadInteger '0'
v160 <- Void_ v159
v161 <- LoadInteger '0'
v162 <- Void_ v161
v163 <- CallMethod v2, 'apply', [v162]
v164 <- LoadString '7a'
v165 <- LoadInteger '0'
v166 <- Void_ v165
v167 <- LoadInteger '0'
v168 <- Void_ v167
v169 <- LoadInteger '1'
v170 <- Construct v13, [v169]
v171 <- CallMethod v2, 'apply', [v168, v170]
v172 <- LoadString '7b'
v173 <- LoadInteger '0'
v174 <- Void_ v173
v175 <- LoadInteger '0'
v176 <- Void_ v175
v177 <- LoadInteger '2'
v178 <- Construct v13, [v177]
v179 <- CallMethod v2, 'apply', [v176, v178]
v180 <- LoadString '7c'
v181 <- LoadInteger '0'
v182 <- Void_ v181
v183 <- LoadInteger '0'
v184 <- Void_ v183
v185 <- LoadInteger '4242'
v186 <- Construct v13, [v185]
v187 <- CallMethod v2, 'apply', [v184, v186]
v188 <- LoadString '7d'
v189 <- LoadInteger '42'
v190 <- LoadInteger '0'
v191 <- Void_ v190
v192 <- LoadInteger '42'
v193 <- LoadInteger '43'
v194 <- Construct v13, [v192, v193]
v195 <- CallMethod v2, 'apply', [v191, v194]
v196 <- LoadString '7e'
v197 <- LoadString 'foo'
v198 <- LoadInteger '0'
v199 <- Void_ v198
v200 <- LoadString 'foo'
v201 <- LoadString 'bar'
v202 <- LoadString 'ba'
v203 <- LoadString 'b'
v204 <- Construct v13, [v200, v201, v202, v203]
v205 <- CallMethod v2, 'apply', [v199, v204]
v206 <- LoadString '7f'
v207 <- LoadInteger '42'
v208 <- LoadString 'foo'
v209 <- LoadString 'fish'
v210 <- LoadString 'horse'
v211 <- Construct v13, [v207, v208, v209, v210]
v212 <- CreateNamedVariable 'arr', 'var', v211
v213 <- BeginPlainFunction -> v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225
    v226 <- LoadString ''
    v227 <- BinaryOperation v226, '+', v214
    v228 <- BinaryOperation v227, '+', v215
    v229 <- BinaryOperation v228, '+', v216
    v230 <- BinaryOperation v229, '+', v217
    v231 <- BinaryOperation v230, '+', v218
    v232 <- BinaryOperation v231, '+', v219
    v233 <- BinaryOperation v232, '+', v220
    v234 <- BinaryOperation v233, '+', v221
    v235 <- BinaryOperation v234, '+', v222
    v236 <- BinaryOperation v235, '+', v223
    v237 <- BinaryOperation v236, '+', v224
    v238 <- BinaryOperation v237, '+', v225
    Return v238
EndPlainFunction
v239 <- LoadString '42foofishhorse'
v240 <- CreateNamedVariable 'expect', 'var', v239
BeginForLoopInitializer
    v241 <- LoadInteger '0'
BeginForLoopCondition -> v242
    v243 <- LoadInteger '8'
    v244 <- Compare v242, '<', v243
BeginForLoopAfterthought v244 -> v245
    v246 <- UnaryOperation v245, '++'
BeginForLoopBody -> v247
    v248 <- LoadString 'undefined'
    Update v240, '+', v248
EndForLoop
v249 <- LoadUndefined
v250 <- CallMethod v213, 'apply', [v249, v212]
v251 <- LoadString 'apply to undefined'
v252 <- LoadString 'f0.apply(this, 1);'
v253 <- LoadString 'f0.apply(this, 1, 2);'
v254 <- LoadString 'f0.apply(this, 1, new Array(2));'
v255 <- BeginPlainFunction -> 
    v256 <- LoadString ''
    v257 <- CreateNamedVariable 'doo', 'var', v256
    BeginForLoopInitializer
        v258 <- LoadInteger '0'
    BeginForLoopCondition -> v259
        v260 <- LoadArguments
        v261 <- GetProperty v260, 'length'
        v262 <- Compare v259, '<', v261
    BeginForLoopAfterthought v262 -> v263
        v264 <- UnaryOperation v263, '++'
    BeginForLoopBody -> v265
        v266 <- LoadArguments
        v267 <- GetComputedProperty v266, v265
        Update v257, '+', v267
    EndForLoop
    Return v257
EndPlainFunction
v268 <- LoadString '42foofishhorse'
v269 <- LoadThis
v270 <- CallMethod v255, 'apply', [v269, v212]
v271 <- LoadString 'apply to this'
v272 <- BeginPlainFunction -> 
    v273 <- LoadThis
    v274 <- CreateNamedVariable 'doo', 'var', v273
    BeginForLoopInitializer
        v275 <- LoadInteger '0'
    BeginForLoopCondition -> v276
        v277 <- LoadArguments
        v278 <- GetProperty v277, 'length'
        v279 <- Compare v276, '<', v278
    BeginForLoopAfterthought v279 -> v280
        v281 <- UnaryOperation v280, '++'
    BeginForLoopBody -> v282
        v283 <- LoadArguments
        v284 <- GetComputedProperty v283, v282
        Update v274, '+', v284
    EndForLoop
    Return v274
EndPlainFunction
v285 <- LoadString 'bar42foofishhorse'
v286 <- LoadString 'bar'
v287 <- CallMethod v272, 'apply', [v286, v212]
v288 <- LoadString 'apply to string'
v289 <- BeginPlainFunction -> 
    v290 <- LoadThis
    v291 <- CreateNamedVariable 'print', 'none'
    v292 <- CallFunction v291, [v290]
    v293 <- LoadInteger '345'
    v294 <- CreateNamedVariable 'Object', 'none'
    v295 <- CallFunction v294, [v293]
    v296 <- LoadThis
    v297 <- LoadArguments
    v298 <- GetProperty v297, 'length'
    v299 <- LoadArguments
    v300 <- LoadArguments
    v301 <- GetProperty v300, 'length'
    v302 <- LoadInteger '1'
    v303 <- BinaryOperation v301, '-', v302
    v304 <- GetComputedProperty v299, v303
    v305 <- BinaryOperation v298, '+', v304
    Return v305
EndPlainFunction
BeginForLoopInitializer
    v306 <- LoadInteger '1'
BeginForLoopCondition -> v307
    v308 <- LoadInteger '4194304'
    v309 <- Compare v307, '<', v308
BeginForLoopAfterthought v309 -> v310
    v311 <- LoadInteger '1'
    Update v310, '<<', v311
BeginForLoopBody -> v312
    BeginTry
        v313 <- CreateArray []
        v314 <- CallFunction v255, [v313]
        v315 <- CreateNamedVariable 'a', 'var', v314
        SetProperty v315, 'length', v312
        v316 <- LoadInteger '42'
        v317 <- LoadInteger '1'
        v318 <- BinaryOperation v312, '-', v317
        SetComputedProperty v315, v318, v316
        v319 <- LoadInteger '42'
        v320 <- BinaryOperation v319, '+', v312
        v321 <- LoadInteger '345'
        v322 <- CallMethod v289, 'apply', [v321, v315]
    BeginCatch -> v323
        v324 <- LoadString 'Maximum call stack size exceeded'
        v325 <- CallMethod v323, 'toString', []
        v326 <- CallMethod v325, 'indexOf', [v324]
        v327 <- LoadInteger '1'
        v328 <- UnaryOperation '-', v327
        v329 <- Compare v326, '!=', v328
        BeginForLoopInitializer
        BeginForLoopCondition
            v330 <- LoadInteger '4194304'
            v331 <- Compare v312, '<', v330
        BeginForLoopAfterthought v331
            v332 <- LoadInteger '1'
            Update v312, '<<', v332
        BeginForLoopBody
            v333 <- LoadBoolean 'false'
            v334 <- CreateNamedVariable 'caught', 'var', v333
            BeginTry
                v335 <- CreateArray []
                v336 <- CallFunction v255, [v335]
                v337 <- CreateNamedVariable 'a', 'none'
                Reassign v337, v336
                v338 <- CreateNamedVariable 'a', 'none'
                SetProperty v338, 'length', v312
                v339 <- LoadInteger '42'
                v340 <- LoadInteger '1'
                v341 <- BinaryOperation v312, '-', v340
                SetComputedProperty v338, v341, v339
                v342 <- LoadInteger '345'
                v343 <- CallMethod v289, 'apply', [v342, v338]
                v344 <- LoadString 'Apply of array with length '
                v345 <- GetProperty v338, 'length'
                v346 <- BinaryOperation v344, '+', v345
                v347 <- LoadString ' should have thrown'
                v348 <- BinaryOperation v346, '+', v347
            BeginCatch -> v349
                v350 <- LoadString 'Maximum call stack size exceeded'
                v351 <- CallMethod v349, 'toString', []
                v352 <- CallMethod v351, 'indexOf', [v350]
                v353 <- LoadInteger '1'
                v354 <- UnaryOperation '-', v353
                v355 <- Compare v352, '!=', v354
                v356 <- LoadBoolean 'true'
                Reassign v334, v356
            EndTryCatch
            v357 <- LoadString 'exception not caught'
        EndForLoop
        Break
    EndTryCatch
EndForLoop
v358 <- LoadInteger '0'
v359 <- CreateArray [v358]
v360 <- CreateNamedVariable 'arr', 'var', v359
BeginForLoopInitializer
    v361 <- LoadInteger '1'
BeginForLoopCondition -> v362
    v363 <- LoadInteger '4'
    v364 <- Compare v362, '<', v363
BeginForLoopAfterthought v364 -> v365
    v366 <- UnaryOperation v365, '++'
BeginForLoopBody -> v367
    v368 <- LoadFloat '0.1'
    v369 <- BinaryOperation v367, '*', v368
    v370 <- CallMethod v360, 'push', [v369]
EndForLoop
v371 <- LoadInteger '0'
v372 <- CreateNamedVariable 'Math', 'none'
v373 <- GetProperty v372, 'min'
v374 <- CallMethod v373, 'apply', [v372, v360]
v375 <- LoadFloat '0.30000000000000004'
v376 <- GetProperty v372, 'max'
v377 <- CallMethod v376, 'apply', [v372, v360]
v378 <- LoadInteger '4'
v379 <- CallFunction v13, [v378]
v380 <- CreateNamedVariable 'arr', 'var', v379
BeginForLoopInitializer
    v381 <- LoadInteger '0'
BeginForLoopCondition -> v382
    v383 <- LoadInteger '4'
    v384 <- Compare v382, '<', v383
BeginForLoopAfterthought v384 -> v385
    v386 <- UnaryOperation v385, '++'
BeginForLoopBody -> v387
    v388 <- LoadFloat '0.1'
    v389 <- BinaryOperation v387, '*', v388
    SetComputedProperty v380, v387, v389
EndForLoop
v390 <- LoadInteger '0'
v391 <- GetProperty v372, 'min'
v392 <- CallMethod v391, 'apply', [v372, v380]
v393 <- LoadFloat '0.30000000000000004'
v394 <- GetProperty v372, 'max'
v395 <- CallMethod v394, 'apply', [v372, v380]
v396 <- LoadFloat '0.5'
SetElement v380, '5', v396
v397 <- CreateNamedVariable 'NaN', 'none'
v398 <- GetProperty v372, 'min'
v399 <- CallMethod v398, 'apply', [v372, v380]
v400 <- GetProperty v372, 'max'
v401 <- CallMethod v400, 'apply', [v372, v380]
v402 <- LoadInteger '0'
v403 <- Construct v13, [v402]
v404 <- CreateNamedVariable 'primes', 'var', v403
v405 <- BeginPlainFunction -> v406
    BeginForLoopInitializer
        v407 <- LoadInteger '0'
    BeginForLoopCondition -> v408
        v409 <- GetProperty v404, 'length'
        v410 <- Compare v408, '<', v409
    BeginForLoopAfterthought v410 -> v411
        v412 <- UnaryOperation v411, '++'
    BeginForLoopBody -> v413
        v414 <- GetComputedProperty v404, v413
        v415 <- CreateNamedVariable 'p', 'var', v414
        v416 <- BinaryOperation v406, '%', v415
        v417 <- LoadInteger '0'
        v418 <- Compare v416, '==', v417
        BeginIf v418
            v419 <- LoadBoolean 'false'
            Return v419
        EndIf
        v420 <- BinaryOperation v415, '*', v415
        v421 <- Compare v420, '>', v406
        BeginIf v421
            v422 <- LoadBoolean 'true'
            Return v422
        EndIf
    EndForLoop
    v423 <- LoadBoolean 'true'
    Return v423
EndPlainFunction
BeginForLoopInitializer
    v424 <- LoadInteger '2'
BeginForLoopCondition -> v425
    v426 <- LoadInteger '10000'
    v427 <- Compare v425, '<', v426
BeginForLoopAfterthought v427 -> v428
    v429 <- UnaryOperation v428, '++'
BeginForLoopBody -> v430
    v431 <- CallFunction v405, [v430]
    BeginIf v431
        v432 <- CallMethod v404, 'push', [v430]
    EndIf
EndForLoop
v433 <- LoadInteger '1229'
v434 <- GetProperty v404, 'length'
v435 <- GetProperty v13, 'prototype'
v436 <- GetProperty v435, 'constructor'
v437 <- CallMethod v436, 'apply', [v13, v404]
v438 <- CreateNamedVariable 'same_primes', 'var', v437
BeginForLoopInitializer
    v439 <- LoadInteger '0'
BeginForLoopCondition -> v440
    v441 <- GetProperty v404, 'length'
    v442 <- Compare v440, '<', v441
BeginForLoopAfterthought v442 -> v443
    v444 <- UnaryOperation v443, '++'
BeginForLoopBody -> v445
    v446 <- GetComputedProperty v404, v445
    v447 <- GetComputedProperty v438, v445
    v448 <- LoadString 'prime'
    v449 <- GetComputedProperty v404, v445
    v450 <- BinaryOperation v448, '+', v449
EndForLoop
v451 <- GetProperty v404, 'length'
v452 <- GetProperty v438, 'length'
v453 <- LoadString 'prime-length'
v454 <- LoadString 'sep'
v455 <- GetProperty v13, 'prototype'
v456 <- LoadString '1'
SetComputedProperty v455, v456, v454
v457 <- LoadInteger '3'
v458 <- Construct v13, [v457]
v459 <- CreateNamedVariable 'holey', 'var', v458
v460 <- LoadString 'mor'
SetElement v459, '0', v460
v461 <- LoadString 'er'
SetElement v459, '2', v461
v462 <- LoadString 'morseper'
v463 <- LoadString ''
v464 <- CreateNamedVariable 'String', 'none'
v465 <- GetProperty v464, 'prototype'
v466 <- GetProperty v465, 'concat'
v467 <- CallMethod v466, 'apply', [v463, v459]
v468 <- LoadString 'moreseper0'
v469 <- LoadString 'morseper'
v470 <- LoadString ''
v471 <- LoadInteger '1'
v472 <- GetProperty v464, 'prototype'
v473 <- GetProperty v472, 'concat'
v474 <- CallMethod v473, 'apply', [v470, v459, v471]
v475 <- LoadString 'moreseper1'
v476 <- LoadString 'morseper'
v477 <- LoadString ''
v478 <- LoadInteger '1'
v479 <- LoadInteger '2'
v480 <- GetProperty v464, 'prototype'
v481 <- GetProperty v480, 'concat'
v482 <- CallMethod v481, 'apply', [v477, v459, v478, v479]
v483 <- LoadString 'moreseper2'
v484 <- LoadString 'morseper'
v485 <- LoadString ''
v486 <- LoadInteger '1'
v487 <- LoadInteger '2'
v488 <- LoadInteger '3'
v489 <- GetProperty v464, 'prototype'
v490 <- GetProperty v489, 'concat'
v491 <- CallMethod v490, 'apply', [v485, v459, v486, v487, v488]
v492 <- LoadString 'morseper3'
v493 <- LoadString 'morseper'
v494 <- LoadString ''
v495 <- LoadInteger '1'
v496 <- LoadInteger '2'
v497 <- LoadInteger '3'
v498 <- LoadInteger '4'
v499 <- GetProperty v464, 'prototype'
v500 <- GetProperty v499, 'concat'
v501 <- CallMethod v500, 'apply', [v494, v459, v495, v496, v497, v498]
v502 <- LoadString 'morseper4'
v503 <- LoadString ''
SetElement v404, '0', v503
SetElement v404, '1', v459
v504 <- LoadString 'String.prototype.concat.apply.apply('foo', primes)'
v505 <- LoadString 'morseper'
v506 <- GetProperty v464, 'prototype'
v507 <- GetProperty v506, 'concat'
v508 <- GetProperty v464, 'prototype'
v509 <- GetProperty v508, 'concat'
v510 <- GetProperty v509, 'apply'
v511 <- CallMethod v510, 'apply', [v507, v404]
v512 <- LoadString 'moreseper-prime'
v513 <- GetProperty v13, 'prototype'
v514 <- LoadString '1'
v515 <- DeleteComputedProperty v513, v514
v516 <- LoadThis
v517 <- LoadThis
BeginObjectLiteral
v518 <- EndObjectLiteral
v519 <- CallMethod v0, 'apply', [v517, v518]
v520 <- LoadString 'non-array-1'
v521 <- LoadThis
v522 <- LoadThis
v523 <- LoadInteger '1'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v523
v524 <- EndObjectLiteral
v525 <- CallMethod v0, 'apply', [v522, v524]
v526 <- LoadString 'non-array-2'
v527 <- LoadInteger '0'
v528 <- Void_ v527
v529 <- LoadThis
v530 <- LoadInteger '1'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v530
v531 <- EndObjectLiteral
v532 <- CallMethod v2, 'apply', [v529, v531]
v533 <- LoadString 'non-array-3'
v534 <- LoadInteger '0'
v535 <- Void_ v534
v536 <- LoadThis
v537 <- LoadString 'foo'
BeginObjectLiteral
    ObjectLiteralAddElement `0`, v537
v538 <- EndObjectLiteral
v539 <- CallMethod v2, 'apply', [v536, v538]
v540 <- LoadString 'non-array-4'
v541 <- LoadString 'foo'
v542 <- LoadThis
v543 <- LoadInteger '1'
v544 <- LoadString 'foo'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v543
    ObjectLiteralAddElement `0`, v544
v545 <- EndObjectLiteral
v546 <- CallMethod v2, 'apply', [v542, v545]
v547 <- LoadString 'non-array-5'


function f0() {
    return this;
}
function f1(a3) {
    return a3;
}
f0.apply();
f0.apply(this);
const v15 = new Array(1);
f0.apply(this, v15);
const v21 = new Array(2);
f0.apply(this, v21);
const v27 = new Array(4242);
f0.apply(this, v27);
f0.apply(null);
const v37 = new Array(1);
f0.apply(null, v37);
const v43 = new Array(2);
f0.apply(null, v43);
const v49 = new Array(4242);
f0.apply(this, v49);
f0.apply(void 0);
const v59 = void 0;
const v61 = new Array(1);
f0.apply(v59, v61);
const v66 = void 0;
const v68 = new Array(2);
f0.apply(v66, v68);
void 0;
f1.apply();
void 0;
f1.apply(this);
void 0;
const v84 = new Array(1);
f1.apply(this, v84);
void 0;
const v91 = new Array(2);
f1.apply(this, v91);
void 0;
const v98 = new Array(4242);
f1.apply(this, v98);
const v105 = new Array(42, 43);
f1.apply(this, v105);
const v114 = new Array("foo", "bar", "baz", "bo");
f1.apply(this, v114);
void 0;
f1.apply(null);
void 0;
const v126 = new Array(1);
f1.apply(null, v126);
void 0;
const v133 = new Array(2);
f1.apply(null, v133);
void 0;
const v140 = new Array(4242);
f1.apply(null, v140);
const v147 = new Array(42, 43);
f1.apply(null, v147);
const v156 = new Array("foo", "bar", "baz", "bo");
f1.apply(null, v156);
void 0;
f1.apply(void 0);
void 0;
const v168 = void 0;
const v170 = new Array(1);
f1.apply(v168, v170);
void 0;
const v176 = void 0;
const v178 = new Array(2);
f1.apply(v176, v178);
void 0;
const v184 = void 0;
const v186 = new Array(4242);
f1.apply(v184, v186);
const v191 = void 0;
const v194 = new Array(42, 43);
f1.apply(v191, v194);
const v199 = void 0;
const v204 = new Array("foo", "bar", "ba", "b");
f1.apply(v199, v204);
const v211 = new Array(42, "foo", "fish", "horse");
var arr = v211;
function j(a214, a215, a216, a217, a218, a219, a220, a221, a222, a223, a224, a225) {
    return ((((((((((("" + a214) + a215) + a216) + a217) + a218) + a219) + a220) + a221) + a222) + a223) + a224) + a225;
}
var expect = "42foofishhorse";
for (let i242 = 0; i242 < 8; i242++) {
    expect += "undefined";
}
j.apply(undefined, arr);
function f() {
    var doo = "";
    for (let i259 = 0; i259 < arguments.length; i259++) {
        doo += arguments[i259];
    }
    return doo;
}
f.apply(this, arr);
function s() {
    var doo = this;
    for (let i276 = 0; i276 < arguments.length; i276++) {
        doo += arguments[i276];
    }
    return doo;
}
s.apply("bar", arr);
function al() {
    print(this);
    Object(345);
    return arguments.length + arguments[arguments.length - 1];
}
for (let i307 = 1; i307 < 4194304; i307 <<= 1) {
    try {
        var a = f([]);
        a.length = i307;
        a[i307 - 1] = 42;
        42 + i307;
        al.apply(345, a);
    } catch(e323) {
        e323.toString().indexOf("Maximum call stack size exceeded") != -1;
        for (; i307 < 4194304; i307 <<= 1) {
            var caught = false;
            try {
                a = f([]);
                a.length = i307;
                a[i307 - 1] = 42;
                al.apply(345, a);
                ("Apply of array with length " + a.length) + " should have thrown";
            } catch(e349) {
                e349.toString().indexOf("Maximum call stack size exceeded") != -1;
                caught = true;
            }
        }
        break;
    }
}
var arr = [0];
for (let i362 = 1; i362 < 4; i362++) {
    arr.push(i362 * 0.1);
}
Math.min.apply(Math, arr);
Math.max.apply(Math, arr);
var arr = Array(4);
for (let i382 = 0; i382 < 4; i382++) {
    arr[i382] = i382 * 0.1;
}
Math.min.apply(Math, arr);
Math.max.apply(Math, arr);
arr[5] = 0.5;
Math.min.apply(Math, arr);
Math.max.apply(Math, arr);
const v403 = new Array(0);
var primes = v403;
function isPrime(a406) {
    for (let i408 = 0; i408 < primes.length; i408++) {
        var p = primes[i408];
        if ((a406 % p) == 0) {
            return false;
        }
        if ((p * p) > a406) {
            return true;
        }
    }
    return true;
}
for (let i425 = 2; i425 < 10000; i425++) {
    if (isPrime(i425)) {
        primes.push(i425);
    }
}
primes.length;
var same_primes = Array.prototype.constructor.apply(Array, primes);
for (let i440 = 0; i440 < primes.length; i440++) {
    primes[i440];
    same_primes[i440];
    "prime" + primes[i440];
}
primes.length;
same_primes.length;
const t177 = Array.prototype;
t177["1"] = "sep";
const v458 = new Array(3);
var holey = v458;
holey[0] = "mor";
holey[2] = "er";
String.prototype.concat.apply("", holey);
String.prototype.concat.apply("", holey, 1);
String.prototype.concat.apply("", holey, 1, 2);
String.prototype.concat.apply("", holey, 1, 2, 3);
String.prototype.concat.apply("", holey, 1, 2, 3, 4);
primes[0] = "";
primes[1] = holey;
const v507 = String.prototype.concat;
String.prototype.concat.apply.apply(v507, primes);
const t193 = Array.prototype;
delete t193["1"];
f0.apply(this, {});
f0.apply(this, { length: 1 });
void 0;
f1.apply(this, { length: 1 });
void 0;
f1.apply(this, { 0: "foo" });
f1.apply(this, { length: 1, 0: "foo" });

FuzzIL program written to corpus/apply.fzil
