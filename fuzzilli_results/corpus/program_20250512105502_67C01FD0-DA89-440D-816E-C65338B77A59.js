[-5.0,0.7740287619780741,-1e-15,-2.2250738585072014e-308,-4.0,0.5557243044040994,1.7976931348623157e+308];
const v2 = [765240.6780393578,155360.62200054992,-2.0,1.7976931348623157e+308];
const v3 = [1000000000000.0,3.0,1000000.0,-4.0,903113.6808067281,0.6453421003592582,-568.1274335696585,5.0];
const v6 = new Uint16Array(1599);
v6[1337];
const v9 = 6 + 6;
try { new BigInt64Array(false, v9, false); } catch (e) {}
BigInt64Array.prototype = BigInt64Array;
const v12 = new BigInt64Array(6);
-81;
try { new Uint8Array(1599, 1599, v3); } catch (e) {}
const v17 = new Uint8Array(81);
v17.g = v17;
let v18;
try { v18 = v17.set(false); } catch (e) {}
const v20 = Math.imul;
try { v20(v18, v3); } catch (e) {}
let v22;
try { v22 = v20(BigInt64Array, BigInt64Array); } catch (e) {}
v22 >>> v22;
var imul_func = v20;
function imul_polyfill(a26, a27) {
    a27--;
    16 / 16;
    const v31 = a26 >>> 16;
    v31 !== v31;
    65535 + 65535;
    var ah = v31 & 65535;
    var al = a26 & 65535;
    al ^ al;
    const v44 = (a27 >>> 16) & 65535;
    var bl = a27 & 65535;
    const v48 = al * bl;
    const v49 = ah * bl;
    let v50 = al * v44;
    v50--;
    let v52 = v49 + v50;
    v52++;
    const v55 = v52 << 16;
    const v56 = v55 & v55;
    v56 - v56;
    const v60 = v48 + (v55 >>> 0);
    0 - 0;
    return v60 | 0;
}
imul_polyfill.prototype = imul_polyfill;
imul_polyfill.prototype = imul_polyfill;
function TestMathImul(a65, a66, a67) {
    a65 & a65;
    a66 + a66;
    a67 % a67;
    function imul_meth_closure(a72, a73) {
        a72 >>> a72;
        a73 >>> a73;
        -a72;
        a73 * a73;
        return Math.imul(a72, a73);
    }
    function imul_func_closure(a80, a81) {
        a81 >> a81;
        a80 > a80;
        let v84 = imul_func(a80, a81);
        v84--;
        -v84;
        return v84;
    }
    let v87 = imul_polyfill(a66, a67);
    v87--;
    Math.imul(a66, a67);
    imul_func(a66, a67);
    imul_meth_closure(a66, a67);
    imul_meth_closure(a66, a67);
    const v93 = imul_func_closure(a66, a67);
    v93 % v93;
    imul_func_closure(a66, a67);
    const v96 = imul_func_closure(a66, a67);
    const v97 = v96 % v96;
    v97 != v97;
}
try { new TestMathImul(v17, Uint16Array, v2); } catch (e) {}
TestMathImul.name;
2 / 2;
4 * 4;
TestMathImul(8, 2, 4);
const v108 = -8;
v108 == v108;
const v111 = -1;
v111 | v111;
v111 > v111;
8 + 8;
const v116 = TestMathImul(v108, v111);
v116 ?? v116;
const v120 = -2;
let v122 = -2;
v122--;
v122 - v122;
TestMathImul(4, v120, v122);
5 >> 5;
TestMathImul(-5, 4294967295);
const v136 = TestMathImul(-10, 4294967294, 5);
v136 ?? v136;
7 - 7;
const v144 = TestMathImul(0, 7);
const v145 = v144 ?? v144;
v145 ?? v145;
let v147 = 0;
v147--;
!(false || false);
false && false;
TestMathImul(v147, false, false);
7 < 7;
TestMathImul(7, true, 7);
const v162 = TestMathImul(7, 7);
const v163 = v162 ?? v162;
v163 ?? v163;
true || true;
true && true;
const v170 = TestMathImul(1, true, true);
v170 ?? v170;
false || false;
TestMathImul(0, false, true);
const v180 = TestMathImul(0, true, false);
v180 ?? v180;
v180 ?? v180;
const v185 = undefined ?? undefined;
v185 ?? v185;
const v188 = 7 >>> 7;
const v189 = TestMathImul(0, undefined, 7);
v189 ?? v189;
let v192 = 0 - 0;
v192--;
const v195 = 7 - 7;
TestMathImul(0, 7, undefined);
TestMathImul(0, undefined, undefined);
0 & 0;
const v205 = -0;
7 - 7;
let v208 = 7 << 7;
v208++;
TestMathImul(0, v205, 7);
const v214 = 0 != 0;
v214 && v214;
-0;
const v217 = TestMathImul(0, 7);
v217 ?? v217;
let v219 = 0;
v219++;
0.1 * 0.1;
-7;
const v225 = TestMathImul(v219, 0.1, 7);
v225 ?? v225;
0.1 | 0.1;
const v231 = TestMathImul(0, 7, 0.1);
v231 ?? v231;
v231 ?? v231;
const v237 = TestMathImul(0, 0.9, 7);
v237 ?? v237;
v237 ?? v237;
const v243 = TestMathImul(0, 7, 0.9);
v243 ?? v243;
const v248 = TestMathImul(7, 1.1, 7);
v248 ?? v248;
7 <= 7;
7 != 7;
TestMathImul(7, 7, 1.1);
const v259 = TestMathImul(7, 1.9, 7);
v259 ?? v259;
const v264 = TestMathImul(7, 7, 1.9);
const v265 = v264 ?? v264;
v265 ?? v265;
const v270 = 7 & 7;
TestMathImul(0, "str");
%VerifyType(7);
const v272 = v188;
const t174 = 7;
t174[6] = 1.9;
const v273 = %WasmStruct();
try {
    v12.copyWithin(v270, -128, v188);
} catch(e276) {
}
0 % 0;
-0;
7 >>> 7;
const v283 = TestMathImul(0, 7, "str");
v283 ?? v283;
0 | 0;
const v287 = {};
v287.c = v287;
v287.h = v287;
let v288 = 7;
const v289 = v288--;
v289 >>> v289;
const v291 = TestMathImul(0, v287, v288);
v291 ?? v291;
const v296 = TestMathImul(0, 7, {});
v296 ?? v296;
try { v12.reverse(); } catch (e) {}
new Date();
const t199 = {};
t199.d = v195;
const v303 = {};
v303.d = v195;
v303.g = false;
const v304 = {};
v304.d = v195;
v304.g = false;
v304.b = true;
const v305 = {};
v305.d = v195;
v305.g = false;
const v306 = [];
let v310 = [];
const v311 = TestMathImul(0, 7, v310);
v311 ?? v311;
v311 ?? v311;
var two_30 = 1 << 30;
~two_30;
const v319 = -two_30;
v319 - v319;
TestMathImul(v319, two_30, 7);
let v324 = 0;
v324--;
TestMathImul(v324, two_30, two_30);
TestMathImul(two_30, -two_30, 7);
const v332 = TestMathImul(two_30, 7, -two_30);
v332 ?? v332;
0 >= 0;
const v336 = -two_30;
v336 >>> v336;
const v338 = -two_30;
-v338;
const v340 = v338 / v338;
v340 % v340;
TestMathImul(0, v336, v338);
var two_31 = 2 * two_30;
two_31 === two_31;
const v347 = -two_31;
v347 % v347;
TestMathImul(v347, two_31, 7);
const v353 = TestMathImul(-two_31, 7, two_31);
v353 ?? v353;
v353 ?? v353;
-0;
const v358 = TestMathImul(0, two_31, two_31);
v358 ?? v358;
v358 ?? v358;
for (const v361 of v306) {
}
try { ("str").trim(); } catch (e) {}
v310 = v2;
const v364 = -two_31;
const v365 = -two_31;
v365 >> v365;
7 / 7;
7 / 7;
TestMathImul(v364, v365, 7);
const v371 = -two_31;
let v372 = 7;
v372--;
TestMathImul(v371, v372, -two_31);
two_31 | two_31;
const v378 = -two_31;
v378 - v378;
const v380 = TestMathImul(0, two_31, v378);
v380 ?? v380;
1 ^ 1;
~1;
var max_val = two_31 - 1;
two_31 - 7;
-7;
7 * 7;
7 >>> 7;
const v394 = two_31 - 7;
v394 !== v394;
const v397 = TestMathImul(v394, 7, max_val);
v397 ?? v397;
TestMathImul(1, max_val, max_val);
var two_16 = 1 << 16;
0 + 0;
const v407 = 0 | 0;
v407 - v407;
TestMathImul(0, two_16, two_16);
let v410 = -two_16;
let v411 = v410++;
v411--;
TestMathImul(v410, two_16 - 1);
TestMathImul(-two_16, two_16, two_16 - 1);
const v421 = -2;
v421 * v421;
const v425 = (v421 * two_16) + 1;
v425 === v425;
const v429 = two_16 - 1;
v429 & v429;
TestMathImul(v425, 1, v429);
