v0 <- LoadString ''
v1 <- CreateArrayWithSpread [...v0]
v2 <- CreateArray []
v3 <- LoadString 'ott'
v4 <- CreateNamedVariable 'str', 'var', v3
v5 <- LoadString 'o'
v6 <- LoadString 't'
v7 <- LoadString 't'
v8 <- CreateArray [v5, v6, v7]
v9 <- CreateArrayWithSpread [...v4]
BeginObjectLiteral
v10 <- EndObjectLiteral
v11 <- CreateNamedVariable 'Symbol', 'none'
v12 <- GetProperty v11, 'iterator'
SetComputedProperty v4, v12, v10
v13 <- GetProperty v11, 'iterator'
v14 <- CallComputedMethod v4, v13, []
v15 <- CreateNamedVariable 'iterator', 'var', v14
v16 <- BeginArrowFunction -> 
    v17 <- LoadUndefined
    v18 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v17
        ObjectLiteralAddProperty `done`, v18
    v19 <- EndObjectLiteral
    Return v19
EndArrowFunction
v20 <- GetProperty v15, '__proto__'
SetProperty v20, 'next', v16
v21 <- CreateArray []
v22 <- CreateArrayWithSpread [...v4]


[...""];
[];
var str = "ott";
["o","t","t"];
[...str];
const v10 = {};
str[Symbol.iterator] = v10;
var iterator = str[Symbol.iterator]();
const v16 = () => {
    return { value: undefined, done: true };
};
const t11 = iterator.__proto__;
t11.next = v16;
[];
[...str];

FuzzIL program written to corpus/string-iterator2.fzil
