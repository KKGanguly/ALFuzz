v0 <- BeginPlainFunction -> 
    v1 <- CreateArray []
    v2 <- CreateNamedVariable 'log', 'let', v1
    v3 <- BeginPlainFunction -> v4, v5
        SetProperty v4, 'x', v5
        v6 <- GetProperty v4, 'x'
        Return v6
    EndPlainFunction
    BeginObjectLiteral
    v7 <- EndObjectLiteral
    v8 <- CreateNamedVariable 'p', 'let', v7
    v9 <- LoadString 'x'
    v10 <- BeginPlainFunction -> 
        v11 <- LoadInteger '153'
        Return v11
    EndPlainFunction
    v12 <- BeginPlainFunction -> v13
        v14 <- LoadString 'set'
        v15 <- CallMethod v2, 'push', [v14]
    EndPlainFunction
    v16 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `get`, v10
        ObjectLiteralAddProperty `set`, v12
        ObjectLiteralAddProperty `configurable`, v16
    v17 <- EndObjectLiteral
    v18 <- CreateNamedVariable 'Object', 'none'
    v19 <- CallMethod v18, 'defineProperty', [v8, v9, v17]
    v20 <- CallMethod v18, 'create', [v8]
    v21 <- CreateNamedVariable 'o', 'let', v20
    BeginForLoopInitializer
        v22 <- LoadInteger '0'
    BeginForLoopCondition -> v23
        v24 <- LoadInteger '2048'
        v25 <- Compare v23, '<', v24
    BeginForLoopAfterthought v25 -> v26
        v27 <- UnaryOperation v26, '++'
    BeginForLoopBody -> v28
        v29 <- LoadInteger '0'
        v30 <- LoadString 'p'
        v31 <- BinaryOperation v30, '+', v28
        SetComputedProperty v21, v31, v29
    EndForLoop
    BeginForLoopInitializer
        v32 <- LoadInteger '0'
    BeginForLoopCondition -> v33
        v34 <- LoadInteger '5'
        v35 <- Compare v33, '<', v34
    BeginForLoopAfterthought v35 -> v36
        v37 <- UnaryOperation v36, '++'
    BeginForLoopBody -> v38
        v39 <- CallFunction v3, [v21, v38]
        v40 <- CallMethod v2, 'push', [v39]
    EndForLoop
    v41 <- LoadString 'x'
    v42 <- LoadInteger '0'
    v43 <- LoadBoolean 'true'
    v44 <- LoadBoolean 'true'
    BeginObjectLiteral
        ObjectLiteralAddProperty `value`, v42
        ObjectLiteralAddProperty `configurable`, v43
        ObjectLiteralAddProperty `writable`, v44
    v45 <- EndObjectLiteral
    v46 <- CallMethod v18, 'defineProperty', [v21, v41, v45]
    BeginForLoopInitializer
        v47 <- LoadInteger '0'
    BeginForLoopCondition -> v48
        v49 <- LoadInteger '5'
        v50 <- Compare v48, '<', v49
    BeginForLoopAfterthought v50 -> v51
        v52 <- UnaryOperation v51, '++'
    BeginForLoopBody -> v53
        v54 <- LoadInteger '42'
        v55 <- BinaryOperation v54, '+', v53
        v56 <- CallFunction v3, [v21, v55]
        v57 <- CallMethod v2, 'push', [v56]
    EndForLoop
    v58 <- LoadString 'set'
    v59 <- LoadInteger '153'
    v60 <- LoadString 'set'
    v61 <- LoadInteger '153'
    v62 <- LoadString 'set'
    v63 <- LoadInteger '153'
    v64 <- LoadString 'set'
    v65 <- LoadInteger '153'
    v66 <- LoadString 'set'
    v67 <- LoadInteger '153'
    v68 <- LoadInteger '42'
    v69 <- LoadInteger '43'
    v70 <- LoadInteger '44'
    v71 <- LoadInteger '45'
    v72 <- LoadInteger '46'
    v73 <- CreateArray [v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72]
EndPlainFunction
v74 <- CallFunction v0, []


function TestLookupOnReceiver() {
    let log = [];
    function f(a4, a5) {
        a4.x = a5;
        return a4.x;
    }
    let p = {};
    function f10() {
        return 153;
    }
    function f12(a13) {
        log.push("set");
    }
    Object.defineProperty(p, "x", { get: f10, set: f12, configurable: true });
    let o = Object.create(p);
    for (let i23 = 0; i23 < 2048; i23++) {
        o["p" + i23] = 0;
    }
    for (let i33 = 0; i33 < 5; i33++) {
        log.push(f(o, i33));
    }
    Object.defineProperty(o, "x", { value: 0, configurable: true, writable: true });
    for (let i48 = 0; i48 < 5; i48++) {
        log.push(f(o, 42 + i48));
    }
    ["set",153,"set",153,"set",153,"set",153,"set",153,42,43,44,45,46];
}
TestLookupOnReceiver();

FuzzIL program written to corpus/ic-lookup-on-receiver.fzil
