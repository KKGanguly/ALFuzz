v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    v3 <- CreateNamedVariable '__v_10', 'var', v2
    v4 <- LoadInteger '10000'
    v5 <- CreateNamedVariable 'count', 'var', v4
    BeginWhileLoopHeader
        v6 <- UnaryOperation v5, '--'
        v7 <- LoadInteger '0'
        v8 <- Compare v6, '!=', v7
    BeginWhileLoopBody v8
        v9 <- LoadInteger '0'
        v10 <- CallMethod v1, 'push', [v9]
        v11 <- UnaryOperation '++', v3
        v12 <- LoadInteger '2'
        v13 <- Compare v11, '>=', v12
        BeginIf v13
            Return v1
        EndIf
        BeginObjectLiteral
        v14 <- EndObjectLiteral
        Reassign v3, v14
    EndWhileLoop
EndPlainFunction
v15 <- CreateArray []
v16 <- CallFunction v0, [v15]
v17 <- CreateNamedVariable '__v_14', 'none'
Reassign v17, v16


function __f_17(a1) {
    var __v_10 = 0;
    var count = 10000;
    while (count-- != 0) {
        a1.push(0);
        if (++__v_10 >= 2) {
            return a1;
        }
        __v_10 = {};
    }
}
__v_14 = __f_17([]);

FuzzIL program written to corpus/array-push10.fzil
