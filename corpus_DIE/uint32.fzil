v0 <- LoadInteger '2147483647'
v1 <- CreateNamedVariable 'K1', 'var', v0
v2 <- LoadInteger '4294967295'
v3 <- CreateNamedVariable 'K2', 'var', v2
v4 <- CreateNamedVariable 'Uint32Array', 'none'
v5 <- LoadInteger '2'
v6 <- Construct v4, [v5]
v7 <- CreateNamedVariable 'uint32_array', 'var', v6
SetElement v7, '0', v1
SetElement v7, '1', v3
v8 <- BeginPlainFunction -> v9, v10
    v11 <- GetComputedProperty v7, v10
    Return v11
EndPlainFunction
v12 <- LoadInteger '0'
v13 <- CallFunction v8, [v7, v12]
v14 <- LoadInteger '1'
v15 <- CallFunction v8, [v7, v14]
v16 <- LoadInteger '0'
v17 <- CallFunction v8, [v7, v16]
BeginForLoopInitializer
    v18 <- LoadInteger '0'
BeginForLoopCondition -> v19
    v20 <- LoadInteger '80000'
    v21 <- Compare v19, '<', v20
BeginForLoopAfterthought v21 -> v22
    v23 <- UnaryOperation v22, '++'
BeginForLoopBody -> v24
    v25 <- LoadInteger '1'
    v26 <- CallFunction v8, [v7, v25]
EndForLoop
v27 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v28 <- EndObjectLiteral
    BeginWith v28
    EndWith
EndPlainFunction
v29 <- BeginPlainFunction -> v30, v31, v32
    v33 <- GetComputedProperty v31, v32
    v34 <- CreateNamedVariable 'x', 'var', v33
    v35 <- CallFunction v27, []
    v36 <- GetProperty v30, 'x'
    Return v34
EndPlainFunction
v37 <- LoadInteger '0'
BeginObjectLiteral
    ObjectLiteralAddProperty `x`, v37
v38 <- EndObjectLiteral
v39 <- LoadInteger '0'
v40 <- CallFunction v29, [v38, v7, v39]
v41 <- LoadInteger '0'
BeginObjectLiteral
    ObjectLiteralAddProperty `x`, v41
v42 <- EndObjectLiteral
v43 <- LoadInteger '1'
v44 <- CallFunction v29, [v42, v7, v43]
BeginObjectLiteral
v45 <- EndObjectLiteral
v46 <- LoadInteger '1'
v47 <- CallFunction v29, [v45, v7, v46]
v48 <- BeginPlainFunction -> v49
    v50 <- GetElement v49, '0'
    v51 <- GetElement v49, '1'
    v52 <- BinaryOperation v50, '+', v51
    Return v52
EndPlainFunction
v53 <- BinaryOperation v1, '+', v3
v54 <- CallFunction v48, [v7]
v55 <- BinaryOperation v1, '+', v3
v56 <- CallFunction v48, [v7]
v57 <- BinaryOperation v1, '+', v3
v58 <- CallFunction v48, [v7]
v59 <- BeginPlainFunction -> v60
    v61 <- LoadInteger '0'
    v62 <- BinaryOperation v60, '>>>', v61
    v63 <- LoadInteger '1'
    v64 <- BinaryOperation v62, '>>>', v63
    Return v64
EndPlainFunction
v65 <- LoadInteger '0'
v66 <- BinaryOperation v3, '|', v65
v67 <- CallFunction v59, [v66]
v68 <- LoadInteger '0'
v69 <- BinaryOperation v3, '|', v68
v70 <- CallFunction v59, [v69]
v71 <- LoadInteger '0'
v72 <- BinaryOperation v3, '|', v71
v73 <- CallFunction v59, [v72]
v74 <- BeginPlainFunction -> v75
    v76 <- LoadInteger '2'
    v77 <- UnaryOperation '-', v76
    v78 <- LoadInteger '0'
    v79 <- BinaryOperation v77, '>>>', v78
    v80 <- BinaryOperation v75, '>>', v79
    Return v80
EndPlainFunction
v81 <- LoadInteger '2147483648'
v82 <- CreateNamedVariable 'K3', 'var', v81
v83 <- LoadInteger '2'
v84 <- UnaryOperation '-', v83
v85 <- LoadInteger '0'
v86 <- BinaryOperation v82, '|', v85
v87 <- CallFunction v74, [v86]
v88 <- LoadInteger '2'
v89 <- UnaryOperation '-', v88
v90 <- LoadInteger '0'
v91 <- BinaryOperation v82, '|', v90
v92 <- CallFunction v74, [v91]
v93 <- LoadInteger '2'
v94 <- UnaryOperation '-', v93
v95 <- LoadInteger '0'
v96 <- BinaryOperation v82, '|', v95
v97 <- CallFunction v74, [v96]
v98 <- BeginPlainFunction -> v99, v100, v101
    v102 <- LoadInteger '0'
    v103 <- BinaryOperation v100, '>>>', v102
    v104 <- LoadInteger '0'
    v105 <- BinaryOperation v101, '>>>', v104
    v106 <- TernaryOperation v99, v103, v105
    v107 <- CreateNamedVariable 'i', 'var', v106
    v108 <- LoadInteger '0'
    v109 <- BinaryOperation v107, '|', v108
    Return v109
EndPlainFunction
v110 <- LoadInteger '2147483649'
v111 <- CreateNamedVariable 'K4', 'var', v110
v112 <- LoadInteger '0'
v113 <- BinaryOperation v82, '|', v112
v114 <- LoadBoolean 'true'
v115 <- CallFunction v98, [v114, v82, v111]
v116 <- LoadInteger '0'
v117 <- BinaryOperation v111, '|', v116
v118 <- LoadBoolean 'false'
v119 <- CallFunction v98, [v118, v82, v111]
v120 <- LoadInteger '0'
v121 <- BinaryOperation v82, '|', v120
v122 <- LoadBoolean 'true'
v123 <- CallFunction v98, [v122, v82, v111]
v124 <- LoadInteger '0'
v125 <- BinaryOperation v111, '|', v124
v126 <- LoadBoolean 'false'
v127 <- CallFunction v98, [v126, v82, v111]
v128 <- LoadInteger '0'
v129 <- BinaryOperation v82, '|', v128
v130 <- LoadBoolean 'true'
v131 <- CallFunction v98, [v130, v82, v111]
v132 <- LoadInteger '0'
v133 <- BinaryOperation v111, '|', v132
v134 <- LoadBoolean 'false'
v135 <- CallFunction v98, [v134, v82, v111]
v136 <- BeginPlainFunction -> v137, v138, v139
    v140 <- LoadInteger '0'
    v141 <- BinaryOperation v138, '>>>', v140
    v142 <- TernaryOperation v137, v141, v139
    v143 <- CreateNamedVariable 'i', 'var', v142
    v144 <- LoadInteger '0'
    v145 <- BinaryOperation v143, '|', v144
    Return v145
EndPlainFunction
v146 <- LoadInteger '0'
v147 <- BinaryOperation v82, '|', v146
v148 <- LoadBoolean 'true'
v149 <- CallFunction v136, [v148, v82, v111]
v150 <- LoadInteger '0'
v151 <- BinaryOperation v111, '|', v150
v152 <- LoadBoolean 'false'
v153 <- CallFunction v136, [v152, v82, v111]
v154 <- LoadInteger '0'
v155 <- BinaryOperation v82, '|', v154
v156 <- LoadBoolean 'true'
v157 <- CallFunction v136, [v156, v82, v111]
v158 <- LoadInteger '0'
v159 <- BinaryOperation v111, '|', v158
v160 <- LoadBoolean 'false'
v161 <- CallFunction v136, [v160, v82, v111]
v162 <- LoadInteger '0'
v163 <- BinaryOperation v82, '|', v162
v164 <- LoadBoolean 'true'
v165 <- CallFunction v136, [v164, v82, v111]
v166 <- LoadInteger '0'
v167 <- BinaryOperation v111, '|', v166
v168 <- LoadBoolean 'false'
v169 <- CallFunction v136, [v168, v82, v111]
v170 <- BeginPlainFunction -> v171
    v172 <- LoadInteger '0'
    v173 <- BinaryOperation v171, '>>>', v172
    v174 <- CreateNamedVariable 'a', 'var', v173
    BeginForLoopInitializer
        v175 <- LoadInteger '0'
    BeginForLoopCondition -> v176
        v177 <- LoadInteger '2'
        v178 <- Compare v176, '<', v177
    BeginForLoopAfterthought v178 -> v179
        v180 <- UnaryOperation v179, '++'
    BeginForLoopBody -> v181
        BeginForLoopInitializer
            v182 <- LoadInteger '0'
        BeginForLoopCondition -> v183
            v184 <- LoadInteger '2'
            v185 <- Compare v183, '<', v184
        BeginForLoopAfterthought v185 -> v186
            v187 <- UnaryOperation v186, '++'
        BeginForLoopBody -> v188
            v189 <- LoadInteger '0'
            v190 <- BinaryOperation v174, '>>>', v189
            Reassign v174, v190
        EndForLoop
    EndForLoop
    v191 <- LoadInteger '0'
    v192 <- BinaryOperation v174, '|', v191
    Return v192
EndPlainFunction
v193 <- LoadInteger '1'
v194 <- LoadInteger '1'
v195 <- CallFunction v170, [v194]
v196 <- LoadInteger '1'
v197 <- LoadInteger '1'
v198 <- CallFunction v170, [v197]
v199 <- LoadInteger '0'
v200 <- BinaryOperation v82, '|', v199
v201 <- CallFunction v170, [v82]
v202 <- BeginPlainFunction -> v203
    v204 <- LoadInteger '0'
    v205 <- BinaryOperation v203, '>>>', v204
    v206 <- CreateNamedVariable 'a', 'var', v205
    BeginForLoopInitializer
        v207 <- LoadInteger '0'
    BeginForLoopCondition -> v208
        v209 <- LoadInteger '2'
        v210 <- Compare v208, '<', v209
    BeginForLoopAfterthought v210 -> v211
        v212 <- UnaryOperation v211, '++'
    BeginForLoopBody -> v213
        BeginForLoopInitializer
            v214 <- LoadInteger '0'
        BeginForLoopCondition -> v215
            v216 <- LoadInteger '2'
            v217 <- Compare v215, '<', v216
        BeginForLoopAfterthought v217 -> v218
            v219 <- UnaryOperation v218, '++'
        BeginForLoopBody -> v220
            v221 <- LoadInteger '0'
            v222 <- BinaryOperation v206, '>>>', v221
            Reassign v206, v222
        EndForLoop
    EndForLoop
    v223 <- BinaryOperation v206, '+', v206
    Return v223
EndPlainFunction
v224 <- LoadInteger '2'
v225 <- LoadInteger '1'
v226 <- CallFunction v202, [v225]
v227 <- LoadInteger '2'
v228 <- LoadInteger '1'
v229 <- CallFunction v202, [v228]
v230 <- LoadInteger '2'
v231 <- BinaryOperation v230, '*', v82
v232 <- CallFunction v202, [v82]
v233 <- CreateNamedVariable 'Array', 'none'
v234 <- LoadInteger '1000'
v235 <- Construct v233, [v234]
v236 <- CreateNamedVariable 'old_array', 'var', v235
BeginForLoopInitializer
    v237 <- LoadInteger '0'
BeginForLoopCondition -> v238
    v239 <- GetProperty v236, 'length'
    v240 <- Compare v238, '<', v239
BeginForLoopAfterthought v240 -> v241
    v242 <- UnaryOperation v241, '++'
BeginForLoopBody -> v243
    v244 <- LoadNull
    SetComputedProperty v236, v243, v244
EndForLoop
v245 <- CreateNamedVariable 'gc', 'none'
v246 <- CallFunction v245, []
v247 <- CallFunction v245, []
v248 <- BeginPlainFunction -> v249
    BeginForLoopInitializer
        v250 <- LoadInteger '0'
    BeginForLoopCondition -> v251
        v252 <- Compare v251, '<', v249
    BeginForLoopAfterthought v252 -> v253
        v254 <- UnaryOperation v253, '++'
    BeginForLoopBody -> v255
        v256 <- GetElement v7, '1'
        SetComputedProperty v236, v255, v256
    EndForLoop
EndPlainFunction
v257 <- LoadInteger '1'
v258 <- CallFunction v248, [v257]
v259 <- LoadInteger '1'
v260 <- CallFunction v248, [v259]
v261 <- GetProperty v236, 'length'
v262 <- CallFunction v248, [v261]
v263 <- CallFunction v245, []
v264 <- BeginPlainFunction -> v265, v266
    BeginTry
        v267 <- CreateArray [v265, v266]
        Return v267
    BeginCatch -> v268
    EndTryCatch
EndPlainFunction
v269 <- BeginPlainFunction -> v270, v271
    Directive 'use strict'
    v272 <- LoadInteger '8'
    Update v270, '>>>', v272
    v273 <- LoadArguments
    v274 <- GetElement v273, '0'
    v275 <- LoadInteger '0'
    v276 <- BinaryOperation v270, '|', v275
    v277 <- CallFunction v271, [v274, v276]
    Return v277
EndPlainFunction
v278 <- BeginPlainFunction -> v279, v280
    v281 <- LoadInteger '0'
    v282 <- BinaryOperation v279, '>>>', v281
    v283 <- CallFunction v269, [v282, v280]
    Return v283
EndPlainFunction
v284 <- LoadInteger '256'
v285 <- LoadInteger '1'
v286 <- CreateArray [v284, v285]
v287 <- LoadInteger '256'
v288 <- CallFunction v278, [v287, v264]
v289 <- LoadInteger '256'
v290 <- LoadInteger '1'
v291 <- CreateArray [v289, v290]
v292 <- LoadInteger '256'
v293 <- CallFunction v278, [v292, v264]
v294 <- LoadInteger '256'
v295 <- LoadInteger '1'
v296 <- CreateArray [v294, v295]
v297 <- LoadInteger '256'
v298 <- CallFunction v278, [v297, v264]
v299 <- LoadInteger '256'
v300 <- LoadInteger '1'
v301 <- CreateArray [v299, v300]
v302 <- LoadInteger '256'
v303 <- CallFunction v278, [v302, v264]
v304 <- LoadInteger '4294967295'
v305 <- LoadInteger '16777215'
v306 <- CreateArray [v304, v305]
v307 <- LoadInteger '1'
v308 <- UnaryOperation '-', v307
v309 <- CallFunction v278, [v308, v264]
v310 <- LoadInteger '4294967295'
v311 <- LoadInteger '16777215'
v312 <- CreateArray [v310, v311]
v313 <- LoadInteger '1'
v314 <- UnaryOperation '-', v313
v315 <- BeginPlainFunction -> v316, v317
    v318 <- CreateArray [v316, v317]
    Return v318
EndPlainFunction
v319 <- CallFunction v278, [v314, v315]


var K1 = 2147483647;
var K2 = 4294967295;
const v6 = new Uint32Array(2);
var uint32_array = v6;
uint32_array[0] = K1;
uint32_array[1] = K2;
function ChangeI2T(a9, a10) {
    return uint32_array[a10];
}
ChangeI2T(uint32_array, 0);
ChangeI2T(uint32_array, 1);
ChangeI2T(uint32_array, 0);
for (let i19 = 0; i19 < 80000; i19++) {
    ChangeI2T(uint32_array, 1);
}
function SideEffect() {
    with ({}) {
    }
}
function Deopt(a30, a31, a32) {
    var x = a31[a32];
    SideEffect();
    a30.x;
    return x;
}
Deopt({ x: 0 }, uint32_array, 0);
Deopt({ x: 0 }, uint32_array, 1);
Deopt({}, uint32_array, 1);
function ChangeI2D(a49) {
    return a49[0] + a49[1];
}
K1 + K2;
ChangeI2D(uint32_array);
K1 + K2;
ChangeI2D(uint32_array);
K1 + K2;
ChangeI2D(uint32_array);
function ShrShr(a60) {
    return (a60 >>> 0) >>> 1;
}
ShrShr(K2 | 0);
ShrShr(K2 | 0);
ShrShr(K2 | 0);
function SarShr(a75) {
    return a75 >> (-2 >>> 0);
}
var K3 = 2147483648;
-2;
SarShr(K3 | 0);
-2;
SarShr(K3 | 0);
-2;
SarShr(K3 | 0);
function Uint32Phi(a99, a100, a101) {
    var i = a99 ? a100 >>> 0 : a101 >>> 0;
    return i | 0;
}
var K4 = 2147483649;
K3 | 0;
Uint32Phi(true, K3, K4);
K4 | 0;
Uint32Phi(false, K3, K4);
K3 | 0;
Uint32Phi(true, K3, K4);
K4 | 0;
Uint32Phi(false, K3, K4);
K3 | 0;
Uint32Phi(true, K3, K4);
K4 | 0;
Uint32Phi(false, K3, K4);
function NonUint32Phi(a137, a138, a139) {
    var i = a137 ? a138 >>> 0 : a139;
    return i | 0;
}
K3 | 0;
NonUint32Phi(true, K3, K4);
K4 | 0;
NonUint32Phi(false, K3, K4);
K3 | 0;
NonUint32Phi(true, K3, K4);
K4 | 0;
NonUint32Phi(false, K3, K4);
K3 | 0;
NonUint32Phi(true, K3, K4);
K4 | 0;
NonUint32Phi(false, K3, K4);
function PhiOfPhi(a171) {
    var a = a171 >>> 0;
    for (let i176 = 0; i176 < 2; i176++) {
        for (let i183 = 0; i183 < 2; i183++) {
            a = a >>> 0;
        }
    }
    return a | 0;
}
PhiOfPhi(1);
PhiOfPhi(1);
K3 | 0;
PhiOfPhi(K3);
function PhiOfPhiUnsafe(a203) {
    var a = a203 >>> 0;
    for (let i208 = 0; i208 < 2; i208++) {
        for (let i215 = 0; i215 < 2; i215++) {
            a = a >>> 0;
        }
    }
    return a + a;
}
PhiOfPhiUnsafe(1);
PhiOfPhiUnsafe(1);
2 * K3;
PhiOfPhiUnsafe(K3);
const v235 = new Array(1000);
var old_array = v235;
for (let i238 = 0; i238 < old_array.length; i238++) {
    old_array[i238] = null;
}
gc();
gc();
function FillOldArrayWithHeapNumbers(a249) {
    for (let i251 = 0; i251 < a249; i251++) {
        old_array[i251] = uint32_array[1];
    }
}
FillOldArrayWithHeapNumbers(1);
FillOldArrayWithHeapNumbers(1);
FillOldArrayWithHeapNumbers(old_array.length);
gc();
function Pack(a265, a266) {
    try {
        return [a265,a266];
    } catch(e268) {
    }
}
function InnerWithArguments(a270, a271) {
    'use strict';
    a270 >>>= 8;
    const v274 = arguments[0];
    return a271(v274, a270 | 0);
}
function Outer(a279, a280) {
    return InnerWithArguments(a279 >>> 0, a280);
}
[256,1];
Outer(256, Pack);
[256,1];
Outer(256, Pack);
[256,1];
Outer(256, Pack);
[256,1];
Outer(256, Pack);
[4294967295,16777215];
Outer(-1, Pack);
[4294967295,16777215];
const v314 = -1;
function f315(a316, a317) {
    return [a316,a317];
}
Outer(v314, f315);

FuzzIL program written to corpus/uint32.fzil
