v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '0'
    v3 <- CallFunction v1, [v2]
    v4 <- CreateNamedVariable 'Number', 'none'
    v5 <- GetProperty v4, 'MIN_VALUE'
    v6 <- CallFunction v1, [v5]
    v7 <- GetProperty v4, 'MAX_VALUE'
    v8 <- CallFunction v1, [v7]
    v9 <- GetProperty v4, 'MIN_SAFE_INTEGER'
    v10 <- CallFunction v1, [v9]
    v11 <- GetProperty v4, 'MIN_SAFE_INTEGER'
    v12 <- LoadInteger '13'
    v13 <- BinaryOperation v11, '-', v12
    v14 <- CallFunction v1, [v13]
    v15 <- GetProperty v4, 'MAX_SAFE_INTEGER'
    v16 <- CallFunction v1, [v15]
    v17 <- GetProperty v4, 'MAX_SAFE_INTEGER'
    v18 <- LoadInteger '23'
    v19 <- BinaryOperation v17, '+', v18
    v20 <- CallFunction v1, [v19]
    v21 <- LoadInteger '0'
    v22 <- CallFunction v1, [v21]
    v23 <- LoadInteger '1'
    v24 <- UnaryOperation '-', v23
    v25 <- CallFunction v1, [v24]
    v26 <- LoadInteger '123456'
    v27 <- CallFunction v1, [v26]
    v28 <- GetProperty v4, 'NaN'
    v29 <- CallFunction v1, [v28]
    v30 <- GetProperty v4, 'POSITIVE_INFINITY'
    v31 <- CallFunction v1, [v30]
    v32 <- GetProperty v4, 'NEGATIVE_INFINITY'
    v33 <- CallFunction v1, [v32]
    v34 <- LoadInteger '1'
    v35 <- LoadInteger '0'
    v36 <- BinaryOperation v34, '/', v35
    v37 <- CallFunction v1, [v36]
    v38 <- LoadInteger '1'
    v39 <- UnaryOperation '-', v38
    v40 <- LoadInteger '0'
    v41 <- BinaryOperation v39, '/', v40
    v42 <- CallFunction v1, [v41]
EndPlainFunction
v43 <- BeginPlainFunction -> v44
    v45 <- UnaryOperation '+', v44
    v46 <- CreateNamedVariable 'Number', 'none'
    v47 <- CallMethod v46, 'isFinite', [v45]
    Return v47
EndPlainFunction
v48 <- CallFunction v0, [v43]
v49 <- CallFunction v0, [v43]
v50 <- CallFunction v0, [v43]
v51 <- BeginPlainFunction -> v52
    BeginObjectLiteral
    v53 <- EndObjectLiteral
    v54 <- CallFunction v52, [v53]
    v55 <- LoadString 'abc'
    v56 <- CallFunction v52, [v55]
    v57 <- LoadInteger '0'
    v58 <- CallFunction v52, [v57]
    v59 <- CreateNamedVariable 'Number', 'none'
    v60 <- GetProperty v59, 'MIN_VALUE'
    v61 <- CallFunction v52, [v60]
    v62 <- GetProperty v59, 'MAX_VALUE'
    v63 <- CallFunction v52, [v62]
    v64 <- GetProperty v59, 'MIN_SAFE_INTEGER'
    v65 <- CallFunction v52, [v64]
    v66 <- GetProperty v59, 'MIN_SAFE_INTEGER'
    v67 <- LoadInteger '13'
    v68 <- BinaryOperation v66, '-', v67
    v69 <- CallFunction v52, [v68]
    v70 <- GetProperty v59, 'MAX_SAFE_INTEGER'
    v71 <- CallFunction v52, [v70]
    v72 <- GetProperty v59, 'MAX_SAFE_INTEGER'
    v73 <- LoadInteger '23'
    v74 <- BinaryOperation v72, '+', v73
    v75 <- CallFunction v52, [v74]
    v76 <- LoadInteger '0'
    v77 <- CallFunction v52, [v76]
    v78 <- LoadInteger '1'
    v79 <- UnaryOperation '-', v78
    v80 <- CallFunction v52, [v79]
    v81 <- LoadInteger '123456'
    v82 <- CallFunction v52, [v81]
    v83 <- GetProperty v59, 'NaN'
    v84 <- CallFunction v52, [v83]
    v85 <- GetProperty v59, 'POSITIVE_INFINITY'
    v86 <- CallFunction v52, [v85]
    v87 <- GetProperty v59, 'NEGATIVE_INFINITY'
    v88 <- CallFunction v52, [v87]
    v89 <- LoadInteger '1'
    v90 <- LoadInteger '0'
    v91 <- BinaryOperation v89, '/', v90
    v92 <- CallFunction v52, [v91]
    v93 <- LoadInteger '1'
    v94 <- UnaryOperation '-', v93
    v95 <- LoadInteger '0'
    v96 <- BinaryOperation v94, '/', v95
    v97 <- CallFunction v52, [v96]
EndPlainFunction
v98 <- BeginPlainFunction -> v99
    v100 <- CreateNamedVariable 'Number', 'none'
    v101 <- CallMethod v100, 'isFinite', [v99]
    Return v101
EndPlainFunction
v102 <- CallFunction v51, [v98]
v103 <- CallFunction v51, [v98]
v104 <- CallFunction v51, [v98]


function test(a1) {
    a1(0);
    a1(Number.MIN_VALUE);
    a1(Number.MAX_VALUE);
    a1(Number.MIN_SAFE_INTEGER);
    a1(Number.MIN_SAFE_INTEGER - 13);
    a1(Number.MAX_SAFE_INTEGER);
    a1(Number.MAX_SAFE_INTEGER + 23);
    a1(0);
    a1(-1);
    a1(123456);
    a1(Number.NaN);
    a1(Number.POSITIVE_INFINITY);
    a1(Number.NEGATIVE_INFINITY);
    a1(1 / 0);
    a1(-1 / 0);
}
function f(a44) {
    return Number.isFinite(+a44);
}
test(f);
test(f);
test(f);
function test2(a52) {
    a52({});
    a52("abc");
    a52(0);
    a52(Number.MIN_VALUE);
    a52(Number.MAX_VALUE);
    a52(Number.MIN_SAFE_INTEGER);
    a52(Number.MIN_SAFE_INTEGER - 13);
    a52(Number.MAX_SAFE_INTEGER);
    a52(Number.MAX_SAFE_INTEGER + 23);
    a52(0);
    a52(-1);
    a52(123456);
    a52(Number.NaN);
    a52(Number.POSITIVE_INFINITY);
    a52(Number.NEGATIVE_INFINITY);
    a52(1 / 0);
    a52(-1 / 0);
}
function f2(a99) {
    return Number.isFinite(a99);
}
test2(f2);
test2(f2);
test2(f2);

FuzzIL program written to corpus/number-isfinite.fzil
