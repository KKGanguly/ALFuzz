v0 <- BeginPlainFunction -> v1, v2
    v3 <- LoadInteger '0'
    v4 <- BinaryOperation v1, '|', v3
    Reassign v1, v4
    v5 <- LoadInteger '0'
    v6 <- BinaryOperation v2, '|', v5
    Reassign v2, v6
    v7 <- LoadInteger '0'
    v8 <- BinaryOperation v7, '-', v2
    v9 <- CreateNamedVariable 'sub', 'var', v8
    v10 <- LoadInteger '0'
    v11 <- BinaryOperation v9, '|', v10
    v12 <- Compare v1, '<', v11
    Return v12
EndPlainFunction
v13 <- LoadInteger '1'
v14 <- LoadInteger '2147483648'
v15 <- CallFunction v0, [v13, v14]
v16 <- CreateNamedVariable 'x', 'var', v15
v17 <- LoadInteger '1'
v18 <- LoadInteger '2147483648'
v19 <- CallFunction v0, [v17, v18]
v20 <- CallFunction v0, []
v21 <- LoadInteger '1'
v22 <- LoadInteger '2147483648'
v23 <- CallFunction v0, [v21, v22]


function CompareNegate(a1, a2) {
    a1 = a1 | 0;
    var sub = 0 - (a2 = a2 | 0);
    return a1 < (sub | 0);
}
var x = CompareNegate(1, 2147483648);
CompareNegate(1, 2147483648);
CompareNegate();
CompareNegate(1, 2147483648);

FuzzIL program written to corpus/regress-compare-negate.fzil
