v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '2147483642'
    v3 <- UnaryOperation '-', v2
    v4 <- CreateNamedVariable '__v_0', 'var', v3
    BeginForLoopInitializer
        v5 <- LoadInteger '0'
    BeginForLoopCondition -> v6
        v7 <- LoadInteger '10'
        v8 <- Compare v6, '<', v7
    BeginForLoopAfterthought v8 -> v9
        v10 <- UnaryOperation v9, '++'
    BeginForLoopBody -> v11
        v12 <- LoadInteger '5'
        v13 <- Compare v11, '>', v12
        BeginIf v13
            v14 <- BinaryOperation v4, '+', v1
            Reassign v4, v14
            Break
        EndIf
    EndForLoop
EndPlainFunction
BeginForLoopInitializer
    v15 <- LoadInteger '0'
BeginForLoopCondition -> v16
    v17 <- LoadInteger '100000'
    v18 <- Compare v16, '<', v17
BeginForLoopAfterthought v18 -> v19
    v20 <- UnaryOperation v19, '++'
BeginForLoopBody -> v21
    v22 <- LoadInteger '42'
    v23 <- CallFunction v0, [v22]
EndForLoop
v24 <- BeginPlainFunction -> 
    v25 <- CreateNamedVariable 'x', 'none'
    v26 <- CreateNamedVariable 'y', 'none'
    v27 <- BinaryOperation v25, '+', v26
    Return v27
EndPlainFunction
v28 <- BeginPlainFunction -> 
    v29 <- CreateNamedVariable 'x', 'none'
    v30 <- CreateNamedVariable 'y', 'none'
    v31 <- BinaryOperation v29, '-', v30
    Return v31
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `f`, v24
    ObjectLiteralAddElement `2`, v28
v32 <- EndObjectLiteral
v33 <- CreateNamedVariable '__v_2', 'none'
Reassign v33, v32


function __f_0(a1) {
    var __v_0 = -2147483642;
    for (let i6 = 0; i6 < 10; i6++) {
        if (i6 > 5) {
            __v_0 = __v_0 + a1;
            break;
        }
    }
}
for (let i16 = 0; i16 < 100000; i16++) {
    __f_0(42);
}
function f24() {
    return x + y;
}
function f28() {
    return x - y;
}
__v_2 = { f: f24, 2: f28 };

FuzzIL program written to corpus/regress-500176.fzil
