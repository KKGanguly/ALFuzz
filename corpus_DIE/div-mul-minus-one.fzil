v0 <- BeginPlainFunction -> v1
    v2 <- LoadInteger '1'
    v3 <- UnaryOperation '-', v2
    v4 <- BinaryOperation v1, '/', v3
    v5 <- LoadInteger '1'
    v6 <- BinaryOperation v4, '^', v5
    Return v6
EndPlainFunction
v7 <- LoadInteger '1'
v8 <- LoadInteger '31'
v9 <- BinaryOperation v7, '<<', v8
v10 <- CreateNamedVariable 'kMinInt', 'var', v9
v11 <- CallFunction v0, [v10]
v12 <- CreateNamedVariable 'expected_MinInt', 'var', v11
v13 <- LoadInteger '0'
v14 <- CallFunction v0, [v13]
v15 <- CreateNamedVariable 'expected_minus_zero', 'var', v14
v16 <- CallFunction v0, [v10]
v17 <- LoadInteger '0'
v18 <- CallFunction v0, [v17]
v19 <- BeginPlainFunction -> v20
    v21 <- LoadInteger '1'
    v22 <- UnaryOperation '-', v21
    v23 <- BinaryOperation v20, '*', v22
    v24 <- LoadInteger '1'
    v25 <- BinaryOperation v23, '^', v24
    Return v25
EndPlainFunction
v26 <- CallFunction v19, [v10]
Reassign v12, v26
v27 <- LoadInteger '0'
v28 <- CallFunction v19, [v27]
Reassign v15, v28
v29 <- CallFunction v19, [v10]
v30 <- CallFunction v19, []
v31 <- LoadInteger '0'
v32 <- CallFunction v19, [v31]
v33 <- CallFunction v19, []


function div(a1) {
    return (a1 / -1) ^ 1;
}
var kMinInt = 1 << 31;
var expected_MinInt = div(kMinInt);
var expected_minus_zero = div(0);
div(kMinInt);
div(0);
function mul(a20) {
    return (a20 * -1) ^ 1;
}
expected_MinInt = mul(kMinInt);
expected_minus_zero = mul(0);
mul(kMinInt);
mul();
mul(0);
mul();

FuzzIL program written to corpus/div-mul-minus-one.fzil
