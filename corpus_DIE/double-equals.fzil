v0 <- BeginPlainFunction -> v1, v2
    v3 <- Compare v1, '==', v2
    v4 <- Compare v2, '==', v1
    v5 <- Compare v1, '!=', v2
    v6 <- Compare v2, '!=', v1
EndPlainFunction
v7 <- BeginPlainFunction -> v8, v9
    v10 <- Compare v8, '==', v9
    v11 <- Compare v9, '==', v8
    v12 <- Compare v8, '!=', v9
    v13 <- Compare v9, '!=', v8
EndPlainFunction
v14 <- BeginPlainFunction -> v15
    v16 <- LoadThis
    SetProperty v16, 'value', v15
    v17 <- BeginPlainFunction -> 
        v18 <- LoadThis
        v19 <- GetProperty v18, 'value'
        Return v19
    EndPlainFunction
    v20 <- LoadThis
    SetProperty v20, 'valueOf', v17
EndPlainFunction
v21 <- BeginPlainFunction -> v22
    v23 <- LoadThis
    SetProperty v23, 'value', v22
    v24 <- LoadNull
    v25 <- LoadThis
    SetProperty v25, 'valueOf', v24
    v26 <- BeginPlainFunction -> 
        v27 <- LoadThis
        v28 <- GetProperty v27, 'value'
        Return v28
    EndPlainFunction
    v29 <- LoadThis
    SetProperty v29, 'toString', v26
EndPlainFunction
v30 <- CreateNamedVariable 'NaN', 'none'
v31 <- CallFunction v7, [v30, v30]
v32 <- LoadInteger '0'
v33 <- CallFunction v7, [v30, v32]
v34 <- CreateNamedVariable 'Infinity', 'none'
v35 <- CallFunction v7, [v30, v34]
v36 <- CreateNamedVariable 'Number', 'none'
v37 <- GetProperty v36, 'MAX_VALUE'
v38 <- GetProperty v36, 'MAX_VALUE'
v39 <- CallFunction v0, [v37, v38]
v40 <- GetProperty v36, 'MIN_VALUE'
v41 <- GetProperty v36, 'MIN_VALUE'
v42 <- CallFunction v0, [v40, v41]
v43 <- CallFunction v0, [v34, v34]
v44 <- UnaryOperation '-', v34
v45 <- UnaryOperation '-', v34
v46 <- CallFunction v0, [v44, v45]
v47 <- LoadInteger '0'
v48 <- LoadInteger '0'
v49 <- CallFunction v0, [v47, v48]
v50 <- LoadInteger '0'
v51 <- LoadInteger '0'
v52 <- UnaryOperation '-', v51
v53 <- CallFunction v0, [v50, v52]
v54 <- LoadInteger '0'
v55 <- UnaryOperation '-', v54
v56 <- LoadInteger '0'
v57 <- UnaryOperation '-', v56
v58 <- CallFunction v0, [v55, v57]
v59 <- LoadFloat '0.9'
v60 <- LoadInteger '1'
v61 <- CallFunction v7, [v59, v60]
v62 <- LoadFloat '0.999999'
v63 <- LoadInteger '1'
v64 <- CallFunction v7, [v62, v63]
v65 <- LoadFloat '0.9999999999'
v66 <- LoadInteger '1'
v67 <- CallFunction v7, [v65, v66]
v68 <- LoadFloat '0.9999999999999'
v69 <- LoadInteger '1'
v70 <- CallFunction v7, [v68, v69]
v71 <- LoadString 'hello'
v72 <- LoadString 'hello'
v73 <- CallFunction v0, [v71, v72]
v74 <- LoadString 'hello'
v75 <- LoadString 'hel'
v76 <- LoadString 'lo'
v77 <- BinaryOperation v75, '+', v76
v78 <- CallFunction v0, [v74, v77]
v79 <- LoadString ''
v80 <- LoadString ''
v81 <- CallFunction v0, [v79, v80]
v82 <- LoadString '  '
v83 <- LoadString '  '
v84 <- CallFunction v0, [v82, v83]
v85 <- LoadBoolean 'true'
v86 <- LoadBoolean 'true'
v87 <- CallFunction v0, [v85, v86]
v88 <- LoadBoolean 'false'
v89 <- LoadBoolean 'false'
v90 <- CallFunction v0, [v88, v89]
v91 <- LoadBoolean 'true'
v92 <- LoadBoolean 'false'
v93 <- CallFunction v7, [v91, v92]
v94 <- LoadNull
v95 <- LoadNull
v96 <- CallFunction v0, [v94, v95]
v97 <- LoadUndefined
v98 <- LoadUndefined
v99 <- CallFunction v0, [v97, v98]
v100 <- CreateNamedVariable 'Math', 'none'
v101 <- CallFunction v0, [v100, v100]
v102 <- CreateNamedVariable 'Object', 'none'
v103 <- GetProperty v102, 'prototype'
v104 <- GetProperty v102, 'prototype'
v105 <- CallFunction v0, [v103, v104]
v106 <- BeginPlainFunction -> 
    v107 <- LoadNull
    v108 <- Construct v14, [v107]
    v109 <- CreateNamedVariable 'x', 'var', v108
    v110 <- CreateNamedVariable 'y', 'var', v109
    v111 <- CreateNamedVariable 'z', 'var', v109
    v112 <- CallFunction v0, [v110, v109]
EndPlainFunction
v113 <- CallFunction v106, []
v114 <- BeginPlainFunction -> 
    v115 <- CreateNamedVariable 'Boolean', 'none'
    v116 <- LoadBoolean 'true'
    v117 <- Construct v115, [v116]
    v118 <- CreateNamedVariable 'x', 'var', v117
    v119 <- CreateNamedVariable 'y', 'var', v118
    v120 <- CreateNamedVariable 'z', 'var', v118
    v121 <- CallFunction v0, [v119, v118]
EndPlainFunction
v122 <- CallFunction v114, []
v123 <- BeginPlainFunction -> 
    v124 <- CreateNamedVariable 'Boolean', 'none'
    v125 <- LoadBoolean 'false'
    v126 <- Construct v124, [v125]
    v127 <- CreateNamedVariable 'x', 'var', v126
    v128 <- CreateNamedVariable 'y', 'var', v127
    v129 <- CreateNamedVariable 'z', 'var', v127
    v130 <- CallFunction v0, [v128, v127]
EndPlainFunction
v131 <- CallFunction v123, []
v132 <- LoadNull
v133 <- LoadUndefined
v134 <- CallFunction v0, [v132, v133]
v135 <- LoadUndefined
v136 <- LoadNull
v137 <- CallFunction v0, [v135, v136]
v138 <- LoadNull
v139 <- LoadNull
v140 <- Construct v14, [v139]
v141 <- CallFunction v7, [v138, v140]
v142 <- LoadNull
v143 <- LoadInteger '0'
v144 <- CallFunction v7, [v142, v143]
v145 <- LoadNull
v146 <- LoadBoolean 'false'
v147 <- CallFunction v7, [v145, v146]
v148 <- LoadNull
v149 <- LoadString ''
v150 <- CallFunction v7, [v148, v149]
v151 <- LoadNull
v152 <- Construct v102, []
v153 <- CallFunction v7, [v151, v152]
v154 <- LoadUndefined
v155 <- LoadUndefined
v156 <- Construct v14, [v155]
v157 <- CallFunction v7, [v154, v156]
v158 <- LoadUndefined
v159 <- LoadInteger '0'
v160 <- CallFunction v7, [v158, v159]
v161 <- LoadUndefined
v162 <- LoadBoolean 'false'
v163 <- CallFunction v7, [v161, v162]
v164 <- LoadUndefined
v165 <- LoadString ''
v166 <- CallFunction v7, [v164, v165]
v167 <- LoadUndefined
v168 <- Construct v102, []
v169 <- CallFunction v7, [v167, v168]
v170 <- LoadInteger '1'
v171 <- LoadString '1'
v172 <- CallFunction v0, [v170, v171]
v173 <- LoadInteger '255'
v174 <- LoadString '0xff'
v175 <- CallFunction v0, [v173, v174]
v176 <- LoadInteger '0'
v177 <- LoadString ''
v178 <- CallFunction v0, [v176, v177]
v179 <- LoadFloat '1e+19'
v180 <- LoadString '1e19'
v181 <- CallFunction v0, [v179, v180]
v182 <- LoadString 'Infinity'
v183 <- CallFunction v0, [v34, v182]
v184 <- LoadBoolean 'false'
v185 <- LoadInteger '0'
v186 <- CallFunction v0, [v184, v185]
v187 <- LoadBoolean 'true'
v188 <- LoadInteger '1'
v189 <- CallFunction v0, [v187, v188]
v190 <- LoadBoolean 'false'
v191 <- LoadString '0'
v192 <- CallFunction v0, [v190, v191]
v193 <- LoadBoolean 'true'
v194 <- LoadString '1'
v195 <- CallFunction v0, [v193, v194]
v196 <- CreateNamedVariable 'Boolean', 'none'
v197 <- LoadBoolean 'true'
v198 <- Construct v196, [v197]
v199 <- LoadBoolean 'true'
v200 <- CallFunction v0, [v198, v199]
v201 <- LoadBoolean 'true'
v202 <- Construct v196, [v201]
v203 <- LoadInteger '1'
v204 <- CallFunction v0, [v202, v203]
v205 <- LoadBoolean 'false'
v206 <- Construct v196, [v205]
v207 <- LoadBoolean 'false'
v208 <- CallFunction v0, [v206, v207]
v209 <- LoadBoolean 'false'
v210 <- Construct v196, [v209]
v211 <- LoadInteger '0'
v212 <- CallFunction v0, [v210, v211]
v213 <- LoadBoolean 'true'
v214 <- Construct v14, [v213]
v215 <- LoadBoolean 'true'
v216 <- CallFunction v0, [v214, v215]
v217 <- LoadBoolean 'true'
v218 <- Construct v14, [v217]
v219 <- LoadInteger '1'
v220 <- CallFunction v0, [v218, v219]
v221 <- LoadBoolean 'false'
v222 <- Construct v14, [v221]
v223 <- LoadBoolean 'false'
v224 <- CallFunction v0, [v222, v223]
v225 <- LoadBoolean 'false'
v226 <- Construct v14, [v225]
v227 <- LoadInteger '0'
v228 <- CallFunction v0, [v226, v227]
v229 <- LoadBoolean 'true'
v230 <- Construct v21, [v229]
v231 <- LoadBoolean 'true'
v232 <- CallFunction v0, [v230, v231]
v233 <- LoadBoolean 'true'
v234 <- Construct v21, [v233]
v235 <- LoadInteger '1'
v236 <- CallFunction v0, [v234, v235]
v237 <- LoadBoolean 'false'
v238 <- Construct v21, [v237]
v239 <- LoadBoolean 'false'
v240 <- CallFunction v0, [v238, v239]
v241 <- LoadBoolean 'false'
v242 <- Construct v21, [v241]
v243 <- LoadInteger '0'
v244 <- CallFunction v0, [v242, v243]
v245 <- LoadInteger '1'
v246 <- Construct v36, [v245]
v247 <- LoadBoolean 'true'
v248 <- CallFunction v0, [v246, v247]
v249 <- LoadInteger '1'
v250 <- Construct v36, [v249]
v251 <- LoadInteger '1'
v252 <- CallFunction v0, [v250, v251]
v253 <- LoadInteger '0'
v254 <- Construct v36, [v253]
v255 <- LoadBoolean 'false'
v256 <- CallFunction v0, [v254, v255]
v257 <- LoadInteger '0'
v258 <- Construct v36, [v257]
v259 <- LoadInteger '0'
v260 <- CallFunction v0, [v258, v259]
v261 <- CreateNamedVariable 'Date', 'none'
v262 <- LoadInteger '42'
v263 <- Construct v261, [v262]
v264 <- LoadInteger '42'
v265 <- Construct v261, [v264]
v266 <- CreateNamedVariable 'String', 'none'
v267 <- CallFunction v266, [v265]
v268 <- CallFunction v0, [v263, v267]
v269 <- LoadInteger '42'
v270 <- Construct v261, [v269]
v271 <- LoadInteger '42'
v272 <- Construct v261, [v271]
v273 <- CallFunction v36, [v272]
v274 <- CallFunction v7, [v270, v273]
v275 <- Construct v261, []
v276 <- CreateNamedVariable 'dnow', 'var', v275
v277 <- CallFunction v0, [v276, v276]
v278 <- CallFunction v266, [v276]
v279 <- CallFunction v0, [v276, v278]
v280 <- CallFunction v36, [v276]
v281 <- CallFunction v7, [v276, v280]
v282 <- LoadNull
SetProperty v276, 'toString', v282
v283 <- CallFunction v36, [v276]
v284 <- CallFunction v0, [v276, v283]
v285 <- BeginPlainFunction -> 
    v286 <- LoadString '42'
    Return v286
EndPlainFunction
SetProperty v276, 'valueOf', v285
v287 <- LoadInteger '42'
v288 <- CallFunction v0, [v276, v287]
v289 <- BeginPlainFunction -> 
    v290 <- LoadString '1'
    Return v290
EndPlainFunction
SetProperty v276, 'toString', v289
v291 <- LoadBoolean 'true'
v292 <- CallFunction v0, [v276, v291]
v293 <- LoadNull
v294 <- Construct v14, [v293]
v295 <- LoadNull
v296 <- Construct v14, [v295]
v297 <- CallFunction v7, [v294, v296]
v298 <- LoadBoolean 'true'
v299 <- Construct v196, [v298]
v300 <- LoadBoolean 'true'
v301 <- Construct v196, [v300]
v302 <- CallFunction v7, [v299, v301]
v303 <- LoadBoolean 'false'
v304 <- Construct v196, [v303]
v305 <- LoadBoolean 'false'
v306 <- Construct v196, [v305]
v307 <- CallFunction v7, [v304, v306]
v308 <- LoadString 'a'
v309 <- Construct v266, [v308]
v310 <- LoadString 'a'
v311 <- Construct v266, [v310]
v312 <- CallFunction v7, [v309, v311]
v313 <- LoadInteger '42'
v314 <- Construct v36, [v313]
v315 <- LoadInteger '42'
v316 <- Construct v36, [v315]
v317 <- CallFunction v7, [v314, v316]
v318 <- LoadInteger '42'
v319 <- Construct v261, [v318]
v320 <- LoadInteger '42'
v321 <- Construct v261, [v320]
v322 <- CallFunction v7, [v319, v321]
v323 <- CreateNamedVariable 'Array', 'none'
v324 <- LoadInteger '42'
v325 <- Construct v323, [v324]
v326 <- LoadInteger '42'
v327 <- Construct v323, [v326]
v328 <- CallFunction v7, [v325, v327]
v329 <- Construct v102, []
v330 <- Construct v102, []
v331 <- CallFunction v7, [v329, v330]
v332 <- LoadNull
v333 <- BeginPlainFunction -> 
    v334 <- LoadThis
    Return v334
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v332
    ObjectLiteralAddProperty `toString`, v333
v335 <- EndObjectLiteral
v336 <- CreateNamedVariable 'badObject', 'var', v335
v337 <- CallFunction v0, [v336, v336]
BeginObjectLiteral
v338 <- EndObjectLiteral
v339 <- CallFunction v7, [v336, v338]
v340 <- LoadNull
v341 <- CallFunction v7, [v336, v340]
v342 <- LoadUndefined
v343 <- CallFunction v7, [v336, v342]
v344 <- BeginPlainFunction -> v345
    v346 <- BeginPlainFunction -> 
        v347 <- Compare v336, '==', v345
        Return v347
    EndPlainFunction
    v348 <- CallFunction v346, []
    v349 <- BeginPlainFunction -> 
        v350 <- Compare v336, '!=', v345
        Return v350
    EndPlainFunction
    v351 <- CallFunction v349, []
    v352 <- BeginPlainFunction -> 
        v353 <- Compare v345, '==', v336
        Return v353
    EndPlainFunction
    v354 <- CallFunction v352, []
    v355 <- BeginPlainFunction -> 
        v356 <- Compare v345, '!=', v336
        Return v356
    EndPlainFunction
    v357 <- CallFunction v355, []
EndPlainFunction
v358 <- LoadInteger '0'
v359 <- CallFunction v344, [v358]
v360 <- LoadString 'string'
v361 <- CallFunction v344, [v360]
v362 <- LoadBoolean 'true'
v363 <- CallFunction v344, [v362]
v364 <- CreateNamedVariable 'Symbol', 'none'
v365 <- CallFunction v364, []
v366 <- CreateNamedVariable 's', 'var', v365
v367 <- CallFunction v0, [v366, v366]
v368 <- CallFunction v102, [v366]
v369 <- CallFunction v0, [v368, v366]
v370 <- Construct v14, [v366]
v371 <- CallFunction v0, [v370, v366]
v372 <- CallFunction v102, [v366]
v373 <- CallFunction v102, [v366]
v374 <- CallFunction v7, [v372, v373]


function testEqual(a1, a2) {
    a1 == a2;
    a2 == a1;
    a1 != a2;
    a2 != a1;
}
function testNotEqual(a8, a9) {
    a8 == a9;
    a9 == a8;
    a8 != a9;
    a9 != a8;
}
function Wrapper(a15) {
    this.value = a15;
    function f17() {
        return this.value;
    }
    this.valueOf = f17;
}
function Wrapper2(a22) {
    this.value = a22;
    this.valueOf = null;
    function f26() {
        return this.value;
    }
    this.toString = f26;
}
testNotEqual(NaN, NaN);
testNotEqual(NaN, 0);
testNotEqual(NaN, Infinity);
testEqual(Number.MAX_VALUE, Number.MAX_VALUE);
testEqual(Number.MIN_VALUE, Number.MIN_VALUE);
testEqual(Infinity, Infinity);
testEqual(-Infinity, -Infinity);
testEqual(0, 0);
testEqual(0, -0);
testEqual(-0, -0);
testNotEqual(0.9, 1);
testNotEqual(0.999999, 1);
testNotEqual(0.9999999999, 1);
testNotEqual(0.9999999999999, 1);
testEqual("hello", "hello");
testEqual("hello", "hel" + "lo");
testEqual("", "");
testEqual("  ", "  ");
testEqual(true, true);
testEqual(false, false);
testNotEqual(true, false);
testEqual(null, null);
testEqual(undefined, undefined);
testEqual(Math, Math);
testEqual(Object.prototype, Object.prototype);
function f106() {
    const v108 = new Wrapper(null);
    var x = v108;
    var y = x;
    var z = x;
    testEqual(y, x);
}
f106();
function f114() {
    const v117 = new Boolean(true);
    var x = v117;
    var y = x;
    var z = x;
    testEqual(y, x);
}
f114();
function f123() {
    const v126 = new Boolean(false);
    var x = v126;
    var y = x;
    var z = x;
    testEqual(y, x);
}
f123();
testEqual(null, undefined);
testEqual(undefined, null);
const v140 = new Wrapper(null);
testNotEqual(null, v140);
testNotEqual(null, 0);
testNotEqual(null, false);
testNotEqual(null, "");
const v152 = new Object();
testNotEqual(null, v152);
const v156 = new Wrapper(undefined);
testNotEqual(undefined, v156);
testNotEqual(undefined, 0);
testNotEqual(undefined, false);
testNotEqual(undefined, "");
const v168 = new Object();
testNotEqual(undefined, v168);
testEqual(1, "1");
testEqual(255, "0xff");
testEqual(0, "");
testEqual(1e+19, "1e19");
testEqual(Infinity, "Infinity");
testEqual(false, 0);
testEqual(true, 1);
testEqual(false, "0");
testEqual(true, "1");
const v198 = new Boolean(true);
testEqual(v198, true);
const v202 = new Boolean(true);
testEqual(v202, 1);
const v206 = new Boolean(false);
testEqual(v206, false);
const v210 = new Boolean(false);
testEqual(v210, 0);
const v214 = new Wrapper(true);
testEqual(v214, true);
const v218 = new Wrapper(true);
testEqual(v218, 1);
const v222 = new Wrapper(false);
testEqual(v222, false);
const v226 = new Wrapper(false);
testEqual(v226, 0);
const v230 = new Wrapper2(true);
testEqual(v230, true);
const v234 = new Wrapper2(true);
testEqual(v234, 1);
const v238 = new Wrapper2(false);
testEqual(v238, false);
const v242 = new Wrapper2(false);
testEqual(v242, 0);
const v246 = new Number(1);
testEqual(v246, true);
const v250 = new Number(1);
testEqual(v250, 1);
const v254 = new Number(0);
testEqual(v254, false);
const v258 = new Number(0);
testEqual(v258, 0);
const v263 = new Date(42);
const v265 = new Date(42);
testEqual(v263, String(v265));
const v270 = new Date(42);
const v272 = new Date(42);
testNotEqual(v270, Number(v272));
const v275 = new Date();
var dnow = v275;
testEqual(dnow, dnow);
testEqual(dnow, String(dnow));
testNotEqual(dnow, Number(dnow));
dnow.toString = null;
testEqual(dnow, Number(dnow));
function f285() {
    return "42";
}
dnow.valueOf = f285;
testEqual(dnow, 42);
function f289() {
    return "1";
}
dnow.toString = f289;
testEqual(dnow, true);
const v294 = new Wrapper(null);
const v296 = new Wrapper(null);
testNotEqual(v294, v296);
const v299 = new Boolean(true);
const v301 = new Boolean(true);
testNotEqual(v299, v301);
const v304 = new Boolean(false);
const v306 = new Boolean(false);
testNotEqual(v304, v306);
const v309 = new String("a");
const v311 = new String("a");
testNotEqual(v309, v311);
const v314 = new Number(42);
const v316 = new Number(42);
testNotEqual(v314, v316);
const v319 = new Date(42);
const v321 = new Date(42);
testNotEqual(v319, v321);
const v325 = new Array(42);
const v327 = new Array(42);
testNotEqual(v325, v327);
const v329 = new Object();
const v330 = new Object();
testNotEqual(v329, v330);
function f333() {
    return this;
}
var badObject = { valueOf: null, toString: f333 };
testEqual(badObject, badObject);
testNotEqual(badObject, {});
testNotEqual(badObject, null);
testNotEqual(badObject, undefined);
function testBadConversion(a345) {
    function f346() {
        return badObject == a345;
    }
    f346();
    function f349() {
        return badObject != a345;
    }
    f349();
    function f352() {
        return a345 == badObject;
    }
    f352();
    function f355() {
        return a345 != badObject;
    }
    f355();
}
testBadConversion(0);
testBadConversion("string");
testBadConversion(true);
var s = Symbol();
testEqual(s, s);
testEqual(Object(s), s);
const v370 = new Wrapper(s);
testEqual(v370, s);
testNotEqual(Object(s), Object(s));

FuzzIL program written to corpus/double-equals.fzil
