v0 <- BeginArrowFunction -> 
    v1 <- LoadInteger '1'
    v2 <- LoadInteger '2'
    v3 <- LoadInteger '3'
    v4 <- LoadInteger '4'
    v5 <- LoadInteger '5'
    v6 <- CreateArray [v1, v2, v3, v4, v5]
    v7 <- CreateNamedVariable 'a', 'const', v6
    v8 <- LoadInteger '0'
    v9 <- CreateNamedVariable 'result', 'let', v8
    v10 <- BeginPlainFunction -> 
        v11 <- BeginArrowFunction -> v12
            Update v9, '+', v12
            v13 <- LoadInteger '2'
            v14 <- Compare v12, '<', v13
            Return v14
        EndArrowFunction
        v15 <- CallMethod v7, 'every', [v11]
        Return v15
    EndPlainFunction
    v16 <- CallFunction v10, []
    v17 <- CallFunction v10, []
    v18 <- CallFunction v10, []
    v19 <- LoadInteger '9'
EndArrowFunction
v20 <- CallFunction v0, []
v21 <- BeginArrowFunction -> 
    v22 <- LoadInteger '1'
    v23 <- LoadInteger '2'
    v24 <- LoadInteger '3'
    v25 <- LoadInteger '4'
    v26 <- LoadInteger '5'
    v27 <- LoadInteger '6'
    v28 <- LoadInteger '7'
    v29 <- LoadInteger '8'
    v30 <- LoadInteger '9'
    v31 <- LoadInteger '10'
    v32 <- CreateArray [v22, v23, v24, v25, v26, v27, v28, v29, v30, v31]
    v33 <- CreateNamedVariable 'a', 'const', v32
    v34 <- LoadInteger '0'
    v35 <- CreateNamedVariable 'result', 'let', v34
    v36 <- BeginPlainFunction -> v37
        v38 <- BeginArrowFunction -> v39
            Update v35, '+', v39
            v40 <- LoadInteger '4'
            v41 <- Compare v39, '===', v40
            v42 <- BinaryOperation v41, '&&', v37
            BeginIf v42
                v43 <- LoadInteger '25'
                SetProperty v33, 'abc', v43
            EndIf
            v44 <- LoadInteger '8'
            v45 <- Compare v39, '<', v44
            Return v45
        EndArrowFunction
        v46 <- CallMethod v33, 'every', [v38]
        Return v46
    EndPlainFunction
    v47 <- LoadBoolean 'false'
    v48 <- CallFunction v36, [v47]
    v49 <- LoadBoolean 'false'
    v50 <- CallFunction v36, [v49]
    v51 <- LoadBoolean 'true'
    v52 <- CallFunction v36, [v51]
    v53 <- LoadInteger '36'
    v54 <- LoadInteger '3'
    v55 <- BinaryOperation v53, '*', v54
EndArrowFunction
v56 <- CallFunction v21, []
v57 <- BeginArrowFunction -> 
    v58 <- LoadInteger '1'
    v59 <- LoadInteger '2'
    v60 <- LoadInteger '3'
    v61 <- LoadInteger '4'
    v62 <- LoadInteger '5'
    v63 <- LoadInteger '6'
    v64 <- LoadInteger '7'
    v65 <- LoadInteger '8'
    v66 <- LoadInteger '9'
    v67 <- LoadInteger '10'
    v68 <- CreateArray [v58, v59, v60, v61, v62, v63, v64, v65, v66, v67]
    v69 <- CreateNamedVariable 'a', 'const', v68
    v70 <- CreateArray []
    v71 <- CreateNamedVariable 'called_values', 'let', v70
    v72 <- BeginPlainFunction -> v73
        v74 <- CreateArray []
        Reassign v71, v74
        v75 <- BeginArrowFunction -> v76
            v77 <- CallMethod v71, 'push', [v76]
            v78 <- LoadInteger '4'
            v79 <- Compare v76, '===', v78
            v80 <- BinaryOperation v79, '&&', v73
            BeginIf v80
                v81 <- LoadInteger '25'
                SetProperty v69, 'abc', v81
                v82 <- LoadBoolean 'false'
                Return v82
            EndIf
            v83 <- LoadInteger '8'
            v84 <- Compare v76, '<', v83
            Return v84
        EndArrowFunction
        v85 <- CallMethod v69, 'every', [v75]
        Return v85
    EndPlainFunction
    v86 <- LoadBoolean 'false'
    v87 <- CallFunction v72, [v86]
    v88 <- LoadInteger '1'
    v89 <- LoadInteger '2'
    v90 <- LoadInteger '3'
    v91 <- LoadInteger '4'
    v92 <- LoadInteger '5'
    v93 <- LoadInteger '6'
    v94 <- LoadInteger '7'
    v95 <- LoadInteger '8'
    v96 <- CreateArray [v88, v89, v90, v91, v92, v93, v94, v95]
    v97 <- LoadBoolean 'false'
    v98 <- CallFunction v72, [v97]
    v99 <- LoadBoolean 'true'
    v100 <- CallFunction v72, [v99]
    v101 <- LoadInteger '1'
    v102 <- LoadInteger '2'
    v103 <- LoadInteger '3'
    v104 <- LoadInteger '4'
    v105 <- CreateArray [v101, v102, v103, v104]
EndArrowFunction
v106 <- CallFunction v57, []
v107 <- BeginArrowFunction -> 
    v108 <- LoadInteger '1'
    v109 <- LoadInteger '2'
    v110 <- LoadInteger '3'
    v111 <- LoadInteger '4'
    v112 <- LoadInteger '5'
    v113 <- LoadInteger '6'
    v114 <- LoadInteger '7'
    v115 <- LoadInteger '8'
    v116 <- LoadInteger '9'
    v117 <- LoadInteger '10'
    v118 <- LoadInteger '11'
    v119 <- LoadInteger '12'
    v120 <- LoadInteger '13'
    v121 <- LoadInteger '14'
    v122 <- LoadInteger '15'
    v123 <- LoadInteger '16'
    v124 <- LoadInteger '17'
    v125 <- LoadInteger '18'
    v126 <- LoadInteger '19'
    v127 <- LoadInteger '20'
    v128 <- LoadInteger '21'
    v129 <- LoadInteger '22'
    v130 <- LoadInteger '23'
    v131 <- LoadInteger '24'
    v132 <- LoadInteger '25'
    v133 <- CreateArray [v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132]
    v134 <- CreateNamedVariable 'a', 'const', v133
    v135 <- LoadInteger '0'
    v136 <- CreateNamedVariable 'result', 'let', v135
    v137 <- BeginPlainFunction -> v138
        v139 <- BeginArrowFunction -> v140, v141
            v142 <- LoadInteger '13'
            v143 <- Compare v141, '===', v142
            v144 <- BinaryOperation v143, '&&', v138
            BeginIf v144
                v145 <- LoadInteger '25'
                SetProperty v134, 'abc', v145
            EndIf
            Update v136, '+', v140
            v146 <- LoadBoolean 'true'
            Return v146
        EndArrowFunction
        v147 <- CallMethod v134, 'every', [v139]
        Return v147
    EndPlainFunction
    v148 <- CallFunction v137, []
    v149 <- CallFunction v137, []
    v150 <- CallFunction v137, []
    v151 <- LoadBoolean 'true'
    v152 <- CallFunction v137, [v151]
    v153 <- CallFunction v137, []
    v154 <- LoadInteger '1625'
EndArrowFunction
v155 <- CallFunction v107, []
v156 <- BeginArrowFunction -> 
    v157 <- LoadUndefined
    v158 <- CreateNamedVariable 'called_values', 'let', v157
    v159 <- BeginPlainFunction -> v160
        v161 <- LoadInteger '1'
        v162 <- LoadInteger '2'
        v163 <- LoadInteger '3'
        v164 <- LoadInteger '4'
        v165 <- LoadInteger '5'
        v166 <- LoadInteger '6'
        v167 <- LoadInteger '7'
        v168 <- LoadInteger '8'
        v169 <- LoadInteger '9'
        v170 <- LoadInteger '10'
        v171 <- CreateArray [v161, v162, v163, v164, v165, v166, v167, v168, v169, v170]
        v172 <- CreateNamedVariable 'a', 'const', v171
        v173 <- CreateArray []
        Reassign v158, v173
        v174 <- BeginArrowFunction -> v175, v176
            v177 <- CallMethod v158, 'push', [v175]
            v178 <- LoadInteger '5'
            v179 <- Compare v176, '===', v178
            v180 <- BinaryOperation v179, '&&', v160
            v181 <- LoadInteger '8'
            v182 <- LoadInteger '10'
            v183 <- TernaryOperation v180, v181, v182
            SetProperty v172, 'length', v183
            v184 <- LoadBoolean 'true'
            Return v184
        EndArrowFunction
        v185 <- CallMethod v172, 'every', [v174]
        Return v185
    EndPlainFunction
    v186 <- CallFunction v159, []
    v187 <- LoadInteger '1'
    v188 <- LoadInteger '2'
    v189 <- LoadInteger '3'
    v190 <- LoadInteger '4'
    v191 <- LoadInteger '5'
    v192 <- LoadInteger '6'
    v193 <- LoadInteger '7'
    v194 <- LoadInteger '8'
    v195 <- LoadInteger '9'
    v196 <- LoadInteger '10'
    v197 <- CreateArray [v187, v188, v189, v190, v191, v192, v193, v194, v195, v196]
    v198 <- CallFunction v159, []
    v199 <- CallFunction v159, []
    v200 <- LoadBoolean 'true'
    v201 <- CallFunction v159, [v200]
    v202 <- LoadInteger '1'
    v203 <- LoadInteger '2'
    v204 <- LoadInteger '3'
    v205 <- LoadInteger '4'
    v206 <- LoadInteger '5'
    v207 <- LoadInteger '6'
    v208 <- LoadInteger '7'
    v209 <- LoadInteger '8'
    v210 <- CreateArray [v202, v203, v204, v205, v206, v207, v208, v209]
    v211 <- CallFunction v159, []
EndArrowFunction
v212 <- CallFunction v156, []
v213 <- BeginArrowFunction -> 
    v214 <- LoadInteger '1'
    v215 <- LoadInteger '2'
    v216 <- LoadInteger '3'
    v217 <- LoadInteger '4'
    v218 <- LoadInteger '5'
    v219 <- CreateArray [v214, v215, v216, v217, v218]
    v220 <- CreateNamedVariable 'a', 'const', v219
    v221 <- BeginPlainFunction -> v222
        v223 <- BeginArrowFunction -> v224, v225
            v226 <- LoadInteger '3'
            v227 <- Compare v225, '===', v226
            v228 <- BinaryOperation v227, '&&', v222
            BeginIf v228
                v229 <- LoadInteger '100'
                SetElement v220, '3', v229
            EndIf
            v230 <- LoadBoolean 'true'
            Return v230
        EndArrowFunction
        v231 <- CallMethod v220, 'every', [v223]
        Return v231
    EndPlainFunction
    v232 <- CallFunction v221, []
    v233 <- CallFunction v221, []
    v234 <- LoadBoolean 'true'
    v235 <- CallFunction v221, [v234]
    v236 <- CallFunction v221, []
EndArrowFunction
v237 <- CallFunction v213, []
v238 <- BeginArrowFunction -> 
    v239 <- LoadInteger '1'
    v240 <- LoadInteger '2'
    v241 <- LoadInteger '3'
    v242 <- LoadInteger '4'
    v243 <- LoadInteger '5'
    v244 <- CreateArray [v239, v240, v241, v242, v243]
    v245 <- CreateNamedVariable 'a', 'const', v244
    v246 <- BeginPlainFunction -> v247
        v248 <- BeginArrowFunction -> v249, v250
            v251 <- LoadInteger '3'
            v252 <- Compare v250, '===', v251
            v253 <- BinaryOperation v252, '&&', v247
            BeginIf v253
            EndIf
            v254 <- LoadBoolean 'true'
            Return v254
        EndArrowFunction
        v255 <- CallMethod v245, 'every', [v248]
        Return v255
    EndPlainFunction
    v256 <- CallFunction v246, []
    v257 <- CallFunction v246, []
    v258 <- LoadBoolean 'true'
    v259 <- CallFunction v246, [v258]
    v260 <- CallFunction v246, []
EndArrowFunction
v261 <- CallFunction v238, []
v262 <- BeginArrowFunction -> 
    v263 <- LoadInteger '1'
    v264 <- LoadInteger '2'
    v265 <- LoadInteger '3'
    v266 <- LoadInteger '4'
    v267 <- LoadInteger '5'
    v268 <- CreateArray [v263, v264, v265, v266, v267]
    v269 <- CreateNamedVariable 'a', 'const', v268
    v270 <- BeginPlainFunction -> v271
        v272 <- BeginArrowFunction -> v273, v274
            v275 <- LoadInteger '2'
            v276 <- Compare v274, '===', v275
            v277 <- BinaryOperation v276, '&&', v271
            BeginIf v277
                v278 <- LoadInteger '100'
                SetElement v269, '3', v278
            EndIf
            v279 <- LoadBoolean 'true'
            Return v279
        EndArrowFunction
        v280 <- CallMethod v269, 'every', [v272]
        Return v280
    EndPlainFunction
    v281 <- CallFunction v270, []
    v282 <- CallFunction v270, []
    v283 <- LoadBoolean 'true'
    v284 <- CallFunction v270, [v283]
    v285 <- CallFunction v270, []
EndArrowFunction
v286 <- CallFunction v262, []
v287 <- BeginArrowFunction -> 
    v288 <- LoadInteger '0'
    v289 <- CreateNamedVariable 'result', 'let', v288
    v290 <- BeginPlainFunction -> v291
        v292 <- LoadInteger '0'
        v293 <- LoadInteger '1'
        v294 <- LoadInteger '2'
        v295 <- LoadInteger '3'
        v296 <- LoadInteger '4'
        v297 <- LoadInteger '5'
        v298 <- CreateArray [v292, v293, v294, v295, v296, v297]
        v299 <- CreateNamedVariable 'a_noescape', 'const', v298
        v300 <- BeginArrowFunction -> v301, v302
            v303 <- LoadInteger '0'
            v304 <- BinaryOperation v301, '|', v303
            Update v289, '+', v304
            v305 <- LoadInteger '13'
            v306 <- Compare v302, '===', v305
            v307 <- BinaryOperation v306, '&&', v291
            BeginIf v307
                v308 <- LoadInteger '25'
                SetProperty v299, 'length', v308
            EndIf
            v309 <- LoadBoolean 'true'
            Return v309
        EndArrowFunction
        v310 <- CallMethod v299, 'every', [v300]
    EndPlainFunction
    v311 <- CallFunction v290, []
    v312 <- CallFunction v290, []
    v313 <- CallFunction v290, []
    v314 <- LoadBoolean 'true'
    v315 <- CallFunction v290, [v314]
    v316 <- CallFunction v290, []
    v317 <- LoadInteger '75'
EndArrowFunction
v318 <- CallFunction v287, []
v319 <- BeginArrowFunction -> 
    v320 <- LoadInteger '1'
    v321 <- LoadInteger '2'
    v322 <- LoadInteger '3'
    v323 <- LoadInteger '4'
    v324 <- LoadInteger '5'
    v325 <- LoadInteger '6'
    v326 <- LoadInteger '7'
    v327 <- LoadInteger '8'
    v328 <- LoadInteger '9'
    v329 <- LoadInteger '10'
    v330 <- LoadInteger '11'
    v331 <- LoadInteger '12'
    v332 <- LoadInteger '13'
    v333 <- LoadInteger '14'
    v334 <- LoadInteger '15'
    v335 <- LoadInteger '16'
    v336 <- LoadInteger '17'
    v337 <- LoadInteger '18'
    v338 <- LoadInteger '19'
    v339 <- LoadInteger '20'
    v340 <- LoadInteger '21'
    v341 <- LoadInteger '22'
    v342 <- LoadInteger '23'
    v343 <- LoadInteger '24'
    v344 <- LoadInteger '25'
    v345 <- CreateArray [v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344]
    v346 <- CreateNamedVariable 'a', 'const', v345
    v347 <- LoadInteger '0'
    v348 <- CreateNamedVariable 'result', 'let', v347
    v349 <- BeginPlainFunction -> v350
        v351 <- BeginArrowFunction -> v352, v353
            Update v348, '+', v353
            v354 <- LoadInteger '13'
            v355 <- Compare v353, '===', v354
            v356 <- BinaryOperation v355, '&&', v350
            BeginIf v356
            EndIf
            v357 <- LoadBoolean 'true'
            Return v357
        EndArrowFunction
        v358 <- CallMethod v346, 'every', [v351]
    EndPlainFunction
    v359 <- CallFunction v349, []
    v360 <- CallFunction v349, []
    v361 <- CallFunction v349, []
    v362 <- LoadBoolean 'true'
    v363 <- CallFunction v349, [v362]
    v364 <- CallFunction v349, []
    v365 <- LoadInteger '1500'
EndArrowFunction
v366 <- CallFunction v319, []
v367 <- BeginArrowFunction -> 
    v368 <- LoadInteger '1'
    v369 <- LoadInteger '2'
    v370 <- LoadInteger '3'
    v371 <- LoadInteger '4'
    v372 <- LoadInteger '5'
    v373 <- LoadInteger '6'
    v374 <- LoadInteger '7'
    v375 <- LoadInteger '8'
    v376 <- LoadInteger '9'
    v377 <- LoadInteger '10'
    v378 <- LoadInteger '11'
    v379 <- LoadInteger '12'
    v380 <- LoadInteger '13'
    v381 <- LoadInteger '14'
    v382 <- LoadInteger '15'
    v383 <- LoadInteger '16'
    v384 <- LoadInteger '17'
    v385 <- LoadInteger '18'
    v386 <- LoadInteger '19'
    v387 <- LoadInteger '20'
    v388 <- LoadInteger '21'
    v389 <- LoadInteger '22'
    v390 <- LoadInteger '23'
    v391 <- LoadInteger '24'
    v392 <- LoadInteger '25'
    v393 <- CreateArray [v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392]
    v394 <- CreateNamedVariable 'a', 'const', v393
    v395 <- LoadInteger '0'
    v396 <- CreateNamedVariable 'result', 'let', v395
    v397 <- BeginPlainFunction -> v398
        v399 <- BeginPlainFunction -> v400, v401
            Update v396, '+', v401
            v402 <- LoadInteger '13'
            v403 <- Compare v401, '===', v402
            v404 <- BinaryOperation v403, '&&', v398
            BeginIf v404
            EndIf
            v405 <- LoadBoolean 'true'
            Return v405
        EndPlainFunction
        v406 <- CallMethod v394, 'every', [v399]
    EndPlainFunction
    v407 <- CallFunction v397, []
    v408 <- CallFunction v397, []
    v409 <- CallFunction v397, []
    v410 <- LoadBoolean 'true'
    v411 <- CallFunction v397, [v410]
    v412 <- CallFunction v397, []
    v413 <- LoadInteger '1500'
EndArrowFunction
v414 <- CallFunction v367, []
v415 <- BeginArrowFunction -> 
    v416 <- LoadInteger '1'
    v417 <- LoadInteger '2'
    v418 <- LoadInteger '3'
    v419 <- LoadInteger '4'
    v420 <- LoadInteger '5'
    v421 <- LoadInteger '6'
    v422 <- LoadInteger '7'
    v423 <- LoadInteger '8'
    v424 <- LoadInteger '9'
    v425 <- LoadInteger '10'
    v426 <- LoadInteger '11'
    v427 <- LoadInteger '12'
    v428 <- LoadInteger '13'
    v429 <- LoadInteger '14'
    v430 <- LoadInteger '15'
    v431 <- LoadInteger '16'
    v432 <- LoadInteger '17'
    v433 <- LoadInteger '18'
    v434 <- LoadInteger '19'
    v435 <- LoadInteger '20'
    v436 <- LoadInteger '21'
    v437 <- LoadInteger '22'
    v438 <- LoadInteger '23'
    v439 <- LoadInteger '24'
    v440 <- LoadInteger '25'
    v441 <- CreateArray [v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440]
    v442 <- CreateNamedVariable 'a', 'const', v441
    v443 <- LoadBoolean 'false'
    v444 <- CreateNamedVariable 'caught', 'let', v443
    v445 <- BeginPlainFunction -> v446
        BeginTry
            v447 <- BeginArrowFunction -> v448, v449
                v450 <- LoadInteger '1'
                v451 <- Compare v449, '===', v450
                v452 <- BinaryOperation v451, '&&', v446
                BeginIf v452
                    v453 <- LoadString 'a'
                    ThrowException v453
                EndIf
                v454 <- LoadBoolean 'true'
                Return v454
            EndArrowFunction
            v455 <- CallMethod v442, 'every', [v447]
        BeginCatch -> v456
            v457 <- LoadBoolean 'true'
            Reassign v444, v457
        EndTryCatch
    EndPlainFunction
    v458 <- CallFunction v445, []
    v459 <- CallFunction v445, []
    v460 <- CallFunction v445, []
    v461 <- BeginArrowFunction -> 
        v462 <- LoadBoolean 'true'
        v463 <- CallFunction v445, [v462]
        Return v463
    EndArrowFunction
    v464 <- CallFunction v461, []
    v465 <- CallFunction v445, []
EndArrowFunction
v466 <- CallFunction v415, []
v467 <- BeginArrowFunction -> 
    v468 <- LoadInteger '1'
    v469 <- LoadInteger '2'
    v470 <- LoadInteger '3'
    v471 <- LoadInteger '4'
    v472 <- LoadInteger '5'
    v473 <- LoadInteger '6'
    v474 <- LoadInteger '7'
    v475 <- LoadInteger '8'
    v476 <- LoadInteger '9'
    v477 <- LoadInteger '10'
    v478 <- CreateArray [v468, v469, v470, v471, v472, v473, v474, v475, v476, v477]
    v479 <- CreateNamedVariable 'a', 'let', v478
    v480 <- LoadBoolean 'false'
    v481 <- CreateNamedVariable 'caught', 'let', v480
    v482 <- BeginPlainFunction -> v483
        v484 <- BeginPlainFunction -> v485, v486
            v487 <- LoadInteger '1'
            v488 <- Compare v486, '===', v487
            v489 <- BinaryOperation v488, '&&', v483
            BeginIf v489
                v490 <- LoadString 'a'
                ThrowException v490
            EndIf
            v491 <- LoadBoolean 'true'
            Return v491
        EndPlainFunction
        BeginTry
            v492 <- CallMethod v479, 'every', [v484]
        BeginCatch -> v493
            v494 <- LoadBoolean 'true'
            Reassign v481, v494
        EndTryCatch
    EndPlainFunction
    v495 <- CallFunction v482, []
    v496 <- CallFunction v482, []
    v497 <- CallFunction v482, []
    v498 <- BeginArrowFunction -> 
        v499 <- LoadBoolean 'true'
        v500 <- CallFunction v482, [v499]
        Return v500
    EndArrowFunction
    v501 <- CallFunction v498, []
    v502 <- CallFunction v482, []
EndArrowFunction
v503 <- CallFunction v467, []
v504 <- BeginPlainFunction -> 
    v505 <- LoadInteger '1'
    v506 <- LoadInteger '2'
    v507 <- LoadInteger '3'
    v508 <- LoadInteger '4'
    v509 <- CreateArray [v505, v506, v507, v508]
    v510 <- CreateNamedVariable 'a', 'const', v509
    v511 <- BeginPlainFunction -> v512
        v513 <- BeginPlainFunction -> v514, v515
            v516 <- LoadInteger '1'
            v517 <- Compare v515, '===', v516
            v518 <- BinaryOperation v517, '&&', v512
            BeginIf v518
                v519 <- LoadString 'some exception'
                ThrowException v519
            EndIf
            v520 <- LoadBoolean 'true'
            Return v520
        EndPlainFunction
        v521 <- LoadInteger '0'
        v522 <- CreateNamedVariable 'result', 'let', v521
        BeginTry
            v523 <- CallMethod v510, 'every', [v513]
            Reassign v522, v523
        BeginCatch -> v524
            v525 <- LoadString 'some exception'
            v526 <- LoadString 'nope'
            Reassign v522, v526
        EndTryCatch
        Return v522
    EndPlainFunction
    v527 <- LoadBoolean 'true'
    v528 <- LoadBoolean 'false'
    v529 <- CallFunction v511, [v528]
    v530 <- LoadBoolean 'true'
    v531 <- LoadBoolean 'false'
    v532 <- CallFunction v511, [v531]
    v533 <- LoadString 'nope'
    v534 <- LoadBoolean 'true'
    v535 <- CallFunction v511, [v534]
    v536 <- LoadString 'nope'
    v537 <- LoadBoolean 'true'
    v538 <- CallFunction v511, [v537]
    v539 <- LoadBoolean 'true'
    v540 <- LoadBoolean 'false'
    v541 <- CallFunction v511, [v540]
    v542 <- LoadString 'nope'
    v543 <- LoadBoolean 'true'
    v544 <- CallFunction v511, [v543]
EndPlainFunction
v545 <- CallFunction v504, []
v546 <- BeginArrowFunction -> 
    v547 <- LoadRegExp 'Array\.every' ''
    v548 <- CreateNamedVariable 're', 'const', v547
    v549 <- BeginPlainFunction -> v550
        v551 <- LoadInteger '1'
        v552 <- LoadInteger '2'
        v553 <- LoadInteger '3'
        v554 <- CreateArray [v551, v552, v553]
        v555 <- CreateNamedVariable 'b', 'const', v554
        v556 <- LoadInteger '0'
        v557 <- CreateNamedVariable 'result', 'let', v556
        v558 <- BeginArrowFunction -> v559, v560
            Update v557, '+', v559
            v561 <- LoadInteger '1'
            v562 <- Compare v560, '===', v561
            BeginIf v562
                v563 <- CreateNamedVariable 'Error', 'none'
                v564 <- Construct v563, []
                v565 <- CreateNamedVariable 'e', 'const', v564
                v566 <- GetProperty v565, 'stack'
                v567 <- CallMethod v548, 'exec', [v566]
                v568 <- LoadNull
                v569 <- Compare v567, '!==', v568
            EndIf
            v570 <- LoadBoolean 'true'
            Return v570
        EndArrowFunction
        v571 <- CallMethod v555, 'every', [v558]
    EndPlainFunction
    v572 <- CallFunction v549, []
    v573 <- CallFunction v549, []
    v574 <- CallFunction v549, []
EndArrowFunction
v575 <- CallFunction v546, []
v576 <- BeginArrowFunction -> 
    v577 <- LoadRegExp 'Array\.every' ''
    v578 <- CreateNamedVariable 're', 'const', v577
    v579 <- BeginPlainFunction -> v580
        v581 <- LoadInteger '1'
        v582 <- LoadInteger '2'
        v583 <- LoadInteger '3'
        v584 <- CreateArray [v581, v582, v583]
        v585 <- CreateNamedVariable 'b', 'const', v584
        v586 <- LoadBoolean 'false'
        v587 <- CreateNamedVariable 'did_assert_error', 'let', v586
        v588 <- LoadInteger '0'
        v589 <- CreateNamedVariable 'result', 'let', v588
        v590 <- BeginPlainFunction -> v591, v592
            Update v589, '+', v591
            v593 <- LoadInteger '1'
            v594 <- Compare v592, '===', v593
            BeginIf v594
                v595 <- CreateNamedVariable 'Error', 'none'
                v596 <- Construct v595, []
                v597 <- CreateNamedVariable 'e', 'const', v596
                v598 <- GetProperty v597, 'stack'
                v599 <- CallMethod v578, 'exec', [v598]
                v600 <- LoadNull
                v601 <- Compare v599, '!==', v600
                v602 <- LoadBoolean 'true'
                Reassign v587, v602
            EndIf
            v603 <- LoadBoolean 'true'
            Return v603
        EndPlainFunction
        v604 <- CallMethod v585, 'every', [v590]
        Return v587
    EndPlainFunction
    v605 <- CallFunction v579, []
    v606 <- CallFunction v579, []
    v607 <- CallFunction v579, []
EndArrowFunction
v608 <- CallFunction v576, []
v609 <- BeginArrowFunction -> 
    v610 <- LoadRegExp 'Array\.every' ''
    v611 <- CreateNamedVariable 're', 'const', v610
    v612 <- BeginPlainFunction -> v613
        v614 <- LoadInteger '1'
        v615 <- LoadInteger '2'
        v616 <- LoadInteger '3'
        v617 <- CreateArray [v614, v615, v616]
        v618 <- CreateNamedVariable 'b', 'const', v617
        v619 <- LoadBoolean 'false'
        v620 <- CreateNamedVariable 'did_assert_error', 'let', v619
        v621 <- LoadInteger '0'
        v622 <- CreateNamedVariable 'result', 'let', v621
        v623 <- BeginArrowFunction -> v624, v625
            Update v622, '+', v624
            v626 <- LoadInteger '1'
            v627 <- Compare v625, '===', v626
            BeginIf v627
            BeginElse
                v628 <- LoadInteger '2'
                v629 <- Compare v625, '===', v628
                BeginIf v629
                    v630 <- CreateNamedVariable 'Error', 'none'
                    v631 <- Construct v630, []
                    v632 <- CreateNamedVariable 'e', 'const', v631
                    v633 <- GetProperty v632, 'stack'
                    v634 <- CallMethod v611, 'exec', [v633]
                    v635 <- LoadNull
                    v636 <- Compare v634, '!==', v635
                    v637 <- LoadBoolean 'true'
                    Reassign v620, v637
                EndIf
            EndIf
            v638 <- LoadBoolean 'true'
            Return v638
        EndArrowFunction
        v639 <- CallMethod v618, 'every', [v623]
        Return v620
    EndPlainFunction
    v640 <- CallFunction v612, []
    v641 <- CallFunction v612, []
    v642 <- CallFunction v612, []
EndArrowFunction
v643 <- CallFunction v609, []
v644 <- BeginArrowFunction -> 
    v645 <- LoadRegExp 'Array\.every' ''
    v646 <- CreateNamedVariable 're', 'const', v645
    v647 <- LoadInteger '1'
    v648 <- LoadInteger '2'
    v649 <- LoadInteger '3'
    v650 <- CreateArray [v647, v648, v649]
    v651 <- CreateNamedVariable 'a', 'const', v650
    v652 <- LoadInteger '0'
    v653 <- CreateNamedVariable 'result', 'let', v652
    v654 <- BeginPlainFunction -> 
        v655 <- BeginArrowFunction -> v656, v657
            Update v653, '+', v657
            v658 <- LoadInteger '1'
            v659 <- Compare v657, '===', v658
            BeginIf v659
                v660 <- CreateNamedVariable 'Error', 'none'
                v661 <- Construct v660, []
                ThrowException v661
            EndIf
            v662 <- LoadBoolean 'true'
            Return v662
        EndArrowFunction
        v663 <- CallMethod v651, 'every', [v655]
    EndPlainFunction
    v664 <- BeginArrowFunction -> 
        v665 <- CallFunction v654, []
        Return v665
    EndArrowFunction
    v666 <- CallFunction v664, []
    v667 <- BeginArrowFunction -> 
        v668 <- CallFunction v654, []
        Return v668
    EndArrowFunction
    v669 <- CallFunction v667, []
    BeginTry
        v670 <- CallFunction v654, []
    BeginCatch -> v671
        v672 <- GetProperty v671, 'stack'
        v673 <- CallMethod v646, 'exec', [v672]
        v674 <- LoadNull
        v675 <- Compare v673, '!==', v674
    EndTryCatch
    BeginTry
        v676 <- CallFunction v654, []
    BeginCatch -> v677
        v678 <- GetProperty v677, 'stack'
        v679 <- CallMethod v646, 'exec', [v678]
        v680 <- LoadNull
        v681 <- Compare v679, '!==', v680
    EndTryCatch
EndArrowFunction
v682 <- CallFunction v644, []
v683 <- BeginArrowFunction -> 
    v684 <- LoadInteger '1'
    v685 <- LoadInteger '2'
    v686 <- LoadUndefined
    v687 <- LoadInteger '3'
    v688 <- LoadInteger '4'
    v689 <- CreateArray [v684, v685, v686, v687, v688]
    v690 <- CreateNamedVariable 'a', 'const', v689
    v691 <- BeginPlainFunction -> 
        v692 <- CreateArray []
        v693 <- CreateNamedVariable 'callback_values', 'const', v692
        v694 <- BeginArrowFunction -> v695
            v696 <- CallMethod v693, 'push', [v695]
            v697 <- LoadBoolean 'true'
            Return v697
        EndArrowFunction
        v698 <- CallMethod v690, 'every', [v694]
        Return v693
    EndPlainFunction
    v699 <- CallFunction v691, []
    v700 <- CallFunction v691, []
    v701 <- LoadInteger '1'
    v702 <- LoadInteger '2'
    v703 <- LoadInteger '3'
    v704 <- LoadInteger '4'
    v705 <- CreateArray [v701, v702, v703, v704]
    v706 <- CallFunction v691, []
EndArrowFunction
v707 <- CallFunction v683, []
v708 <- BeginArrowFunction -> 
    v709 <- LoadFloat '1.5'
    v710 <- LoadFloat '2.5'
    v711 <- LoadUndefined
    v712 <- LoadFloat '3.5'
    v713 <- LoadFloat '4.5'
    v714 <- CreateArray [v709, v710, v711, v712, v713]
    v715 <- CreateNamedVariable 'a', 'const', v714
    v716 <- BeginPlainFunction -> 
        v717 <- CreateArray []
        v718 <- CreateNamedVariable 'callback_values', 'const', v717
        v719 <- BeginArrowFunction -> v720
            v721 <- CallMethod v718, 'push', [v720]
            v722 <- LoadBoolean 'true'
            Return v722
        EndArrowFunction
        v723 <- CallMethod v715, 'every', [v719]
        Return v718
    EndPlainFunction
    v724 <- CallFunction v716, []
    v725 <- CallFunction v716, []
    v726 <- LoadFloat '1.5'
    v727 <- LoadFloat '2.5'
    v728 <- LoadFloat '3.5'
    v729 <- LoadFloat '4.5'
    v730 <- CreateArray [v726, v727, v728, v729]
    v731 <- CallFunction v716, []
EndArrowFunction
v732 <- CallFunction v708, []
v733 <- BeginArrowFunction -> 
    v734 <- BeginPlainFunction -> v735, v736
        BeginIf v736
            v737 <- LoadInteger '3'
            SetProperty v735, 'foo', v737
        EndIf
        Return v735
    EndPlainFunction
    v738 <- BeginPlainFunction -> v739, v740
        v741 <- BeginArrowFunction -> v742
            v743 <- LoadBoolean 'true'
            Return v743
        EndArrowFunction
        v744 <- CallFunction v734, [v739, v740]
        v745 <- CallMethod v739, 'every', [v741, v744]
        Return v745
    EndPlainFunction
    v746 <- LoadInteger '1'
    v747 <- LoadInteger '2'
    v748 <- LoadInteger '3'
    v749 <- CreateArray [v746, v747, v748]
    v750 <- CreateNamedVariable 'a', 'let', v749
    v751 <- LoadBoolean 'false'
    v752 <- CallFunction v738, [v750, v751]
    v753 <- LoadBoolean 'false'
    v754 <- CallFunction v738, [v750, v753]
    v755 <- LoadBoolean 'false'
    v756 <- CallFunction v738, [v750, v755]
    v757 <- LoadBoolean 'true'
    v758 <- CallFunction v738, [v750, v757]
EndArrowFunction
v759 <- CallFunction v733, []
v760 <- BeginArrowFunction -> 
    v761 <- LoadInteger '1'
    v762 <- LoadInteger '2'
    v763 <- LoadInteger '3'
    v764 <- LoadInteger '4'
    v765 <- LoadInteger '5'
    v766 <- CreateArray [v761, v762, v763, v764, v765]
    v767 <- CreateNamedVariable 'a', 'const', v766
    v768 <- BeginPlainFunction -> 
        v769 <- LoadUndefined
        v770 <- CallMethod v767, 'every', [v769]
        Return v770
    EndPlainFunction
    v771 <- CallFunction v768, []
    v772 <- CreateNamedVariable 'TypeError', 'none'
    BeginTry
        v773 <- CallFunction v768, []
    BeginCatch -> v774
    EndTryCatch
    v775 <- CallFunction v768, []
EndArrowFunction
v776 <- CallFunction v760, []
v777 <- BeginArrowFunction -> 
    v778 <- LoadInteger '1'
    v779 <- LoadInteger '2'
    v780 <- LoadInteger '3'
    v781 <- CreateArray [v778, v779, v780]
    v782 <- CreateNamedVariable 'a', 'const', v781
    v783 <- LoadInteger '0'
    v784 <- CreateNamedVariable 'result', 'let', v783
    v785 <- BeginPlainFunction -> 
        v786 <- BeginArrowFunction -> v787, v788
            Update v784, '+', v787
            v789 <- LoadBoolean 'true'
            Return v789
        EndArrowFunction
        v790 <- CallMethod v782, 'every', [v786]
    EndPlainFunction
    v791 <- CallFunction v785, []
    v792 <- CallFunction v785, []
    v793 <- CallFunction v785, []
    BeginObjectLiteral
    v794 <- EndObjectLiteral
    SetProperty v782, 'constructor', v794
    v795 <- CallFunction v785, []
    v796 <- CallFunction v785, []
    v797 <- LoadInteger '24'
EndArrowFunction
v798 <- CallFunction v777, []


const v0 = () => {
    const a = [1,2,3,4,5];
    let result = 0;
    function earlyExit() {
        const v11 = (a12) => {
            result += a12;
            return a12 < 2;
        };
        return a.every(v11);
    }
    earlyExit();
    earlyExit();
    earlyExit();
};
v0();
const v21 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10];
    let result = 0;
    function softyPlusEarlyExit(a37) {
        const v38 = (a39) => {
            result += a39;
            if ((a39 === 4) && a37) {
                a.abc = 25;
            }
            return a39 < 8;
        };
        return a.every(v38);
    }
    softyPlusEarlyExit(false);
    softyPlusEarlyExit(false);
    softyPlusEarlyExit(true);
    36 * 3;
};
v21();
const v57 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10];
    let called_values = [];
    function softyPlusEarlyExit(a73) {
        called_values = [];
        const v75 = (a76) => {
            called_values.push(a76);
            if ((a76 === 4) && a73) {
                a.abc = 25;
                return false;
            }
            return a76 < 8;
        };
        return a.every(v75);
    }
    softyPlusEarlyExit(false);
    [1,2,3,4,5,6,7,8];
    softyPlusEarlyExit(false);
    softyPlusEarlyExit(true);
    [1,2,3,4];
};
v57();
const v107 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function eagerDeoptInCalled(a138) {
        const v139 = (a140, a141) => {
            if ((a141 === 13) && a138) {
                a.abc = 25;
            }
            result += a140;
            return true;
        };
        return a.every(v139);
    }
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
};
v107();
const v156 = () => {
    let called_values;
    function eagerDeoptInCalled(a160) {
        const a = [1,2,3,4,5,6,7,8,9,10];
        called_values = [];
        const v174 = (a175, a176) => {
            called_values.push(a175);
            a.length = (a176 === 5) && a160 ? 8 : 10;
            return true;
        };
        return a.every(v174);
    }
    eagerDeoptInCalled();
    [1,2,3,4,5,6,7,8,9,10];
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    [1,2,3,4,5,6,7,8];
    eagerDeoptInCalled();
};
v156();
const v213 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a222) {
        const v223 = (a224, a225) => {
            if ((a225 === 3) && a222) {
                a[3] = 100;
            }
            return true;
        };
        return a.every(v223);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v213();
const v238 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a247) {
        const v248 = (a249, a250) => {
            if ((a250 === 3) && a247) {
            }
            return true;
        };
        return a.every(v248);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v238();
const v262 = () => {
    const a = [1,2,3,4,5];
    function lazyChanger(a271) {
        const v272 = (a273, a274) => {
            if ((a274 === 2) && a271) {
                a[3] = 100;
            }
            return true;
        };
        return a.every(v272);
    }
    lazyChanger();
    lazyChanger();
    lazyChanger(true);
    lazyChanger();
};
v262();
const v287 = () => {
    let result = 0;
    function eagerDeoptInCalled(a291) {
        const a_noescape = [0,1,2,3,4,5];
        const v300 = (a301, a302) => {
            result += a301 | 0;
            if ((a302 === 13) && a291) {
                a_noescape.length = 25;
            }
            return true;
        };
        a_noescape.every(v300);
    }
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled();
    eagerDeoptInCalled(true);
    eagerDeoptInCalled();
};
v287();
const v319 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function lazyDeopt(a350) {
        const v351 = (a352, a353) => {
            result += a353;
            if ((a353 === 13) && a350) {
            }
            return true;
        };
        a.every(v351);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
};
v319();
const v367 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let result = 0;
    function lazyDeopt(a398) {
        function callback(a400, a401) {
            result += a401;
            if ((a401 === 13) && a398) {
            }
            return true;
        }
        a.every(callback);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    lazyDeopt(true);
    lazyDeopt();
};
v367();
const v415 = () => {
    const a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
    let caught = false;
    function lazyDeopt(a446) {
        try {
            const v447 = (a448, a449) => {
                if ((a449 === 1) && a446) {
                    throw "a";
                }
                return true;
            };
            a.every(v447);
        } catch(e456) {
            caught = true;
        }
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v461 = () => {
        return lazyDeopt(true);
    };
    v461();
    lazyDeopt();
};
v415();
const v467 = () => {
    let a = [1,2,3,4,5,6,7,8,9,10];
    let caught = false;
    function lazyDeopt(a483) {
        function callback(a485, a486) {
            if ((a486 === 1) && a483) {
                throw "a";
            }
            return true;
        }
        try {
            a.every(callback);
        } catch(e493) {
            caught = true;
        }
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
    const v498 = () => {
        return lazyDeopt(true);
    };
    v498();
    lazyDeopt();
};
v467();
function TestThrowIntoDeoptimizedOuter() {
    const a = [1,2,3,4];
    function lazyDeopt(a512) {
        function callback(a514, a515) {
            if ((a515 === 1) && a512) {
                throw "some exception";
            }
            return true;
        }
        let result = 0;
        try {
            result = a.every(callback);
        } catch(e524) {
            result = "nope";
        }
        return result;
    }
    lazyDeopt(false);
    lazyDeopt(false);
    lazyDeopt(true);
    lazyDeopt(true);
    lazyDeopt(false);
    lazyDeopt(true);
}
TestThrowIntoDeoptimizedOuter();
const v546 = () => {
    const re = /Array\.every/;
    function lazyDeopt(a550) {
        const b = [1,2,3];
        let result = 0;
        const v558 = (a559, a560) => {
            result += a559;
            if (a560 === 1) {
                const v564 = new Error();
                const e = v564;
                re.exec(e.stack) !== null;
            }
            return true;
        };
        b.every(v558);
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v546();
const v576 = () => {
    const re = /Array\.every/;
    function lazyDeopt(a580) {
        const b = [1,2,3];
        let did_assert_error = false;
        let result = 0;
        function callback(a591, a592) {
            result += a591;
            if (a592 === 1) {
                const v596 = new Error();
                const e = v596;
                re.exec(e.stack) !== null;
                did_assert_error = true;
            }
            return true;
        }
        b.every(callback);
        return did_assert_error;
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v576();
const v609 = () => {
    const re = /Array\.every/;
    function lazyDeopt(a613) {
        const b = [1,2,3];
        let did_assert_error = false;
        let result = 0;
        const v623 = (a624, a625) => {
            result += a624;
            if (a625 === 1) {
            } else {
                if (a625 === 2) {
                    const v631 = new Error();
                    const e = v631;
                    re.exec(e.stack) !== null;
                    did_assert_error = true;
                }
            }
            return true;
        };
        b.every(v623);
        return did_assert_error;
    }
    lazyDeopt();
    lazyDeopt();
    lazyDeopt();
};
v609();
const v644 = () => {
    const re = /Array\.every/;
    const a = [1,2,3];
    let result = 0;
    function lazyDeopt() {
        const v655 = (a656, a657) => {
            result += a657;
            if (a657 === 1) {
                const v661 = new Error();
                throw v661;
            }
            return true;
        };
        a.every(v655);
    }
    const v664 = () => {
        return lazyDeopt();
    };
    v664();
    const v667 = () => {
        return lazyDeopt();
    };
    v667();
    try {
        lazyDeopt();
    } catch(e671) {
        re.exec(e671.stack) !== null;
    }
    try {
        lazyDeopt();
    } catch(e677) {
        re.exec(e677.stack) !== null;
    }
};
v644();
const v683 = () => {
    const a = [1,2,,3,4];
    function withHoles() {
        const callback_values = [];
        const v694 = (a695) => {
            callback_values.push(a695);
            return true;
        };
        a.every(v694);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1,2,3,4];
    withHoles();
};
v683();
const v708 = () => {
    const a = [1.5,2.5,,3.5,4.5];
    function withHoles() {
        const callback_values = [];
        const v719 = (a720) => {
            callback_values.push(a720);
            return true;
        };
        a.every(v719);
        return callback_values;
    }
    withHoles();
    withHoles();
    [1.5,2.5,3.5,4.5];
    withHoles();
};
v708();
const v733 = () => {
    function side_effect(a735, a736) {
        if (a736) {
            a735.foo = 3;
        }
        return a735;
    }
    function unreliable(a739, a740) {
        const v741 = (a742) => {
            return true;
        };
        return a739.every(v741, side_effect(a739, a740));
    }
    let a = [1,2,3];
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, false);
    unreliable(a, true);
};
v733();
const v760 = () => {
    const a = [1,2,3,4,5];
    function notCallable() {
        return a.every(undefined);
    }
    notCallable();
    try {
        notCallable();
    } catch(e774) {
    }
    notCallable();
};
v760();
const v777 = () => {
    const a = [1,2,3];
    let result = 0;
    function prototypeChanged() {
        const v786 = (a787, a788) => {
            result += a787;
            return true;
        };
        a.every(v786);
    }
    prototypeChanged();
    prototypeChanged();
    prototypeChanged();
    a.constructor = {};
    prototypeChanged();
    prototypeChanged();
};
v777();

FuzzIL program written to corpus/optimized-array-every.fzil
