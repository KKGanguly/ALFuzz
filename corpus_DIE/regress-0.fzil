v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '0'
    v2 <- CreateNamedVariable 'sum', 'var', v1
    BeginForLoopInitializer
        v3 <- LoadInteger '0'
    BeginForLoopCondition -> v4
        v5 <- LoadInteger '200'
        v6 <- Compare v4, '<', v5
    BeginForLoopAfterthought v6 -> v7
        v8 <- LoadInteger '1'
        v9 <- BinaryOperation v7, '+', v8
        Reassign v7, v9
    BeginForLoopBody -> v10
        BeginForLoopInitializer
            v11 <- LoadInteger '0'
        BeginForLoopCondition -> v12
            v13 <- LoadInteger '200'
            v14 <- Compare v12, '<', v13
        BeginForLoopAfterthought v14 -> v15
            v16 <- LoadInteger '1'
            v17 <- BinaryOperation v15, '+', v16
            Reassign v15, v17
        BeginForLoopBody -> v18
            v19 <- LoadInteger '1'
            v20 <- BinaryOperation v2, '+', v19
            Reassign v2, v20
        EndForLoop
    EndForLoop
    Return v2
EndPlainFunction
v21 <- LoadInteger '200'
v22 <- LoadInteger '200'
v23 <- BinaryOperation v21, '*', v22
v24 <- CallFunction v0, []


function TestNestedLoops() {
    var sum = 0;
    for (let i4 = 0; i4 < 200; i4 = i4 + 1) {
        for (let i12 = 0; i12 < 200; i12 = i12 + 1) {
            sum = sum + 1;
        }
    }
    return sum;
}
200 * 200;
TestNestedLoops();

FuzzIL program written to corpus/regress-0.fzil
