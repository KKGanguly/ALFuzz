1000000000.0 + 1000000000.0;
const v3 = [2.2250738585072014e-308,-4.313981892151699e+307,2.2250738585072014e-308];
let v4;
try { v4 = v3.findLastIndex(1000000000.0); } catch (e) {}
[1.6527445313393455e+308,0.8692775710696014,0.0];
[-Infinity,-1e-15,-489.4584995188722,-462.66905195479535,2.2250738585072014e-308];
1.0607943797953369e+307 >> 1.0607943797953369e+307;
-5.121096286253673 - -5.121096286253673;
const v13 = Math.imul;
v13.g = v13;
var imul_func = v13;
function imul_polyfill(a16, a17) {
    a16 & a16;
    a17--;
    var ah = (a16 >>> 16) & 65535;
    var al = a16 & 65535;
    const v31 = (a17 >>> 16) & 65535;
    var bl = a17 & 65535;
    return ((al * bl) + ((((ah * bl) + (al * v31)) << 16) >>> 0)) | 0;
}
function TestMathImul(a47, a48, a49) {
    a48 - a48;
    function imul_meth_closure(a52, a53) {
        return Math.imul(a52, a53);
    }
    function imul_func_closure(a56, a57) {
        a56 >> a56;
        a57 - a57;
        return imul_func(a56, a57);
    }
    try { new imul_func_closure(a49, a49); } catch (e) {}
    imul_polyfill(a48, a49);
    Math.imul(a48, a49);
    imul_func(a48, a49);
    imul_meth_closure(a48, a49);
    imul_meth_closure(a48, a49);
    const v67 = imul_func_closure(a48, a49);
    v67 - v67;
    const v69 = imul_func_closure(a48, a49);
    v69 >>> v69;
    -imul_func_closure(a48, a49);
}
TestMathImul(8, 2, 4);
const v78 = -8;
1 - 1;
const v81 = -1;
v81 >>> v81;
TestMathImul(v78, v81, 8);
const v90 = TestMathImul(4, -2, -2);
v90 ?? v90;
const v96 = TestMathImul(-5, 4294967295, 5);
v96 ?? v96;
const v99 = -10;
let v100 = 4294967294;
5 >>> 5;
TestMathImul(v99, v100, 5);
7 * 7;
TestMathImul(0, 7, false);
!false;
TestMathImul(0, false, false);
const v118 = TestMathImul(7, true, 7);
v118 ?? v118;
let v120 = 7;
v120--;
7 + 7;
TestMathImul(v120, 7);
const v129 = TestMathImul(1, true, true);
v129 ?? v129;
false && false;
true || true;
TestMathImul(0, false, true);
0 >>> 0;
TestMathImul(0, true, false);
0 | 0;
TestMathImul(0, undefined, 7);
TestMathImul(0, 7, undefined);
undefined ?? undefined;
TestMathImul(0, undefined, undefined);
let v158 = -0;
v158--;
TestMathImul(0, v158, 7);
let v163 = 7;
v163--;
0 * 0;
const v168 = TestMathImul(0, v163, -0);
v168 ?? v168;
const v173 = TestMathImul(0, 0.1, 7);
const v174 = v173 ?? v173;
-7;
TestMathImul(0, 7, 0.1);
let v182 = 7;
v182++;
TestMathImul(0, 0.9, v182);
7 - 7;
TestMathImul(0, 7, 0.9);
TestMathImul(7, 1.1, 7);
TestMathImul(7, 7, 1.1);
const v201 = TestMathImul(7, 1.9, 7);
let v205 = TestMathImul(7, 7, 1.9);
const v209 = TestMathImul(0, "str", 7);
v209 ?? v209;
0 - 0;
try { ("str").isWellFormed(); } catch (e) {}
TestMathImul(0, 7, "str");
const v220 = TestMathImul(0, {}, 7);
v220 ?? v220;
TestMathImul(0, 7, {});
0 >> 0;
TestMathImul(0, [], 7);
-1699114080 % -1699114080;
const v235 = v100 ** v100;
let v236 = -v205;
v236++;
++v205;
v205 / v205;
~v235;
const v241 = v100++;
v241 - v241;
0 - 0;
const v246 = [];
try { v246.findLast(v201); } catch (e) {}
TestMathImul(0, 7, v246);
let v251 = 10;
for (; v251--;) {
    let v253;
    try { v253 = new v13(v174); } catch (e) {}
    try { v4(0.1, v253); } catch (e) {}
}
const v255 = 1 << 30;
v255 >> v255;
var two_30 = v255;
const v258 = -two_30;
7 >> 7;
const v261 = TestMathImul(v258, two_30, 7);
v261 ?? v261;
7 ^ 7;
TestMathImul(0, two_30, two_30);
TestMathImul(two_30, -two_30, 7);
-7;
const v273 = TestMathImul(two_30, 7, -two_30);
v273 ?? v273;
const v276 = -two_30;
const v277 = -two_30;
v277 >> v277;
const v279 = TestMathImul(0, v276, v277);
v279 ?? v279;
let v281 = 2;
v281++;
const v283 = v281 * two_30;
v283 & v283;
var two_31 = v283;
let v286 = -two_31;
v286--;
TestMathImul(v286, two_31, 7);
const v290 = -two_31;
7 >>> 7;
TestMathImul(v290, 7, two_31);
0 == 0;
TestMathImul(0, two_31, two_31);
const v297 = -two_31;
const v298 = -two_31;
7 != 7;
TestMathImul(v297, v298, 7);
const v302 = -two_31;
v302 + v302;
~7;
TestMathImul(v302, 7, -two_31);
let v308 = 0;
v308--;
TestMathImul(v308, -two_31, -two_31);
~1;
const v315 = two_31 - 1;
v315 / v315;
var max_val = v315;
two_31 - 7;
let v320 = 7;
v320++;
const v323 = two_31 - 7;
v323 >>> v323;
TestMathImul(v323, 7, max_val);
TestMathImul(1, max_val, max_val);
var two_16 = 1 << 16;
0 >> 0;
TestMathImul(0, two_16, two_16);
const v336 = -two_16;
v336 - v336;
const v340 = TestMathImul(v336, two_16 - 1, two_16);
v340 ?? v340;
TestMathImul(-two_16, two_16, two_16 - 1);
const v348 = -2 * two_16;
v348 >> v348;
let v350 = 1;
v350--;
const v352 = v348 + v350;
const v354 = two_16 - 1;
let v355 = 1;
v355++;
const v357 = two_16 - v355;
v357 | v357;
TestMathImul(v352, v354, v357);
