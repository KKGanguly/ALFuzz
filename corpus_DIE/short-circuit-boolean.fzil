v0 <- BeginPlainFunction -> 
    v1 <- LoadInteger '0'
    v2 <- CreateNamedVariable 'a', 'var', v1
    v3 <- LoadInteger '0'
    v4 <- Compare v2, '!=', v3
    v5 <- LoadString 'failure'
    v6 <- BinaryOperation v4, '&&', v5
    Return v6
EndPlainFunction
v7 <- CallFunction v0, []
v8 <- BeginPlainFunction -> 
    v9 <- LoadInteger '0'
    v10 <- CreateNamedVariable 'a', 'var', v9
    v11 <- LoadInteger '0'
    v12 <- Compare v10, '==', v11
    v13 <- LoadString 'failure'
    v14 <- BinaryOperation v12, '||', v13
    Return v14
EndPlainFunction
v15 <- CallFunction v8, []


function andTest0() {
    var a = 0;
    return (a != 0) && "failure";
}
andTest0();
function orTest0() {
    var a = 0;
    return (a == 0) || "failure";
}
orTest0();

FuzzIL program written to corpus/short-circuit-boolean.fzil
