v0 <- BeginPlainFunction -> v1, v2, v3
    v4 <- LoadString 'result'
    v5 <- CreateNamedVariable 'res', 'var', v4
    v6 <- LoadInteger '10'
    v7 <- LoadInteger '0'
    v8 <- BinaryOperation v2, '+', v7
    v9 <- CallMethod v1, 'toString', [v6, v8]
    v10 <- Void_ v9
    BeginIf v3
        BeginForLoopInitializer
            v11 <- LoadInteger '0'
        BeginForLoopCondition -> v12
            v13 <- LoadInteger '100000'
            v14 <- Compare v12, '<', v13
        BeginForLoopAfterthought v14 -> v15
            v16 <- UnaryOperation v15, '++'
        BeginForLoopBody -> v17
        EndForLoop
    EndIf
    Return v5
EndPlainFunction
v18 <- LoadInteger '4'
v19 <- LoadInteger '0'
v20 <- LoadBoolean 'false'
v21 <- CallFunction v0, [v18, v19, v20]
v22 <- LoadInteger '4'
v23 <- LoadInteger '0'
v24 <- LoadBoolean 'false'
v25 <- CallFunction v0, [v22, v23, v24]
v26 <- LoadInteger '4'
v27 <- LoadInteger '0'
v28 <- LoadBoolean 'false'
v29 <- CallFunction v0, [v26, v27, v28]
v30 <- LoadString 'result'
v31 <- LoadInteger '4'
v32 <- LoadString 'deopt'
v33 <- LoadBoolean 'true'
v34 <- CallFunction v0, [v31, v32, v33]


function f(a1, a2, a3) {
    var res = "result";
    void a1.toString(10, a2 + 0);
    if (a3) {
        for (let i12 = 0; i12 < 100000; i12++) {
        }
    }
    return res;
}
f(4, 0, false);
f(4, 0, false);
f(4, 0, false);
f(4, "deopt", true);

FuzzIL program written to corpus/number-named-call-deopt.fzil
