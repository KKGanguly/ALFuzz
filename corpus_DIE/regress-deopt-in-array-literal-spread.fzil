v0 <- BeginPlainFunction -> v1, v2, v3, v4
    v5 <- CreateArray [v2, v3]
    v6 <- CreateArrayWithSpread [v1, ...v5, v4]
    Return v6
EndPlainFunction
v7 <- LoadInteger '1'
v8 <- LoadInteger '2'
v9 <- LoadInteger '3'
v10 <- LoadInteger '4'
v11 <- CreateArray [v7, v8, v9, v10]
v12 <- LoadInteger '1'
v13 <- LoadInteger '2'
v14 <- LoadInteger '3'
v15 <- LoadInteger '4'
v16 <- CallFunction v0, [v12, v13, v14, v15]
v17 <- LoadInteger '1'
v18 <- LoadInteger '2'
v19 <- LoadInteger '3'
v20 <- LoadInteger '4'
v21 <- CreateArray [v17, v18, v19, v20]
v22 <- LoadInteger '1'
v23 <- LoadInteger '2'
v24 <- LoadInteger '3'
v25 <- LoadInteger '4'
v26 <- CallFunction v0, [v22, v23, v24, v25]
v27 <- LoadInteger '1'
v28 <- LoadInteger '2'
v29 <- LoadInteger '3'
v30 <- LoadInteger '4'
v31 <- CreateArray [v27, v28, v29, v30]
v32 <- LoadInteger '1'
v33 <- LoadInteger '2'
v34 <- LoadInteger '3'
v35 <- LoadInteger '4'
v36 <- CallFunction v0, [v32, v33, v34, v35]


function f(a1, a2, a3, a4) {
    return [a1,...[a2,a3],a4];
}
[1,2,3,4];
f(1, 2, 3, 4);
[1,2,3,4];
f(1, 2, 3, 4);
[1,2,3,4];
f(1, 2, 3, 4);

FuzzIL program written to corpus/regress-deopt-in-array-literal-spread.fzil
