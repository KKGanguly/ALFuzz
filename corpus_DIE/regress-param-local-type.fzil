v0 <- BeginPlainFunction -> v1
    v2 <- LoadString ''
    v3 <- CreateNamedVariable 's', 'var', v2
    v4 <- LoadInteger '0'
    v5 <- CreateNamedVariable 'n', 'var', v4
    v6 <- LoadInteger '1'
    v7 <- CreateNamedVariable 'i', 'var', v6
    v8 <- BinaryOperation v7, '+', v1
    Reassign v5, v8
EndPlainFunction
v9 <- LoadInteger '1'
v10 <- CallFunction v0, [v9]
v11 <- LoadInteger '1'
v12 <- CallFunction v0, [v11]
v13 <- LoadInteger '1'
v14 <- CallFunction v0, [v13]
v15 <- CallFunction v0, []
v16 <- BeginPlainFunction -> 
    v17 <- LoadString ''
    v18 <- CreateNamedVariable 's', 'var', v17
    v19 <- LoadInteger '0'
    v20 <- CreateNamedVariable 'n', 'var', v19
    v21 <- LoadInteger '1'
    v22 <- CreateNamedVariable 'i', 'var', v21
    v23 <- LoadThis
    v24 <- BinaryOperation v22, '+', v23
    Reassign v20, v24
EndPlainFunction
v25 <- LoadInteger '1'
v26 <- CallMethod v16, 'call', [v25]
v27 <- LoadInteger '1'
v28 <- CallMethod v16, 'call', [v27]
v29 <- LoadInteger '1'
v30 <- CallMethod v16, 'call', [v29]
v31 <- CallFunction v16, []


function f(a1) {
    var s = "";
    var n = 0;
    var i = 1;
    n = i + a1;
}
f(1);
f(1);
f(1);
f();
function g() {
    var s = "";
    var n = 0;
    var i = 1;
    n = i + this;
}
g.call(1);
g.call(1);
g.call(1);
g();

FuzzIL program written to corpus/regress-param-local-type.fzil
