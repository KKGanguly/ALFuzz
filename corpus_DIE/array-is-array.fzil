v0 <- BeginPlainFunction -> 
    v1 <- BeginPlainFunction -> 
        v2 <- CreateArray []
        v3 <- CreateNamedVariable 'Array', 'none'
        v4 <- CallMethod v3, 'isArray', [v2]
        Return v4
    EndPlainFunction
    v5 <- CallFunction v1, []
    v6 <- CallFunction v1, []
    v7 <- CallFunction v1, []
EndPlainFunction
v8 <- CallFunction v0, []
v9 <- BeginPlainFunction -> 
    v10 <- BeginPlainFunction -> 
        v11 <- CreateNamedVariable 'Proxy', 'none'
        v12 <- CreateArray []
        BeginObjectLiteral
        v13 <- EndObjectLiteral
        v14 <- Construct v11, [v12, v13]
        v15 <- CreateNamedVariable 'Array', 'none'
        v16 <- CallMethod v15, 'isArray', [v14]
        Return v16
    EndPlainFunction
    v17 <- CallFunction v10, []
    v18 <- CallFunction v10, []
    v19 <- CallFunction v10, []
EndPlainFunction
v20 <- CallFunction v9, []
v21 <- BeginPlainFunction -> 
    v22 <- BeginPlainFunction -> 
        BeginObjectLiteral
        v23 <- EndObjectLiteral
        v24 <- CreateNamedVariable 'Array', 'none'
        v25 <- CallMethod v24, 'isArray', [v23]
        Return v25
    EndPlainFunction
    v26 <- CallFunction v22, []
    v27 <- CallFunction v22, []
    v28 <- CallFunction v22, []
EndPlainFunction
v29 <- CallFunction v21, []
v30 <- BeginPlainFunction -> 
    v31 <- BeginPlainFunction -> 
        v32 <- CreateNamedVariable 'Proxy', 'none'
        BeginObjectLiteral
        v33 <- EndObjectLiteral
        BeginObjectLiteral
        v34 <- EndObjectLiteral
        v35 <- Construct v32, [v33, v34]
        v36 <- CreateNamedVariable 'Array', 'none'
        v37 <- CallMethod v36, 'isArray', [v35]
        Return v37
    EndPlainFunction
    v38 <- CallFunction v31, []
    v39 <- CallFunction v31, []
    v40 <- CallFunction v31, []
EndPlainFunction
v41 <- CallFunction v30, []
v42 <- BeginPlainFunction -> 
    v43 <- BeginPlainFunction -> v44
        v45 <- CreateNamedVariable 'Array', 'none'
        v46 <- CallMethod v45, 'isArray', [v44]
        Return v46
    EndPlainFunction
    BeginObjectLiteral
    v47 <- EndObjectLiteral
    v48 <- CallFunction v43, [v47]
    v49 <- CreateNamedVariable 'Proxy', 'none'
    BeginObjectLiteral
    v50 <- EndObjectLiteral
    BeginObjectLiteral
    v51 <- EndObjectLiteral
    v52 <- Construct v49, [v50, v51]
    v53 <- CallFunction v43, [v52]
    v54 <- CreateArray []
    v55 <- CallFunction v43, [v54]
    v56 <- CreateArray []
    BeginObjectLiteral
    v57 <- EndObjectLiteral
    v58 <- Construct v49, [v56, v57]
    v59 <- CallFunction v43, [v58]
    v60 <- BeginArrowFunction -> 
        v61 <- CreateArray []
        BeginObjectLiteral
        v62 <- EndObjectLiteral
        v63 <- CallMethod v49, 'revocable', [v61, v62]
        v64 <- CreateNamedVariable '', 'const', v63
        v65 <- CreateNamedVariable 'revoke', 'none'
        v66 <- CallFunction v65, []
        v67 <- CreateNamedVariable 'proxy', 'none'
        v68 <- CallFunction v43, [v67]
    EndArrowFunction
    v69 <- CallFunction v60, []
    v70 <- CreateNamedVariable 'TypeError', 'none'
    BeginObjectLiteral
    v71 <- EndObjectLiteral
    v72 <- CallFunction v43, [v71]
    BeginObjectLiteral
    v73 <- EndObjectLiteral
    BeginObjectLiteral
    v74 <- EndObjectLiteral
    v75 <- Construct v49, [v73, v74]
    v76 <- CallFunction v43, [v75]
    v77 <- CreateArray []
    v78 <- CallFunction v43, [v77]
    v79 <- CreateArray []
    BeginObjectLiteral
    v80 <- EndObjectLiteral
    v81 <- Construct v49, [v79, v80]
    v82 <- CallFunction v43, [v81]
    v83 <- BeginArrowFunction -> 
        v84 <- CreateArray []
        BeginObjectLiteral
        v85 <- EndObjectLiteral
        v86 <- CallMethod v49, 'revocable', [v84, v85]
        v87 <- CreateNamedVariable '', 'const', v86
        v88 <- CreateNamedVariable 'revoke', 'none'
        v89 <- CallFunction v88, []
        v90 <- CreateNamedVariable 'proxy', 'none'
        v91 <- CallFunction v43, [v90]
    EndArrowFunction
    v92 <- CallFunction v83, []
EndPlainFunction
v93 <- CallFunction v42, []
v94 <- BeginPlainFunction -> 
    v95 <- BeginPlainFunction -> v96
        BeginObjectLiteral
        v97 <- EndObjectLiteral
        v98 <- CreateNamedVariable 'Proxy', 'none'
        v99 <- CallMethod v98, 'revocable', [v96, v97]
        v100 <- CreateNamedVariable '', 'const', v99
        v101 <- CreateNamedVariable 'revoke', 'none'
        v102 <- CallFunction v101, []
        BeginTry
            v103 <- CreateNamedVariable 'proxy', 'none'
            v104 <- CreateNamedVariable 'Array', 'none'
            v105 <- CallMethod v104, 'isArray', [v103]
            Return v105
        BeginCatch -> v106
            Return v106
        EndTryCatch
    EndPlainFunction
    v107 <- CreateArray []
    v108 <- CallFunction v95, [v107]
    v109 <- CreateNamedVariable 'TypeError', 'none'
    BeginObjectLiteral
    v110 <- EndObjectLiteral
    v111 <- CallFunction v95, [v110]
    v112 <- CreateArray []
    v113 <- CallFunction v95, [v112]
    BeginObjectLiteral
    v114 <- EndObjectLiteral
    v115 <- CallFunction v95, [v114]
EndPlainFunction
v116 <- CallFunction v94, []


function f0() {
    function foo() {
        return Array.isArray([]);
    }
    foo();
    foo();
    foo();
}
f0();
function f9() {
    function foo() {
        const v12 = [];
        const v14 = new Proxy(v12, {});
        return Array.isArray(v14);
    }
    foo();
    foo();
    foo();
}
f9();
function f21() {
    function foo() {
        return Array.isArray({});
    }
    foo();
    foo();
    foo();
}
f21();
function f30() {
    function foo() {
        const v33 = {};
        const v35 = new Proxy(v33, {});
        return Array.isArray(v35);
    }
    foo();
    foo();
    foo();
}
f30();
function f42() {
    function foo(a44) {
        return Array.isArray(a44);
    }
    foo({});
    const v50 = {};
    const v52 = new Proxy(v50, {});
    foo(v52);
    foo([]);
    const v56 = [];
    const v58 = new Proxy(v56, {});
    foo(v58);
    const v60 = () => {
        const v61 = [];
        const  = Proxy.revocable(v61, {});
        revoke();
        foo(proxy);
    };
    v60();
    foo({});
    const v73 = {};
    const v75 = new Proxy(v73, {});
    foo(v75);
    foo([]);
    const v79 = [];
    const v81 = new Proxy(v79, {});
    foo(v81);
    const v83 = () => {
        const v84 = [];
        const  = Proxy.revocable(v84, {});
        revoke();
        foo(proxy);
    };
    v83();
}
f42();
function f94() {
    function foo(a96) {
        const  = Proxy.revocable(a96, {});
        revoke();
        try {
            return Array.isArray(proxy);
        } catch(e106) {
            return e106;
        }
    }
    foo([]);
    foo({});
    foo([]);
    foo({});
}
f94();

FuzzIL program written to corpus/array-is-array.fzil
