v0 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v1 <- EndObjectLiteral
    v2 <- CreateNamedVariable 'Number', 'none'
    v3 <- GetProperty v2, 'prototype'
    v4 <- GetProperty v3, 'toExponential'
    v5 <- CallMethod v4, 'call', [v1]
EndPlainFunction
v6 <- CallFunction v0, []
v7 <- CreateNamedVariable 'TypeError', 'none'
v8 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v9 <- EndObjectLiteral
    v10 <- CreateNamedVariable 'Number', 'none'
    v11 <- GetProperty v10, 'prototype'
    v12 <- GetProperty v11, 'toPrecision'
    v13 <- CallMethod v12, 'call', [v9]
EndPlainFunction
v14 <- CallFunction v8, []
v15 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v16 <- EndObjectLiteral
    v17 <- CreateNamedVariable 'Number', 'none'
    v18 <- GetProperty v17, 'prototype'
    v19 <- GetProperty v18, 'toFixed'
    v20 <- CallMethod v19, 'call', [v16]
EndPlainFunction
v21 <- CallFunction v15, []
v22 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v23 <- EndObjectLiteral
    v24 <- CreateNamedVariable 'Number', 'none'
    v25 <- GetProperty v24, 'prototype'
    v26 <- GetProperty v25, 'toString'
    v27 <- CallMethod v26, 'call', [v23]
EndPlainFunction
v28 <- CallFunction v22, []
v29 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v30 <- EndObjectLiteral
    v31 <- CreateNamedVariable 'Number', 'none'
    v32 <- GetProperty v31, 'prototype'
    v33 <- GetProperty v32, 'toLocaleString'
    v34 <- CallMethod v33, 'call', [v30]
EndPlainFunction
v35 <- CallFunction v29, []
v36 <- BeginPlainFunction -> 
    BeginObjectLiteral
    v37 <- EndObjectLiteral
    v38 <- CreateNamedVariable 'Number', 'none'
    v39 <- GetProperty v38, 'prototype'
    v40 <- GetProperty v39, 'ValueOf'
    v41 <- CallMethod v40, 'call', [v37]
EndPlainFunction
v42 <- CallFunction v36, []
v43 <- CreateNamedVariable 'Number', 'none'
v44 <- LoadInteger '1'
v45 <- Construct v43, [v44]
v46 <- CreateNamedVariable 'x_obj', 'var', v45
v47 <- BeginPlainFunction -> 
EndPlainFunction
SetProperty v46, 'valueOf', v47
v48 <- LoadString '1.00e+0'
v49 <- LoadInteger '2'
v50 <- GetProperty v43, 'prototype'
v51 <- GetProperty v50, 'toExponential'
v52 <- CallMethod v51, 'call', [v46, v49]
v53 <- LoadString '1.0'
v54 <- LoadInteger '2'
v55 <- GetProperty v43, 'prototype'
v56 <- GetProperty v55, 'toPrecision'
v57 <- CallMethod v56, 'call', [v46, v54]
v58 <- LoadString '1.00'
v59 <- LoadInteger '2'
v60 <- GetProperty v43, 'prototype'
v61 <- GetProperty v60, 'toFixed'
v62 <- CallMethod v61, 'call', [v46, v59]
v63 <- LoadString '1.00e+0'
v64 <- LoadInteger '1'
v65 <- LoadInteger '2'
v66 <- GetProperty v43, 'prototype'
v67 <- GetProperty v66, 'toExponential'
v68 <- CallMethod v67, 'call', [v64, v65]
v69 <- LoadString '1.0'
v70 <- LoadInteger '1'
v71 <- LoadInteger '2'
v72 <- GetProperty v43, 'prototype'
v73 <- GetProperty v72, 'toPrecision'
v74 <- CallMethod v73, 'call', [v70, v71]
v75 <- LoadString '1.00'
v76 <- LoadInteger '1'
v77 <- LoadInteger '2'
v78 <- GetProperty v43, 'prototype'
v79 <- GetProperty v78, 'toFixed'
v80 <- CallMethod v79, 'call', [v76, v77]
v81 <- LoadBoolean 'false'
v82 <- CreateNamedVariable 'f_flag', 'var', v81
v83 <- BeginPlainFunction -> 
    v84 <- LoadBoolean 'true'
    Reassign v82, v84
    v85 <- LoadInteger '1000'
    Return v85
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v83
v86 <- EndObjectLiteral
v87 <- CreateNamedVariable 'f_obj', 'var', v86
v88 <- LoadString 'NaN'
v89 <- CreateNamedVariable 'NaN', 'none'
v90 <- GetProperty v43, 'prototype'
v91 <- GetProperty v90, 'toExponential'
v92 <- CallMethod v91, 'call', [v89, v87]
v93 <- LoadBoolean 'false'
Reassign v82, v93
v94 <- LoadString 'Infinity'
v95 <- LoadInteger '1'
v96 <- LoadInteger '0'
v97 <- BinaryOperation v95, '/', v96
v98 <- GetProperty v43, 'prototype'
v99 <- GetProperty v98, 'toExponential'
v100 <- CallMethod v99, 'call', [v97, v87]
v101 <- LoadBoolean 'false'
Reassign v82, v101
v102 <- LoadString '-Infinity'
v103 <- LoadInteger '1'
v104 <- UnaryOperation '-', v103
v105 <- LoadInteger '0'
v106 <- BinaryOperation v104, '/', v105
v107 <- GetProperty v43, 'prototype'
v108 <- GetProperty v107, 'toExponential'
v109 <- CallMethod v108, 'call', [v106, v87]
v110 <- LoadBoolean 'false'
Reassign v82, v110
v111 <- LoadString 'NaN'
v112 <- GetProperty v43, 'prototype'
v113 <- GetProperty v112, 'toPrecision'
v114 <- CallMethod v113, 'call', [v89, v87]
v115 <- LoadBoolean 'false'
Reassign v82, v115
v116 <- LoadString 'Infinity'
v117 <- LoadInteger '1'
v118 <- LoadInteger '0'
v119 <- BinaryOperation v117, '/', v118
v120 <- GetProperty v43, 'prototype'
v121 <- GetProperty v120, 'toPrecision'
v122 <- CallMethod v121, 'call', [v119, v87]
v123 <- LoadBoolean 'false'
Reassign v82, v123
v124 <- LoadString '-Infinity'
v125 <- LoadInteger '1'
v126 <- UnaryOperation '-', v125
v127 <- LoadInteger '0'
v128 <- BinaryOperation v126, '/', v127
v129 <- GetProperty v43, 'prototype'
v130 <- GetProperty v129, 'toPrecision'
v131 <- CallMethod v130, 'call', [v128, v87]
v132 <- LoadBoolean 'false'
Reassign v82, v132
v133 <- BeginPlainFunction -> 
    v134 <- GetProperty v43, 'prototype'
    v135 <- GetProperty v134, 'toFixed'
    v136 <- CallMethod v135, 'call', [v89, v87]
EndPlainFunction
v137 <- CallFunction v133, []
v138 <- CreateNamedVariable 'RangeError', 'none'
v139 <- LoadBoolean 'false'
Reassign v82, v139
v140 <- BeginPlainFunction -> 
    v141 <- LoadInteger '1'
    v142 <- LoadInteger '0'
    v143 <- BinaryOperation v141, '/', v142
    v144 <- GetProperty v43, 'prototype'
    v145 <- GetProperty v144, 'toFixed'
    v146 <- CallMethod v145, 'call', [v143, v87]
EndPlainFunction
v147 <- CallFunction v140, []
v148 <- LoadBoolean 'false'
Reassign v82, v148
v149 <- BeginPlainFunction -> 
    v150 <- LoadInteger '1'
    v151 <- UnaryOperation '-', v150
    v152 <- LoadInteger '0'
    v153 <- BinaryOperation v151, '/', v152
    v154 <- GetProperty v43, 'prototype'
    v155 <- GetProperty v154, 'toFixed'
    v156 <- CallMethod v155, 'call', [v153, v87]
EndPlainFunction
v157 <- CallFunction v149, []


function f0() {
    const v1 = {};
    Number.prototype.toExponential.call(v1);
}
f0();
function f8() {
    const v9 = {};
    Number.prototype.toPrecision.call(v9);
}
f8();
function f15() {
    const v16 = {};
    Number.prototype.toFixed.call(v16);
}
f15();
function f22() {
    const v23 = {};
    Number.prototype.toString.call(v23);
}
f22();
function f29() {
    const v30 = {};
    Number.prototype.toLocaleString.call(v30);
}
f29();
function f36() {
    const v37 = {};
    Number.prototype.ValueOf.call(v37);
}
f36();
const v45 = new Number(1);
var x_obj = v45;
function f47() {
}
x_obj.valueOf = f47;
Number.prototype.toExponential.call(x_obj, 2);
Number.prototype.toPrecision.call(x_obj, 2);
Number.prototype.toFixed.call(x_obj, 2);
Number.prototype.toExponential.call(1, 2);
Number.prototype.toPrecision.call(1, 2);
Number.prototype.toFixed.call(1, 2);
var f_flag = false;
function f83() {
    f_flag = true;
    return 1000;
}
var f_obj = { valueOf: f83 };
Number.prototype.toExponential.call(NaN, f_obj);
f_flag = false;
const v97 = 1 / 0;
Number.prototype.toExponential.call(v97, f_obj);
f_flag = false;
const v106 = -1 / 0;
Number.prototype.toExponential.call(v106, f_obj);
f_flag = false;
Number.prototype.toPrecision.call(NaN, f_obj);
f_flag = false;
const v119 = 1 / 0;
Number.prototype.toPrecision.call(v119, f_obj);
f_flag = false;
const v128 = -1 / 0;
Number.prototype.toPrecision.call(v128, f_obj);
f_flag = false;
function f133() {
    Number.prototype.toFixed.call(NaN, f_obj);
}
f133();
f_flag = false;
function f140() {
    const v143 = 1 / 0;
    Number.prototype.toFixed.call(v143, f_obj);
}
f140();
f_flag = false;
function f149() {
    const v153 = -1 / 0;
    Number.prototype.toFixed.call(v153, f_obj);
}
f149();

FuzzIL program written to corpus/regress-2443.fzil
