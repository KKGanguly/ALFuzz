v0 <- LoadString 'abcdefghijklmn'
v1 <- CreateNamedVariable 's', 'var', v0
v2 <- CallMethod v1, 'substr', []
v3 <- LoadInteger '0'
v4 <- CallMethod v1, 'substr', [v3]
v5 <- LoadString '0'
v6 <- CallMethod v1, 'substr', [v5]
v7 <- LoadInteger '0'
v8 <- Void_ v7
v9 <- CallMethod v1, 'substr', [v8]
v10 <- LoadNull
v11 <- CallMethod v1, 'substr', [v10]
v12 <- LoadBoolean 'false'
v13 <- CallMethod v1, 'substr', [v12]
v14 <- LoadFloat '0.9'
v15 <- CallMethod v1, 'substr', [v14]
v16 <- BeginPlainFunction -> 
    v17 <- LoadInteger '0'
    Return v17
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v16
v18 <- EndObjectLiteral
v19 <- CallMethod v1, 'substr', [v18]
v20 <- BeginPlainFunction -> 
    v21 <- LoadString '0'
    Return v21
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toString`, v20
v22 <- EndObjectLiteral
v23 <- CallMethod v1, 'substr', [v22]
v24 <- LoadInteger '1'
v25 <- CallMethod v1, 'substring', [v24]
v26 <- CreateNamedVariable 's1', 'var', v25
v27 <- LoadInteger '1'
v28 <- CallMethod v1, 'substr', [v27]
v29 <- LoadString '1'
v30 <- CallMethod v1, 'substr', [v29]
v31 <- LoadBoolean 'true'
v32 <- CallMethod v1, 'substr', [v31]
v33 <- LoadFloat '1.1'
v34 <- CallMethod v1, 'substr', [v33]
v35 <- BeginPlainFunction -> 
    v36 <- LoadInteger '1'
    Return v36
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `valueOf`, v35
v37 <- EndObjectLiteral
v38 <- CallMethod v1, 'substr', [v37]
v39 <- BeginPlainFunction -> 
    v40 <- LoadString '1'
    Return v40
EndPlainFunction
BeginObjectLiteral
    ObjectLiteralAddProperty `toString`, v39
v41 <- EndObjectLiteral
v42 <- CallMethod v1, 'substr', [v41]
v43 <- GetProperty v1, 'length'
v44 <- LoadInteger '1'
v45 <- BinaryOperation v43, '-', v44
v46 <- CallMethod v1, 'substring', [v45]
v47 <- LoadInteger '1'
v48 <- UnaryOperation '-', v47
v49 <- CallMethod v1, 'substr', [v48]
v50 <- GetProperty v1, 'length'
v51 <- LoadInteger '1'
v52 <- BinaryOperation v50, '-', v51
v53 <- CallMethod v1, 'substring', [v52]
v54 <- LoadFloat '1.2'
v55 <- UnaryOperation '-', v54
v56 <- CallMethod v1, 'substr', [v55]
v57 <- GetProperty v1, 'length'
v58 <- LoadInteger '1'
v59 <- BinaryOperation v57, '-', v58
v60 <- CallMethod v1, 'substring', [v59]
v61 <- LoadFloat '1.7'
v62 <- UnaryOperation '-', v61
v63 <- CallMethod v1, 'substr', [v62]
v64 <- GetProperty v1, 'length'
v65 <- LoadInteger '2'
v66 <- BinaryOperation v64, '-', v65
v67 <- CallMethod v1, 'substring', [v66]
v68 <- LoadInteger '2'
v69 <- UnaryOperation '-', v68
v70 <- CallMethod v1, 'substr', [v69]
v71 <- GetProperty v1, 'length'
v72 <- LoadInteger '2'
v73 <- BinaryOperation v71, '-', v72
v74 <- CallMethod v1, 'substring', [v73]
v75 <- LoadFloat '2.3'
v76 <- UnaryOperation '-', v75
v77 <- CallMethod v1, 'substr', [v76]
v78 <- GetProperty v1, 'length'
v79 <- LoadInteger '2'
v80 <- BinaryOperation v78, '-', v79
v81 <- GetProperty v1, 'length'
v82 <- LoadInteger '1'
v83 <- BinaryOperation v81, '-', v82
v84 <- CallMethod v1, 'substring', [v80, v83]
v85 <- LoadInteger '2'
v86 <- UnaryOperation '-', v85
v87 <- LoadInteger '1'
v88 <- CallMethod v1, 'substr', [v86, v87]
v89 <- LoadInteger '100'
v90 <- UnaryOperation '-', v89
v91 <- CallMethod v1, 'substr', [v90]
v92 <- LoadString 'abc'
v93 <- LoadInteger '100'
v94 <- UnaryOperation '-', v93
v95 <- LoadInteger '3'
v96 <- CallMethod v1, 'substr', [v94, v95]
v97 <- GetProperty v1, 'length'
v98 <- UnaryOperation '-', v97
v99 <- LoadInteger '1'
v100 <- BinaryOperation v98, '+', v99
v101 <- CallMethod v1, 'substr', [v100]
v102 <- LoadString 'abcdefghijklmn'
v103 <- LoadInteger '0'
v104 <- LoadInteger '0'
v105 <- Void_ v104
v106 <- CallMethod v1, 'substr', [v103, v105]
v107 <- LoadString ''
v108 <- LoadInteger '0'
v109 <- LoadNull
v110 <- CallMethod v1, 'substr', [v108, v109]
v111 <- LoadInteger '0'
v112 <- GetProperty v1, 'length'
v113 <- CreateNamedVariable 'String', 'none'
v114 <- CallFunction v113, [v112]
v115 <- CallMethod v1, 'substr', [v111, v114]
v116 <- LoadString 'a'
v117 <- LoadInteger '0'
v118 <- LoadBoolean 'true'
v119 <- CallMethod v1, 'substr', [v117, v118]
v120 <- LoadString 'ASCII'
v121 <- CreateNamedVariable 'x', 'var', v120
BeginForLoopInitializer
    v122 <- LoadInteger '0'
BeginForLoopCondition -> v123
    v124 <- LoadInteger '25'
    v125 <- Compare v123, '<', v124
BeginForLoopAfterthought v125 -> v126
    v127 <- UnaryOperation v126, '++'
BeginForLoopBody -> v128
    v129 <- LoadInteger '16'
    v130 <- LoadInteger '4'
    v131 <- BinaryOperation v128, '>>', v130
    v132 <- CallMethod v131, 'toString', [v129]
    v133 <- LoadInteger '16'
    v134 <- LoadInteger '15'
    v135 <- BinaryOperation v128, '&', v134
    v136 <- CallMethod v135, 'toString', [v133]
    v137 <- BinaryOperation v132, '+', v136
    Update v121, '+', v137
EndForLoop
v138 <- LoadRegExp 'x' ''
v139 <- CallMethod v138, 'exec', [v121]
BeginForLoopInitializer
    v140 <- LoadInteger '5'
BeginForLoopCondition -> v141
    v142 <- LoadInteger '25'
    v143 <- Compare v141, '<', v142
BeginForLoopAfterthought v143 -> v144
    v145 <- UnaryOperation v144, '++'
BeginForLoopBody -> v146
    BeginForLoopInitializer
        v147 <- LoadInteger '0'
    BeginForLoopCondition -> v148
        v149 <- LoadInteger '25'
        v150 <- Compare v148, '<', v149
    BeginForLoopAfterthought v150 -> v151
        v152 <- UnaryOperation v151, '++'
    BeginForLoopBody -> v153
        v154 <- BinaryOperation v146, '+', v153
        v155 <- CallMethod v121, 'substring', [v146, v154]
        v156 <- CreateNamedVariable 'z', 'var', v155
        v157 <- CreateNamedVariable 'Math', 'none'
        v158 <- CallMethod v157, 'random', []
        v159 <- LoadInteger '42'
        v160 <- BinaryOperation v158, '*', v159
        v161 <- CreateNamedVariable 'w', 'var', v160
        v162 <- GetProperty v156, 'length'
        BeginForLoopInitializer
            v163 <- LoadInteger '0'
        BeginForLoopCondition -> v164
            v165 <- Compare v164, '<', v153
        BeginForLoopAfterthought v165 -> v166
            v167 <- UnaryOperation v166, '++'
        BeginForLoopBody -> v168
            v169 <- BinaryOperation v146, '+', v168
            v170 <- CallMethod v121, 'charAt', [v169]
            v171 <- CallMethod v156, 'charAt', [v168]
        EndForLoop
    EndForLoop
EndForLoop
v172 <- LoadString 'UC16 '
Reassign v121, v172
BeginForLoopInitializer
    v173 <- LoadInteger '0'
BeginForLoopCondition -> v174
    v175 <- LoadInteger '25'
    v176 <- Compare v174, '<', v175
BeginForLoopAfterthought v176 -> v177
    v178 <- UnaryOperation v177, '++'
BeginForLoopBody -> v179
    v180 <- LoadInteger '16'
    v181 <- LoadInteger '4'
    v182 <- BinaryOperation v179, '>>', v181
    v183 <- CallMethod v182, 'toString', [v180]
    v184 <- LoadInteger '16'
    v185 <- LoadInteger '15'
    v186 <- BinaryOperation v179, '&', v185
    v187 <- CallMethod v186, 'toString', [v184]
    v188 <- BinaryOperation v183, '+', v187
    Update v121, '+', v188
EndForLoop
v189 <- LoadRegExp 'x' ''
v190 <- CallMethod v189, 'exec', [v121]
BeginForLoopInitializer
    v191 <- LoadInteger '5'
BeginForLoopCondition -> v192
    v193 <- LoadInteger '25'
    v194 <- Compare v192, '<', v193
BeginForLoopAfterthought v194 -> v195
    v196 <- UnaryOperation v195, '++'
BeginForLoopBody -> v197
    BeginForLoopInitializer
        v198 <- LoadInteger '0'
    BeginForLoopCondition -> v199
        v200 <- LoadInteger '25'
        v201 <- Compare v199, '<', v200
    BeginForLoopAfterthought v201 -> v202
        v203 <- UnaryOperation v202, '++'
    BeginForLoopBody -> v204
        v205 <- BinaryOperation v197, '+', v204
        v206 <- CallMethod v121, 'substring', [v197, v205]
        v207 <- CreateNamedVariable 'z', 'var', v206
        v208 <- CreateNamedVariable 'Math', 'none'
        v209 <- CallMethod v208, 'random', []
        v210 <- LoadInteger '42'
        v211 <- BinaryOperation v209, '*', v210
        v212 <- CreateNamedVariable 'w', 'var', v211
        v213 <- GetProperty v207, 'length'
        BeginForLoopInitializer
            v214 <- LoadInteger '0'
        BeginForLoopCondition -> v215
            v216 <- Compare v215, '<', v204
        BeginForLoopAfterthought v216 -> v217
            v218 <- UnaryOperation v217, '++'
        BeginForLoopBody -> v219
            v220 <- BinaryOperation v197, '+', v219
            v221 <- CallMethod v121, 'charAt', [v220]
            v222 <- CallMethod v207, 'charAt', [v219]
        EndForLoop
    EndForLoop
EndForLoop
v223 <- LoadString '0123456789ABCDEF'
v224 <- CreateNamedVariable 'x', 'var', v223
BeginForLoopInitializer
    v225 <- LoadInteger '0'
BeginForLoopCondition -> v226
    v227 <- LoadInteger '8'
    v228 <- Compare v226, '<', v227
BeginForLoopAfterthought v228 -> v229
    v230 <- UnaryOperation v229, '++'
BeginForLoopBody -> v231
    Update v224, '+', v224
EndForLoop
v232 <- GetProperty v224, 'length'
v233 <- CreateNamedVariable 'xl', 'var', v232
v234 <- CreateArray []
v235 <- CreateNamedVariable 'cache', 'var', v234
BeginForLoopInitializer
    v236 <- LoadInteger '0'
BeginForLoopCondition -> v237
    v238 <- LoadInteger '1000'
    v239 <- Compare v237, '<', v238
BeginForLoopAfterthought v239 -> v240
    v241 <- UnaryOperation v240, '++'
BeginForLoopBody -> v242
    v243 <- BinaryOperation v242, '%', v233
    v244 <- CallMethod v224, 'substring', [v243]
    v245 <- CreateNamedVariable 'z', 'var', v244
    v246 <- BinaryOperation v242, '%', v233
    v247 <- BinaryOperation v233, '-', v246
    v248 <- GetProperty v245, 'length'
    v249 <- CallMethod v235, 'push', [v245]
EndForLoop
v250 <- LoadString ' 123456789ABCDEF'
v251 <- CreateNamedVariable 'x', 'var', v250
BeginForLoopInitializer
    v252 <- LoadInteger '0'
BeginForLoopCondition -> v253
    v254 <- LoadInteger '8'
    v255 <- Compare v253, '<', v254
BeginForLoopAfterthought v255 -> v256
    v257 <- UnaryOperation v256, '++'
BeginForLoopBody -> v258
    Update v251, '+', v251
EndForLoop
v259 <- GetProperty v251, 'length'
v260 <- CreateNamedVariable 'xl', 'var', v259
v261 <- CreateArray []
v262 <- CreateNamedVariable 'cache', 'var', v261
BeginForLoopInitializer
    v263 <- LoadInteger '0'
BeginForLoopCondition -> v264
    v265 <- LoadInteger '1000'
    v266 <- Compare v264, '<', v265
BeginForLoopAfterthought v266 -> v267
    v268 <- UnaryOperation v267, '++'
BeginForLoopBody -> v269
    v270 <- BinaryOperation v269, '%', v260
    v271 <- CallMethod v251, 'substring', [v270]
    v272 <- CreateNamedVariable 'z', 'var', v271
    v273 <- BinaryOperation v269, '%', v260
    v274 <- BinaryOperation v260, '-', v273
    v275 <- GetProperty v272, 'length'
    v276 <- CallMethod v262, 'push', [v272]
EndForLoop
v277 <- CreateArray []
v278 <- CreateNamedVariable 'cache', 'var', v277
v279 <- CreateNamedVariable 'last', 'var', v251
v280 <- LoadInteger '0'
v281 <- CreateNamedVariable 'offset', 'var', v280
BeginForLoopInitializer
    v282 <- LoadInteger '0'
BeginForLoopCondition -> v283
    v284 <- LoadInteger '64'
    v285 <- Compare v283, '<', v284
BeginForLoopAfterthought v285 -> v286
    v287 <- UnaryOperation v286, '++'
BeginForLoopBody -> v288
    v289 <- CallMethod v279, 'substring', [v288]
    v290 <- CreateNamedVariable 'z', 'var', v289
    Reassign v279, v290
    v291 <- CallMethod v278, 'push', [v290]
    Update v281, '+', v288
EndForLoop
BeginForLoopInitializer
    v292 <- LoadInteger '63'
BeginForLoopCondition -> v293
    v294 <- LoadInteger '0'
    v295 <- Compare v293, '>=', v294
BeginForLoopAfterthought v295 -> v296
    v297 <- UnaryOperation v296, '--'
BeginForLoopBody -> v298
    v299 <- CallMethod v278, 'pop', []
    v300 <- CreateNamedVariable 'z', 'var', v299
    v301 <- LoadRegExp '\u2028123456789ABCDEF' ''
    v302 <- CallMethod v301, 'test', [v300]
    v303 <- BinaryOperation v260, '-', v281
    v304 <- GetProperty v300, 'length'
    v305 <- LoadInteger '1'
    v306 <- BinaryOperation v298, '+', v305
    v307 <- BinaryOperation v298, '*', v306
    v308 <- LoadInteger '2'
    v309 <- BinaryOperation v307, '/', v308
    v310 <- CallMethod v251, 'charAt', [v309]
    v311 <- LoadInteger '0'
    v312 <- CallMethod v300, 'charAt', [v311]
    Update v281, '-', v298
EndForLoop
v313 <- BeginPlainFunction -> v314, v315, v316, v317
    v318 <- LoadInteger '97'
    v319 <- LoadInteger '11'
    v320 <- BinaryOperation v317, '%', v319
    v321 <- BinaryOperation v318, '+', v320
    v322 <- CallMethod v113, 'fromCharCode', [v321]
    v323 <- LoadInteger '11'
    v324 <- BinaryOperation v317, '%', v323
    v325 <- CallMethod v314, 'charAt', [v324]
    v326 <- LoadInteger '97'
    v327 <- LoadInteger '11'
    v328 <- BinaryOperation v317, '%', v327
    v329 <- BinaryOperation v326, '+', v328
    v330 <- CallMethod v113, 'fromCharCode', [v329]
    v331 <- LoadInteger '11'
    v332 <- BinaryOperation v317, '%', v331
    v333 <- CallMethod v315, 'charAt', [v332]
    v334 <- LoadInteger '98'
    v335 <- LoadInteger '11'
    v336 <- BinaryOperation v317, '%', v335
    v337 <- BinaryOperation v334, '+', v336
    v338 <- CallMethod v113, 'fromCharCode', [v337]
    v339 <- LoadInteger '11'
    v340 <- BinaryOperation v317, '%', v339
    v341 <- CallMethod v316, 'charAt', [v340]
    v342 <- LoadInteger '101'
    v343 <- CallMethod v113, 'fromCharCode', [v342]
    v344 <- LoadInteger '3'
    v345 <- CallMethod v316, 'charAt', [v344]
EndPlainFunction
v346 <- LoadString 'abcdefghijkl12345'
v347 <- CreateNamedVariable 'flat', 'none'
Reassign v347, v346
v348 <- CreateNamedVariable 'flat', 'none'
v349 <- CallMethod v348, 'toUpperCase', []
v350 <- BinaryOperation v348, '+', v349
v351 <- CreateNamedVariable 'cons', 'none'
Reassign v351, v350
v352 <- LoadInteger '1'
v353 <- LoadInteger '1'
v354 <- UnaryOperation '-', v353
v355 <- LoadString 'abcdefghijklmn12345'
v356 <- CallMethod v355, 'slice', [v352, v354]
v357 <- CreateNamedVariable 'slice', 'none'
Reassign v357, v356
BeginForLoopInitializer
    v358 <- LoadInteger '0'
BeginForLoopCondition -> v359
    v360 <- LoadInteger '1000'
    v361 <- Compare v359, '<', v360
BeginForLoopAfterthought v361 -> v362
    v363 <- UnaryOperation v362, '++'
BeginForLoopBody -> v364
    v365 <- CreateNamedVariable 'cons', 'none'
    v366 <- CreateNamedVariable 'slice', 'none'
    v367 <- CallFunction v313, [v348, v365, v366, v364]
EndForLoop
v368 <- LoadString 'abcdefghijkl1‣2345'
Reassign v348, v368
v369 <- CallMethod v348, 'toUpperCase', []
v370 <- BinaryOperation v348, '+', v369
v371 <- CreateNamedVariable 'cons', 'none'
Reassign v371, v370
v372 <- LoadInteger '1'
v373 <- LoadInteger '1'
v374 <- UnaryOperation '-', v373
v375 <- LoadString 'abcdefghijklmn1‣2345'
v376 <- CallMethod v375, 'slice', [v372, v374]
v377 <- CreateNamedVariable 'slice', 'none'
Reassign v377, v376
BeginForLoopInitializer
    v378 <- LoadInteger '0'
BeginForLoopCondition -> v379
    v380 <- LoadInteger '1000'
    v381 <- Compare v379, '<', v380
BeginForLoopAfterthought v381 -> v382
    v383 <- UnaryOperation v382, '++'
BeginForLoopBody -> v384
    v385 <- CreateNamedVariable 'cons', 'none'
    v386 <- CreateNamedVariable 'slice', 'none'
    v387 <- CallFunction v313, [v348, v385, v386, v384]
EndForLoop
v388 <- LoadString 'abcdefghijkl12345'
Reassign v348, v388
v389 <- CallMethod v348, 'toUpperCase', []
v390 <- BinaryOperation v348, '+', v389
v391 <- CreateNamedVariable 'cons', 'none'
Reassign v391, v390
v392 <- CreateNamedVariable 'cons', 'none'
v393 <- LoadRegExp 'x' ''
v394 <- CallMethod v393, 'exec', [v392]
v395 <- LoadInteger '1'
v396 <- LoadInteger '1'
v397 <- UnaryOperation '-', v396
v398 <- LoadString 'abcdefghijklmn12345'
v399 <- CallMethod v398, 'slice', [v395, v397]
v400 <- CreateNamedVariable 'slice', 'none'
Reassign v400, v399
v401 <- LoadString 'cdefg'
v402 <- LoadInteger '2'
v403 <- LoadInteger '5'
v404 <- CallMethod v348, 'substr', [v402, v403]
v405 <- LoadString 'cdefg'
v406 <- LoadInteger '2'
v407 <- LoadInteger '5'
v408 <- CallMethod v392, 'substr', [v406, v407]
v409 <- LoadString 'cdefg'
v410 <- LoadInteger '1'
v411 <- LoadInteger '5'
v412 <- CreateNamedVariable 'slice', 'none'
v413 <- CallMethod v412, 'substr', [v410, v411]
v414 <- LoadString 'abcሴdefghijkl12345'
Reassign v348, v414
v415 <- CallMethod v348, 'toUpperCase', []
v416 <- BinaryOperation v348, '+', v415
Reassign v392, v416
v417 <- LoadRegExp 'x' ''
v418 <- CallMethod v417, 'exec', [v392]
v419 <- LoadInteger '1'
v420 <- LoadInteger '1'
v421 <- UnaryOperation '-', v420
v422 <- LoadString 'abcሴdefghijklmn12345'
v423 <- CallMethod v422, 'slice', [v419, v421]
Reassign v412, v423
v424 <- LoadString 'cሴdef'
v425 <- LoadInteger '2'
v426 <- LoadInteger '5'
v427 <- CallMethod v348, 'substr', [v425, v426]
v428 <- LoadString 'cሴdef'
v429 <- LoadInteger '2'
v430 <- LoadInteger '5'
v431 <- CallMethod v392, 'substr', [v429, v430]
v432 <- LoadString 'cሴdef'
v433 <- LoadInteger '1'
v434 <- LoadInteger '5'
v435 <- CallMethod v412, 'substr', [v433, v434]
v436 <- LoadString 'abcdefghijklmnop'
v437 <- CreateNamedVariable 'ascii', 'var', v436
v438 <- LoadString 'αβγδεζηθικλ'
v439 <- CreateNamedVariable 'utf', 'var', v438
v440 <- LoadString 'klmno'
v441 <- LoadInteger '10'
v442 <- LoadInteger '15'
v443 <- CallMethod v437, 'substring', [v441, v442]
v444 <- LoadInteger '16'
v445 <- CallMethod v437, 'substring', [v444]
v446 <- BinaryOperation v443, '+', v445
v447 <- LoadString 'δη'
v448 <- LoadInteger '3'
v449 <- LoadInteger '4'
v450 <- CallMethod v439, 'substring', [v448, v449]
v451 <- LoadInteger '6'
v452 <- LoadInteger '7'
v453 <- CallMethod v439, 'substring', [v451, v452]
v454 <- BinaryOperation v450, '+', v453
v455 <- LoadString 'klp'
v456 <- LoadInteger '10'
v457 <- LoadInteger '12'
v458 <- CallMethod v437, 'substring', [v456, v457]
v459 <- LoadInteger '15'
v460 <- LoadInteger '16'
v461 <- CallMethod v437, 'substring', [v459, v460]
v462 <- BinaryOperation v458, '+', v461
v463 <- LoadString 'αδε'
v464 <- LoadInteger '0'
v465 <- LoadInteger '1'
v466 <- CallMethod v439, 'substring', [v464, v465]
v467 <- LoadInteger '5'
v468 <- LoadInteger '3'
v469 <- CallMethod v439, 'substring', [v467, v468]
v470 <- BinaryOperation v466, '+', v469
v471 <- LoadString ''
v472 <- LoadInteger '16'
v473 <- CallMethod v437, 'substring', [v472]
v474 <- LoadInteger '16'
v475 <- CallMethod v439, 'substring', [v474]
v476 <- BinaryOperation v473, '+', v475
v477 <- LoadString 'bcdefδεζηθι'
v478 <- LoadInteger '1'
v479 <- LoadInteger '6'
v480 <- CallMethod v437, 'substring', [v478, v479]
v481 <- LoadInteger '3'
v482 <- LoadInteger '9'
v483 <- CallMethod v439, 'substring', [v481, v482]
v484 <- BinaryOperation v480, '+', v483
v485 <- LoadString 'δεζηθιabcdefghijklmnop'
v486 <- LoadInteger '3'
v487 <- LoadInteger '9'
v488 <- CallMethod v439, 'substring', [v486, v487]
v489 <- BinaryOperation v488, '+', v437
v490 <- LoadString 'βγδεδεζη'
v491 <- LoadInteger '5'
v492 <- LoadInteger '1'
v493 <- CallMethod v439, 'substring', [v491, v492]
v494 <- LoadInteger '3'
v495 <- LoadInteger '7'
v496 <- CallMethod v439, 'substring', [v494, v495]
v497 <- BinaryOperation v493, '+', v496
v498 <- LoadString 'internalized dummy'
v499 <- CreateNamedVariable 'a', 'var', v498
v500 <- LoadString '123456789'
v501 <- LoadString 'qwertyuiopasdfghjklzxcvbnm'
v502 <- BinaryOperation v500, '+', v501
Reassign v499, v502
v503 <- LoadString '23456789qwertyuiopasdfghjklzxcvbn'
v504 <- CreateNamedVariable 'b', 'var', v503
v505 <- LoadInteger '1'
v506 <- LoadInteger '1'
v507 <- UnaryOperation '-', v506
v508 <- CallMethod v499, 'slice', [v505, v507]
v509 <- CreateNamedVariable 'isOneByteString', 'none'
v510 <- CallFunction v509, [v499]
v511 <- CallFunction v509, [v499]
v512 <- LoadInteger '1'
v513 <- LoadInteger '1'
v514 <- UnaryOperation '-', v513
v515 <- CallMethod v499, 'slice', [v512, v514]
v516 <- LoadRegExp '3456789qwe' ''
v517 <- CallMethod v516, 'test', [v499]
v518 <- LoadInteger '5'
v519 <- LoadString '678'
v520 <- CallMethod v499, 'indexOf', [v519]
v521 <- LoadString '12345'
v522 <- LoadString '6'
v523 <- CallMethod v499, 'split', [v522]
v524 <- GetElement v523, '0'
v525 <- LoadInteger '1'
v526 <- LoadInteger '1'
v527 <- UnaryOperation '-', v526
v528 <- CallMethod v499, 'slice', [v525, v527]
v529 <- CreateNamedVariable 'c', 'var', v528
v530 <- BeginPlainFunction -> 
    BeginForLoopInitializer
        v531 <- LoadInteger '0'
    BeginForLoopCondition -> v532
        v533 <- LoadInteger '20'
        v534 <- Compare v532, '<', v533
    BeginForLoopAfterthought v534 -> v535
        v536 <- UnaryOperation v535, '++'
    BeginForLoopBody -> v537
        v538 <- CallMethod v504, 'charAt', [v537]
        v539 <- LoadInteger '1'
        v540 <- BinaryOperation v537, '+', v539
        v541 <- CallMethod v499, 'charAt', [v540]
        v542 <- CallMethod v504, 'charAt', [v537]
        v543 <- CallMethod v529, 'charAt', [v537]
        v544 <- LoadInteger '4'
        v545 <- CallMethod v504, 'charAt', [v544]
        v546 <- LoadInteger '4'
        v547 <- CallMethod v529, 'charAt', [v546]
        v548 <- LoadRegExp '3456789qwe' ''
        v549 <- CallMethod v548, 'test', [v529]
        v550 <- LoadInteger '4'
        v551 <- LoadString '678'
        v552 <- CallMethod v529, 'indexOf', [v551]
        v553 <- LoadString '2345'
        v554 <- LoadString '6'
        v555 <- CallMethod v529, 'split', [v554]
        v556 <- GetElement v555, '0'
    EndForLoop
EndPlainFunction
v557 <- CallFunction v530, []
v558 <- CallFunction v530, []
v559 <- LoadString '12345678901234567890'
v560 <- CreateNamedVariable 's1', 'var', v559
v561 <- LoadString 'abcdefghijklmnopqrstuvwxyz'
v562 <- CreateNamedVariable 's2', 'var', v561
v563 <- BinaryOperation v560, '+', v562
v564 <- CreateNamedVariable 'c1', 'var', v563
v565 <- BinaryOperation v560, '+', v564
v566 <- BinaryOperation v565, '+', v562
v567 <- CreateNamedVariable 'c2', 'var', v566
v568 <- LoadString '234567890123456789'
v569 <- LoadInteger '1'
v570 <- LoadInteger '19'
v571 <- CallMethod v564, 'substring', [v569, v570]
v572 <- LoadString 'bcdefghijklmno'
v573 <- LoadInteger '21'
v574 <- LoadInteger '35'
v575 <- CallMethod v564, 'substring', [v573, v574]
v576 <- LoadString '2345678901234567890abcdefghijklmno'
v577 <- LoadInteger '1'
v578 <- LoadInteger '35'
v579 <- CallMethod v564, 'substring', [v577, v578]
v580 <- LoadString '234567890123456789'
v581 <- LoadInteger '1'
v582 <- LoadInteger '19'
v583 <- CallMethod v567, 'substring', [v581, v582]
v584 <- LoadString 'bcdefghijklmno'
v585 <- LoadInteger '41'
v586 <- LoadInteger '55'
v587 <- CallMethod v567, 'substring', [v585, v586]
v588 <- LoadString '2345678901234567890abcdefghijklmno'
v589 <- LoadInteger '21'
v590 <- LoadInteger '55'
v591 <- CallMethod v567, 'substring', [v589, v590]


var s = "abcdefghijklmn";
s.substr();
s.substr(0);
s.substr("0");
s.substr(void 0);
s.substr(null);
s.substr(false);
s.substr(0.9);
function f16() {
    return 0;
}
s.substr({ valueOf: f16 });
function f20() {
    return "0";
}
s.substr({ toString: f20 });
var s1 = s.substring(1);
s.substr(1);
s.substr("1");
s.substr(true);
s.substr(1.1);
function f35() {
    return 1;
}
s.substr({ valueOf: f35 });
function f39() {
    return "1";
}
s.substr({ toString: f39 });
s.substring(s.length - 1);
s.substr(-1);
s.substring(s.length - 1);
s.substr(-1.2);
s.substring(s.length - 1);
s.substr(-1.7);
s.substring(s.length - 2);
s.substr(-2);
s.substring(s.length - 2);
s.substr(-2.3);
s.substring(s.length - 2, s.length - 1);
s.substr(-2, 1);
s.substr(-100);
s.substr(-100, 3);
s.substr(-s.length + 1);
s.substr(0, void 0);
s.substr(0, null);
s.substr(0, String(s.length));
s.substr(0, true);
var x = "ASCII";
for (let i123 = 0; i123 < 25; i123++) {
    x += (i123 >> 4).toString(16) + (i123 & 15).toString(16);
}
/x/.exec(x);
for (let i141 = 5; i141 < 25; i141++) {
    for (let i148 = 0; i148 < 25; i148++) {
        var z = x.substring(i141, i141 + i148);
        var w = Math.random() * 42;
        z.length;
        for (let i164 = 0; i164 < i148; i164++) {
            x.charAt(i141 + i164);
            z.charAt(i164);
        }
    }
}
x = "UC16 ";
for (let i174 = 0; i174 < 25; i174++) {
    x += (i174 >> 4).toString(16) + (i174 & 15).toString(16);
}
/x/.exec(x);
for (let i192 = 5; i192 < 25; i192++) {
    for (let i199 = 0; i199 < 25; i199++) {
        var z = x.substring(i192, i192 + i199);
        var w = Math.random() * 42;
        z.length;
        for (let i215 = 0; i215 < i199; i215++) {
            x.charAt(i192 + i215);
            z.charAt(i215);
        }
    }
}
var x = "0123456789ABCDEF";
for (let i226 = 0; i226 < 8; i226++) {
    x += x;
}
var xl = x.length;
var cache = [];
for (let i237 = 0; i237 < 1000; i237++) {
    var z = x.substring(i237 % xl);
    xl - (i237 % xl);
    z.length;
    cache.push(z);
}
var x = " 123456789ABCDEF";
for (let i253 = 0; i253 < 8; i253++) {
    x += x;
}
var xl = x.length;
var cache = [];
for (let i264 = 0; i264 < 1000; i264++) {
    var z = x.substring(i264 % xl);
    xl - (i264 % xl);
    z.length;
    cache.push(z);
}
var cache = [];
var last = x;
var offset = 0;
for (let i283 = 0; i283 < 64; i283++) {
    var z = last.substring(i283);
    last = z;
    cache.push(z);
    offset += i283;
}
for (let i293 = 63; i293 >= 0; i293--) {
    var z = cache.pop();
    /\u2028123456789ABCDEF/.test(z);
    xl - offset;
    z.length;
    x.charAt((i293 * (i293 + 1)) / 2);
    z.charAt(0);
    offset -= i293;
}
function f(a314, a315, a316, a317) {
    String.fromCharCode(97 + (a317 % 11));
    a314.charAt(a317 % 11);
    String.fromCharCode(97 + (a317 % 11));
    a315.charAt(a317 % 11);
    String.fromCharCode(98 + (a317 % 11));
    a316.charAt(a317 % 11);
    String.fromCharCode(101);
    a316.charAt(3);
}
flat = "abcdefghijkl12345";
cons = flat + flat.toUpperCase();
slice = ("abcdefghijklmn12345").slice(1, -1);
for (let i359 = 0; i359 < 1000; i359++) {
    f(flat, cons, slice, i359);
}
flat = "abcdefghijkl1‣2345";
cons = flat + flat.toUpperCase();
slice = ("abcdefghijklmn1‣2345").slice(1, -1);
for (let i379 = 0; i379 < 1000; i379++) {
    f(flat, cons, slice, i379);
}
flat = "abcdefghijkl12345";
cons = flat + flat.toUpperCase();
/x/.exec(cons);
slice = ("abcdefghijklmn12345").slice(1, -1);
flat.substr(2, 5);
cons.substr(2, 5);
slice.substr(1, 5);
flat = "abcሴdefghijkl12345";
cons = flat + flat.toUpperCase();
/x/.exec(cons);
slice = ("abcሴdefghijklmn12345").slice(1, -1);
flat.substr(2, 5);
cons.substr(2, 5);
slice.substr(1, 5);
var ascii = "abcdefghijklmnop";
var utf = "αβγδεζηθικλ";
ascii.substring(10, 15) + ascii.substring(16);
utf.substring(3, 4) + utf.substring(6, 7);
ascii.substring(10, 12) + ascii.substring(15, 16);
utf.substring(0, 1) + utf.substring(5, 3);
ascii.substring(16) + utf.substring(16);
ascii.substring(1, 6) + utf.substring(3, 9);
utf.substring(3, 9) + ascii;
utf.substring(5, 1) + utf.substring(3, 7);
var a = "internalized dummy";
a = "123456789" + "qwertyuiopasdfghjklzxcvbnm";
var b = "23456789qwertyuiopasdfghjklzxcvbn";
a.slice(1, -1);
isOneByteString(a);
isOneByteString(a);
a.slice(1, -1);
/3456789qwe/.test(a);
a.indexOf("678");
a.split("6")[0];
var c = a.slice(1, -1);
function test_crankshaft() {
    for (let i532 = 0; i532 < 20; i532++) {
        b.charAt(i532);
        a.charAt(i532 + 1);
        b.charAt(i532);
        c.charAt(i532);
        b.charAt(4);
        c.charAt(4);
        /3456789qwe/.test(c);
        c.indexOf("678");
        c.split("6")[0];
    }
}
test_crankshaft();
test_crankshaft();
var s1 = "12345678901234567890";
var s2 = "abcdefghijklmnopqrstuvwxyz";
var c1 = s1 + s2;
var c2 = (s1 + c1) + s2;
c1.substring(1, 19);
c1.substring(21, 35);
c1.substring(1, 35);
c2.substring(1, 19);
c2.substring(41, 55);
c2.substring(21, 55);

FuzzIL program written to corpus/string-slices.fzil
