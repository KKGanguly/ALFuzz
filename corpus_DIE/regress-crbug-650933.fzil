v0 <- LoadInteger '0'
v1 <- LoadInteger '1'
v2 <- LoadInteger '2'
v3 <- LoadInteger '3'
v4 <- LoadInteger '4'
v5 <- LoadInteger '5'
v6 <- LoadInteger '6'
v7 <- LoadInteger '7'
v8 <- LoadInteger '8'
v9 <- CreateArray [v0, v1, v2, v3, v4, v5, v6, v7, v8]
v10 <- CreateNamedVariable 'a', 'var', v9
v11 <- LoadFloat '1e+40'
BeginObjectLiteral
    ObjectLiteralAddProperty `length`, v11
v12 <- EndObjectLiteral
v13 <- CreateNamedVariable 'o', 'var', v12
BeginTry
    v14 <- CreateNamedVariable 'Uint8Array', 'none'
    v15 <- Construct v14, [v13]
BeginCatch -> v16
EndTryCatch
v17 <- CreateNamedVariable 'Float64Array', 'none'
v18 <- Construct v17, [v10]


var a = [0,1,2,3,4,5,6,7,8];
var o = { length: 1e+40 };
try {
    new Uint8Array(o);
} catch(e16) {
}
new Float64Array(a);

FuzzIL program written to corpus/regress-crbug-650933.fzil
