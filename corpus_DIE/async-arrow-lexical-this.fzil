v0 <- BeginPlainFunction -> v1, v2, v3
    v4 <- LoadUndefined
    v5 <- CreateNamedVariable 'actual', 'var', v4
    v6 <- LoadBoolean 'false'
    v7 <- CreateNamedVariable 'hadValue', 'var', v6
    v8 <- LoadBoolean 'false'
    v9 <- CreateNamedVariable 'hadError', 'var', v8
    v10 <- CallFunction v2, []
    v11 <- CreateNamedVariable 'promise', 'var', v10
    v12 <- TypeOf v11
    v13 <- LoadString 'object'
    v14 <- Compare v12, '!==', v13
    v15 <- GetProperty v11, 'then'
    v16 <- TypeOf v15
    v17 <- LoadString 'function'
    v18 <- Compare v16, '!==', v17
    v19 <- BinaryOperation v14, '||', v18
    BeginIf v19
        v20 <- CreateNamedVariable 'MjsUnitAssertionError', 'none'
        v21 <- LoadString 'Expected '
        v22 <- CallMethod v2, 'toString', []
        v23 <- BinaryOperation v21, '+', v22
        v24 <- LoadString ' to return a Promise, but it returned '
        v25 <- BinaryOperation v23, '+', v24
        v26 <- CreateNamedVariable 'PrettyPrint', 'none'
        v27 <- CallFunction v26, [v11]
        v28 <- BinaryOperation v25, '+', v27
        v29 <- Construct v20, [v28]
        ThrowException v29
    EndIf
    v30 <- BeginPlainFunction -> v31
        v32 <- LoadBoolean 'true'
        Reassign v7, v32
        Reassign v5, v31
    EndPlainFunction
    v33 <- BeginPlainFunction -> v34
        v35 <- LoadBoolean 'true'
        Reassign v9, v35
        Reassign v5, v34
    EndPlainFunction
    v36 <- CallMethod v11, 'then', [v30, v33]
    v37 <- BinaryOperation v7, '||', v9
    BeginIf v9
        ThrowException v5
    EndIf
    v38 <- LoadString 'Expected ''
    v39 <- CallMethod v2, 'toString', []
    v40 <- BinaryOperation v38, '+', v39
    v41 <- LoadString '' to produce a value'
    v42 <- BinaryOperation v40, '+', v41
EndPlainFunction
v43 <- LoadString 'LexicalThis'
v44 <- CreateNamedVariable 'Symbol', 'none'
v45 <- GetProperty v44, 'toStringTag'
BeginObjectLiteral
    ObjectLiteralAddComputedProperty v45, v43
    BeginObjectLiteralMethod `run` -> v46, v47
        v48 <- BeginAsyncArrowFunction -> v49
            v50 <- CreateTemplateString ['', '. ', ': ', ''], [v47, v49, v46]
            Return v50
        EndAsyncArrowFunction
        Return v48
    EndObjectLiteralMethod
v51 <- EndObjectLiteral
v52 <- CreateNamedVariable 'O', 'var', v51
v53 <- LoadString '1. PASS: [object LexicalThis]'
v54 <- BeginArrowFunction -> 
    v55 <- LoadString 'PASS'
    v56 <- LoadInteger '1'
    v57 <- CallMethod v52, 'run', [v56]
    v58 <- CallFunction v57, [v55]
    Return v58
EndArrowFunction
v59 <- CallFunction v54, []
v60 <- LoadString 'LexicalThis'
v61 <- GetProperty v44, 'toStringTag'
v62 <- LoadInteger '2'
v63 <- CallMethod v52, 'run', [v62]
BeginObjectLiteral
    ObjectLiteralAddComputedProperty v61, v60
    ObjectLiteralAddProperty `run`, v63
v64 <- EndObjectLiteral
v65 <- CreateNamedVariable 'O2', 'var', v64
v66 <- LoadString '2. PASS: [object LexicalThis]'
v67 <- BeginArrowFunction -> 
    v68 <- LoadString 'PASS'
    v69 <- CallMethod v65, 'run', [v68]
    Return v69
EndArrowFunction
v70 <- CallFunction v67, []


function assertEqualsAsync(a1, a2, a3) {
    var actual;
    var hadValue = false;
    var hadError = false;
    var promise = a2();
    if ((typeof promise !== "object") || (typeof promise.then !== "function")) {
        const v29 = new MjsUnitAssertionError((("Expected " + a2.toString()) + " to return a Promise, but it returned ") + PrettyPrint(promise));
        throw v29;
    }
    function f30(a31) {
        hadValue = true;
        actual = a31;
    }
    function f33(a34) {
        hadError = true;
        actual = a34;
    }
    promise.then(f30, f33);
    hadValue || hadError;
    if (hadError) {
        throw actual;
    }
    ("Expected '" + a2.toString()) + "' to produce a value";
}
const v45 = Symbol.toStringTag;
const v51 = {
    [v45]: "LexicalThis",
    run(a47) {
        const v48 = async (a49) => {
            return `${a47}. ${a49}: ${this}`;
        };
        return v48;
    },
};
var O = v51;
const v54 = () => {
    const t36 = O.run(1);
    return t36("PASS");
};
v54();
const v61 = Symbol.toStringTag;
const v63 = O.run(2);
var O2 = { [v61]: "LexicalThis", run: v63 };
const v67 = () => {
    return O2.run("PASS");
};
v67();

FuzzIL program written to corpus/async-arrow-lexical-this.fzil
