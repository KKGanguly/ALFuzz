v0 <- BeginPlainFunction -> 
    v1 <- LoadString 'foo'
    v2 <- CreateNamedVariable 'slot', 'var', v1
    v3 <- BeginPlainFunction -> v4
        v5 <- Compare v2, '===', v4
        Return v5
    EndPlainFunction
    Return v3
EndPlainFunction
v6 <- BeginPlainFunction -> v7
    v8 <- LoadString 'bar'
    v9 <- CreateNamedVariable 'slot', 'var', v8
    v10 <- BeginPlainFunction -> v11
        v12 <- LoadThis
        v13 <- LoadArguments
        v14 <- CallMethod v7, 'apply', [v12, v13]
        v15 <- LoadString 'bar'
        v16 <- Compare v9, '===', v15
        Return v16
    EndPlainFunction
    Return v10
EndPlainFunction
v17 <- CallFunction v0, []
v18 <- CallFunction v6, [v17]
v19 <- CreateNamedVariable 'y', 'var', v18
BeginForLoopInitializer
    v20 <- LoadInteger '0'
BeginForLoopCondition -> v21
    v22 <- LoadInteger '5'
    v23 <- Compare v21, '<', v22
BeginForLoopAfterthought v23 -> v24
    v25 <- UnaryOperation v24, '++'
BeginForLoopBody -> v26
    v27 <- LoadString 'foo'
    v28 <- CallFunction v19, [v27]
EndForLoop
v29 <- LoadString 'foo'
v30 <- CallFunction v19, [v29]


function X() {
    var slot = "foo";
    function f3(a4) {
        return slot === a4;
    }
    return f3;
}
function Y(a7) {
    var slot = "bar";
    function f10(a11) {
        a7.apply(this, arguments);
        return slot === "bar";
    }
    return f10;
}
var y = Y(X());
for (let i21 = 0; i21 < 5; i21++) {
    y("foo");
}
y("foo");

FuzzIL program written to corpus/regress-1099.fzil
