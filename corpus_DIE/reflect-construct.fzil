v0 <- BeginPlainFunction -> 
    Directive 'use strict'
    v1 <- BeginPlainFunction -> 
    EndPlainFunction
    v2 <- BeginPlainFunction -> 
        v3 <- CreateNamedVariable 'Reflect', 'none'
        v4 <- CallMethod v3, 'construct', [v1]
        Return v4
    EndPlainFunction
    v5 <- CallFunction v2, []
    v6 <- CallFunction v2, []
    v7 <- CallFunction v2, []
EndPlainFunction
v8 <- CallFunction v0, []
v9 <- BeginPlainFunction -> 
    Directive 'use strict'
    v10 <- BeginPlainFunction -> v11
        v12 <- LoadThis
        SetProperty v12, 'x', v11
    EndPlainFunction
    v13 <- BeginPlainFunction -> 
        v14 <- LoadArguments
        v15 <- CreateNamedVariable 'Reflect', 'none'
        v16 <- CallMethod v15, 'construct', [v10, v14]
        Return v16
    EndPlainFunction
    v17 <- CallFunction v13, []
    v18 <- CallFunction v10, []
    v19 <- CallFunction v13, []
    v20 <- CallFunction v10, []
    v21 <- LoadInteger '1'
    v22 <- LoadInteger '1'
    v23 <- CallFunction v13, [v22]
    v24 <- GetProperty v23, 'x'
    v25 <- CallFunction v13, []
    v26 <- CallFunction v10, []
    v27 <- LoadInteger '1'
    v28 <- LoadInteger '1'
    v29 <- CallFunction v13, [v28]
    v30 <- GetProperty v29, 'x'
EndPlainFunction
v31 <- CallFunction v9, []
v32 <- BeginPlainFunction -> 
    Directive 'use strict'
    v33 <- BeginPlainFunction -> v34
        v35 <- LoadThis
        SetProperty v35, 'x', v34
    EndPlainFunction
    v36 <- BeginPlainFunction -> 
        v37 <- LoadArguments
        v38 <- CreateNamedVariable 'Reflect', 'none'
        v39 <- CallMethod v38, 'construct', [v33, v37, v33, v33]
        Return v39
    EndPlainFunction
    v40 <- CallFunction v36, []
    v41 <- CallFunction v33, []
    v42 <- CallFunction v36, []
    v43 <- CallFunction v33, []
    v44 <- LoadInteger '1'
    v45 <- LoadInteger '1'
    v46 <- CallFunction v36, [v45]
    v47 <- GetProperty v46, 'x'
    v48 <- CallFunction v36, []
    v49 <- CallFunction v33, []
    v50 <- LoadInteger '1'
    v51 <- LoadInteger '1'
    v52 <- CallFunction v36, [v51]
    v53 <- GetProperty v52, 'x'
EndPlainFunction
v54 <- CallFunction v32, []
v55 <- BeginPlainFunction -> 
    Directive 'use strict'
    v56 <- BeginPlainFunction -> v57
        BeginTry
            v58 <- LoadArguments
            v59 <- CreateNamedVariable 'Reflect', 'none'
            v60 <- CallMethod v59, 'construct', [v57, v58, v57]
            Return v60
        BeginCatch -> v61
            v62 <- LoadInteger '1'
            Return v62
        EndTryCatch
    EndPlainFunction
    v63 <- LoadInteger '1'
    v64 <- CallFunction v56, []
    v65 <- LoadInteger '1'
    v66 <- CallFunction v56, []
    v67 <- LoadInteger '1'
    v68 <- CallFunction v56, []
EndPlainFunction
v69 <- CallFunction v55, []
v70 <- BeginPlainFunction -> 
    Directive 'use strict'
    v71 <- BeginPlainFunction -> v72
        BeginTry
            v73 <- CreateNamedVariable 'Reflect', 'none'
            v74 <- CallMethod v73, 'construct', [v72, v72, v72]
            Return v74
        BeginCatch -> v75
            v76 <- LoadInteger '1'
            Return v76
        EndTryCatch
    EndPlainFunction
    v77 <- LoadInteger '1'
    v78 <- CallFunction v71, []
    v79 <- LoadInteger '1'
    v80 <- CallFunction v71, []
    v81 <- LoadInteger '1'
    v82 <- CallFunction v71, []
EndPlainFunction
v83 <- CallFunction v70, []
v84 <- BeginPlainFunction -> 
    v85 <- LoadInteger '0'
    v86 <- CreateNamedVariable 'dummy_length_counter', 'var', v85
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v87
            v88 <- UnaryOperation '++', v86
            v89 <- LoadInteger '0'
            Return v89
        EndObjectLiteralGetter
    v90 <- EndObjectLiteral
    v91 <- CreateNamedVariable 'dummy', 'var', v90
    v92 <- BeginPlainFunction -> 
        v93 <- LoadUndefined
        v94 <- LoadUndefined
        v95 <- CreateNamedVariable 'Reflect', 'none'
        v96 <- CallMethod v95, 'construct', [v93, v91, v94]
        Return v96
    EndPlainFunction
    v97 <- CallFunction v92, []
    v98 <- CreateNamedVariable 'TypeError', 'none'
    v99 <- CallFunction v92, []
    v100 <- CallFunction v92, []
    v101 <- LoadInteger '0'
EndPlainFunction
v102 <- CallFunction v84, []
v103 <- BeginPlainFunction -> 
    v104 <- LoadInteger '0'
    v105 <- CreateNamedVariable 'dummy_length_counter', 'var', v104
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v106
            v107 <- UnaryOperation '++', v105
            v108 <- LoadInteger '0'
            Return v108
        EndObjectLiteralGetter
    v109 <- EndObjectLiteral
    v110 <- CreateNamedVariable 'dummy', 'var', v109
    v111 <- BeginPlainFunction -> 
        v112 <- LoadUndefined
        v113 <- CreateNamedVariable 'Reflect', 'none'
        v114 <- CallMethod v113, 'construct', [v112, v110]
        Return v114
    EndPlainFunction
    v115 <- CallFunction v111, []
    v116 <- CreateNamedVariable 'TypeError', 'none'
    v117 <- CallFunction v111, []
    v118 <- CallFunction v111, []
    v119 <- LoadInteger '0'
EndPlainFunction
v120 <- CallFunction v103, []
v121 <- BeginPlainFunction -> 
    v122 <- LoadInteger '0'
    v123 <- CreateNamedVariable 'dummy_length_counter', 'var', v122
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v124
            v125 <- UnaryOperation '++', v123
            v126 <- LoadInteger '0'
            Return v126
        EndObjectLiteralGetter
    v127 <- EndObjectLiteral
    v128 <- CreateNamedVariable 'dummy', 'var', v127
    v129 <- BeginPlainFunction -> 
        v130 <- LoadNull
        v131 <- LoadNull
        v132 <- CreateNamedVariable 'Reflect', 'none'
        v133 <- CallMethod v132, 'construct', [v130, v128, v131]
        Return v133
    EndPlainFunction
    v134 <- CallFunction v129, []
    v135 <- CreateNamedVariable 'TypeError', 'none'
    v136 <- CallFunction v129, []
    v137 <- CallFunction v129, []
    v138 <- LoadInteger '0'
EndPlainFunction
v139 <- CallFunction v121, []
v140 <- BeginPlainFunction -> 
    v141 <- LoadInteger '0'
    v142 <- CreateNamedVariable 'dummy_length_counter', 'var', v141
    BeginObjectLiteral
        BeginObjectLiteralGetter `length` -> v143
            v144 <- UnaryOperation '++', v142
            v145 <- LoadInteger '0'
            Return v145
        EndObjectLiteralGetter
    v146 <- EndObjectLiteral
    v147 <- CreateNamedVariable 'dummy', 'var', v146
    v148 <- BeginPlainFunction -> 
        v149 <- LoadNull
        v150 <- CreateNamedVariable 'Reflect', 'none'
        v151 <- CallMethod v150, 'construct', [v149, v147]
        Return v151
    EndPlainFunction
    v152 <- CallFunction v148, []
    v153 <- CreateNamedVariable 'TypeError', 'none'
    v154 <- CallFunction v148, []
    v155 <- CallFunction v148, []
    v156 <- LoadInteger '0'
EndPlainFunction
v157 <- CallFunction v140, []


function f0() {
    'use strict';
    function A() {
    }
    function foo() {
        return Reflect.construct(A);
    }
    foo();
    foo();
    foo();
}
f0();
function f9() {
    'use strict';
    function A(a11) {
        this.x = a11;
    }
    function foo() {
        return Reflect.construct(A, arguments);
    }
    foo();
    A();
    foo();
    A();
    foo(1).x;
    foo();
    A();
    foo(1).x;
}
f9();
function f32() {
    'use strict';
    function A(a34) {
        this.x = a34;
    }
    function foo() {
        return Reflect.construct(A, arguments, A, A);
    }
    foo();
    A();
    foo();
    A();
    foo(1).x;
    foo();
    A();
    foo(1).x;
}
f32();
function f55() {
    'use strict';
    function foo(a57) {
        try {
            return Reflect.construct(a57, arguments, a57);
        } catch(e61) {
            return 1;
        }
    }
    foo();
    foo();
    foo();
}
f55();
function f70() {
    'use strict';
    function foo(a72) {
        try {
            return Reflect.construct(a72, a72, a72);
        } catch(e75) {
            return 1;
        }
    }
    foo();
    foo();
    foo();
}
f70();
function f84() {
    var dummy_length_counter = 0;
    const v90 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v90;
    function foo() {
        return Reflect.construct(undefined, dummy, undefined);
    }
    foo();
    foo();
    foo();
}
f84();
function f103() {
    var dummy_length_counter = 0;
    const v109 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v109;
    function foo() {
        return Reflect.construct(undefined, dummy);
    }
    foo();
    foo();
    foo();
}
f103();
function f121() {
    var dummy_length_counter = 0;
    const v127 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v127;
    function foo() {
        return Reflect.construct(null, dummy, null);
    }
    foo();
    foo();
    foo();
}
f121();
function f140() {
    var dummy_length_counter = 0;
    const v146 = {
        get length() {
            ++dummy_length_counter;
            return 0;
        },
    };
    var dummy = v146;
    function foo() {
        return Reflect.construct(null, dummy);
    }
    foo();
    foo();
    foo();
}
f140();

FuzzIL program written to corpus/reflect-construct.fzil
