v0 <- BeginPlainFunction -> v1
    v2 <- CreateNamedVariable 'Proxy', 'none'
    v3 <- BeginPlainFunction -> 
    EndPlainFunction
    v4 <- Construct v2, [v3, v1]
    Return v4
EndPlainFunction
v5 <- BeginPlainFunction -> 
    v6 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `x`, v6
    v7 <- EndObjectLiteral
    v8 <- CreateNamedVariable 'prototype', 'var', v7
    v9 <- CreateArray []
    v10 <- CreateNamedVariable 'log', 'var', v9
    BeginObjectLiteral
        BeginObjectLiteralMethod `get` -> v11, v12
            v13 <- LoadString 'get trap'
            v14 <- CallMethod v10, 'push', [v13]
            Return v8
        EndObjectLiteralMethod
    v15 <- EndObjectLiteral
    v16 <- CallFunction v0, [v15]
    v17 <- CreateNamedVariable 'proxy', 'var', v16
    v18 <- CreateNamedVariable 'Number', 'none'
    v19 <- LoadInteger '100'
    v20 <- CreateArray [v19]
    v21 <- CreateNamedVariable 'Reflect', 'none'
    v22 <- CallMethod v21, 'construct', [v18, v20, v17]
    v23 <- CreateNamedVariable 'o', 'var', v22
    v24 <- LoadString 'get trap'
    v25 <- CreateArray [v24]
    v26 <- CreateNamedVariable 'Object', 'none'
    v27 <- CallMethod v26, 'getPrototypeOf', [v23]
    v28 <- Compare v27, '===', v8
    v29 <- LoadInteger '100'
    v30 <- GetProperty v18, 'prototype'
    v31 <- GetProperty v30, 'valueOf'
    v32 <- CallMethod v31, 'call', [v23]
EndPlainFunction
v33 <- CallFunction v5, []
v34 <- BeginPlainFunction -> 
    v35 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `x`, v35
    v36 <- EndObjectLiteral
    v37 <- CreateNamedVariable 'prototype', 'var', v36
    v38 <- CreateArray []
    v39 <- CreateNamedVariable 'log', 'var', v38
    BeginObjectLiteral
        BeginObjectLiteralMethod `get` -> v40, v41
            v42 <- LoadString 'get trap'
            v43 <- CallMethod v39, 'push', [v42]
            v44 <- LoadInteger '10'
            Return v44
        EndObjectLiteralMethod
    v45 <- EndObjectLiteral
    v46 <- CallFunction v0, [v45]
    v47 <- CreateNamedVariable 'proxy', 'var', v46
    v48 <- CreateNamedVariable 'Number', 'none'
    v49 <- LoadInteger '100'
    v50 <- CreateArray [v49]
    v51 <- CreateNamedVariable 'Reflect', 'none'
    v52 <- CallMethod v51, 'construct', [v48, v50, v47]
    v53 <- CreateNamedVariable 'o', 'var', v52
    v54 <- LoadString 'get trap'
    v55 <- CreateArray [v54]
    v56 <- CreateNamedVariable 'Object', 'none'
    v57 <- CallMethod v56, 'getPrototypeOf', [v53]
    v58 <- GetProperty v48, 'prototype'
    v59 <- Compare v57, '===', v58
    v60 <- LoadInteger '100'
    v61 <- GetProperty v48, 'prototype'
    v62 <- GetProperty v61, 'valueOf'
    v63 <- CallMethod v62, 'call', [v53]
EndPlainFunction
v64 <- CallFunction v34, []
v65 <- BeginPlainFunction -> 
    v66 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `x`, v66
    v67 <- EndObjectLiteral
    v68 <- CreateNamedVariable 'prototype', 'var', v67
    v69 <- CreateArray []
    v70 <- CreateNamedVariable 'log', 'var', v69
    BeginObjectLiteral
        BeginObjectLiteralMethod `get` -> v71, v72
            v73 <- LoadString 'get trap'
            v74 <- CallMethod v70, 'push', [v73]
            Return v68
        EndObjectLiteralMethod
    v75 <- EndObjectLiteral
    v76 <- CallFunction v0, [v75]
    v77 <- CreateNamedVariable 'proxy', 'var', v76
    v78 <- CreateNamedVariable 'Function', 'none'
    v79 <- LoadString 'return 1000'
    v80 <- CreateArray [v79]
    v81 <- CreateNamedVariable 'Reflect', 'none'
    v82 <- CallMethod v81, 'construct', [v78, v80, v77]
    v83 <- CreateNamedVariable 'o', 'var', v82
    v84 <- LoadString 'get trap'
    v85 <- CreateArray [v84]
    v86 <- CreateNamedVariable 'Object', 'none'
    v87 <- CallMethod v86, 'getPrototypeOf', [v83]
    v88 <- Compare v87, '===', v68
    v89 <- LoadInteger '1000'
    v90 <- CallFunction v83, []
EndPlainFunction
v91 <- CallFunction v65, []
v92 <- BeginPlainFunction -> 
    v93 <- LoadInteger '1'
    BeginObjectLiteral
        ObjectLiteralAddProperty `x`, v93
    v94 <- EndObjectLiteral
    v95 <- CreateNamedVariable 'prototype', 'var', v94
    v96 <- CreateArray []
    v97 <- CreateNamedVariable 'log', 'var', v96
    BeginObjectLiteral
        BeginObjectLiteralMethod `get` -> v98, v99
            v100 <- LoadString 'get trap'
            v101 <- CallMethod v97, 'push', [v100]
            Return v95
        EndObjectLiteralMethod
    v102 <- EndObjectLiteral
    v103 <- CallFunction v0, [v102]
    v104 <- CreateNamedVariable 'proxy', 'var', v103
    v105 <- CreateNamedVariable 'Array', 'none'
    v106 <- LoadInteger '1'
    v107 <- LoadInteger '2'
    v108 <- LoadInteger '3'
    v109 <- CreateArray [v106, v107, v108]
    v110 <- CreateNamedVariable 'Reflect', 'none'
    v111 <- CallMethod v110, 'construct', [v105, v109, v104]
    v112 <- CreateNamedVariable 'o', 'var', v111
    v113 <- LoadString 'get trap'
    v114 <- CreateArray [v113]
    v115 <- CreateNamedVariable 'Object', 'none'
    v116 <- CallMethod v115, 'getPrototypeOf', [v112]
    v117 <- Compare v116, '===', v95
    v118 <- LoadInteger '1'
    v119 <- LoadInteger '2'
    v120 <- LoadInteger '3'
    v121 <- CreateArray [v118, v119, v120]
EndPlainFunction
v122 <- CallFunction v92, []


function CreateConstructableProxy(a1) {
    function f3() {
    }
    const v4 = new Proxy(f3, a1);
    return v4;
}
function f5() {
    var prototype = { x: 1 };
    var log = [];
    const v15 = {
        get(a12) {
            log.push("get trap");
            return prototype;
        },
    };
    var proxy = CreateConstructableProxy(v15);
    var o = Reflect.construct(Number, [100], proxy);
    ["get trap"];
    Object.getPrototypeOf(o) === prototype;
    Number.prototype.valueOf.call(o);
}
f5();
function f34() {
    var prototype = { x: 1 };
    var log = [];
    const v45 = {
        get(a41) {
            log.push("get trap");
            return 10;
        },
    };
    var proxy = CreateConstructableProxy(v45);
    var o = Reflect.construct(Number, [100], proxy);
    ["get trap"];
    Object.getPrototypeOf(o) === Number.prototype;
    Number.prototype.valueOf.call(o);
}
f34();
function f65() {
    var prototype = { x: 1 };
    var log = [];
    const v75 = {
        get(a72) {
            log.push("get trap");
            return prototype;
        },
    };
    var proxy = CreateConstructableProxy(v75);
    var o = Reflect.construct(Function, ["return 1000"], proxy);
    ["get trap"];
    Object.getPrototypeOf(o) === prototype;
    o();
}
f65();
function f92() {
    var prototype = { x: 1 };
    var log = [];
    const v102 = {
        get(a99) {
            log.push("get trap");
            return prototype;
        },
    };
    var proxy = CreateConstructableProxy(v102);
    var o = Reflect.construct(Array, [1,2,3], proxy);
    ["get trap"];
    Object.getPrototypeOf(o) === prototype;
    [1,2,3];
}
f92();

FuzzIL program written to corpus/classes-proxy.fzil
