v0 <- BeginPlainFunction -> 
    v1 <- LoadString 'a'
    v2 <- CreateNamedVariable 'Symbol', 'none'
    v3 <- CallFunction v2, [v1]
    v4 <- CreateNamedVariable 'a', 'const', v3
    v5 <- LoadString 'b'
    v6 <- CallFunction v2, [v5]
    v7 <- CreateNamedVariable 'b', 'const', v6
    v8 <- BeginPlainFunction -> 
        v9 <- Compare v4, '===', v7
        Return v9
    EndPlainFunction
    v10 <- CallFunction v8, []
    v11 <- CallFunction v8, []
    v12 <- CallFunction v8, []
EndPlainFunction
v13 <- CallFunction v0, []
v14 <- BeginPlainFunction -> 
    v15 <- LoadString 'a'
    v16 <- CreateNamedVariable 'Symbol', 'none'
    v17 <- CallFunction v16, [v15]
    v18 <- CreateNamedVariable 'a', 'const', v17
    v19 <- LoadString 'b'
    v20 <- CallFunction v16, [v19]
    v21 <- CreateNamedVariable 'b', 'const', v20
    v22 <- BeginPlainFunction -> v23
        v24 <- Compare v23, '===', v21
        Return v24
    EndPlainFunction
    v25 <- CallFunction v22, [v21]
    v26 <- CallFunction v22, [v18]
    v27 <- CallFunction v22, [v21]
    v28 <- CallFunction v22, [v18]
    v29 <- CallFunction v22, [v21]
    v30 <- CallFunction v22, [v18]
EndPlainFunction
v31 <- CallFunction v14, []
v32 <- BeginPlainFunction -> 
    v33 <- LoadString 'a'
    v34 <- CreateNamedVariable 'Symbol', 'none'
    v35 <- CallFunction v34, [v33]
    v36 <- CreateNamedVariable 'a', 'const', v35
    v37 <- LoadString 'b'
    v38 <- CallFunction v34, [v37]
    v39 <- CreateNamedVariable 'b', 'const', v38
    v40 <- BeginPlainFunction -> v41, v42
        v43 <- Compare v41, '===', v42
        Return v43
    EndPlainFunction
    v44 <- CallFunction v40, [v39, v39]
    v45 <- CallFunction v40, [v36, v39]
    v46 <- CallFunction v40, [v36, v36]
    v47 <- CallFunction v40, [v39, v36]
    v48 <- CallFunction v40, [v36, v36]
    v49 <- CallFunction v40, [v39, v36]
EndPlainFunction
v50 <- CallFunction v32, []


function f0() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo() {
        return a === b;
    }
    foo();
    foo();
    foo();
}
f0();
function f14() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo(a23) {
        return a23 === b;
    }
    foo(b);
    foo(a);
    foo(b);
    foo(a);
    foo(b);
    foo(a);
}
f14();
function f32() {
    const a = Symbol("a");
    const b = Symbol("b");
    function foo(a41, a42) {
        return a41 === a42;
    }
    foo(b, b);
    foo(a, b);
    foo(a, a);
    foo(b, a);
    foo(a, a);
    foo(b, a);
}
f32();

FuzzIL program written to corpus/strict-equal-symbol.fzil
